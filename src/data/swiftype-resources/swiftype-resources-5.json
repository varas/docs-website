{
  "/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation": [
    {
      "sections": [
        "Python custom instrumentation via config file",
        "Listing functions in the configuration file",
        "Using dumbdbm",
        "Restrictions on wrapping extension APIs",
        "Overriding the reported function name",
        "Instrument with the API"
      ],
      "title": "Python custom instrumentation via config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "24ff7215889cbc9dbae8ffe435aa17fcd125b315",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file/",
      "published_at": "2021-07-02T11:01:58Z",
      "updated_at": "2021-03-11T06:51:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can extend the Python agent's monitoring to trace time spent in additional functions or methods of classes by modifying your configuration file. This form of custom instrumentation is simpler to implement than API calls, and does not require you to modify your code. However, for more complex needs, you may need to implement Python instrumentation by API. Listing functions in the configuration file To extend instrumentation to designated functions and class methods, add them to the transaction_tracer.function_trace setting within the newrelic section of the agent configuration file. The identifier for a function should have the form module:function and that of a class method module:class.function. Using dumbdbm In this example, you use the Python dumbdbm module and want to instrument the time it took to open a database, and then to write that database back to a file. In this case you would use: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy To list more than one item, use either of these methods: One line: Separate each item with a space. Multiple lines: Follow the ini file convention to indent the subsequent lines. When data is reported for the instrumented function, the metric will have a name in the form Function/module:function or Function/module:class.function. In the performance breakdown for a transaction, the category will show as Function and the segment will be module:function or module:class.function. For slow transaction traces, only the segment name appears. Note that where a function is actually returning a generator, only the time spent in returning the generator will be recorded and not the consumption of the values from the generator. Restrictions on wrapping extension APIs When wrapping functions by listing them in the agent configuration file, you cannot designate class methods this way when the method is a member of a class which is implemented in C code by a C extension module. This is because it is not possible to modify the method table of a type implemented using the Python C API. Overriding the reported function name When using the transaction_tracer.function_trace setting in the agent configuration file, the name of the function will be used in the metric name, with it being classified as a Function. If it is necessary to override what function name may be used in the metric name or classify it differently, then an alternate means of defining the function trace in the configuration file can be used. The equivalent for: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy would be to create two new configuration sections in the agent configuration file, one for each function to be traced: [function-trace:dumbdbm-1] enabled = true function = dumbdbm:open name = dumbdbm:open group = Function [function-trace:dumbdbm-2] enabled = true function = dumbdbm:_Database._commit name = dumbdbm:_Database._commit group = Function Copy The ini file section name should start with function-trace:. The name component that follows that prefix can be anything but should be unique across all function trace sections in the configuration file. The group and name settings can be overridden as necessary to arrive at the desired metric name. The enabled setting defaults to false and needs to be set to true to enable the function trace. Instrument with the API For simple custom instrumentation purposes, the config file method works well. For more precise and customized instrumentation and agent behavior adjustments, you will want to use the Python agent API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.168076,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and needs to be set to true to enable the function trace. <em>Instrument</em> with the API For simple <em>custom</em> <em>instrumentation</em> purposes, the config file method works well. For more precise and customized <em>instrumentation</em> and <em>agent</em> behavior adjustments, you will want to use the <em>Python</em> <em>agent</em> API."
      },
      "id": "60440ff1196a67b065960f6b"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.58099,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> API allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> API to: Manually <em>instrument</em> an unsupported framework or third-party system. Add <em>instrumentation</em> to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> API calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "High security mode",
        "Requirements",
        "Account level",
        "Enable high security mode (version 2)",
        "Caution",
        "Results of enabling high security mode (version 2)",
        "Results of enabling high security mode v1 (deprecated)",
        "Migrate from version 1 to version 2"
      ],
      "title": "High security mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Manage APM agents",
        "Configuration"
      ],
      "external_id": "128d0e140cf1d5cf849640c070f1f9b0b2beb84e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/manage-apm-agents/configuration/high-security-mode/",
      "published_at": "2021-07-01T17:19:02Z",
      "updated_at": "2021-07-01T17:19:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's default APM agent settings provide a high level of security. However, you may need to guarantee that even if the default APM agent settings are overridden to be more permissive, no sensitive data will ever be sent to New Relic. If this is the case, then you will want to turn on APM's high security mode (also known as enterprise security mode). For more information about our security measures, see our security and privacy documentation, or visit the New Relic security website. Requirements Customers on our New Relic One pricing plan require Enterprise edition. Customers on our original pricing plan have access depending on their subscription level. Account level If you choose to turn on high security, you must enable high security for all applications reporting to the account. High security must be set on each individual account. For organizations that have a parent/child account structure, child accounts don't automatically inherit the high security setting when enabled on the parent account. Currently there are two versions of high security mode. Version 1 is deprecated and is only available if you already have it. If you are enabling high security mode for the first time, the only option is version 2 (v2). Agent Version 2 support C SDK n/a Go All versions Java 3.7 or higher (enabled by default) .NET 3.3 or higher Node.js 1.7.0 or higher PHP 4.9 or higher Python 2.22.0.0 or higher Ruby 3.9.1 or higher Enable high security mode (version 2) To enable high security, you must update both the local configuration on your server and the remote configuration in the UI. Caution Once you enable high security for an account, high security cannot be turned off without assistance from New Relic Support. Setting location Description Set in UI To set high security in the UI: Go to one.newrelic.com, click the account dropdown and select Account settings. On that page, select High security mode. If you are on our original pricing plan, only the account owner can view this option. If the agent is configured for high security via the UI but not locally, then the agent connections will be rejected, and the agent will shut down. However, this won't shut down your application. Local, via agent Enable high security mode in your agent configuration file. High security mode is disabled by default, and the exact procedure to enable it varies by agent: C SDK: n/a Go Java .NET Node.js PHP Python Ruby If the agent is configured for high security locally but not via the UI, then the agent connections will be rejected, and the agent will shut down. This will not shut down your application. Results of enabling high security mode (version 2) Once enabled, high security mode (v2) ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires a secure (HTTPS) connection. Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure all data in transit per the latest industry standards. Prevents HTTP param capture High security mode does not allow HTTP params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send HTTP params locally or through server-side configuration, high security mode will override the configuration to never capture HTTP params. Prevents message queue param capture High security mode does not allow message queue params, which may contain sensitive customer data, to be sent to the New Relic collector. If the agent is configured to send message queue params locally or through server-side configuration, then high security mode will override the configuration to never capture message queue params. Prevents raw query statement capture High security mode does not allow raw database query statements, which may contain sensitive customer data, to be captured. If the agent is configured to capture raw queries locally or through server-side configuration, then high security mode will override the configuration to never capture raw queries. Prevents user attribute capture High security mode does not allow attributes set using each agent's API to be captured, as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.addCustomParameter(String key, String value) Copy NewRelic.addCustomParameter(String key, Number value) Copy NewRelic.setUserName(String name) Copy NewRelic.setAccountName(String name) Copy NewRelic.setProductName(String name) Copy Prevents noticeError attribute capture High security mode does not allow attributes set using each agent's noticeError API call to be captured as these may contain sensitive customer data. For example, in the Java agent, attributes passed in through the following NewRelic agent API calls will be blocked: NewRelic.noticeError(String message, Map<String, String> params) Copy NewRelic.noticeError(Throwable throwable, Map<String, String> params) Copy Prevents custom events High security mode does not allow custom events to be created using the agent API, as these may contain sensitive customer data. For example, in the .NET agent, the API call RecordCustomEvent will be blocked. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Results of enabling high security mode v1 (deprecated) High security mode version 1 is deprecated and only available if you enabled it prior to version 2 being available. High security mode version 1 ensures the following for your account: Feature Comments Requires agents to use a secure connection (HTTPS) High security mode requires an encrypted connection (HTTPS). Non-secure connection attempts will be rejected. The latest version of all New Relic agents support HTTPS. If the configuration is not set appropriately, the agent will override the property to ensure that all data in transit is encrypted as per the latest industry standards. Prevents HTTP param capture Agents configured to capture HTTP params, which may contain sensitive customer data, are not allowed to connect to New Relic. If the local configuration is set to capture request parameters, then New Relic's collector will reject the connection, and the agent will shut down. Prevents raw query statement capture Agents configured to capture raw database query statements, which may contain sensitive customer data, are not allowed to connect to New Relic. If the agent is configured to capture raw queries locally or through server-side configuration, New Relic's collector will reject the connection and the agent will shut down. Prevents deploying Custom Instrumentation via CIE High security mode does not allow deploying custom instrumentation when using the Custom Instrumentation Editor. If you have high security mode enabled, you must export the instrumentation and manually import it to your app server. Migrate from version 1 to version 2 These are the main differences between the two versions of high security: In order to make high security even more secure, high security must be enabled in the New Relic user interface and in the local New Relic configuration file. High security v1 only required high security to be set in the New Relic UI. User attributes, noticeError attributes, and message queue parameters are turned off with high security in version 2, but not in version 1. To update from v1 to v2, add high_security: true to your local agent configuration file.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.20111,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Agents</em>",
        "body": " Relic&#x27;s collector will reject the connection and the <em>agent</em> will shut down. Prevents deploying <em>Custom</em> <em>Instrumentation</em> via CIE High security mode does not allow deploying <em>custom</em> <em>instrumentation</em> when using the <em>Custom</em> <em>Instrumentation</em> Editor. If you have high security mode enabled, you must export"
      },
      "id": "6043c83be7b9d290e1579a04"
    }
  ],
  "/docs/agents/python-agent/getting-started/apm-agent-security-python": [
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-07-01T21:42:46Z",
      "updated_at": "2021-07-01T21:42:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 to latest Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to latest HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon DynamoDB 1.11.106 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the Browser JavaScript agent when you enable auto-instrumentation. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.72831,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, <em>get</em> support at support.newrelic.com. Hosting services You can"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-07-02T10:44:19Z",
      "updated_at": "2021-03-11T04:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8 Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.1002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November-December 2019 End of support for <em>Python</em> releases reaching EOL The following are proposed time"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.88878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em> a high-level summary of your app with Summary page. Enable"
      },
      "id": "6044108be7b9d29b61579a05"
    }
  ],
  "/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent": [
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.64584,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The <em>Python</em> <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-07-01T21:42:46Z",
      "updated_at": "2021-07-01T21:42:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 to latest Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to latest HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon DynamoDB 1.11.106 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the Browser JavaScript agent when you enable auto-instrumentation. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.72825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, <em>get</em> support at support.newrelic.com. Hosting services You can"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.88878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " performance After you install the <em>Python</em> <em>agent</em>, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app&#x27;s Apdex (user satisfaction). <em>Get</em> a high-level summary of your app with Summary page. Enable"
      },
      "id": "6044108be7b9d29b61579a05"
    }
  ],
  "/docs/agents/python-agent/getting-started/instrumented-python-packages": [
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.64584,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The <em>Python</em> <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-07-01T21:42:46Z",
      "updated_at": "2021-07-01T21:42:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 to latest Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to latest HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon DynamoDB 1.11.106 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the Browser JavaScript agent when you enable auto-instrumentation. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.72825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, <em>get</em> support at support.newrelic.com. Hosting services You can"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-07-02T10:44:19Z",
      "updated_at": "2021-03-11T04:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8 Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.1002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November-December 2019 End of support for <em>Python</em> releases reaching EOL The following are proposed time"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/python-agent/getting-started/introduction-new-relic-python": [
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.645836,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "The <em>Python</em> <em>agent</em> default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security"
      },
      "id": "6044103f64441fbcef378ef7"
    },
    {
      "sections": [
        "Compatibility and requirements for the Java agent",
        "Requirements to install the agent",
        "JVM",
        "Tip",
        "Security requirements",
        "Use of other monitoring software",
        "Built-in instrumentation",
        "App/Web servers",
        "Frameworks and libraries",
        "HTTP and messaging",
        "Datastores",
        "Instance-level database information",
        "Hosting services",
        "Asynchronous instrumentation",
        "Other instrumented features",
        "Connect the agent to other New Relic products"
      ],
      "title": "Compatibility and requirements for the Java agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Getting started"
      ],
      "external_id": "4f74ff9a5d2402145001db0dd2c07e95166e2403",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/getting-started/compatibility-requirements-java-agent/",
      "published_at": "2021-07-01T21:42:46Z",
      "updated_at": "2021-07-01T21:42:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Java agent includes built-in instrumentation of the most popular parts of the Java ecosystem, including app servers, frameworks, databases, and message queuing systems. For frameworks and libraries that are not instrumented out of the box, you can extend the agent with Java custom instrumentation. Requirements to install the agent Before you install the Java agent, ensure your system meets these requirements: JVM Tip The Java agent is compatible with any JVM-based language, including: Java, Scala, Kotlin, and Clojure. For instrumentation support for language-specific features, see the Automatically instrumented frameworks and libraries section below. Java version Compatible agent versions Java 5 Agent v1.3.0 to v2.21.7 Java 6 Agent v3.0.0 to v4.3.0 Java 7 Agent v3.0.0 to v6.5.0 Java 8 Agent v3.10.0 to current Java 9 Agent v3.43.0 to current Java 10 Agent v4.4.0 to current Java 11 Agent v4.7.0 to current Java 12 Agent v4.12.0 to current Java 13 Agent v5.7.0 to current Java 14 Agent v5.11.0 to current Java 15 Agent v6.1.0 to current Compatible: IBM JVM versions 7 and 8 for Linux Eclipse OpenJ9 versions 8 to 13 for Linux, Windows, and macOS OpenJDK and AdoptOpenJDK JVM versions 7 to 15 for Linux, Windows, and macOS Oracle Hotspot JVM versions 7 to 15 for Linux, Solaris, Windows, and macOS Azul Zing JVM versions 8 and 11 for Linux, Windows, and macOS Azul Zulu JVM versions 8 to 12 for Linux, Windows, and macOS Amazon Corretto JVM versions 8 and 11 for Linux, Windows, and macOS Alibaba Dragonwell JVM versions 8 and 11 for Linux, Windows, and macOS Compatible only with Java agent 4.3.x [ ZIP | 2.8 MB] legacy agent: Apple Hotspot JVM version 6 for macOS IBM JVM version 6 Oracle Hotspot JVM version 6.0 for Linux, Solaris, Windows, macOS Compatible only with Java agent 2.21.x [ ZIP | 2.8 MB] legacy agent: Oracle Hotspot JVM version 5.0 for Linux, Solaris, Windows, macOS (Java SE 5.0) Oracle JRockit up to and including 1.6.0_50 Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Use of other monitoring software If your application uses other application monitoring software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Built-in instrumentation After you install the Java agent, it automatically instruments many popular frameworks and libraries. With automatic instrumentation, the agent collects rich data out of the box, and data will show up in your New Relic dashboards within minutes of installation. Even if your library is not automatically instrumented, you can still collect data with custom instrumentation and the Java agent API. The agent automatically instruments these frameworks and libraries: App/Web servers The agent automatically instruments the following app/web servers. To install the Java agent on supported app/web servers, see Install the Java agent. ColdFusion 10 Glassfish 3.0 to 5.x JBoss 7.0 to latest JBoss EAP 6.0 to latest Jetty 7.0.0.M3 to 9.4.x Mule ESB 3.4 to 3.8.x Netty 3.3.0.Alpha1 to 5.0.0.Alpha1 Resin 3.1.9 to 4.0.x Spray-can 1.3.1 to latest Tomcat 7.0.0 to 9.0.x TomEE 1.5 to 8.0.x WebLogic 12.1.2.1 to 12.2.x WebSphere 8.5.x to 9.x WebSphere Liberty Profile 8.5 to latest WildFly 8.0.0.Final to latest Frameworks and libraries The agent automatically instruments the following frameworks. To install the Java agent on supported frameworks, see Install the Java agent. Akka 2.2.0-RC1 to latest AmazonS3 client 1.2.13 to latest AmazonSNS and AmazonSNSAsync clients 1.11.12 to latest AmazonSQS and AmazonSQSAsync clients 1.3.22 to latest S3Client 2.1.0 to latest SnsClient 2.1.0 to latest SqsClient 2.1.0 to latest CXF 2.1.3 to latest Grails 1.3.7 to 2.3.x Hibernate 3.3.0.CR1 to 6.0.0.Alpha2 Hystrix 1.3.15 to latest JAX-RS 1.0 to 2.0 JCache API 1.0.0 to latest Jersey 1.0.1 to 2.x JSF (Java Server Faces) Play 2.3.0 to latest Quartz Job Scheduler 1.8.3 to 2.2.x RESTEasy 2.2-RC-1 to latest Spray 1.3.1 to latest Spring 3.0.0.RELEASE to latest Spring webclient 5.0.0.RELEASE to latest Spring Web Services from 1.5.7 to latest Spring Boot 1.4.x to latest Struts 2 Thrift 0.8.0 to latest Vert.x 3.2.0 to 3.8.3 HTTP and messaging The agent automatically instruments the following HTTP clients and messaging services. For instructions, see Install the Java agent. Akka HTTP 2.4.5 to latest Akka Http Core from 0.4 to latest AsyncHttpClient 2.0.0-RC1 to latest gRPC 1.4.0 to latest HttpAsyncClient 4.1 to latest Apache Httpclient from 3.0 to latest java.net.HttpURLConnection JMS and Spring-JMS 1.1 to latest Kafka Clients 0.10.0.0 to latest (for metric and event data) Kafka Clients 0.11.0.0 to latest (for distributed tracing, metric, and event data) OkHttp 3.x to 4.3.x Ning AsyncHttpClient 1.x Play WS 2.6.0 to latest RabbitMQ 1.7.2 to latest (AMQP and JMS) Spray-client 1.3.1 to latest Spring webclient from 5.0.0.release to latest Datastores New Relic currently supports MySQL and PostgreSQL to capture explain plans for slow database queries. Amazon DynamoDB 1.11.106 to latest Anorm from 2.0 to 2.5 DataStax Cassandra 2.1.2 to 4.0.0 (If you use high security, see the configuration documentation for allow lists.) DB2 9.1 to latest Derby 10.2.1.6 to latest Generic JDBC (any JDBC compliant driver) H2 1.0.57 to latest HSQL 1.7.2.2 to latest INet Oracle Driver (Oranxo) 3.06, 3.14 INet MERLIA 7.0.3, 8.04.03, and 8.06 Jedis Redis driver 1.4.0 to 2.10.x, 3.0.0 to latest jTDS 1.2 to latest MariaDB 1.1.7 or higher Microsoft SQL Server 1.2 to latest MongoDB 2.12.0-rc0 to latest (synchronous clients only) MySQL mysql-connector-java 3.0.8 to latest Oracle ojdbc5, ojdbc6, ojdbc7, ojdbc8, ojdbc10, ojdbc14 Postgres 8.0-312.jdbc3 to latest Slick 3.0.0 to latest Solr 4.0 to latest Spymemcached 2.11 to latest Sybase (jConnect) JDBC 3 driver 6.0 to latest Instance-level database information New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's Java agent versions 3.33.0 or higher support the following: Any compatible JDBC driver Amazon DynamoDB 1.11.106 or higher DataStax Cassandra driver 2.1.2 to 4.0.0 Jedis Redis driver 1.4 to 2.10.x, 3.0.0 to latest Mongo 2.12.0 to latest (synchronous clients only)/li> Spymemcached 2.11.0 to 2.12.x Exception: Instance-level information is not reported for calls to the getBulk() API method. The Java agent reports the database name and database server/identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, get support at support.newrelic.com. Hosting services You can install the Java agent on a variety of hosting services, including ones not listed below. Here are detailed installation guides for particular hosting services: Google App Engine (GAE) flexible environment Heroku Asynchronous instrumentation For supported frameworks, the Java agent usually instruments async work automatically. However, you can use the Java agent API to extend this instrumentation. Other instrumented features EJB Session Beans 3.0 or higher JMX JSP (Java Server Pages) 2.0 to 2.2 Scala 2.9.3 to 2.13.x Connect the agent to other New Relic products The Java agent integrates with other New Relic products to give you end-to-end visibility: Product Integration Browser monitoring The Java agent automatically injects the Browser JavaScript agent when you enable auto-instrumentation. After enabling Browser injection, you can view Browser data in the APM Summary page and quickly switch between the APM and Browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Java agent. Infrastructure monitoring When you install the Infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in Infrastructure. New Relic One dashboards The Java agent sends default events and attributes to dashboards, or you can run NRQL queries in the query builder. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from Synthetics monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.728195,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the Java <em>agent</em>",
        "sections": "Compatibility and requirements for the Java <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": "Bulk() API method. The Java <em>agent</em> reports the database name and database server&#x2F;identifier attributes on slow query traces and transaction traces for these database drivers. To request instance-level information from additional datastores, <em>get</em> support at support.newrelic.com. Hosting services You can"
      },
      "id": "6043b8f6196a6771a9960f87"
    },
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-07-02T10:44:19Z",
      "updated_at": "2021-03-11T04:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8 Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.1002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " The following are proposed time ranges. The actual release date may vary. <em>Python</em> version Active long term support (LTS) <em>start</em> date Initial release date of <em>Python</em> <em>agent</em> with support 3.8 October 21, 2019 November-December 2019 End of support for <em>Python</em> releases reaching EOL The following are proposed time"
      },
      "id": "6044108b64441fb65f378efc"
    }
  ],
  "/docs/agents/python-agent/hosting-services/install-python-agent-gae-flexible-environment": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-07-02T10:45:24Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.7901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-07-02T11:03:56Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.52571,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-07-02T11:03:56Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.12263,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-heroku": [
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-07-02T11:03:56Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.52571,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-07-02T11:03:56Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.12263,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-07-02T11:04:35Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.36706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-openshift": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-07-02T10:45:24Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.7901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-07-02T11:03:56Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.12263,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-07-02T11:04:35Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.36706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-stackato": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-07-02T10:45:24Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.7901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-07-02T11:03:56Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.52571,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and WebFaction"
      ],
      "title": "Python agent and WebFaction",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "1fb0e65238552966bbb8fc93aae62d2421cffac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-webfaction/",
      "published_at": "2021-07-02T11:04:35Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the Python agent on applications running on WebFaction. WebFaction is a general purpose web hosting service capable of hosting web applications using various languages including Python. The typical way that Python web applications are hosted on WebFaction is by using Apache/mod_wsgi. For more on installing The agent on a WebFaction Python application, see Install the Python agent and follow the instructions for mod_wsgi.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.36706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and WebFaction",
        "sections": "<em>Python</em> <em>agent</em> and WebFaction",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "You can install the <em>Python</em> <em>agent</em> on applications running on WebFaction. WebFaction is a general purpose web <em>hosting</em> service capable of <em>hosting</em> web applications using various languages including <em>Python</em>. The typical way that <em>Python</em> web applications are hosted on WebFaction is by using Apache&#x2F;mod_wsgi. For more on installing The <em>agent</em> on a WebFaction <em>Python</em> application, see Install the <em>Python</em> <em>agent</em> and follow the instructions for mod_wsgi."
      },
      "id": "6044005b196a67aa8e960f19"
    }
  ],
  "/docs/agents/python-agent/hosting-services/python-agent-webfaction": [
    {
      "sections": [
        "Python agent and Heroku",
        "Contents",
        "Install the New Relic add-on",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Upgrade from an existing agent installation",
        "Install the Python agent",
        "Update the Python agent",
        "Verify the New Relic add-on",
        "Troubleshoot your installation",
        "Initialize the Python agent",
        "Caution",
        "WSGI application wrapping",
        "Track Celery tasks",
        "Debug the Python agent",
        "Edit the agent configuration file",
        "For more help"
      ],
      "title": "Python agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "862b5a0d7f7d673209f16993dd0cfeb9047e359e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-heroku/",
      "published_at": "2021-07-02T10:45:24Z",
      "updated_at": "2021-03-11T03:12:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various agent languages, including Python. With the agent, you can extend Heroku with metrics from New Relic One. This document describes special considerations for using Heroku as a hosting service with Python agent. Contents Install the New Relic add-on After deploying your Python app on Heroku, install the Python agent: Via the Heroku website To install the New Relic add-on through the Heroku website, you must be logged in to Heroku: From Heroku's Add-on page for New Relic, select a subscription plan. From Select an app, select your New Relic app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Via Heroku toolbelt To install the Python agent add-on with Heroku the toolbelt: Run the following command, where $planlevel is the appropriate subscription plan: heroku addons:create newrelic:$planlevel Copy Give your application a descriptive name with this toolbelt command: heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Restart your dyno. Generate some traffic to your app. Installing the add-on automatically creates a private New Relic account and configures access for Heroku hosts. The agent will begin monitoring application performance, end user experience, and host performance collected after the add-on is installed. Within a few minutes, data should start appearing in your APM Summary page. Upgrade from an existing agent installation If an agent is already installed, reinstall the add-on using the Heroku toolbelt command. heroku config:set NEW_RELIC_APP_NAME='Your Application Name' Copy Install the Python agent To install a third party Python package such as our Python agent on Heroku, use pip. Heroku automatically looks for a requirements.txt file in the root directory of your project. It installs anything listed in that file when you push your project to Heroku. Create or edit the requirements.txt file, adding the line: newrelic Copy Django users: Modify the web entry of your Procfile, prefixing the value with newrelic-admin run-program. For example: web: newrelic-admin run-program gunicorn mysite.wsgi Copy Push your project up to Heroku. This will install the the Python agent package with the latest version listed on the Python Package Index (PyPi). Update the Python agent Heroku caches packages and does not detect when a newer version of the Python agent is available. To force an upgrade: Edit the requirements.txt file by including the specific Python agent version (n.n.n.n) with the package name: newrelic==n.n.n.n Copy Push your project up to Heroku. Verify the New Relic add-on To verify that the New Relic add-on has been enabled, run: heroku run env | grep NEW_RELIC Copy This generates a list of New Relic-specific environment variables in Heroku. The Python agent uses these to determine which New Relic account and application data to use for reporting data. At a minimum, you should see: NEW_RELIC_LOG=stdout NEW_RELIC_LICENSE_KEY=0000000000000000000000000000000000000000 NEW_RELIC_APP_NAME=Your app name Copy The license key is unique to your New Relic account. Troubleshoot your installation Within a few minutes of installing and configuring the agent, data should start appearing in your app's APM Summary page. If no data appears, test that environment variables are being detected properly by running: heroku run newrelic-admin validate-config - stdout Copy This will create a connection and report test transaction data under the application Python Agent Test. Capture the output from running the test, and use the data to troubleshoot the issue. If you need further assistance, follow the Python agent troubleshooting procedures. Initialize the Python agent To initialize the Python agent: From the root of your project, find the Procfile. Modify the web entry in your Procfile to define what to do to start up your Python web application. Refer to the following examples to insert newrelic-admin run-program at the start of the command. Run your Python web application under the control of the the Python agent's admin script. Hosting mechanism Example web entry Flask with the built-in development host web: newrelic-admin run-program python hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b \"0.0.0.0:$PORT\" -w 3 hello:app Copy Django with gunicorn listed in INSTALLED_APPS web: newrelic-admin run-program python hellodjango/manage.py run_gunicorn -b \"0.0.0.0:$PORT\" -w 3 Copy Caution Avoid using the built-in development hosts of any web framework prior to Python version 2.7.4 or prior to Django 1.4. Instead, use gunicorn or uWSGI. The WSGI host using the wsgiref module was not fully WSGI compliant for development hosts prior to Python version 2.7.4. This prevented the Python agent from being able to report correct data. WSGI application wrapping The agent provides automatic wrapping of the the WSGI application point for these web frameworks: Bottle Django Flask If you are using any of these Python web frameworks, no additional steps are required. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. If the entry point is this... Do this... Entry point is a function Wrap it in a decorator: import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Entry point is a function or object imported from a different module Wrap it in pre decorator style: import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Track Celery tasks To record execution time for Celery tasks as background tasks against your web application, wrap the startup of the Celery host with the newrelic-admin command. Prefix the existing startup command defined by the worker entry in your Procfile: worker: newrelic-admin run-program python hellodjango/manage.py celeryd -E -B --loglevel=INFO Copy Debug the Python agent To begin debugging, collect the log output from the Python agent. Heroku sends Python agent output to standard output and captures it in the web server log. To get access to the web server log for Heroku, run: heroku logs Copy By default the Python agent will log at info level. If New Relic Support requests an alternate level of logging, you must manually add a config variable. For example, to set logging output to debug, run: heroku config:add NEW_RELIC_LOG_LEVEL=debug Copy Your application automatically restarts when you change the log level. Caution The debug log level produces large quantities of output. Be sure to remove this setting as soon as it is no longer required, by running: heroku config:remove NEW_RELIC_LOG_LEVEL Copy Edit the agent configuration file When using Heroku's add-on with New Relic, this automatically sets key environment variables for the Python agent. You can also customize additional settings with the agent configuration file, or use server-side configuration. Do not add core settings such as the license key, application name, etc. to the configuration file. Heroku automatically adds these settings. To customize other settings, use the Python agent configuration file with Heroku: Add the newrelic.ini agent configuration file to the root directory of your project repository that you are pushing up to Heroku: In the [newrelic] section, include the specific configuration setting; for example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Commit the configuration file to your repository, and push the change up to Heroku. Use the heroku config:add command to set the NEW_RELIC_CONFIG_FILE environment variable for your deployed application: heroku config:add NEW_RELIC_CONFIG_FILE=newrelic.ini Copy If you are using the newrelic-admin wrapper program to launch your WSGI host, the settings for your license key, application name, etc., will be picked up from the environment variables set by Heroku. Any additional settings you set in the agent configuration file will also be applied. Then, when the agent registers with New Relic, any server-side configuration will also be merged to create the final configuration the agent will use. For more help Additional documentation resources include: Heroku and New Relic (additional topics for Heroku users) Heroku Dev Center (information on the Heroku site on installing New Relic)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.7901,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Heroku",
        "sections": "<em>Python</em> <em>agent</em> and Heroku",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": " the control of the the <em>Python</em> <em>agent</em>&#x27;s admin script. <em>Hosting</em> mechanism Example web entry Flask with the built-in development <em>host</em> web: newrelic-admin run-program <em>python</em> hello.py Copy Flask with gunicorn web: newrelic-admin run-program gunicorn -b &quot;0.0.0.0:$PORT&quot; -w 3 hello:app Copy Django with gunicorn listed"
      },
      "id": "6043daa7e7b9d21618579a0a"
    },
    {
      "sections": [
        "Python agent and OpenShift",
        "Prepare your application",
        "Install the APM Python agent",
        "Update the Python agent",
        "Use Python agent environment variables",
        "Test the agent installation",
        "Initialize the Python agent",
        "Wrap the WSGI application",
        "Override the application name",
        "Debug the Python agent",
        "Update agent configuration file",
        "For more help"
      ],
      "title": "Python agent and OpenShift",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "acee040a38293ce5df3d7d8b503f36a15269a27d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-openshift/",
      "published_at": "2021-07-02T11:03:56Z",
      "updated_at": "2021-03-11T04:38:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "OpenShift is a Platform as a Service (PaaS) solution capable of hosting web applications using various languages, including the Python agent. Prepare your application Before installing the Python agent, make sure your Python web application is installed and running under OpenShift using one of the available Python cartridges. See the OpenShift developer guides for more information. Install the APM Python agent OpenShift support two different ways of installing third party Python packages. You can either list the package as a dependency in the setup.py for your web application, or in the requirements.txt file used by pip. If you are using a setup.py file, install the agent by adding newrelic to the list of third party modules passed to install_requires: from setuptools import setup setup(name='YourAppName', version='1.0', description='OpenShift App', author='Your Name', author_email='example@example.com', url='https://www.python.org/community/sigs/current/distutils-sig', install_requires=['Flask>=0.7.2', 'MarkupSafe', 'newrelic'], ) Copy If you are using pip, add the following line to requirements.txt: newrelic Copy When you push your project up to OpenShift, this will install the Python agent package. It will use the latest version of the Python agent from the OpenShift mirror of the Python Package Index (PyPi). Updates to the OpenShift mirror of PyPi can be delayed, so you may have to wait up to a day before a new release on PyPi is available on OpenShift. Update the Python agent OpenShift will cache packages and will not detect when a newer version of the Python agent is available. To force an upgrade to a newer version, explicitly list the version against the package name in the setup.py or requirements.txt file and push your application. Use this syntax: newrelic==A.B.C.D Copy Replace A.B.C.D with the version of the the Python agent you wish to install. Use Python agent environment variables In order for the Python agent to report data to the correct account, you need to tell it the license key for your New Relic account. For OpenShift, the most secure way to provide the license key is using an environment variable configured in your application configuration using the rhc env set command. This avoids storing sensitive information in your GIT repository and also works if you are using a scaled web application which is hosted on multiple physical hosts. rhc env set NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY -a YOUR_APP_NAME Copy While specifying your license key, also tell the Python agent where to record log messages: rhc env set NEW_RELIC_LOG=stderr -a YOUR_APP_NAME Copy To verify that the environment variables are being set, run: rhc env list -a YOUR_APP_NAME Copy Although set, these will only take effect the next time the web application gears are restarted. Test the agent installation To test that the Python agent package has been installed correctly and that the agent environment variables are being set correctly, you can ssh into the main gear of your application and run: newrelic-admin validate-config - stdout Copy This admin script will create a connection and report test transaction data under the application Python Agent Test in your account. Data can take up to five minutes to appear in the UI. If it doesn't appear after some time, capture the output from running the test and use the data to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. Initialize the Python agent The OpenShift Python cartridges provide two ways of running a WSGI application. The first method uses a preconfigured Apache/mod_wsgi installation. In this case your WSGI application entry point must be defined in the wsgi.py file. The second method relies on you to provide a standalone Python web application script called app.py. This will typically start an embedded Python WSGI server, with the WSGI application entry point being specified within the app.py file, or be imported from a separate Python code file, such as the wsgi.py file. For either method, OpenShift controls the startup of the WSGI server. You must manually integrate the Python agent into your WSGI application. You cannot use the newrelic-admin wrapper script around the startup of the WSGI server. If you are using the Apache/mod_wsgi approach, add the following code at the very start of the wsgi.py file: import newrelic.agent newrelic.agent.initialize() Copy Make sure this precedes any other Python module imports appearing in the wsgi.py file. You do not need to provide any arguments to the initialize() call, because the license key information and destination for logging are read from the environment variables. If you are using an embedded Python WSGI server from app.py, place these lines at the very top of the app.py file, even if you import the WSGI application entry point from a wsgi.py file. When using app.py with wsgi.py, do not add these lines to wsgi.py. Avoid using the built-in development servers of any web framework. Also, do not use the OpenShift Python 2.6 cartridge or older Django versions. This is because these development servers are often based on the WSGI server from the wsgiref module from the Python standard library. The WSGI server from the wsgiref module had a bug, which meant it was not fully WSGI-compliant, and this would cause the Python agent to report incorrect data. This issue with the wsgiref module is only fixed in Python 2.7.4. The built-in WSGI server in older versions of Django prior to Django 1.4 had a similar problem. Wrap the WSGI application If you are using a Python web framework for which the agent provides automatic wrapping of the WSGI application entry point, this is all that needs to be done. Python web frameworks with automatic wrapping include Django, Flask, and Bottle. For others, you must modify the Python code file with your WSGI application entry point to wrap the WSGI application object with a WSGI application wrapper. This will initiate the timing for the web requests received by your application. Entry point Example code Enty point is a function Wrap it in a decorator. import newrelic.agent @newrelic.agent.wsgi_application() def application(environ, start_response): ... Copy Enty point is a function or object imported from a different module. Wrap it in pre decorator style. import myapp application = myapp.WSGIHandler() application = newrelic.agent.WSGIApplicationWrapper(application) Copy Override the application name By default, your data is recorded under the app name Python Application. To change the display name, use the APM user interface. However, from the agent side, we highly recommends keeping this as a unique, unchanging value, independent of changes to the display name in the UI. This is required if you intend to run multiple distinct sites under the one New Relic account and want to have the data reported separately. To override the application name, use the rhc env set command: rhc env set NEW_RELIC_APP_NAME='Web Site (Production)' -a yourappname Copy To verify that the configuration has been updated, run: rhc env list -a yourappname Copy Then look for: NEW_RELIC_APP_NAME=Web Site (Production) Copy Changes to environment variables only take effect the next time you restart your web application gears. Debug the Python agent To begin debugging, collect the log output from the Python agent. When the NEW_RELIC_LOG environment variable is set to stderr, the log messages from the Python agent will be captured within the standard Python web application logs. To tail the web application logs under OpenShift, run: rhc tail -a YOUR_APP_NAME Copy To get the complete log, copy back from each of your web applications the log file: $OPENSHIFT_PYTHON_LOG_DIR/python.log Copy By default the Python agent will log at info level. If the agent requires an alternate level of logging, you will need to manually add an additional environment variable. For example, to set logging output to debug, run: rhc env set NEW_RELIC_LOG_LEVEL=debug -a YOUR_APP_NAME Copy Environment variables do not take effect immediately, so be sure to restart your web application gears. Run debug logging only when requested and only for the time required. Debug logging can produce a lot of output and will bloat your log files. Remove this setting as soon as it is no longer required by running the following command, and then restart your web application gears: rhc env unset NEW_RELIC_LOG_LEVEL -a YOUR_APP_NAME Copy Use the logfile to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com Update agent configuration file With OpenShift, the preferred way of specifying your account license key and defining where logging should go is to use environment variables. This means it is not necessary to use an agent configuration file to get the agent working. However, without the agent configuration file, it is not possible to customize other agent settings. If you enable server-side configuration for your application, you do not need an agent configuration file. This is done from the Application settings in the APM user interface application. Using server-side configuration you can override core settings for the agent. When a change is made to a setting via the UI, the agent running within each of your web application processes will be notified, and it will pick up the changed settings. However, some agent features are incompatible with server-side configuration. In these cases, use an agent configuration file pushed up with your web application to OpenShift. To add and enable an agent configuration file with OpenShift: Add the agent configuration file newrelic.ini to the root directory of your project repository that you are pushing up to OpenShift. This should contain a [newrelic] section along with just the specific configuration setting you need to set. For example: [newrelic] transaction_tracer.function_trace = mydbm:connect Copy Do not use the agent configuration file for core settings such as the license key or app name, as doing so will override the environment variable settings. You also likely do not want the license key as part of your GIT repository, especially if the project source code is publicly available. Also note that if server-side configuration is enabled at the same time, any setting that can be set via server-side configuration will always override the local setting. Therefore only use this for settings that cannot be set using server-side configuration if server-side configuration is enabled. Now modify the wsgi.py or app.py file where you added the code to initialize the Python agent. Change the code you had already added to: import os import newrelic.agent repo_dir = os.environ['OPENSHIFT_REPO_DIR'] config_file = os.path.join(repo_dir, 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Commit the configuration file to your repository and push the change up to OpenShift. For more help Additional documentation resources include: New Relic for Python (an overview and system requirements for the Python agent) Python agent integration (integrating the Python agent into your app)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.5257,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and OpenShift",
        "sections": "<em>Python</em> <em>agent</em> and OpenShift",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "OpenShift is a Platform as a Service (PaaS) solution capable of <em>hosting</em> web applications using various languages, including the <em>Python</em> <em>agent</em>. Prepare your application Before installing the <em>Python</em> <em>agent</em>, make sure your <em>Python</em> web application is installed and running under OpenShift using one"
      },
      "id": "6043daa7e7b9d25f135799d6"
    },
    {
      "sections": [
        "Python agent and Stackato",
        "Contents",
        "Package installation",
        "Agent configuration file",
        "Python agent initialization"
      ],
      "title": "Python agent and Stackato",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Hosting services"
      ],
      "external_id": "ed21e29d42d003a9353cb940a36fa3d7407fac84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/hosting-services/python-agent-stackato/",
      "published_at": "2021-07-02T11:03:56Z",
      "updated_at": "2021-03-11T04:39:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Stackato is a private PaaS solution developed by ActiveState. The Python agent can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM image you will need to upgrade. Contents Package installation ActiveState hosts a copy of the Python agent package in their PyPM package repository. To install the Python package for the agent, add newrelic into the requirements.txt file on a line by itself: newrelic Copy You would then perform the update command using the Stackato client. The PyPM package repository updates daily. If you need to use a newer version of the Python agent than is available from the PyPM package repository, you will instead need to fallback to using pip and source packages from PyPI. In this case you will need to create in addition to the requirements.txt file used by PyPM, a requirements.pip file as input for pip. In the requirements.pip file you should list the newrelic package. Agent configuration file You will need to generate the Python agent configuration on your local system as described in Python agent installation and add that to the directory you push to your Stackato instance. The option in the agent configuration file for specifying where the agent log file output should go, should be set to: log_file = stderr Copy Python agent initialization Although you can manually include code for initializing the Python agent into the Python module containing your WSGI application entry point, as per instructions for integration with your Python application, a simplified startup method is also available by using the newrelic-admin script. In the case where you do it manually, such changes would typically be made to the wsgi.py file which includes your Python web application. Since the agent configuration file would be in the same directory, the change to the wsgi.py file would be to add: import newrelic.agent config_file = os.path.join(os.path.dirname(__file__), 'newrelic.ini') newrelic.agent.initialize(config_file) Copy Because the directory in the filesystem where the application is installed can change, the location of the agent configuration is calculated relative to the location of the wsgi.py file automatically. The alternative to adding code to perform initialization of the agent manually is to use the newrelic-admin script. If you are explicitly defining in the stackato.yml file how to startup your web application by setting the web entry in the processes section: processes: web: python app.py Copy You would replace web so it reads: processes: web: newrelic-admin run-program python app.py Copy In other words, you are prefixing the existing command with newrelic-admin run-program. At the same time, you should also add an env section to the stackato.yml file with: env: NEW_RELIC_CONFIG_FILE: newrelic.ini Copy If you aren't overriding the web entry already and instead are relying on the default of the Stackato stack running uWSGI for you the process is a bit different. In this case you will need to add a web entry to stackato.yml as: processes: web: newrelic-admin run-program $PROCESSES_WEB Copy The env section is also again required. If PROCESSES_WEB is not defined and this does not work it indicates you are using an older VM image and should upgrade. Whether the manual or more automated method is used, if necessary for the Python web framework being used, the WSGI application entry point object will also need to be wrapped appropriately.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 120.12263,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and Stackato",
        "sections": "<em>Python</em> <em>agent</em> and Stackato",
        "tags": "<em>Hosting</em> <em>services</em>",
        "body": "Stackato is a private PaaS solution developed by ActiveState. The <em>Python</em> <em>agent</em> can be used in conjunction with Stackato by following the steps outlined below. The instructions here require you to use version 0.6 or higher of the Stackato VM image. If you use an older version of the Stackato VM"
      },
      "id": "6043da6264441f79a5378ee1"
    }
  ],
  "/docs/agents/python-agent/index": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 75.46559,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your <em>Python</em> <em>agent</em> to the latest version. For additional information about specific <em>agent</em> updates, refer to the <em>Python</em> <em>agent</em> release notes. Update with <em>Python</em> package index (PyPi"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 74.99837,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> API allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> API calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 74.03152,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> API)",
        "sections": "application (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> API calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    }
  ],
  "/docs/agents/python-agent/installation/advanced-install-new-relic-python-agent": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.904526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Python agent admin script: Advanced usage",
        "Subcommand structure",
        "help <command>",
        "generate-config license_key [output_file]",
        "validate-config config_file [log_file]",
        "run-program ...",
        "run-python ...",
        "license-key config_file [log_file]",
        "network-config config_file [log_file]",
        "local-config config_file [log_file]",
        "server-config config_file [log_file]",
        "record-deploy config_file description"
      ],
      "title": "Python agent admin script: Advanced usage",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "258e608c4952147784dd0b2d59de34e24cc550c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-05-16T09:05:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent admin script is used during the installation process. When the Python agent package is installed, the newrelic-admin script is also installed into the bin directory of the Python installation or virtual environment. This document gives more in-depth detail about these uses of the admin script: Generating the initial agent configuration file Validating your config file Testing the connection to New Relic Wrapping startup of standalone Python web applications Subcommand structure To execute subcommands, provide the name of the subcommand as the first argument to the newrelic-admin script. Then add any options after the name of the subcommand. For example: newrelic-admin help Copy help < command> When executed with no further arguments, this provides a listing of all accepted subcommands: $ newrelic-admin help Usage: newrelic-admin command [options] Type 'newrelic-admin help <command>' for help on any of the commands listed in this document. To view additional details about a subcommand, run the help command with the subcommand and any of its options. For example: $ newrelic-admin help generate-config Usage: newrelic-admin generate-config license_key [output_file] Generates a sample agent configuration file for <license_key> Copy generate-config license_key [ output_file] Generates a sample agent configuration file. The license_key option is your New Relic license key. By default the sample configuration file will be directed to standard output and be displayed on your screen. To capture the output, you can instead save it to a file by giving the name of the file as the output_file option. When the sample agent configuration file is generated, only the license key option in the file is updated. You should still edit the file and make changes to app_name and log_file options as appropriate. For more information, see Python agent installation. If you cannot run the generate-config command to produce the initial agent configuration file, you can download a sample configuration file from download.newrelic.com/python_agent/release/newrelic.ini. validate-config config_file [ log_file] Validates the syntax of an agent configuration file given by the config_file option. This might be the agent configuration generated by generate-config and subsequently edited, or an agent configuration file created by downloading the sample configuration file from the download site. As well as validating the syntax of the configuration file, using the license_key contained in the agent configuration file to identify your account, will also test whether a connection can be made to the our servers. This subcommand can therefore be used to ensure that DNS is available for resolving the hostname of the our data collector host and that there is network connectivity available and that no firewall is blocking access. In connecting to the our servers, the test will create an application under your account called Python Agent Test. Into this application a small amount of simulated web transaction data and errors will be reported. After a period of time this application in your account will be able to be deleted from the Applications list if desired. When this test is run, a log file will be created in the location: /tmp/python-agent-test.log Copy If you need to override this location you can supply the log_file option. To have what would be written to the log file be displayed to your screen, you can use stdout or stderr as the value passed as the log_file option. When using a hosting service such as Heroku where an agent configuration file wouldn't normally be used, this subcommand can still be used to test the connection to us. For Heroku the license key information is defined in an environment variable automatically setup by Heroku when you add the New Relic addon to your Heroku instance. In this case where an environment variable is used to define the license key, to run the connectivity test, pass the value - for the config_file option in place of the path to the agent configuration file. So, to run the command on your Heroku instance you would use: heroku run newrelic-admin validate-config - stdout Copy Note that we have supplied stdout for the log file in this case, else it would be necessary to separately retrieve the log file generated. It is recommended that when setting up the Python agent for the first time, or even perhaps on a new host, that this subcommand be used to test whether data can be reported okay. For more information, see Testing the Python agent. run-program ... Executes the command line for a Python web application given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. Agent configuration when using this method can be provided in two different ways. If using a complete agent configuration file then the location of that configuration can be provided by the NEW_RELIC_CONFIG_FILE environment variable. If you were using gunicorn for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn wsgi:application Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-program gunicorn wsgi:application Copy When specifying the location of the configuration file using the NEW_RELIC_CONFIG_FILE environment variable, the following additional environment variables can be set to customize how the configuration file is processed. NEW_RELIC_ENVIRONMENT: The name of a specific deployment environment. When specified, additional override configuration will be read from a separate deployment section within the configuration file. The section of the configuration file for a specific deployment environment should be named as newrelic:environment where environment is replaced with the name being specified by this environment variable In place of a complete agent configuration file, you can also set environment variables providing only the key agent configuration information. The environment variables which can be set in this case are: NEW_RELIC_LICENSE_KEY - Your New Relic license key. NEW_RELIC_APP_NAME - The name of the application you wish to report data against in the UI. If not defined, this defaults to Python Application. NEW_RELIC_LOG - The path to a file to be used for the agent log. If not defined then no logging will occur. Can also be set to stdout or stderr to have logging go to standard output or standard error for process. NEW_RELIC_LOG_LEVEL - The level at which logging will be output by the agent. If not defined then defaults to info. Possible values, in increasing order of detail, are: critical, error, warning, info and debug. Individual environment variables are used when hosting your application on Heroku. The environment variables will be set automatically as appropriate by the Heroku environment when you add the New Relic addon. It is therefore not necessary when using Heroku to set any of the above environment variables when using the newrelic-admin command with this option from your Procfile. Note that the wrapped program must be using the same Python installation or virtual environment as that which the Python agent package and the newrelic-admin script was installed into. If this is not the case then the wrapper script will have no affect and you may even encounter an error on startup of the Python interpreter due to the newrelic Python package not being able to be found. If using sudo to startup your WSGI application as another user, be aware that the default sudo configuration will generally be such that user environment variables from the shell in which sudo is run will be ignored. In this case you would need to change the sudoers configuration to allow passing of the specific environment variables. Alternatively, create a shell script which sets the environment variables and runs your WSGI application under newrelic-admin. To start up your WSGI application as a different user, then run sudo on that script rather than directly on your WSGI application. The use of an additional wrapper script to set the environment variables and run your WSGI application under newrelic-admin may also be required when using supervisord if any issues are encountered with environment variable settings within the supervisord configuration not being passed through correctly. run-python ... Executes the python executable from the Python installation or virtual environment that newrelic-admin is installed into with the arguments given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. As for run-program subcommand above, environment variables are used to configure the Python agent. If you were using python executable directly for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-python wsgi.py Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-python wsgi.py Copy license-key config_file [ log_file] Outputs the license key which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the license key for the purpose of verifying that the correct value is being used. It may be used with the agent configuration file: newrelic-admin license-key newrelic.ini Copy OR If setting the license key using environment variables, use - as the name of the configuration file: NEW_RELIC_LICENSE_KEY='YOUR-LICENSE-KEY' export NEW_RELIC_LICENSE_KEY newrelic-admin license-key - Copy Output will be in the form: license_key = 'YOUR-LICENSE-KEY' Copy If no license key was found in the agent configuration file or picked up from user environment variables, the output will be: license_key = None Copy network-config config_file [ log_file] Outputs the network configuration which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the network configuration for the purpose of verifying that the correct values are being used. It may be used with the agent configuration file: newrelic-admin network-config newrelic.ini Copy OR If setting any proxy information using environment variables, use - as the name of the configuration file: NEW_RELIC_PROXY_HOST=proxy.example.com export NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT=8888 export NEW_RELIC_PROXY_PORT newrelic-admin network-config - Copy Output will be in the form: host = 'collector.newrelic.com' port = 0 proxy_host = 'proxy.example.com' proxy_port = 8888 proxy_user = None proxy_pass = None ssl = True Copy A value of 0 for port indicates that the port number, either 80 or 443, will be automatically selected based on whether an SSL connection is being used to communicate with our data collector. local-config config_file [ log_file] Outputs the local agent configuration based on built-in defaults, environment variables, and any agent configuration file. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin local-config newrelic.ini Copy OR If setting any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin local-config - Copy server-config config_file [ log_file] Outputs the full configuration for a specific application. This will be the local agent configuration, overridden by any server-side configuration for the specific application. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin server-config newrelic.ini Copy OR If changing any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin server-config - Copy In order to obtain the server-side configuration, this script will force agent registration for the specific application defined by the configuration. If that application does not already appear in the user interface for APM, an entry for it will be created, but no metric data will be reported against it. record-deploy config_file description This is a wrapper around the New Relic REST API to record deployments for your application. You can also record deployments directly via the REST API. To use the command: Add your API key in the agent configuration file (newrelic.ini) by adding a line similar to the following in the [newrelic] section: api_key=substitute-your-api-key-here Copy Call the newrelic-admin command from the command line. (Do not add it to your config file.) using the following subcommand structure: newrelic-admin record-deploy config_file description [revision changelog user] Copy This subcommand has two required arguments: config_file: Path to the config file name description: Text to describe or identify the deployment; for example, the Git commit comments There are also three optional arguments: revision: Identifies a specific revision being deployed changelog: Provides a detailed log of what changes were made user: Identifies the person responsible for the deployment",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.99216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "sections": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> admin script is used during the <em>installation</em> process. When the <em>Python</em> <em>agent</em> package is installed, the newrelic-admin script is also installed into the bin directory of the <em>Python</em> <em>installation</em> or virtual environment. This document gives more in-depth detail about these uses"
      },
      "id": "6043ebfa28ccbc173f2c6062"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.95006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/agents/python-agent/installation/install-python-agent-docker": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.904526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Python agent admin script: Advanced usage",
        "Subcommand structure",
        "help <command>",
        "generate-config license_key [output_file]",
        "validate-config config_file [log_file]",
        "run-program ...",
        "run-python ...",
        "license-key config_file [log_file]",
        "network-config config_file [log_file]",
        "local-config config_file [log_file]",
        "server-config config_file [log_file]",
        "record-deploy config_file description"
      ],
      "title": "Python agent admin script: Advanced usage",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "258e608c4952147784dd0b2d59de34e24cc550c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-05-16T09:05:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent admin script is used during the installation process. When the Python agent package is installed, the newrelic-admin script is also installed into the bin directory of the Python installation or virtual environment. This document gives more in-depth detail about these uses of the admin script: Generating the initial agent configuration file Validating your config file Testing the connection to New Relic Wrapping startup of standalone Python web applications Subcommand structure To execute subcommands, provide the name of the subcommand as the first argument to the newrelic-admin script. Then add any options after the name of the subcommand. For example: newrelic-admin help Copy help < command> When executed with no further arguments, this provides a listing of all accepted subcommands: $ newrelic-admin help Usage: newrelic-admin command [options] Type 'newrelic-admin help <command>' for help on any of the commands listed in this document. To view additional details about a subcommand, run the help command with the subcommand and any of its options. For example: $ newrelic-admin help generate-config Usage: newrelic-admin generate-config license_key [output_file] Generates a sample agent configuration file for <license_key> Copy generate-config license_key [ output_file] Generates a sample agent configuration file. The license_key option is your New Relic license key. By default the sample configuration file will be directed to standard output and be displayed on your screen. To capture the output, you can instead save it to a file by giving the name of the file as the output_file option. When the sample agent configuration file is generated, only the license key option in the file is updated. You should still edit the file and make changes to app_name and log_file options as appropriate. For more information, see Python agent installation. If you cannot run the generate-config command to produce the initial agent configuration file, you can download a sample configuration file from download.newrelic.com/python_agent/release/newrelic.ini. validate-config config_file [ log_file] Validates the syntax of an agent configuration file given by the config_file option. This might be the agent configuration generated by generate-config and subsequently edited, or an agent configuration file created by downloading the sample configuration file from the download site. As well as validating the syntax of the configuration file, using the license_key contained in the agent configuration file to identify your account, will also test whether a connection can be made to the our servers. This subcommand can therefore be used to ensure that DNS is available for resolving the hostname of the our data collector host and that there is network connectivity available and that no firewall is blocking access. In connecting to the our servers, the test will create an application under your account called Python Agent Test. Into this application a small amount of simulated web transaction data and errors will be reported. After a period of time this application in your account will be able to be deleted from the Applications list if desired. When this test is run, a log file will be created in the location: /tmp/python-agent-test.log Copy If you need to override this location you can supply the log_file option. To have what would be written to the log file be displayed to your screen, you can use stdout or stderr as the value passed as the log_file option. When using a hosting service such as Heroku where an agent configuration file wouldn't normally be used, this subcommand can still be used to test the connection to us. For Heroku the license key information is defined in an environment variable automatically setup by Heroku when you add the New Relic addon to your Heroku instance. In this case where an environment variable is used to define the license key, to run the connectivity test, pass the value - for the config_file option in place of the path to the agent configuration file. So, to run the command on your Heroku instance you would use: heroku run newrelic-admin validate-config - stdout Copy Note that we have supplied stdout for the log file in this case, else it would be necessary to separately retrieve the log file generated. It is recommended that when setting up the Python agent for the first time, or even perhaps on a new host, that this subcommand be used to test whether data can be reported okay. For more information, see Testing the Python agent. run-program ... Executes the command line for a Python web application given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. Agent configuration when using this method can be provided in two different ways. If using a complete agent configuration file then the location of that configuration can be provided by the NEW_RELIC_CONFIG_FILE environment variable. If you were using gunicorn for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn wsgi:application Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-program gunicorn wsgi:application Copy When specifying the location of the configuration file using the NEW_RELIC_CONFIG_FILE environment variable, the following additional environment variables can be set to customize how the configuration file is processed. NEW_RELIC_ENVIRONMENT: The name of a specific deployment environment. When specified, additional override configuration will be read from a separate deployment section within the configuration file. The section of the configuration file for a specific deployment environment should be named as newrelic:environment where environment is replaced with the name being specified by this environment variable In place of a complete agent configuration file, you can also set environment variables providing only the key agent configuration information. The environment variables which can be set in this case are: NEW_RELIC_LICENSE_KEY - Your New Relic license key. NEW_RELIC_APP_NAME - The name of the application you wish to report data against in the UI. If not defined, this defaults to Python Application. NEW_RELIC_LOG - The path to a file to be used for the agent log. If not defined then no logging will occur. Can also be set to stdout or stderr to have logging go to standard output or standard error for process. NEW_RELIC_LOG_LEVEL - The level at which logging will be output by the agent. If not defined then defaults to info. Possible values, in increasing order of detail, are: critical, error, warning, info and debug. Individual environment variables are used when hosting your application on Heroku. The environment variables will be set automatically as appropriate by the Heroku environment when you add the New Relic addon. It is therefore not necessary when using Heroku to set any of the above environment variables when using the newrelic-admin command with this option from your Procfile. Note that the wrapped program must be using the same Python installation or virtual environment as that which the Python agent package and the newrelic-admin script was installed into. If this is not the case then the wrapper script will have no affect and you may even encounter an error on startup of the Python interpreter due to the newrelic Python package not being able to be found. If using sudo to startup your WSGI application as another user, be aware that the default sudo configuration will generally be such that user environment variables from the shell in which sudo is run will be ignored. In this case you would need to change the sudoers configuration to allow passing of the specific environment variables. Alternatively, create a shell script which sets the environment variables and runs your WSGI application under newrelic-admin. To start up your WSGI application as a different user, then run sudo on that script rather than directly on your WSGI application. The use of an additional wrapper script to set the environment variables and run your WSGI application under newrelic-admin may also be required when using supervisord if any issues are encountered with environment variable settings within the supervisord configuration not being passed through correctly. run-python ... Executes the python executable from the Python installation or virtual environment that newrelic-admin is installed into with the arguments given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. As for run-program subcommand above, environment variables are used to configure the Python agent. If you were using python executable directly for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-python wsgi.py Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-python wsgi.py Copy license-key config_file [ log_file] Outputs the license key which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the license key for the purpose of verifying that the correct value is being used. It may be used with the agent configuration file: newrelic-admin license-key newrelic.ini Copy OR If setting the license key using environment variables, use - as the name of the configuration file: NEW_RELIC_LICENSE_KEY='YOUR-LICENSE-KEY' export NEW_RELIC_LICENSE_KEY newrelic-admin license-key - Copy Output will be in the form: license_key = 'YOUR-LICENSE-KEY' Copy If no license key was found in the agent configuration file or picked up from user environment variables, the output will be: license_key = None Copy network-config config_file [ log_file] Outputs the network configuration which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the network configuration for the purpose of verifying that the correct values are being used. It may be used with the agent configuration file: newrelic-admin network-config newrelic.ini Copy OR If setting any proxy information using environment variables, use - as the name of the configuration file: NEW_RELIC_PROXY_HOST=proxy.example.com export NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT=8888 export NEW_RELIC_PROXY_PORT newrelic-admin network-config - Copy Output will be in the form: host = 'collector.newrelic.com' port = 0 proxy_host = 'proxy.example.com' proxy_port = 8888 proxy_user = None proxy_pass = None ssl = True Copy A value of 0 for port indicates that the port number, either 80 or 443, will be automatically selected based on whether an SSL connection is being used to communicate with our data collector. local-config config_file [ log_file] Outputs the local agent configuration based on built-in defaults, environment variables, and any agent configuration file. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin local-config newrelic.ini Copy OR If setting any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin local-config - Copy server-config config_file [ log_file] Outputs the full configuration for a specific application. This will be the local agent configuration, overridden by any server-side configuration for the specific application. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin server-config newrelic.ini Copy OR If changing any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin server-config - Copy In order to obtain the server-side configuration, this script will force agent registration for the specific application defined by the configuration. If that application does not already appear in the user interface for APM, an entry for it will be created, but no metric data will be reported against it. record-deploy config_file description This is a wrapper around the New Relic REST API to record deployments for your application. You can also record deployments directly via the REST API. To use the command: Add your API key in the agent configuration file (newrelic.ini) by adding a line similar to the following in the [newrelic] section: api_key=substitute-your-api-key-here Copy Call the newrelic-admin command from the command line. (Do not add it to your config file.) using the following subcommand structure: newrelic-admin record-deploy config_file description [revision changelog user] Copy This subcommand has two required arguments: config_file: Path to the config file name description: Text to describe or identify the deployment; for example, the Git commit comments There are also three optional arguments: revision: Identifies a specific revision being deployed changelog: Provides a detailed log of what changes were made user: Identifies the person responsible for the deployment",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.99216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "sections": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> admin script is used during the <em>installation</em> process. When the <em>Python</em> <em>agent</em> package is installed, the newrelic-admin script is also installed into the bin directory of the <em>Python</em> <em>installation</em> or virtual environment. This document gives more in-depth detail about these uses"
      },
      "id": "6043ebfa28ccbc173f2c6062"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.95006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.90452,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.95006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Tip",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-03-11T06:45:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in a Google App Engine flexible environment. For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.53547,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Tip To use <em>Python</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    }
  ],
  "/docs/agents/python-agent/installation/python-agent-advanced-integration": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.90452,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Python agent admin script: Advanced usage",
        "Subcommand structure",
        "help <command>",
        "generate-config license_key [output_file]",
        "validate-config config_file [log_file]",
        "run-program ...",
        "run-python ...",
        "license-key config_file [log_file]",
        "network-config config_file [log_file]",
        "local-config config_file [log_file]",
        "server-config config_file [log_file]",
        "record-deploy config_file description"
      ],
      "title": "Python agent admin script: Advanced usage",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "258e608c4952147784dd0b2d59de34e24cc550c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-05-16T09:05:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent admin script is used during the installation process. When the Python agent package is installed, the newrelic-admin script is also installed into the bin directory of the Python installation or virtual environment. This document gives more in-depth detail about these uses of the admin script: Generating the initial agent configuration file Validating your config file Testing the connection to New Relic Wrapping startup of standalone Python web applications Subcommand structure To execute subcommands, provide the name of the subcommand as the first argument to the newrelic-admin script. Then add any options after the name of the subcommand. For example: newrelic-admin help Copy help < command> When executed with no further arguments, this provides a listing of all accepted subcommands: $ newrelic-admin help Usage: newrelic-admin command [options] Type 'newrelic-admin help <command>' for help on any of the commands listed in this document. To view additional details about a subcommand, run the help command with the subcommand and any of its options. For example: $ newrelic-admin help generate-config Usage: newrelic-admin generate-config license_key [output_file] Generates a sample agent configuration file for <license_key> Copy generate-config license_key [ output_file] Generates a sample agent configuration file. The license_key option is your New Relic license key. By default the sample configuration file will be directed to standard output and be displayed on your screen. To capture the output, you can instead save it to a file by giving the name of the file as the output_file option. When the sample agent configuration file is generated, only the license key option in the file is updated. You should still edit the file and make changes to app_name and log_file options as appropriate. For more information, see Python agent installation. If you cannot run the generate-config command to produce the initial agent configuration file, you can download a sample configuration file from download.newrelic.com/python_agent/release/newrelic.ini. validate-config config_file [ log_file] Validates the syntax of an agent configuration file given by the config_file option. This might be the agent configuration generated by generate-config and subsequently edited, or an agent configuration file created by downloading the sample configuration file from the download site. As well as validating the syntax of the configuration file, using the license_key contained in the agent configuration file to identify your account, will also test whether a connection can be made to the our servers. This subcommand can therefore be used to ensure that DNS is available for resolving the hostname of the our data collector host and that there is network connectivity available and that no firewall is blocking access. In connecting to the our servers, the test will create an application under your account called Python Agent Test. Into this application a small amount of simulated web transaction data and errors will be reported. After a period of time this application in your account will be able to be deleted from the Applications list if desired. When this test is run, a log file will be created in the location: /tmp/python-agent-test.log Copy If you need to override this location you can supply the log_file option. To have what would be written to the log file be displayed to your screen, you can use stdout or stderr as the value passed as the log_file option. When using a hosting service such as Heroku where an agent configuration file wouldn't normally be used, this subcommand can still be used to test the connection to us. For Heroku the license key information is defined in an environment variable automatically setup by Heroku when you add the New Relic addon to your Heroku instance. In this case where an environment variable is used to define the license key, to run the connectivity test, pass the value - for the config_file option in place of the path to the agent configuration file. So, to run the command on your Heroku instance you would use: heroku run newrelic-admin validate-config - stdout Copy Note that we have supplied stdout for the log file in this case, else it would be necessary to separately retrieve the log file generated. It is recommended that when setting up the Python agent for the first time, or even perhaps on a new host, that this subcommand be used to test whether data can be reported okay. For more information, see Testing the Python agent. run-program ... Executes the command line for a Python web application given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. Agent configuration when using this method can be provided in two different ways. If using a complete agent configuration file then the location of that configuration can be provided by the NEW_RELIC_CONFIG_FILE environment variable. If you were using gunicorn for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn wsgi:application Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-program gunicorn wsgi:application Copy When specifying the location of the configuration file using the NEW_RELIC_CONFIG_FILE environment variable, the following additional environment variables can be set to customize how the configuration file is processed. NEW_RELIC_ENVIRONMENT: The name of a specific deployment environment. When specified, additional override configuration will be read from a separate deployment section within the configuration file. The section of the configuration file for a specific deployment environment should be named as newrelic:environment where environment is replaced with the name being specified by this environment variable In place of a complete agent configuration file, you can also set environment variables providing only the key agent configuration information. The environment variables which can be set in this case are: NEW_RELIC_LICENSE_KEY - Your New Relic license key. NEW_RELIC_APP_NAME - The name of the application you wish to report data against in the UI. If not defined, this defaults to Python Application. NEW_RELIC_LOG - The path to a file to be used for the agent log. If not defined then no logging will occur. Can also be set to stdout or stderr to have logging go to standard output or standard error for process. NEW_RELIC_LOG_LEVEL - The level at which logging will be output by the agent. If not defined then defaults to info. Possible values, in increasing order of detail, are: critical, error, warning, info and debug. Individual environment variables are used when hosting your application on Heroku. The environment variables will be set automatically as appropriate by the Heroku environment when you add the New Relic addon. It is therefore not necessary when using Heroku to set any of the above environment variables when using the newrelic-admin command with this option from your Procfile. Note that the wrapped program must be using the same Python installation or virtual environment as that which the Python agent package and the newrelic-admin script was installed into. If this is not the case then the wrapper script will have no affect and you may even encounter an error on startup of the Python interpreter due to the newrelic Python package not being able to be found. If using sudo to startup your WSGI application as another user, be aware that the default sudo configuration will generally be such that user environment variables from the shell in which sudo is run will be ignored. In this case you would need to change the sudoers configuration to allow passing of the specific environment variables. Alternatively, create a shell script which sets the environment variables and runs your WSGI application under newrelic-admin. To start up your WSGI application as a different user, then run sudo on that script rather than directly on your WSGI application. The use of an additional wrapper script to set the environment variables and run your WSGI application under newrelic-admin may also be required when using supervisord if any issues are encountered with environment variable settings within the supervisord configuration not being passed through correctly. run-python ... Executes the python executable from the Python installation or virtual environment that newrelic-admin is installed into with the arguments given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. As for run-program subcommand above, environment variables are used to configure the Python agent. If you were using python executable directly for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-python wsgi.py Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-python wsgi.py Copy license-key config_file [ log_file] Outputs the license key which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the license key for the purpose of verifying that the correct value is being used. It may be used with the agent configuration file: newrelic-admin license-key newrelic.ini Copy OR If setting the license key using environment variables, use - as the name of the configuration file: NEW_RELIC_LICENSE_KEY='YOUR-LICENSE-KEY' export NEW_RELIC_LICENSE_KEY newrelic-admin license-key - Copy Output will be in the form: license_key = 'YOUR-LICENSE-KEY' Copy If no license key was found in the agent configuration file or picked up from user environment variables, the output will be: license_key = None Copy network-config config_file [ log_file] Outputs the network configuration which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the network configuration for the purpose of verifying that the correct values are being used. It may be used with the agent configuration file: newrelic-admin network-config newrelic.ini Copy OR If setting any proxy information using environment variables, use - as the name of the configuration file: NEW_RELIC_PROXY_HOST=proxy.example.com export NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT=8888 export NEW_RELIC_PROXY_PORT newrelic-admin network-config - Copy Output will be in the form: host = 'collector.newrelic.com' port = 0 proxy_host = 'proxy.example.com' proxy_port = 8888 proxy_user = None proxy_pass = None ssl = True Copy A value of 0 for port indicates that the port number, either 80 or 443, will be automatically selected based on whether an SSL connection is being used to communicate with our data collector. local-config config_file [ log_file] Outputs the local agent configuration based on built-in defaults, environment variables, and any agent configuration file. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin local-config newrelic.ini Copy OR If setting any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin local-config - Copy server-config config_file [ log_file] Outputs the full configuration for a specific application. This will be the local agent configuration, overridden by any server-side configuration for the specific application. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin server-config newrelic.ini Copy OR If changing any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin server-config - Copy In order to obtain the server-side configuration, this script will force agent registration for the specific application defined by the configuration. If that application does not already appear in the user interface for APM, an entry for it will be created, but no metric data will be reported against it. record-deploy config_file description This is a wrapper around the New Relic REST API to record deployments for your application. You can also record deployments directly via the REST API. To use the command: Add your API key in the agent configuration file (newrelic.ini) by adding a line similar to the following in the [newrelic] section: api_key=substitute-your-api-key-here Copy Call the newrelic-admin command from the command line. (Do not add it to your config file.) using the following subcommand structure: newrelic-admin record-deploy config_file description [revision changelog user] Copy This subcommand has two required arguments: config_file: Path to the config file name description: Text to describe or identify the deployment; for example, the Git commit comments There are also three optional arguments: revision: Identifies a specific revision being deployed changelog: Provides a detailed log of what changes were made user: Identifies the person responsible for the deployment",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.99216,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "sections": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> admin script is used during the <em>installation</em> process. When the <em>Python</em> <em>agent</em> package is installed, the newrelic-admin script is also installed into the bin directory of the <em>Python</em> <em>installation</em> or virtual environment. This document gives more in-depth detail about these uses"
      },
      "id": "6043ebfa28ccbc173f2c6062"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.95006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/agents/python-agent/installation/standard-python-agent-install": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.90451,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Python agent admin script: Advanced usage",
        "Subcommand structure",
        "help <command>",
        "generate-config license_key [output_file]",
        "validate-config config_file [log_file]",
        "run-program ...",
        "run-python ...",
        "license-key config_file [log_file]",
        "network-config config_file [log_file]",
        "local-config config_file [log_file]",
        "server-config config_file [log_file]",
        "record-deploy config_file description"
      ],
      "title": "Python agent admin script: Advanced usage",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "258e608c4952147784dd0b2d59de34e24cc550c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-05-16T09:05:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent admin script is used during the installation process. When the Python agent package is installed, the newrelic-admin script is also installed into the bin directory of the Python installation or virtual environment. This document gives more in-depth detail about these uses of the admin script: Generating the initial agent configuration file Validating your config file Testing the connection to New Relic Wrapping startup of standalone Python web applications Subcommand structure To execute subcommands, provide the name of the subcommand as the first argument to the newrelic-admin script. Then add any options after the name of the subcommand. For example: newrelic-admin help Copy help < command> When executed with no further arguments, this provides a listing of all accepted subcommands: $ newrelic-admin help Usage: newrelic-admin command [options] Type 'newrelic-admin help <command>' for help on any of the commands listed in this document. To view additional details about a subcommand, run the help command with the subcommand and any of its options. For example: $ newrelic-admin help generate-config Usage: newrelic-admin generate-config license_key [output_file] Generates a sample agent configuration file for <license_key> Copy generate-config license_key [ output_file] Generates a sample agent configuration file. The license_key option is your New Relic license key. By default the sample configuration file will be directed to standard output and be displayed on your screen. To capture the output, you can instead save it to a file by giving the name of the file as the output_file option. When the sample agent configuration file is generated, only the license key option in the file is updated. You should still edit the file and make changes to app_name and log_file options as appropriate. For more information, see Python agent installation. If you cannot run the generate-config command to produce the initial agent configuration file, you can download a sample configuration file from download.newrelic.com/python_agent/release/newrelic.ini. validate-config config_file [ log_file] Validates the syntax of an agent configuration file given by the config_file option. This might be the agent configuration generated by generate-config and subsequently edited, or an agent configuration file created by downloading the sample configuration file from the download site. As well as validating the syntax of the configuration file, using the license_key contained in the agent configuration file to identify your account, will also test whether a connection can be made to the our servers. This subcommand can therefore be used to ensure that DNS is available for resolving the hostname of the our data collector host and that there is network connectivity available and that no firewall is blocking access. In connecting to the our servers, the test will create an application under your account called Python Agent Test. Into this application a small amount of simulated web transaction data and errors will be reported. After a period of time this application in your account will be able to be deleted from the Applications list if desired. When this test is run, a log file will be created in the location: /tmp/python-agent-test.log Copy If you need to override this location you can supply the log_file option. To have what would be written to the log file be displayed to your screen, you can use stdout or stderr as the value passed as the log_file option. When using a hosting service such as Heroku where an agent configuration file wouldn't normally be used, this subcommand can still be used to test the connection to us. For Heroku the license key information is defined in an environment variable automatically setup by Heroku when you add the New Relic addon to your Heroku instance. In this case where an environment variable is used to define the license key, to run the connectivity test, pass the value - for the config_file option in place of the path to the agent configuration file. So, to run the command on your Heroku instance you would use: heroku run newrelic-admin validate-config - stdout Copy Note that we have supplied stdout for the log file in this case, else it would be necessary to separately retrieve the log file generated. It is recommended that when setting up the Python agent for the first time, or even perhaps on a new host, that this subcommand be used to test whether data can be reported okay. For more information, see Testing the Python agent. run-program ... Executes the command line for a Python web application given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. Agent configuration when using this method can be provided in two different ways. If using a complete agent configuration file then the location of that configuration can be provided by the NEW_RELIC_CONFIG_FILE environment variable. If you were using gunicorn for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn wsgi:application Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-program gunicorn wsgi:application Copy When specifying the location of the configuration file using the NEW_RELIC_CONFIG_FILE environment variable, the following additional environment variables can be set to customize how the configuration file is processed. NEW_RELIC_ENVIRONMENT: The name of a specific deployment environment. When specified, additional override configuration will be read from a separate deployment section within the configuration file. The section of the configuration file for a specific deployment environment should be named as newrelic:environment where environment is replaced with the name being specified by this environment variable In place of a complete agent configuration file, you can also set environment variables providing only the key agent configuration information. The environment variables which can be set in this case are: NEW_RELIC_LICENSE_KEY - Your New Relic license key. NEW_RELIC_APP_NAME - The name of the application you wish to report data against in the UI. If not defined, this defaults to Python Application. NEW_RELIC_LOG - The path to a file to be used for the agent log. If not defined then no logging will occur. Can also be set to stdout or stderr to have logging go to standard output or standard error for process. NEW_RELIC_LOG_LEVEL - The level at which logging will be output by the agent. If not defined then defaults to info. Possible values, in increasing order of detail, are: critical, error, warning, info and debug. Individual environment variables are used when hosting your application on Heroku. The environment variables will be set automatically as appropriate by the Heroku environment when you add the New Relic addon. It is therefore not necessary when using Heroku to set any of the above environment variables when using the newrelic-admin command with this option from your Procfile. Note that the wrapped program must be using the same Python installation or virtual environment as that which the Python agent package and the newrelic-admin script was installed into. If this is not the case then the wrapper script will have no affect and you may even encounter an error on startup of the Python interpreter due to the newrelic Python package not being able to be found. If using sudo to startup your WSGI application as another user, be aware that the default sudo configuration will generally be such that user environment variables from the shell in which sudo is run will be ignored. In this case you would need to change the sudoers configuration to allow passing of the specific environment variables. Alternatively, create a shell script which sets the environment variables and runs your WSGI application under newrelic-admin. To start up your WSGI application as a different user, then run sudo on that script rather than directly on your WSGI application. The use of an additional wrapper script to set the environment variables and run your WSGI application under newrelic-admin may also be required when using supervisord if any issues are encountered with environment variable settings within the supervisord configuration not being passed through correctly. run-python ... Executes the python executable from the Python installation or virtual environment that newrelic-admin is installed into with the arguments given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. As for run-program subcommand above, environment variables are used to configure the Python agent. If you were using python executable directly for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-python wsgi.py Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-python wsgi.py Copy license-key config_file [ log_file] Outputs the license key which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the license key for the purpose of verifying that the correct value is being used. It may be used with the agent configuration file: newrelic-admin license-key newrelic.ini Copy OR If setting the license key using environment variables, use - as the name of the configuration file: NEW_RELIC_LICENSE_KEY='YOUR-LICENSE-KEY' export NEW_RELIC_LICENSE_KEY newrelic-admin license-key - Copy Output will be in the form: license_key = 'YOUR-LICENSE-KEY' Copy If no license key was found in the agent configuration file or picked up from user environment variables, the output will be: license_key = None Copy network-config config_file [ log_file] Outputs the network configuration which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the network configuration for the purpose of verifying that the correct values are being used. It may be used with the agent configuration file: newrelic-admin network-config newrelic.ini Copy OR If setting any proxy information using environment variables, use - as the name of the configuration file: NEW_RELIC_PROXY_HOST=proxy.example.com export NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT=8888 export NEW_RELIC_PROXY_PORT newrelic-admin network-config - Copy Output will be in the form: host = 'collector.newrelic.com' port = 0 proxy_host = 'proxy.example.com' proxy_port = 8888 proxy_user = None proxy_pass = None ssl = True Copy A value of 0 for port indicates that the port number, either 80 or 443, will be automatically selected based on whether an SSL connection is being used to communicate with our data collector. local-config config_file [ log_file] Outputs the local agent configuration based on built-in defaults, environment variables, and any agent configuration file. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin local-config newrelic.ini Copy OR If setting any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin local-config - Copy server-config config_file [ log_file] Outputs the full configuration for a specific application. This will be the local agent configuration, overridden by any server-side configuration for the specific application. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin server-config newrelic.ini Copy OR If changing any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin server-config - Copy In order to obtain the server-side configuration, this script will force agent registration for the specific application defined by the configuration. If that application does not already appear in the user interface for APM, an entry for it will be created, but no metric data will be reported against it. record-deploy config_file description This is a wrapper around the New Relic REST API to record deployments for your application. You can also record deployments directly via the REST API. To use the command: Add your API key in the agent configuration file (newrelic.ini) by adding a line similar to the following in the [newrelic] section: api_key=substitute-your-api-key-here Copy Call the newrelic-admin command from the command line. (Do not add it to your config file.) using the following subcommand structure: newrelic-admin record-deploy config_file description [revision changelog user] Copy This subcommand has two required arguments: config_file: Path to the config file name description: Text to describe or identify the deployment; for example, the Git commit comments There are also three optional arguments: revision: Identifies a specific revision being deployed changelog: Provides a detailed log of what changes were made user: Identifies the person responsible for the deployment",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.99215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "sections": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> admin script is used during the <em>installation</em> process. When the <em>Python</em> <em>agent</em> package is installed, the newrelic-admin script is also installed into the bin directory of the <em>Python</em> <em>installation</em> or virtual environment. This document gives more in-depth detail about these uses"
      },
      "id": "6043ebfa28ccbc173f2c6062"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.95006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    }
  ],
  "/docs/agents/python-agent/installation/uninstall-python-agent": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.90451,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ") The <em>Python</em> <em>agent</em> package is listed on PyPi at http:&#x2F;&#x2F;pypi.<em>python</em>.org&#x2F;pypi&#x2F;newrelic. To update with a specific package, follow the corresponding instructions: <em>Python</em> package <em>Installation</em> procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Python agent admin script: Advanced usage",
        "Subcommand structure",
        "help <command>",
        "generate-config license_key [output_file]",
        "validate-config config_file [log_file]",
        "run-program ...",
        "run-python ...",
        "license-key config_file [log_file]",
        "network-config config_file [log_file]",
        "local-config config_file [log_file]",
        "server-config config_file [log_file]",
        "record-deploy config_file description"
      ],
      "title": "Python agent admin script: Advanced usage",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "258e608c4952147784dd0b2d59de34e24cc550c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-05-16T09:05:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent admin script is used during the installation process. When the Python agent package is installed, the newrelic-admin script is also installed into the bin directory of the Python installation or virtual environment. This document gives more in-depth detail about these uses of the admin script: Generating the initial agent configuration file Validating your config file Testing the connection to New Relic Wrapping startup of standalone Python web applications Subcommand structure To execute subcommands, provide the name of the subcommand as the first argument to the newrelic-admin script. Then add any options after the name of the subcommand. For example: newrelic-admin help Copy help < command> When executed with no further arguments, this provides a listing of all accepted subcommands: $ newrelic-admin help Usage: newrelic-admin command [options] Type 'newrelic-admin help <command>' for help on any of the commands listed in this document. To view additional details about a subcommand, run the help command with the subcommand and any of its options. For example: $ newrelic-admin help generate-config Usage: newrelic-admin generate-config license_key [output_file] Generates a sample agent configuration file for <license_key> Copy generate-config license_key [ output_file] Generates a sample agent configuration file. The license_key option is your New Relic license key. By default the sample configuration file will be directed to standard output and be displayed on your screen. To capture the output, you can instead save it to a file by giving the name of the file as the output_file option. When the sample agent configuration file is generated, only the license key option in the file is updated. You should still edit the file and make changes to app_name and log_file options as appropriate. For more information, see Python agent installation. If you cannot run the generate-config command to produce the initial agent configuration file, you can download a sample configuration file from download.newrelic.com/python_agent/release/newrelic.ini. validate-config config_file [ log_file] Validates the syntax of an agent configuration file given by the config_file option. This might be the agent configuration generated by generate-config and subsequently edited, or an agent configuration file created by downloading the sample configuration file from the download site. As well as validating the syntax of the configuration file, using the license_key contained in the agent configuration file to identify your account, will also test whether a connection can be made to the our servers. This subcommand can therefore be used to ensure that DNS is available for resolving the hostname of the our data collector host and that there is network connectivity available and that no firewall is blocking access. In connecting to the our servers, the test will create an application under your account called Python Agent Test. Into this application a small amount of simulated web transaction data and errors will be reported. After a period of time this application in your account will be able to be deleted from the Applications list if desired. When this test is run, a log file will be created in the location: /tmp/python-agent-test.log Copy If you need to override this location you can supply the log_file option. To have what would be written to the log file be displayed to your screen, you can use stdout or stderr as the value passed as the log_file option. When using a hosting service such as Heroku where an agent configuration file wouldn't normally be used, this subcommand can still be used to test the connection to us. For Heroku the license key information is defined in an environment variable automatically setup by Heroku when you add the New Relic addon to your Heroku instance. In this case where an environment variable is used to define the license key, to run the connectivity test, pass the value - for the config_file option in place of the path to the agent configuration file. So, to run the command on your Heroku instance you would use: heroku run newrelic-admin validate-config - stdout Copy Note that we have supplied stdout for the log file in this case, else it would be necessary to separately retrieve the log file generated. It is recommended that when setting up the Python agent for the first time, or even perhaps on a new host, that this subcommand be used to test whether data can be reported okay. For more information, see Testing the Python agent. run-program ... Executes the command line for a Python web application given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. Agent configuration when using this method can be provided in two different ways. If using a complete agent configuration file then the location of that configuration can be provided by the NEW_RELIC_CONFIG_FILE environment variable. If you were using gunicorn for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn wsgi:application Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-program gunicorn wsgi:application Copy When specifying the location of the configuration file using the NEW_RELIC_CONFIG_FILE environment variable, the following additional environment variables can be set to customize how the configuration file is processed. NEW_RELIC_ENVIRONMENT: The name of a specific deployment environment. When specified, additional override configuration will be read from a separate deployment section within the configuration file. The section of the configuration file for a specific deployment environment should be named as newrelic:environment where environment is replaced with the name being specified by this environment variable In place of a complete agent configuration file, you can also set environment variables providing only the key agent configuration information. The environment variables which can be set in this case are: NEW_RELIC_LICENSE_KEY - Your New Relic license key. NEW_RELIC_APP_NAME - The name of the application you wish to report data against in the UI. If not defined, this defaults to Python Application. NEW_RELIC_LOG - The path to a file to be used for the agent log. If not defined then no logging will occur. Can also be set to stdout or stderr to have logging go to standard output or standard error for process. NEW_RELIC_LOG_LEVEL - The level at which logging will be output by the agent. If not defined then defaults to info. Possible values, in increasing order of detail, are: critical, error, warning, info and debug. Individual environment variables are used when hosting your application on Heroku. The environment variables will be set automatically as appropriate by the Heroku environment when you add the New Relic addon. It is therefore not necessary when using Heroku to set any of the above environment variables when using the newrelic-admin command with this option from your Procfile. Note that the wrapped program must be using the same Python installation or virtual environment as that which the Python agent package and the newrelic-admin script was installed into. If this is not the case then the wrapper script will have no affect and you may even encounter an error on startup of the Python interpreter due to the newrelic Python package not being able to be found. If using sudo to startup your WSGI application as another user, be aware that the default sudo configuration will generally be such that user environment variables from the shell in which sudo is run will be ignored. In this case you would need to change the sudoers configuration to allow passing of the specific environment variables. Alternatively, create a shell script which sets the environment variables and runs your WSGI application under newrelic-admin. To start up your WSGI application as a different user, then run sudo on that script rather than directly on your WSGI application. The use of an additional wrapper script to set the environment variables and run your WSGI application under newrelic-admin may also be required when using supervisord if any issues are encountered with environment variable settings within the supervisord configuration not being passed through correctly. run-python ... Executes the python executable from the Python installation or virtual environment that newrelic-admin is installed into with the arguments given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. As for run-program subcommand above, environment variables are used to configure the Python agent. If you were using python executable directly for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-python wsgi.py Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-python wsgi.py Copy license-key config_file [ log_file] Outputs the license key which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the license key for the purpose of verifying that the correct value is being used. It may be used with the agent configuration file: newrelic-admin license-key newrelic.ini Copy OR If setting the license key using environment variables, use - as the name of the configuration file: NEW_RELIC_LICENSE_KEY='YOUR-LICENSE-KEY' export NEW_RELIC_LICENSE_KEY newrelic-admin license-key - Copy Output will be in the form: license_key = 'YOUR-LICENSE-KEY' Copy If no license key was found in the agent configuration file or picked up from user environment variables, the output will be: license_key = None Copy network-config config_file [ log_file] Outputs the network configuration which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the network configuration for the purpose of verifying that the correct values are being used. It may be used with the agent configuration file: newrelic-admin network-config newrelic.ini Copy OR If setting any proxy information using environment variables, use - as the name of the configuration file: NEW_RELIC_PROXY_HOST=proxy.example.com export NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT=8888 export NEW_RELIC_PROXY_PORT newrelic-admin network-config - Copy Output will be in the form: host = 'collector.newrelic.com' port = 0 proxy_host = 'proxy.example.com' proxy_port = 8888 proxy_user = None proxy_pass = None ssl = True Copy A value of 0 for port indicates that the port number, either 80 or 443, will be automatically selected based on whether an SSL connection is being used to communicate with our data collector. local-config config_file [ log_file] Outputs the local agent configuration based on built-in defaults, environment variables, and any agent configuration file. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin local-config newrelic.ini Copy OR If setting any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin local-config - Copy server-config config_file [ log_file] Outputs the full configuration for a specific application. This will be the local agent configuration, overridden by any server-side configuration for the specific application. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin server-config newrelic.ini Copy OR If changing any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin server-config - Copy In order to obtain the server-side configuration, this script will force agent registration for the specific application defined by the configuration. If that application does not already appear in the user interface for APM, an entry for it will be created, but no metric data will be reported against it. record-deploy config_file description This is a wrapper around the New Relic REST API to record deployments for your application. You can also record deployments directly via the REST API. To use the command: Add your API key in the agent configuration file (newrelic.ini) by adding a line similar to the following in the [newrelic] section: api_key=substitute-your-api-key-here Copy Call the newrelic-admin command from the command line. (Do not add it to your config file.) using the following subcommand structure: newrelic-admin record-deploy config_file description [revision changelog user] Copy This subcommand has two required arguments: config_file: Path to the config file name description: Text to describe or identify the deployment; for example, the Git commit comments There are also three optional arguments: revision: Identifies a specific revision being deployed changelog: Provides a detailed log of what changes were made user: Identifies the person responsible for the deployment",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.99215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "sections": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> admin script is used during the <em>installation</em> process. When the <em>Python</em> <em>agent</em> package is installed, the newrelic-admin script is also installed into the bin directory of the <em>Python</em> <em>installation</em> or virtual environment. This document gives more in-depth detail about these uses"
      },
      "id": "6043ebfa28ccbc173f2c6062"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Tip",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-03-11T06:45:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in a Google App Engine flexible environment. For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.53546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Tip To use <em>Python</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    }
  ],
  "/docs/agents/python-agent/installation/update-python-agent": [
    {
      "sections": [
        "Python agent admin script: Advanced usage",
        "Subcommand structure",
        "help <command>",
        "generate-config license_key [output_file]",
        "validate-config config_file [log_file]",
        "run-program ...",
        "run-python ...",
        "license-key config_file [log_file]",
        "network-config config_file [log_file]",
        "local-config config_file [log_file]",
        "server-config config_file [log_file]",
        "record-deploy config_file description"
      ],
      "title": "Python agent admin script: Advanced usage",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "258e608c4952147784dd0b2d59de34e24cc550c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/python-agent-admin-script-advanced-usage/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-05-16T09:05:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent admin script is used during the installation process. When the Python agent package is installed, the newrelic-admin script is also installed into the bin directory of the Python installation or virtual environment. This document gives more in-depth detail about these uses of the admin script: Generating the initial agent configuration file Validating your config file Testing the connection to New Relic Wrapping startup of standalone Python web applications Subcommand structure To execute subcommands, provide the name of the subcommand as the first argument to the newrelic-admin script. Then add any options after the name of the subcommand. For example: newrelic-admin help Copy help < command> When executed with no further arguments, this provides a listing of all accepted subcommands: $ newrelic-admin help Usage: newrelic-admin command [options] Type 'newrelic-admin help <command>' for help on any of the commands listed in this document. To view additional details about a subcommand, run the help command with the subcommand and any of its options. For example: $ newrelic-admin help generate-config Usage: newrelic-admin generate-config license_key [output_file] Generates a sample agent configuration file for <license_key> Copy generate-config license_key [ output_file] Generates a sample agent configuration file. The license_key option is your New Relic license key. By default the sample configuration file will be directed to standard output and be displayed on your screen. To capture the output, you can instead save it to a file by giving the name of the file as the output_file option. When the sample agent configuration file is generated, only the license key option in the file is updated. You should still edit the file and make changes to app_name and log_file options as appropriate. For more information, see Python agent installation. If you cannot run the generate-config command to produce the initial agent configuration file, you can download a sample configuration file from download.newrelic.com/python_agent/release/newrelic.ini. validate-config config_file [ log_file] Validates the syntax of an agent configuration file given by the config_file option. This might be the agent configuration generated by generate-config and subsequently edited, or an agent configuration file created by downloading the sample configuration file from the download site. As well as validating the syntax of the configuration file, using the license_key contained in the agent configuration file to identify your account, will also test whether a connection can be made to the our servers. This subcommand can therefore be used to ensure that DNS is available for resolving the hostname of the our data collector host and that there is network connectivity available and that no firewall is blocking access. In connecting to the our servers, the test will create an application under your account called Python Agent Test. Into this application a small amount of simulated web transaction data and errors will be reported. After a period of time this application in your account will be able to be deleted from the Applications list if desired. When this test is run, a log file will be created in the location: /tmp/python-agent-test.log Copy If you need to override this location you can supply the log_file option. To have what would be written to the log file be displayed to your screen, you can use stdout or stderr as the value passed as the log_file option. When using a hosting service such as Heroku where an agent configuration file wouldn't normally be used, this subcommand can still be used to test the connection to us. For Heroku the license key information is defined in an environment variable automatically setup by Heroku when you add the New Relic addon to your Heroku instance. In this case where an environment variable is used to define the license key, to run the connectivity test, pass the value - for the config_file option in place of the path to the agent configuration file. So, to run the command on your Heroku instance you would use: heroku run newrelic-admin validate-config - stdout Copy Note that we have supplied stdout for the log file in this case, else it would be necessary to separately retrieve the log file generated. It is recommended that when setting up the Python agent for the first time, or even perhaps on a new host, that this subcommand be used to test whether data can be reported okay. For more information, see Testing the Python agent. run-program ... Executes the command line for a Python web application given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. Agent configuration when using this method can be provided in two different ways. If using a complete agent configuration file then the location of that configuration can be provided by the NEW_RELIC_CONFIG_FILE environment variable. If you were using gunicorn for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program gunicorn wsgi:application Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-program gunicorn wsgi:application Copy When specifying the location of the configuration file using the NEW_RELIC_CONFIG_FILE environment variable, the following additional environment variables can be set to customize how the configuration file is processed. NEW_RELIC_ENVIRONMENT: The name of a specific deployment environment. When specified, additional override configuration will be read from a separate deployment section within the configuration file. The section of the configuration file for a specific deployment environment should be named as newrelic:environment where environment is replaced with the name being specified by this environment variable In place of a complete agent configuration file, you can also set environment variables providing only the key agent configuration information. The environment variables which can be set in this case are: NEW_RELIC_LICENSE_KEY - Your New Relic license key. NEW_RELIC_APP_NAME - The name of the application you wish to report data against in the UI. If not defined, this defaults to Python Application. NEW_RELIC_LOG - The path to a file to be used for the agent log. If not defined then no logging will occur. Can also be set to stdout or stderr to have logging go to standard output or standard error for process. NEW_RELIC_LOG_LEVEL - The level at which logging will be output by the agent. If not defined then defaults to info. Possible values, in increasing order of detail, are: critical, error, warning, info and debug. Individual environment variables are used when hosting your application on Heroku. The environment variables will be set automatically as appropriate by the Heroku environment when you add the New Relic addon. It is therefore not necessary when using Heroku to set any of the above environment variables when using the newrelic-admin command with this option from your Procfile. Note that the wrapped program must be using the same Python installation or virtual environment as that which the Python agent package and the newrelic-admin script was installed into. If this is not the case then the wrapper script will have no affect and you may even encounter an error on startup of the Python interpreter due to the newrelic Python package not being able to be found. If using sudo to startup your WSGI application as another user, be aware that the default sudo configuration will generally be such that user environment variables from the shell in which sudo is run will be ignored. In this case you would need to change the sudoers configuration to allow passing of the specific environment variables. Alternatively, create a shell script which sets the environment variables and runs your WSGI application under newrelic-admin. To start up your WSGI application as a different user, then run sudo on that script rather than directly on your WSGI application. The use of an additional wrapper script to set the environment variables and run your WSGI application under newrelic-admin may also be required when using supervisord if any issues are encountered with environment variable settings within the supervisord configuration not being passed through correctly. run-python ... Executes the python executable from the Python installation or virtual environment that newrelic-admin is installed into with the arguments given as ... but forces the initialization of the agent automatically at startup. This is a shortcut method for starting up a Python web application without needing to manually make changes to the web application to add code to specifically initialize the Python agent. It can be used in any situation where a Python web framework or WSGI server is used where instrumentation is being automatically added to wrap the WSGI application entry point. In other words, in situations where only the agent initialization code needed to be added. As for run-program subcommand above, environment variables are used to configure the Python agent. If you were using python executable directly for example, you could say: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-python wsgi.py Copy OR NEW_RELIC_CONFIG_FILE=newrelic.ini export NEW_RELIC_CONFIG_FILE newrelic-admin run-python wsgi.py Copy license-key config_file [ log_file] Outputs the license key which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the license key for the purpose of verifying that the correct value is being used. It may be used with the agent configuration file: newrelic-admin license-key newrelic.ini Copy OR If setting the license key using environment variables, use - as the name of the configuration file: NEW_RELIC_LICENSE_KEY='YOUR-LICENSE-KEY' export NEW_RELIC_LICENSE_KEY newrelic-admin license-key - Copy Output will be in the form: license_key = 'YOUR-LICENSE-KEY' Copy If no license key was found in the agent configuration file or picked up from user environment variables, the output will be: license_key = None Copy network-config config_file [ log_file] Outputs the network configuration which will be used. This can be used in any startup scripts prior to starting up of the actual WSGI application to log the network configuration for the purpose of verifying that the correct values are being used. It may be used with the agent configuration file: newrelic-admin network-config newrelic.ini Copy OR If setting any proxy information using environment variables, use - as the name of the configuration file: NEW_RELIC_PROXY_HOST=proxy.example.com export NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT=8888 export NEW_RELIC_PROXY_PORT newrelic-admin network-config - Copy Output will be in the form: host = 'collector.newrelic.com' port = 0 proxy_host = 'proxy.example.com' proxy_port = 8888 proxy_user = None proxy_pass = None ssl = True Copy A value of 0 for port indicates that the port number, either 80 or 443, will be automatically selected based on whether an SSL connection is being used to communicate with our data collector. local-config config_file [ log_file] Outputs the local agent configuration based on built-in defaults, environment variables, and any agent configuration file. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin local-config newrelic.ini Copy OR If setting any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin local-config - Copy server-config config_file [ log_file] Outputs the full configuration for a specific application. This will be the local agent configuration, overridden by any server-side configuration for the specific application. This information may be requested by our technical support when trying to debug any agent startup issues. It may be used with the agent configuration file: newrelic-admin server-config newrelic.ini Copy OR If changing any settings using environment variables, you can use - as the name of the configuration file: newrelic-admin server-config - Copy In order to obtain the server-side configuration, this script will force agent registration for the specific application defined by the configuration. If that application does not already appear in the user interface for APM, an entry for it will be created, but no metric data will be reported against it. record-deploy config_file description This is a wrapper around the New Relic REST API to record deployments for your application. You can also record deployments directly via the REST API. To use the command: Add your API key in the agent configuration file (newrelic.ini) by adding a line similar to the following in the [newrelic] section: api_key=substitute-your-api-key-here Copy Call the newrelic-admin command from the command line. (Do not add it to your config file.) using the following subcommand structure: newrelic-admin record-deploy config_file description [revision changelog user] Copy This subcommand has two required arguments: config_file: Path to the config file name description: Text to describe or identify the deployment; for example, the Git commit comments There are also three optional arguments: revision: Identifies a specific revision being deployed changelog: Provides a detailed log of what changes were made user: Identifies the person responsible for the deployment",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.99215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "sections": "<em>Python</em> <em>agent</em> admin script: Advanced usage",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> admin script is used during the <em>installation</em> process. When the <em>Python</em> <em>agent</em> package is installed, the newrelic-admin script is also installed into the bin directory of the <em>Python</em> <em>installation</em> or virtual environment. This document gives more in-depth detail about these uses"
      },
      "id": "6043ebfa28ccbc173f2c6062"
    },
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.95006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "This document explains how to uninstall the <em>Python</em> <em>agent</em>. For instructions on how to temporarily disable the <em>agent</em>, see Disable the <em>agent</em>. To uninstall your <em>Python</em> <em>agent</em>: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Standard Python agent install",
        "Tip",
        "Standard installation",
        "Other options",
        "What's next?"
      ],
      "title": "Standard Python agent install",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "787db0b3dafc47f8472c02af8ec37e0d9bd6cb68",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/standard-python-agent-install/",
      "published_at": "2021-07-02T11:06:00Z",
      "updated_at": "2021-03-11T06:45:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic Python agent installation for our supported frameworks. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Add Python data Standard installation These instructions are for applications on frameworks that the Python agent automatically instruments. If you want to monitor non-web Python scripts, custom background tasks, or an application on a non-auto-instrumented framework, see our documentation about monitoring non-web scripts or functions. If you are using Docker, install the agent within each container. To install the New Relic Python agent for an application on an auto-instrumented framework: Make sure you have your New Relic license key. (If you don't yet have a New Relic account, sign up to get one.) Install the newrelic Python package using pip by running: pip install newrelic Copy Generate the agent configuration file by running the command: newrelic-admin generate-config YOUR_LICENSE_KEY newrelic.ini Copy If you control how your web application or WSGI server is started, use the following New Relic admin script command in front of your usual startup command options: NEW_RELIC_CONFIG_FILE=newrelic.ini newrelic-admin run-program YOUR_COMMAND_OPTIONS Copy If you cannot run the admin script in this way, please read the advanced install instructions for more context and other install options. Start or restart your Python web application or WSGI server. Wait five minutes, then go to the New Relic UI to view your data. For more detailed installation procedures and helpful context, see Python agent installation. Other options If you cannot use the standard install, or if you want more details and context for the install procedures, see our advanced installation documentation. You can also install the Python agent in a Google App Engine flexible environment. For more information, see Compatibility and requirements. What's next? For suggestions on what to do after installing the agent, see Next steps.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 93.53546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "sections": "Standard <em>Python</em> <em>agent</em> <em>install</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Our <em>Python</em> <em>agent</em> auto-instruments your code so you can start monitoring applications. You can use our launcher, or follow the instructions in this document to complete a basic <em>Python</em> <em>agent</em> <em>installation</em> for our supported frameworks. Tip To use <em>Python</em> or any other <em>agent</em>, as well as the rest of our"
      },
      "id": "6043ff58e7b9d2aca85799b8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/acceptdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97612,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72992,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/acceptdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97612,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72992,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomparameter-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97612,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72992,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04881,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomparameters-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97612,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72992,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04881,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/addcustomspanattribute-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.9761,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.7299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04881,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/application-python-agent-api": [
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.7299,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04881,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    },
    {
      "sections": [
        "notice_error (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Example using boolean",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "notice_error (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c809fc97a1765c8f80d06ed26bb047bf22574175",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/noticeerror-python-agent-api/",
      "published_at": "2021-07-02T10:51:52Z",
      "updated_at": "2021-05-27T01:05:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.notice_error(error=None, attributes={}, expected=None, ignore=None, status_code=None, application=None) Copy Records details of a Python exception as an error. Description By default, the Python agent only reports unhandled exceptions. Use notice_error to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the currently handled exception will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When notice_error() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, notice_error will require no parameters. Parameter Description error tuple Optional and rarely used. A tuple containing exception information (exception_class, exception_instance, traceback) returned from sys.exc_info(). attributes dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. expected boolean, iterable [String] , callable(exception_class, exception_instance, traceback)->boolean Optional. Errors to mark as expected can be passed in as an iterable of strings in the form module:class. This value can also be a callable or a Boolean indicating whether the error is expected. These errors will be reported to the UI but will not affect Apdex score or error rate. ignore boolean, iterable [String] , callable(exception_class, exception_instance, traceback)->boolean Optional. Errors to ignore can be passed in as an iterable of strings in the form module:class. This value can also be a callable or a Boolean indicating whether the error should be ignored. Useful when certain types of exceptions should always be ignored and never recorded. status_code string, integer, callable(exception_class, exception_instance, traceback) Optional. The exception status code. This value can be a string, integer, or a callable that takes in exception information (exception_class, exception_instance, traceback) returned from sys.exc_info() and returns the status code as an integer. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In a large majority of cases, you won't need to pass any parameters. You would just call the following where you want to report an exception: newrelic.agent.notice_error() Copy Example using boolean An example of notice_error using a boolean value. This indicates that an error should be expected. newrelic.agent.notice_error(expected=True) Copy Call with sys.exc_info() tuple and additional parameters An example of notice_error using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.notice_error(attributes={'my_special_exception': True}, ignore=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.notice_error(ignore=_ignore_errors) Copy If the exception is to be ignored/expected, set the return value for the callable to True. Return False if the exception should never be ignored/ expected regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored/ expected. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.07437,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "notice_error (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "notice_error (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.notice_error(error=None, attributes={}, expected=None, ignore=None, status_code=None, application=None) Copy Records details of a <em>Python</em> exception as an error. Description By default, the <em>Python</em> <em>agent</em> only reports unhandled exceptions. Use notice_error to record any <em>Python</em>"
      },
      "id": "60aef069e7b9d255cd3d991c"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/applicationsettings-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.9761,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72989,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/asgiapplication-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.9761,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72989,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/backgroundtask-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.9761,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72989,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/callablename-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72989,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/capturerequestparams-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72989,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0488,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/createdistributedtracepayload-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/currenttransaction-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97609,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datasourcefactory-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datasourcegenerator-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04878,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/datastoretrace-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04877,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/disablebrowserautorum-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04877,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/endoftransaction-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04877,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/externaltrace-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97606,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04877,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/functiontrace-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97606,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72986,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04877,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getbrowsertimingfooter-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97606,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04877,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getbrowsertimingheader-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97606,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04877,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/getlinkingmetadata-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72983,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/globalsettings-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72983,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/ignoretransaction-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72983,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/index": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 684.63745,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 633.5844,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 605.7823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> <em>API</em> You can use the <em>Python</em> <em>agent</em> <em>API</em> to monitor any ASGI server or framework. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/initialize-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72983,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04875,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/insertdistributedtraceheaders-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72981,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04874,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/messagetrace-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97604,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72981,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04874,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/messagetransaction-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97603,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72981,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04874,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/noticeerror-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97603,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72981,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04874,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustomevent-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.7298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04872,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustommetric-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.7298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04872,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordcustommetrics-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.7298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04872,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.7298,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "notice_error (Python agent API)",
        "Syntax",
        "Description",
        "Parameters",
        "Tip",
        "Return values",
        "Examples",
        "Simple example of reporting exceptions",
        "Example using boolean",
        "Call with sys.exc_info() tuple and additional parameters",
        "Example using callback"
      ],
      "title": "notice_error (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "c809fc97a1765c8f80d06ed26bb047bf22574175",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/noticeerror-python-agent-api/",
      "published_at": "2021-07-02T10:51:52Z",
      "updated_at": "2021-05-27T01:05:44Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.notice_error(error=None, attributes={}, expected=None, ignore=None, status_code=None, application=None) Copy Records details of a Python exception as an error. Description By default, the Python agent only reports unhandled exceptions. Use notice_error to record any Python exception as an error, which can then be found in New Relic One. If no parameters are provided, the details of the currently handled exception will be used. You can record up to five distinct exceptions per transaction, and up to 20 total exceptions across all transactions per harvest cycle. When notice_error() is called within the context of a monitored web request or background task, the details of the exception will be reported against the application that the request or task is being reported to. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application keyword argument is provided and an application object corresponding to the application against which the exception should be recorded is provided. A suitable application object can be obtained using the newrelic.agent.application() function. Parameters Tip In almost all cases, notice_error will require no parameters. Parameter Description error tuple Optional and rarely used. A tuple containing exception information (exception_class, exception_instance, traceback) returned from sys.exc_info(). attributes dict Optional. Custom attributes to add to the error event (in addition to any custom attributes already added to the transaction). If high security mode is enabled, this will not work. expected boolean, iterable [String] , callable(exception_class, exception_instance, traceback)->boolean Optional. Errors to mark as expected can be passed in as an iterable of strings in the form module:class. This value can also be a callable or a Boolean indicating whether the error is expected. These errors will be reported to the UI but will not affect Apdex score or error rate. ignore boolean, iterable [String] , callable(exception_class, exception_instance, traceback)->boolean Optional. Errors to ignore can be passed in as an iterable of strings in the form module:class. This value can also be a callable or a Boolean indicating whether the error should be ignored. Useful when certain types of exceptions should always be ignored and never recorded. status_code string, integer, callable(exception_class, exception_instance, traceback) Optional. The exception status code. This value can be a string, integer, or a callable that takes in exception information (exception_class, exception_instance, traceback) returned from sys.exc_info() and returns the status code as an integer. application application object Optional. If called outside of the context of a monitored web request or background task, the call will be ignored unless the application object is provided. Return values None. Examples Simple example of reporting exceptions In a large majority of cases, you won't need to pass any parameters. You would just call the following where you want to report an exception: newrelic.agent.notice_error() Copy Example using boolean An example of notice_error using a boolean value. This indicates that an error should be expected. newrelic.agent.notice_error(expected=True) Copy Call with sys.exc_info() tuple and additional parameters An example of notice_error using sys.exc_info() data: def complex_ignore_errors(exc, val, tb): # do some logic here return False newrelic.agent.notice_error(attributes={'my_special_exception': True}, ignore=complex_ignore_errors) Copy Example using callback If you need to filter exceptions dynamically based on the attributes of a specific exception type, you can supply a callback function: def _ignore_errors(exc, value, tb): if instance(value, HTTPError): if value.status == 404: return True newrelic.agent.notice_error(ignore=_ignore_errors) Copy If the exception is to be ignored/expected, set the return value for the callable to True. Return False if the exception should never be ignored/ expected regardless of any other checks, and None if subsequent checks and inbuilt rules should determine if the exception should be ignored/ expected. A callback would normally return either True or None.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.07428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "notice_error (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "notice_error (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.notice_error(error=None, attributes={}, expected=None, ignore=None, status_code=None, application=None) Copy Records details of a <em>Python</em> exception as an error. Description By default, the <em>Python</em> <em>agent</em> only reports unhandled exceptions. Use notice_error to record any <em>Python</em>"
      },
      "id": "60aef069e7b9d255cd3d991c"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/registerapplication-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72978,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/registerdatasource-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72978,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/setbackgroundtask-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72978,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/settransactionname-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/shutdownagent-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/suppressapdexmetric-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/suppresstransactiontrace-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.976,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.0487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/webtransaction": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97598,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04869,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/python-agent-api/wsgiapplication-python-agent-api": [
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-07-02T10:47:18Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 141.97598,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-07-02T10:43:00Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.72975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> <em>API</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> <em>API</em> allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> <em>API</em> to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> <em>API</em> calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-07-02T12:05:44Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.04869,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/supported-features/browser-monitoring-python-agent": [
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-07-02T12:07:54Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.50957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    },
    {
      "sections": [
        "Optional manual Browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags",
        "For more help"
      ],
      "title": "Optional manual Browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-07-02T12:07:53Z",
      "updated_at": "2021-03-16T06:40:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy For more help Additional documentation resources include: Browser monitoring (overview of Browser monitoring features) Compatibility and requirements (prerequisites for your app to use Browser monitoring, including agent requirements)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.30663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python message queues",
        "Requirements",
        "Caution",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Python message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "d17445381d0c83f42a8149dd361809d0d8d29c7b",
      "image": "https://docs.newrelic.com/static/5569176f12188e447753bcd1761eee95/8c557/rabbitmq-transaction-task.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-message-queues/",
      "published_at": "2021-07-02T12:09:29Z",
      "updated_at": "2021-03-11T04:35:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports the Pika RabbitMQ client library, giving you visibility into the performance of your message processing, for both incoming and outgoing messages. The New Relic UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. Requirements Requires Python agent version 2.88.0.72 or higher. Caution Message tasks are not started for consumers using TornadoConnection. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The RabbitMQ Pika client library allows Python applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. The Python agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ basic_publish basic_get basic_consume (callback) View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). Transaction traces also provide additional details for messages. Tip You can select transaction traces from the app's Summary or Transactions pages in APM. The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > (select an app) > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Here is an example: one.newrelic.com > APM > (select an app) > (select a transaction trace): In this example, the selected transaction trace's Messages tab lists the RabbitMQ message details.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.95944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> message queues",
        "sections": "<em>Python</em> message queues",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> supports the Pika RabbitMQ client library, giving you visibility into the performance of your message processing, for both incoming and outgoing messages. The New Relic UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "604402ade7b9d2b2005799ba"
    }
  ],
  "/docs/agents/python-agent/supported-features/cross-application-tracing": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-07-02T11:09:21Z",
      "updated_at": "2021-03-11T06:50:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add Browser monitoring to your webpages either automatically or manually. To enable Browser monitoring in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Python agent. To use the Browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting Browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the Browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.66985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-07-02T12:07:54Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.50957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    },
    {
      "sections": [
        "Optional manual Browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags",
        "For more help"
      ],
      "title": "Optional manual Browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-07-02T12:07:53Z",
      "updated_at": "2021-03-16T06:40:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy For more help Additional documentation resources include: Browser monitoring (overview of Browser monitoring features) Compatibility and requirements (prerequisites for your app to use Browser monitoring, including agent requirements)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.30663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    }
  ],
  "/docs/agents/python-agent/supported-features/monitor-non-web-scripts-worker-processes-tasks-functions": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-07-02T11:09:21Z",
      "updated_at": "2021-03-11T06:50:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add Browser monitoring to your webpages either automatically or manually. To enable Browser monitoring in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Python agent. To use the Browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting Browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the Browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.66985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-07-02T12:07:54Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.50957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    },
    {
      "sections": [
        "Optional manual Browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags",
        "For more help"
      ],
      "title": "Optional manual Browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-07-02T12:07:53Z",
      "updated_at": "2021-03-16T06:40:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy For more help Additional documentation resources include: Browser monitoring (overview of Browser monitoring features) Compatibility and requirements (prerequisites for your app to use Browser monitoring, including agent requirements)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.30661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    }
  ],
  "/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-07-02T11:09:21Z",
      "updated_at": "2021-03-11T06:50:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add Browser monitoring to your webpages either automatically or manually. To enable Browser monitoring in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Python agent. To use the Browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting Browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the Browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.66985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-07-02T12:07:54Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.50957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    },
    {
      "sections": [
        "Python message queues",
        "Requirements",
        "Caution",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Python message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "d17445381d0c83f42a8149dd361809d0d8d29c7b",
      "image": "https://docs.newrelic.com/static/5569176f12188e447753bcd1761eee95/8c557/rabbitmq-transaction-task.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-message-queues/",
      "published_at": "2021-07-02T12:09:29Z",
      "updated_at": "2021-03-11T04:35:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports the Pika RabbitMQ client library, giving you visibility into the performance of your message processing, for both incoming and outgoing messages. The New Relic UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. Requirements Requires Python agent version 2.88.0.72 or higher. Caution Message tasks are not started for consumers using TornadoConnection. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The RabbitMQ Pika client library allows Python applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. The Python agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ basic_publish basic_get basic_consume (callback) View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). Transaction traces also provide additional details for messages. Tip You can select transaction traces from the app's Summary or Transactions pages in APM. The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > (select an app) > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Here is an example: one.newrelic.com > APM > (select an app) > (select a transaction trace): In this example, the selected transaction trace's Messages tab lists the RabbitMQ message details.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.95944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> message queues",
        "sections": "<em>Python</em> message queues",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> supports the Pika RabbitMQ client library, giving you visibility into the performance of your message processing, for both incoming and outgoing messages. The New Relic UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "604402ade7b9d2b2005799ba"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-custom-metrics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-07-02T11:09:21Z",
      "updated_at": "2021-03-11T06:50:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add Browser monitoring to your webpages either automatically or manually. To enable Browser monitoring in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Python agent. To use the Browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting Browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the Browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.66985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-07-02T12:07:54Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.50957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    },
    {
      "sections": [
        "Optional manual Browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags",
        "For more help"
      ],
      "title": "Optional manual Browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-07-02T12:07:53Z",
      "updated_at": "2021-03-16T06:40:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy For more help Additional documentation resources include: Browser monitoring (overview of Browser monitoring features) Compatibility and requirements (prerequisites for your app to use Browser monitoring, including agent requirements)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.30661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-event-loop-diagnostics": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-07-02T11:09:21Z",
      "updated_at": "2021-03-11T06:50:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add Browser monitoring to your webpages either automatically or manually. To enable Browser monitoring in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Python agent. To use the Browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting Browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the Browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.66985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Optional manual Browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags",
        "For more help"
      ],
      "title": "Optional manual Browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-07-02T12:07:53Z",
      "updated_at": "2021-03-16T06:40:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy For more help Additional documentation resources include: Browser monitoring (overview of Browser monitoring features) Compatibility and requirements (prerequisites for your app to use Browser monitoring, including agent requirements)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.30661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    },
    {
      "sections": [
        "Python message queues",
        "Requirements",
        "Caution",
        "Performance improvements with background tasks",
        "Queue operations",
        "View in New Relic UI",
        "Tip"
      ],
      "title": "Python message queues",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "d17445381d0c83f42a8149dd361809d0d8d29c7b",
      "image": "https://docs.newrelic.com/static/5569176f12188e447753bcd1761eee95/8c557/rabbitmq-transaction-task.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-message-queues/",
      "published_at": "2021-07-02T12:09:29Z",
      "updated_at": "2021-03-11T04:35:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports the Pika RabbitMQ client library, giving you visibility into the performance of your message processing, for both incoming and outgoing messages. The New Relic UI will show transactions initiated via RabbitMQ message receipt (subscribe/consume messages) as Message background tasks. Message creation via RabbitMQ also appears in transaction traces. Requirements Requires Python agent version 2.88.0.72 or higher. Caution Message tasks are not started for consumers using TornadoConnection. Performance improvements with background tasks One way to increase responsiveness of web applications is to delegate work to background processes. Message queues are commonly used for this inter-process communication. In the context of message queuing systems, applications typically interact with message brokers to send and receive messages. The RabbitMQ Pika client library allows Python applications to interface with message brokers that implement the Advanced Message Queueing Protocol (AMQP) 0.9 or higher. The Python agent shows messages sent and received using the RabbitMQ client library. With this visibility, you can see details including: Number of messages produced by your app Time your app spends publishing messages Time your app spends processing \"consumed\" messages APM conveniently groups and reports operations that interact with queues. By analyzing this information, you can more easily identify bottlenecks and areas for performance improvement in your message passing architecture. Queue operations Supported entry points for queue operations appear as Put (publish a message) or Take (receive a message) in APM's user interface. Queue operations Publish a message (Put in UI) Receive a message (Take in UI) RabbitMQ basic_publish basic_get basic_consume (callback) View in New Relic UI Queue operations appear on APM's Transactions page for the selected app. The Put and Take metrics appear in the Breakdown table and are categorized as MessageBroker metrics. Here is an example: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table categorizes queue operations as MessageBroker metrics and labels them as Put (publish a message) or Take (receive a message). Transaction traces also provide additional details for messages. Tip You can select transaction traces from the app's Summary or Transactions pages in APM. The Transaction trace summary page may show Put and Take operations in the Slowest components section. For example: one.newrelic.com > APM > (select an app) > (select a transaction trace): In this example, the selected transaction trace's Summary shows RabbitMQ operations in the colored bar chart. The Slowest components section also lists the RabbitMQ Put and Take results. The Transaction trace page includes a dedicated Messages tab that shows a summary of the message activity that occurred as part of the transaction. Here is an example: one.newrelic.com > APM > (select an app) > (select a transaction trace): In this example, the selected transaction trace's Messages tab lists the RabbitMQ message details.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.95944,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> message queues",
        "sections": "<em>Python</em> message queues",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> supports the Pika RabbitMQ client library, giving you visibility into the performance of your message processing, for both incoming and outgoing messages. The New Relic UI will show transactions initiated via RabbitMQ message receipt (subscribe&#x2F;consume messages) as Message"
      },
      "id": "604402ade7b9d2b2005799ba"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-message-queues": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-07-02T11:09:21Z",
      "updated_at": "2021-03-11T06:50:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add Browser monitoring to your webpages either automatically or manually. To enable Browser monitoring in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Python agent. To use the Browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting Browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the Browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.66985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-07-02T12:07:54Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.50957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    },
    {
      "sections": [
        "Optional manual Browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags",
        "For more help"
      ],
      "title": "Optional manual Browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-07-02T12:07:53Z",
      "updated_at": "2021-03-16T06:40:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy For more help Additional documentation resources include: Browser monitoring (overview of Browser monitoring features) Compatibility and requirements (prerequisites for your app to use Browser monitoring, including agent requirements)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.30661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    }
  ],
  "/docs/agents/python-agent/supported-features/python-tips-tricks": [
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-07-02T11:09:21Z",
      "updated_at": "2021-03-11T06:50:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add Browser monitoring to your webpages either automatically or manually. To enable Browser monitoring in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Python agent. To use the Browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting Browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the Browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.66985,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " or Twisted frameworks is not <em>supported</em>. The <em>Python</em> <em>agent</em> does not <em>support</em> insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    },
    {
      "sections": [
        "Python event loop diagnostics",
        "Requirements",
        "View in New Relic UI",
        "Event Loop NRQL Queries",
        "Where to diagnose event loops"
      ],
      "title": "Python event loop diagnostics",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "b4fbfca3512fba89930205f716cbc8abea7335fb",
      "image": "https://docs.newrelic.com/static/b455d352839c104efbb7bc57a00e34ae/5a190/python-event-loop-breakdown-table.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/python-event-loop-diagnostics/",
      "published_at": "2021-07-02T12:07:54Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports asyncio event loop diagnostics. When there are transactions blocking or delaying an event loop, the agent is able to generate diagnostics to help find and resolve them. Requirements Requires Python agent version 5.0.0.124 or higher. View in New Relic UI In APM, your event loop transaction data will be in the transaction breakdown table and the trace details page. Event loop metrics will appear in the transaction Breakdown table: one.newrelic.com > APM > (select an app) > Monitoring > Transactions > (select a transaction): The transaction’s Breakdown table flags event loops with asyncio. Time spent waiting on other transactions will be shown in the transaction Trace details page: one.newrelic.com > APM > (select an app) > Transactions > (select a transaction trace) > Trace details: The Trace details page contains a table with breakdowns for each segment (method or function call) in a transaction trace. Event Loop NRQL Queries eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be: SELECT count(*) as 'count', average(eventLoopTime) as 'loopTime', average(eventLoopWait) as 'loopWait' FROM Transaction facet name In New Relic One, you might see results like this: one.newrelic.com > Query your data > Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the Python agent API background_task and web_transaction decorator APIs also support asyncio's event loops.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.50957,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> event loop diagnostics",
        "sections": "<em>Python</em> event loop diagnostics",
        "tags": "<em>Supported</em> <em>features</em>",
        "body": " In New Relic One, you might see results like this: one.newrelic.com &gt; Query your data &gt; Advanced (NRQL): Use advanced (NRQL) to write a query to find event loops. Where to diagnose event loops Event loop diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation frameworks. Coroutines using the <em>Python</em> <em>agent</em> API background_task and web_transaction decorator APIs also <em>support</em> asyncio&#x27;s event loops."
      },
      "id": "603e93bf196a67d342a83df4"
    },
    {
      "sections": [
        "Optional manual Browser instrumentation with Django templates",
        "Contents",
        "Add Django template tags",
        "For more help"
      ],
      "title": "Optional manual Browser instrumentation with Django templates",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "2c21a70e200156a2d18ef23ad12841628982b3e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/optional-manual-browser-instrumentation-django-templates/",
      "published_at": "2021-07-02T12:07:53Z",
      "updated_at": "2021-03-16T06:40:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent can automatically add browser monitoring to any HTML page responses. For most popular Python web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register and use the newrelic_tags tag library. Contents Add Django template tags Follow this procedure only if you need to use manual instrumentation to insert the browser monitoring agent instead of the Python agent's automatic instrumentation. To make this template tag library available, you must manually add newrelic.extras.framework_django to the list of INSTALLED_APPS in your Django project settings files. At the top of the template file, add a reference to the tag library to the list of tag libraries being loaded by the load macro. {% load ... newrelic_tags %} Copy Add the following as close to the start of the <head> element of the template page as possible. Place this after any meta tags specifying a charset property or any http-equiv meta tag for X-UA-Compatible. {% newrelic_browser_timing_header %} Copy At the end of the <body> element of the template page, add: {% newrelic_browser_timing_footer %} Copy For more help Additional documentation resources include: Browser monitoring (overview of Browser monitoring features) Compatibility and requirements (prerequisites for your app to use Browser monitoring, including agent requirements)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.30661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Supported</em> <em>features</em>",
        "body": "The <em>Python</em> <em>agent</em> can automatically add browser monitoring to any HTML page responses. For most popular <em>Python</em> web frameworks, including Django, Flask, and Pyramid, use automatic browser instrumentation. If you need to use manual instrumentation with Django templates, you can manually register"
      },
      "id": "603ec3cf64441fee954e888e"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/activate-application-warning-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.91471,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.9885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-07-02T10:53:39Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.472916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/emulating-legacy-server-side-parameter-configuration-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.91471,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.9885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-07-02T10:53:39Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.472916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/missing-information-when-using-ensurefuture-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.91471,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.9885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-07-02T10:53:39Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.472916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/no-data-appears-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.91471,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.9885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "Browser monitoring and the Python agent",
        "Support for automatic instrumentation",
        "Use automatic instrumentation",
        "Disable instrumentation for specific pages",
        "Manually enable browser monitoring for specific pages",
        "For more help"
      ],
      "title": "Browser monitoring and the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Supported features"
      ],
      "external_id": "ed82420954bf7fde8cc899219de3e4ddcf7790c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/supported-features/browser-monitoring-python-agent/",
      "published_at": "2021-07-02T11:09:21Z",
      "updated_at": "2021-03-11T06:50:27Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the Python agent, you can add Browser monitoring to your webpages either automatically or manually. To enable Browser monitoring in the user interface, follow the procedures to install the Browser agent. Then follow the procedures in this section to set up the Python agent. To use the Browser agent with your Python agent, ensure you have the latest release. For more information, see the agent installation instructions. Support for automatic instrumentation The Python agent only supports automatic instrumentation for WSGI applications that are hosted directly on a dedicated WSGI server with a native WSGI interface, and where the WSGI application returns the HTML page response via an iterable/generator. Automatic instrumentation requires a dedicated WSGI server. WSGI servers such as Apache/mod_wsgi, gunicorn and uWSGI are supported. Using WSGI adapters on top of either the Tornado or Twisted frameworks is not supported. The Python agent does not support insertion of instrumentation when using the write() callback returned from the WSGI start_response() function to write back the HTML page response. For more information about requirements for automatic instrumentation, see Troubleshooting Browser instrumentation in Python. Use automatic instrumentation The Python agent can automatically add the Browser JavaScript agent to any HTML page responses. For WSGI applications, the agent uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI level, automatic instrumentation should work for any WSGI application regardless of the web framework you are using, including popular Python web frameworks such as Django, Flask and Pyramid. Disable instrumentation for specific pages If you want to use automatic instrumentation, but have an HTML page response that you do not want instrumented, you can disable instrumentation for that request. Add this Python agent API call into the code for that request handler: newrelic.agent.disable_browser_autorum() Copy If you are using a WSGI server that allows per-request configuration, such as Apache/mod_wsgi, you can also disable automatic instrumentation by setting the newrelic.disable_browser_autorum key for that request in the WSGI environ dictionary passed into your monitored application. For example, if using Apache/mod_wsgi, you could disable automatic instrumentation by filtering on the URL: <Location /login> SetEnv newrelic.disable_browser_autorum true </Location> Copy Manually enable browser monitoring for specific pages You can manually add browser instrumentation to specific pages. This is useful, for example, if automatic instrumentation is not possible for your application, or if you want to collect browser agent data for only some pages. The calls in this procedure must be placed on every request you want to monitor. You cannot call these functions once at global scope and cache the result for later use. Disable automatic instrumentation: In the newrelic.ini file, set browser_monitoring.auto_instrument to false. Restart your application. Place these calls into the request handler of every page you want to monitor: import newrelic.agent header = newrelic.agent.get_browser_timing_header() footer = newrelic.agent.get_browser_timing_footer() Copy Pass the header and footer variables to the HTML response. On the corresponding page, insert the header variable in the <head> element. Place the header variable after any charset properties or any meta tags for http-equiv with a value of X-UA-Compatible. Insert the footer variable before the end of the <body> element. Wait a few minutes, then check your browser monitoring data. If no data appears after waiting a few minutes, see Troubleshooting browser instrumentation in Python. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 86.156525,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>Troubleshooting</em> Browser instrumentation in <em>Python</em>. Use automatic instrumentation The <em>Python</em> <em>agent</em> can automatically add the Browser JavaScript <em>agent</em> to any HTML page responses. For WSGI applications, the <em>agent</em> uses a WSGI middleware installed into the request pipeline. Since the middleware is at WSGI"
      },
      "id": "6043fc4ce7b9d23c25579a0a"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/python-agent-logging": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.91471,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.9885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-07-02T10:53:39Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.472916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/testing-python-agent": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.91471,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.9885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-07-02T10:53:39Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.472916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/troubleshooting/troubleshooting-browser-instrumentation-python": [
    {
      "sections": [
        "Uninstall the Python agent",
        "Tip",
        "For more help"
      ],
      "title": "Uninstall the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "0514b3faa15a47697a5b70e3a4a4547efdc4c03e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/uninstall-python-agent/",
      "published_at": "2021-07-02T10:46:17Z",
      "updated_at": "2021-03-11T08:05:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to uninstall the Python agent. For instructions on how to temporarily disable the agent, see Disable the agent. To uninstall your Python agent: Use one of these methods: If you installed with PIP, run: pip uninstall newrelic Copy If you installed with easy_install, run: easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the Python agent (install the Python language New Relic agent) Troubleshooting the Python agent (a library of troubleshooting solutions for your Python application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.9147,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Uninstall the <em>Python</em> <em>agent</em>",
        "sections": "Uninstall the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": ": easy_install -m newrelic Copy When the uninstall process finishes, restart your app. Tip You may also want to remove your app from the New Relic APM UI. For more help Additional documentation resources include: Install the <em>Python</em> <em>agent</em> (install the <em>Python</em> language New Relic <em>agent</em>) <em>Troubleshooting</em> the <em>Python</em> <em>agent</em> (a library of <em>troubleshooting</em> solutions for your <em>Python</em> application)"
      },
      "id": "6043ff5864441f7195378ed2"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-07-02T11:02:59Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 90.9885,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " these <em>troubleshooting</em> resources: If no data appears, follow these <em>troubleshooting</em> steps. If you experience issues when installing or running the <em>Python</em> <em>agent</em> on a new host, test that the package is installed correctly and that it can contact New Relic&#x27;s data collector service. For other problems, see"
      },
      "id": "6044108be7b9d29b61579a05"
    },
    {
      "sections": [
        "No data appears (Python)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Python)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Troubleshooting"
      ],
      "external_id": "268d314d0fe859b72653a8b2442fb99bccf509b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/troubleshooting/no-data-appears-python/",
      "published_at": "2021-07-02T10:53:39Z",
      "updated_at": "2021-03-16T07:50:20Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the Python agent, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for troubleshooting missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you installed the agent on the same environment as your application. If you're using a virtual environment, install it there. Make sure your agent is up to date. If you downloaded it from the New Relic site rather than use pip or easy_install, compare your version number to the current release. Use New Relic Diagnostics to try to automatically identify the issue. Make sure data can get to the New Relic UI by running the Python agent test. Ensure you meet the compatibility and requirements. Check for any special requirements for the web framework or web server you're using. Review the configuration file that was generated with the newrelic-admin generate-config command to make sure it contains the correct license key. Generate detailed logs for troubleshooting. Then check the log files for error messages. If the log file is missing, ensure that you have permissions to write to that location. Also, if no data appears and you see warning messages about activating or reactivating your app, follow the activation troubleshooting procedures.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 89.472916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Python</em>)",
        "sections": "No data appears (<em>Python</em>)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Problem After installing the <em>Python</em> <em>agent</em>, generating some traffic, and waiting five minutes, your data does not appear in the New Relic UI. Solution Here are some tips for <em>troubleshooting</em> missing data, placed in approximate order of the likelihood of them being the problem: Ensure that you"
      },
      "id": "603e8ef0196a6785c9a83ddf"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-ajp-wsgi-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04483,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-cherrypy-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-07-02T10:42:59Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.45467,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "603e8a89196a6741a8a83df1"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "1871aa8881deeeb349ea435d554846abc63aa3dd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2021-07-02T10:42:59Z",
      "updated_at": "2021-03-11T01:23:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.9806,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "6043b84264441f9b98378f01"
    },
    {
      "sections": [
        "Troubleshoot Java asynchronous instrumentation",
        "Verify your instrumentation",
        "Use logs to troubleshoot",
        "Problem: Transaction times are too long",
        "Problem: No transaction trace data",
        "Problem: Too few async calls",
        "Ensure that each activity you monitor is appropriately linked",
        "Check if you are missing required annotations"
      ],
      "title": "Troubleshoot Java asynchronous instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "0f21da73ba02edc45ec0cbbbaa7e0fc45678404b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/troubleshoot-java-asynchronous-instrumentation/",
      "published_at": "2021-07-01T18:19:07Z",
      "updated_at": "2021-03-16T09:03:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are having problems using the Java agent API for async tokens and segments, use these techniques to help you find answers and solve problems. Verify your instrumentation The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use these techniques to verify that your application’s instrumentation is correct: After instrumenting your code, verify that the logs show that an equal number of tokens have been created and expired. For more information on which log messages to look for, see Use logs to troubleshoot. Check the garbage collection statistics under APM's JVMs page to determine whether or not your changes have significantly altered garbage collection patterns. Check if any segments or tokens are timing out by reviewing your transaction traces for a timed_out attribute. If so, you can change the limit with token_timeout and segment_timeout. Use logs to troubleshoot To customize your Java agent logging, see Generating logs. Then, you can examine your logs for these common messages: To view created tokens, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: created active token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view expired tokens and the time that they expired, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: expired token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view created segments, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@486b7f04: startSegment(): com.newrelic.agent.Segment@2b7fdad3 created and started with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy To view ended segments and the time that they ended, check logs at FINEST for: com.newrelic.agent.Transaction@486b7f04--finish segment(): com.newrelic.agent.Segment@2b7fdad3 async finish with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy Problem: Transaction times are too long Make sure to expire tokens and end or ignore segments; otherwise transactions may take longer to report to New Relic. The Java agent has a timeout mechanism for tokens and segments that are not ended correctly. For more information, see token_timeout and segment_timeout. Problem: No transaction trace data Inspect transaction traces to make sure expected asynchronous work is reported. If you do not see any transaction traces, make sure your transaction duration exceeds the transaction trace threshold set in transaction_threshold. Problem: Too few async calls If too few calls are being reported: Ensure that each activity you monitor is appropriately linked In the faulty example below, a parallel stream is being used, which means that the work done inside the lambda in the call to map() can be scheduled on a different thread than the thread handling the request. Without creating a token to link all this work together, you will not see any of the work that gets scheduled on a different thread inside of your transaction. @RequestMapping(\"parallel_stream_bad\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad(@RequestParam(\"ids\") List<long> ids) { List<item> results = ids .parallelStream() .map(i -> requestItem(i)) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad\", results); } Copy Check if you are missing required annotations The example below will report only a subset of the calls to requestItem() because it is impossible to put @Trace(async = true) around blocks of anonymous work inside the call to map(). Instead, you should pass the token into requestItem() and link it, and then add @Trace(async=true) around it. Or use a helper function like requestItemAsync() to do this without changing your existing methods. @RequestMapping(\"parallel_stream_bad2\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad2(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> { token.link(); return requestItem(id); }) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad2\", results); } Copy Compare this to the correct example below, in which the lambda expression is wrapped by the wrapper class InstrumentedCallable. This class accepts a token and a lambda, then wraps asynchronous work in @Trace(async = true) and uses a token to link the work to the request thread. @RequestMapping(\"parallel_stream_wrap\") @Trace(dispatcher = true) public ResponseEntity parallelStreamWrap(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> InstrumentedCallable.instrumentCallable(token, () -> requestItem(id))) .map(c -> c.call()) .filter(item -> item != null) .collect(Collectors.toList()); token.expire(); return formattedResponse(\"parallel_stream_wrap\", results); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.63282,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot Java <em>asynchronous</em> <em>instrumentation</em>",
        "sections": "Troubleshoot Java <em>asynchronous</em> <em>instrumentation</em>",
        "tags": "<em>Async</em> <em>instrumentation</em>",
        "body": "If you are having problems using the Java <em>agent</em> API for <em>async</em> tokens and segments, use these techniques to help you find answers and solve problems. Verify your <em>instrumentation</em> The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use"
      },
      "id": "603eb55a196a67260aa83dac"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-fastcgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-gunicorn-wsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-modwsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-paste": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-scgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.06303,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-uwsgi-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-waitress-web-server": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework": [
    {
      "sections": [
        "Uvicorn",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Uvicorn ",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "1693856ac886155e6db9439555a7107e6c352eba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/uvicorn/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-11T03:17:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the ASGI server Uvicorn. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python uvicorn path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 173.04482,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>Python</em> <em>agent</em> API",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": " <em>agent</em> version 5.20.0.149 or higher, you can use the recommended admin script integration method. For example: NEW_RELIC_CONFIG_FILE=path&#x2F;to&#x2F;newrelic.ini newrelic-admin run-<em>python</em> uvicorn path_to_app Copy <em>Python</em> <em>agent</em> API You can use the <em>Python</em> <em>agent</em> API to monitor any ASGI <em>server</em> or <em>framework</em>. To do"
      },
      "id": "604403a5196a67bcbd960f6e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.06303,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/python-agent/web-frameworks-servers/uvicorn": [
    {
      "sections": [
        "Python agent and Web2py web framework",
        "Integrate with Web2py",
        "Runweb2py command",
        "Apache/mod_wsgi",
        "Gunicorn",
        "uWSGI",
        "For more help"
      ],
      "title": "Python agent and Web2py web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "c10b76e2e11d5b6d7324ed0656099c8549f2c0e8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-web2py-web-framework/",
      "published_at": "2021-07-02T10:54:44Z",
      "updated_at": "2021-03-11T04:52:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Web2py is an open source framework for creating web-based Python applications. You can integrate the Python agent with your Web2py app to monitor your app's performance. For general install procedures, see Install the Python agent. Integrate with Web2py Choose the Web2py set-up you use from the list below for more information: Runweb2py command If you run your web application using the runweb2py command, use the following command: NEW_RELIC_CONFIG_FILE=/some/path/newrelic.ini newrelic-admin run-program runweb2py Copy newrelic-admin is a script that wraps your application startup, so that the agent can monitor your application's major functions. For more on running the wrapper script, see Running the wrapper script. Apache/mod_wsgi When using Apache/mod_wsgi, you must manually insert code in the WSGI script file you are using in order to initialize the Python agent. For more info, see our mod_wsgi documentation. Gunicorn For information on using Gunicorn with the agent, see Python agent and Gunicorn documentation. uWSGI For information on using uWSGI with agent, see the Python agent and uWSGI documentation. For general install procedures, see Install the Python agent. For more help Additional documentation resources include: Python agent integration (integrating the Python agent with your application) Install the Python agent (how to install the Python agent) Test the Python agent (how to test and troubleshoot the Python agent installation)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.02246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> <em>Web2py</em> <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "<em>Web</em>2py is an open source <em>framework</em> for creating <em>web</em>-based <em>Python</em> applications. You can integrate the <em>Python</em> <em>agent</em> with your <em>Web</em>2py app to monitor your app&#x27;s performance. For general install procedures, see Install the <em>Python</em> <em>agent</em>. Integrate with <em>Web</em>2py Choose the <em>Web</em>2py set-up you use from"
      },
      "id": "604403a5196a67ed8b960f4e"
    },
    {
      "sections": [
        "Python agent and Starlette web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and Starlette web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "177cdce091c6a27c43348ddd7b33d049fe631bce",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-starlette-web-framework/",
      "published_at": "2021-07-02T10:54:43Z",
      "updated_at": "2021-03-16T06:54:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the Starlette web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.95529,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Starlette <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the Starlette <em>web</em> <em>framework</em>. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7c8be7b9d2f3842a07d9"
    },
    {
      "sections": [
        "Python agent and Tornado 6 web framework",
        "Important",
        "Automatic initialization with admin script",
        "Event loop diagnostic support",
        "For more help"
      ],
      "title": "Python agent and Tornado 6 web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Web frameworks and servers"
      ],
      "external_id": "6e13639dde64315f4a6a7366345771aa11321042",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-tornado-6-web-framework/",
      "published_at": "2021-07-02T11:12:17Z",
      "updated_at": "2021-03-16T06:41:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This documentation explains requirements and tips for integrating the Python agent with an app that uses Tornado 6. To return to the general install instructions, go to Install the Python agent. Important The Python agent does not support any versions of Tornado below 6.0. Automatic initialization with admin script You can use the recommended admin script integration method, provided you start your app with python app.py and use the Tornado async interface. Here's an example of using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-python app.py Copy Manual integration in your app code is allowed but not recommended. See Manual integration instructions for more information. Event loop diagnostic support The Python agent supports asyncio event loop diagnostics. See Python event loop diagnostics for more information. For more help Additional documentation resources include: Install the Python agent",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.06303,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>and</em> Tornado 6 <em>web</em> <em>framework</em>",
        "tags": "<em>Web</em> <em>frameworks</em> <em>and</em> <em>servers</em>",
        "body": "This documentation explains requirements and tips for integrating the <em>Python</em> <em>agent</em> with an app that uses Tornado 6. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Important The <em>Python</em> <em>agent</em> does not support any versions of Tornado below 6.0. Automatic initialization"
      },
      "id": "603eaa66e7b9d22a5f2f583e"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/guide-using-ruby-agent-api": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "349823d25fe83093a39bb114453b471888aacfb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.39006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes the exception and an optional options hash. Use this format: notice_error"
      },
      "id": "604403e0e7b9d295a15799ec"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "666d73d0d1bc86b9e1596cde83c68cf404a3a913",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T07:54:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use alias method chaining to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see Tracer in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "603eb84b64441f1be34e8843"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics",
        "For more help"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0cf46da31f08cd8b677bd22ea556857d9c820b7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T06:55:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (e.g. from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards. For more help Additional documentation resources include: Custom metrics (Overview of custom metrics) Selecting custom dashboard metrics (Viewing custom metrics) Ruby custom instrumentation (Instrumenting code elements New Relic does not automatically instrument)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " impact the performance of your application and your New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics"
      },
      "id": "603eb880e7b9d2284b2a07e1"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "349823d25fe83093a39bb114453b471888aacfb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.39006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes the exception and an optional options hash. Use this format: notice_error"
      },
      "id": "604403e0e7b9d295a15799ec"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "666d73d0d1bc86b9e1596cde83c68cf404a3a913",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T07:54:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use alias method chaining to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see Tracer in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "603eb84b64441f1be34e8843"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics",
        "For more help"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0cf46da31f08cd8b677bd22ea556857d9c820b7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T06:55:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (e.g. from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards. For more help Additional documentation resources include: Custom metrics (Overview of custom metrics) Selecting custom dashboard metrics (Viewing custom metrics) Ruby custom instrumentation (Instrumenting code elements New Relic does not automatically instrument)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " impact the performance of your application and your New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics"
      },
      "id": "603eb880e7b9d2284b2a07e1"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "349823d25fe83093a39bb114453b471888aacfb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.39006,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes the exception and an optional options hash. Use this format: notice_error"
      },
      "id": "604403e0e7b9d295a15799ec"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics",
        "For more help"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0cf46da31f08cd8b677bd22ea556857d9c820b7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T06:55:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (e.g. from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards. For more help Additional documentation resources include: Custom metrics (Overview of custom metrics) Selecting custom dashboard metrics (Viewing custom metrics) Ruby custom instrumentation (Instrumenting code elements New Relic does not automatically instrument)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " impact the performance of your application and your New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics"
      },
      "id": "603eb880e7b9d2284b2a07e1"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking Browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-07-02T11:13:16Z",
      "updated_at": "2021-03-16T06:26:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking Browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent Browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.868706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/ruby-custom-metrics": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "349823d25fe83093a39bb114453b471888aacfb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.39005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes the exception and an optional options hash. Use this format: notice_error"
      },
      "id": "604403e0e7b9d295a15799ec"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "666d73d0d1bc86b9e1596cde83c68cf404a3a913",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T07:54:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use alias method chaining to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see Tracer in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "603eb84b64441f1be34e8843"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking Browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-07-02T11:13:16Z",
      "updated_at": "2021-03-16T06:26:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking Browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent Browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.868706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic": [
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "666d73d0d1bc86b9e1596cde83c68cf404a3a913",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T07:54:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use alias method chaining to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see Tracer in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "603eb84b64441f1be34e8843"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics",
        "For more help"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0cf46da31f08cd8b677bd22ea556857d9c820b7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T06:55:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (e.g. from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards. For more help Additional documentation resources include: Custom metrics (Overview of custom metrics) Selecting custom dashboard metrics (Viewing custom metrics) Ruby custom instrumentation (Instrumenting code elements New Relic does not automatically instrument)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " impact the performance of your application and your New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics"
      },
      "id": "603eb880e7b9d2284b2a07e1"
    },
    {
      "sections": [
        "Ignoring specific transactions",
        "Blocking all instrumentation",
        "Ignoring specific actions with Rails",
        "Ignoring specific routes with Sinatra",
        "Ignoring Apdex contributions",
        "Blocking Browser instrumentation",
        "Ignoring transactions dynamically",
        "Ignoring transactions by URL with configuration",
        "Troubleshooting",
        "For more help"
      ],
      "title": "Ignoring specific transactions",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "711df6a6f072c451ca8a55a9316d8c13c083ada2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ignoring-specific-transactions/",
      "published_at": "2021-07-02T11:13:16Z",
      "updated_at": "2021-03-16T06:26:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic for Ruby allows you to selectively disable instrumentation for particular requests within your Rails or Sinatra application. Blocking all instrumentation Call newrelic_ignore with no arguments from within a Rails controller or Sinatra application to prevent instrumentation of all requests serviced by that controller or application: newrelic_ignore Copy Using newrelic_ignore prevents the agent from recording any performance data (metrics, transaction traces, events, traced errors, and so on) for the targeted transactions, and will also prevent the transactions from contributing to your overall Apdex score. Ignoring specific actions with Rails If you want to ignore only specific actions with a Rails controller, you can use the :only or :except options with newrelic_ignore. For example, to ignore only the index and show actions on the controller, use: newrelic_ignore :only => [:index, :show] Copy To ignore all actions on the controller except index: newrelic_ignore :except => [:index] Copy Ignoring specific routes with Sinatra If you want to ignore only specific routes within your Sinatra application, you can pass a Sinatra-style route definition to newrelic_ignore from within your Sinatra application. For more information, see Sinatra: Ignoring routes. Ignoring Apdex contributions If you want to prevent all actions in a controller from contributing to your Apdex score, but still want other performance data, use newrelic_ignore_apdex: newrelic_ignore_apdex Copy In a Rails application, newrelic_ignore_apdex supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Blocking Browser instrumentation Using newrelic_ignore_enduser prevents the agent from automatically inserting the JavaScript used to capture browser monitoring data. Server-side instrumentation will be unaffected. To prevent Browser agent injection for all actions in a controller, add a call like this to the controller class: newrelic_ignore_enduser Copy In a Rails application, newrelic_ignore_enduser supports the same :only and :except options as newrelic_ignore. In a Sinatra application, it will accept the same Sinatra-style route for targeting specific transactions. Ignoring transactions dynamically In some cases, you may want to base the decision to ignore a specific transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren't a good fit. Starting in Ruby agent version 3.9.2, you can instead use the following family of API calls from any point within your transaction: NewRelic::Agent.ignore_transaction NewRelic::Agent.ignore_apdex NewRelic::Agent.ignore_enduser Copy These methods will have a similar results to the newrelic_ignore, newrelic_ignore_apdex, and newrelic_ignore_enduser calls, but can be called during a request instead of during the class definition. Ignoring transactions by URL with configuration You can ignore transactions by URL using the rules.ignore_url_regexes configuration setting: rules: ignore_url_regexes: [\"secret\", \"^/admin\"] Copy Note that regexes do not include any type of anchoring by default. The /secret/ regex will match 'newrelic.com/secret/login' and it will also match 'newrelic.com/users/secretpanda'. The anchored admin regex will match 'newrelic.com/admin/praetorians' but it will not match 'newrelic.com/users/totally-real-admin'. If necessary you may also provide a list of regexes in a comma-separated string, allowing you to set ignore regexes with an environment variable: NEW_RELIC_RULES_IGNORE_URL_REGEXES=\"secret,^/admin\" Copy As always configuration from environment variables will override configuration in newrelic.yml. Troubleshooting The newrelic_ignore* family of methods will only work from within Rails controller classes, or Sinatra applications (subclasses of Sinatra::Base). Other applications should use the NewRelic::Agent.ignore_* family of calls from within each request that you would like to ignore, which will work in any context. If you get a NoMethodError when trying to use newrelic_ignore from within a Rails controller or Sinatra application, make sure that newrelic_rpm has been required before you try to call newrelic_ignore inside of your class definition. For more help Additional documentation resources include Apdex: Measuring user satisfaction (how Apdex is calculated).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.868706,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>API</em> <em>guides</em>",
        "body": " transaction on criteria only known at runtime, during the request. For scenarios like this, the declarative mechanisms explained above aren&#x27;t a good fit. Starting in <em>Ruby</em> <em>agent</em> version 3.9.2, you can instead use the following family of <em>API</em> calls from any point within your transaction: NewRelic"
      },
      "id": "603eb738196a67db90a83dbd"
    }
  ],
  "/docs/agents/ruby-agent/api-guides/third-party-instrumentation": [
    {
      "sections": [
        "Sending handled errors to New Relic",
        "Notify the New Relic Ruby agent of an error"
      ],
      "title": "Sending handled errors to New Relic",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "349823d25fe83093a39bb114453b471888aacfb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/sending-handled-errors-new-relic/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-11T08:12:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To send error data that you are handling in your own code to New Relic, use the Ruby agent API NewRelic::Agent.notice_error call within your error handler. Notify the New Relic Ruby agent of an error This API call takes the exception and an optional options hash. Use this format: notice_error(exception, options = { }) ⇒ Object Copy This function records the given error and passes it through the normal error filtering process, including configuration-based ignoring of errors and the global #ignore_error_filter method if defined. The exception is the exception to be recorded, or an error message. If needed, you can also include options = { }. The following parameters will receive special treatment, and any other parameters you supply will be treated as custom parameters. options = { } Comments :expected Only records the error trace. This does not affect the error rate or Apdex status. For information on expected errors in the UI, see View expected errors. Replaces the :trace_only option, which was deprecated in version 4.3.x of the Ruby agent. :custom_params Custom parameters. :uri The request path, minus any request parameters or query string. Usually not needed. Include this only if you are calling notice_error outside a transaction. :metric The metric name associated with the transaction. Usually not needed. Include this only if you are calling notice_error outside a transaction. :request_params (deprecated) Older Ruby agent versions allowed passing a :request_params option, but those are now ignored. If you need to record the request parameters, call this method inside a transaction, or pass the information in :custom_params.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 108.39005,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Notify the New Relic <em>Ruby</em> <em>agent</em> of an error",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "To send error data that you are handling in your own code to New Relic, use the <em>Ruby</em> <em>agent</em> <em>API</em> NewRelic::<em>Agent</em>.notice_error call within your error handler. Notify the New Relic <em>Ruby</em> <em>agent</em> of an error This <em>API</em> call takes the exception and an optional options hash. Use this format: notice_error"
      },
      "id": "604403e0e7b9d295a15799ec"
    },
    {
      "sections": [
        "Ruby custom instrumentation",
        "Tip",
        "Method tracers",
        "Tracing in class definitions",
        "Tracing initializers",
        "Tracing blocks of code",
        "Naming transactions",
        "Important",
        "Tracing transaction entry points",
        "Instrumenting non-web transactions",
        "Advanced custom instrumentation",
        "Instrumenting a section of code",
        "Starting a transaction or segment",
        "For more help"
      ],
      "title": "Ruby custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "666d73d0d1bc86b9e1596cde83c68cf404a3a913",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-instrumentation/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T07:54:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Ruby agent automatically collects many metrics. It also includes an API you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going on in your application. Tip Collecting too many metrics can impact the performance of your application and New Relic. To avoid data problems, keep the total number of unique metrics introduced by custom instrumentation under 2000. Method tracers The easiest way to capture custom instrumentation is by tracing calls to a particular method. Tracing a method as described below will insert an additional node in your transaction traces for each invocation of that method, providing greater detail about where time is going in your transactions. Method tracers are software probes you can put on a method of any class. The probes use alias method chaining to insert themselves when the target methods execute and gather custom instrumentation on their performance. Tracing in class definitions Method tracers can be used within normal class definitions, as long as the target method has been defined first: require 'new_relic/agent/method_tracer' class Foo include ::NewRelic::Agent::MethodTracer def generate_image ... end add_method_tracer :generate_image, 'Custom/generate_image' end Copy To instrument a class method, add the method tracer in the class singleton: require 'new_relic/agent/method_tracer' class Foo def self.generate_image ... end class << self include ::NewRelic::Agent::MethodTracer add_method_tracer :generate_image, 'Custom/generate_image' end end Copy add_method_tracer takes an optional metric name and a hash of options. For more information, see add_method_tracer in the New Relic RubyDoc . Tracing initializers For Rails, a common way to add instrumentation is to create an initializer and \"monkey patch\" the instrumentation directives. For example, to add a method tracer to MyCache#get: Make sure the MyCache class is loaded before adding the method tracer. Add the following in a file named config/initializers/rpm_instrumentation.rb: require 'new_relic/agent/method_tracer' MyCache.class_eval do include ::NewRelic::Agent::MethodTracer add_method_tracer :get end Copy Tracing blocks of code Sometimes a single method is so complex that tracking overall time doesn't give enough detail. In these cases, you can wrap a block of code with a tracer. Call trace_execution_scoped passing the code to trace as a block: extend ::NewRelic::Agent::MethodTracer def slow_action self.class.trace_execution_scoped(['Custom/slow_action/beginning_work']) do # do stuff and report execution time with a custom metric name end # more stuff, whose time will be \"blamed\" to slow_action end Copy For more information, see add_method_tracer in the New Relic RubyDoc . Naming transactions Instrumented transactions are used to determine the throughput and overall response time for your application. The name of the method and the class will be used for the name of the transaction as reported to New Relic. For more information, see Viewing transaction traces. Normally the agent automatically chooses the transaction name. If you want to change the name of a transaction while it is still running, use NewRelic::Agent.set_transaction_name and the corresponding NewRelic::Agent.get_transaction_name. Important Do not use brackets [suffix] at the end of your transaction name. New Relic automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. This is useful if you want to segment your transaction based on some criteria. For example, if you wanted to vary the transaction name by response format in Rails: class UsersController def index @users = User.all respond_to do |format| format.html format.json do NewRelic::Agent.set_transaction_name('Users/index.json') render :json => @users end format.xml do NewRelic::Agent.set_transaction_name('Users/index.xml') render :xml => @users end end end end Copy Renaming transactions can also be used to segment your requests around some business criteria. For example, you could segment a transaction into \"Big Customer\" and \"Small Customer\" with code like this: class UsersController before_filter :segment_new_relic_by_customer_size def segment_new_relic_by_customer_size new_relic_name = NewRelic::Agent.get_transaction_name if current_user.big_customer? NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - big customer\") else NewRelic::Agent.set_transaction_name(\"#{new_relic_name} - small customer\") end end end Copy Tracing transaction entry points Ordinarily the agent will be able to identify transactions within your application, but if you're not using a supported framework, or if you'd like to record transactions that the agent is not automatically recording, you can define methods as being transaction entry points: class Controller include NewRelic::Agent::Instrumentation::ControllerInstrumentation def transaction # execute a transaction end add_transaction_tracer :transaction end Copy Instrumenting non-web transactions Along with method-level tracing, you can instrument non-web transactions, such as background tasks, with the same level of transaction and error detail as web transactions. For more information, see Monitoring Ruby background processes and daemons. Advanced custom instrumentation When tracing code not automatically instrumented by the agent, the standard method tracers will usually be enough. However, sometimes you need to instrument something more complex than a single method call. For example, you may want to instrument a few lines of code within a method, or you may want to start a transaction in one part of your code and finish it elsewhere. The Tracer module, introduced in agent version 6.0, provides a flexible API that lets you create transactions and segments as well as interact with the current transaction. Instrumenting a section of code To instrument a section of code, wrap the code in a block, then pass the block to the Tracer.in_transaction method: require 'new_relic/agent/tracer' def long_and_complex_process expensive_setup Tracer.in_transaction(partial_name: 'Complex/process', category: :task) do code_to_be_instrumented end expensive_teardown end Copy The agent will ensure that a transaction exists, and will create a segment within it for the code inside the block. Starting a transaction or segment If you need to start a transaction at one location in your code but finish it in another (as can happen with callback-based events), call Tracer.start_transaction_or_segment. You must call finish on the return value of this method: require 'new_relic/agent/tracer' class MyEventWatcher def event_started @transaction = Tracer.start_transaction_or_segment( partial_name: 'MyEventWatcher/my_event', category: :task) end def event_completed @transaction.finish end end Copy For more information, see Tracer in the New Relic RubyDoc. For more help Additional documentation resources include: Custom instrumentation (Overview of custom instrumentation) Ruby custom metrics (Use an API call to record arbitrary metrics)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom instrumentation",
        "sections": "<em>Ruby</em> custom instrumentation",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic <em>Ruby</em> <em>agent</em> automatically collects many metrics. It also includes an <em>API</em> you can use to collect additional metrics about your application. If you see large Application Code segments in transaction trace details, custom instrumentation can give a more complete picture of what is going"
      },
      "id": "603eb84b64441f1be34e8843"
    },
    {
      "sections": [
        "Ruby custom metrics",
        "Caution",
        "Naming metrics",
        "Metric names and paths",
        "Tip",
        "Metrics and stats in the Ruby agent",
        "Stat aggregation policy",
        "Record custom metrics",
        "record_metric(metric_name, value)",
        "increment_metric(metric_name, amount=1)",
        "Example custom metric",
        "View custom metrics",
        "For more help"
      ],
      "title": "Ruby custom metrics",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "API guides"
      ],
      "external_id": "0cf46da31f08cd8b677bd22ea556857d9c820b7d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/api-guides/ruby-custom-metrics/",
      "published_at": "2021-07-02T12:14:49Z",
      "updated_at": "2021-03-16T06:55:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom metrics let you record arbitrary performance data via an API call (for example, timing or computer resource data). Then use the query builder to create charts and track that metric. You can use custom metrics to unify your monitoring inside New Relic. Caution Collecting too many metrics can impact the performance of your application and your New Relic agent. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic Ruby agent's API to track custom metrics, it's important to consider your metric naming and how the values will aggregate. A custom metric name consists of the prefix Custom/, the class or category name, and a label, each separated with a slash mark /: Custom/<class>/<method> or Custom/<category>/<name> (for example, Custom/MyClass/My_method). Metric names and paths Metric names are paths delimited by a slash mark /. For custom instrumentation use this pattern: <category>/<class>/<method> Copy To override the default metric name, pass a second argument to add_method_tracer. This may be necessary to specify a category other than the default Custom, or if the method and class name do not represent the metric well. Reserved categories include: ActiveRecord Apdex CPU Controller Database Memory View Custom Tip For custom metric names, use Custom/<class>/<method> or Custom/<category>>/>name> Metrics and stats in the Ruby agent There are two basic data structures used to collect metric data: MetricSpec and Stats. A MetricSpec is an identifier for which we have data. The following pseudo Ruby defines a metric: class MetricSpec attr_accessor :name # String - metric name attr_accessor :scope # String - current controller action end Copy The name identifies what the metric represents. The optional scope is the name of the controller action handling the current request. A metric is \"global\" if the scope is empty. Metric values are recorded by Stats. Stats typically collects data about method execution but can store any interesting data. The following pseudo Ruby defines Stats: class Stats attr_accessor :call_count # Integer - method invocation count attr_accessor :total_call_time # Float - total method call time (in seconds) attr_accessor :total_exclusive_time # Float - total time spent in the traced method minus any child time (in seconds) attr_accessor :min_call_time # Float - the smallest method invocation time (in seconds) attr_accessor :max_call_time # Float - the largest method invocation time (in seconds) attr_accessor :sum_of_squares # Float - the sum of squares of response times - used for standard deviation computation attr_accessor :begin_time # Time - the start of the time window for this data attr_accessor :end_time # Time - end of the time window for this data end Copy Stat aggregation policy One of New Relic's strengths is its ability to aggregate data over time. (Aggregation is the act of combining several things into one.) When collecting custom metrics, the aggregation policy can be important to know when collecting custom metrics. These include: call_count: Addition total_call_time: Addition total_exclusive_time: Addition min_call_time: Min() of each min_call_time max_call_time: Max() of each max_call_time sum_of_squares: Addition begin_time: Min() of each begin_time end_time: Max() of each end_time Record custom metrics The public API for recording metric data consists of two methods on NewRelic::Agent, record_metric and increment_metric. Tip Both record_metric and increment_metric are thread safe. record_metric(metric_name, value) record_metric should be used to record an event-based metric, usually associated with a particular duration. metric_name must be a String following standard metric naming rules. value will usually be a Numeric, but may also be a Hash. When value is a numeric value, it should represent the magnitude of a measurement associated with an event, such as the duration for a particular method call. When value is a Hash, it must contain :count, :total, :min, :max, and :sum_of_squares keys, all with Numeric values. This form is useful if you wish to aggregate metrics on your own and report them periodically (e.g. from a background thread). The provided stats will be aggregated with any previously collected values for the same metric. The names of the hash keys have been chosen to match the names of the keys used by the platform API. increment_metric(metric_name, amount=1) increment_metric should be used to update a metric that acts as a simple counter. The count of the selected metric will be incremented by the specified amount. Example custom metric Here is an example that shows how you might use metrics to track currency flowing through a site: class Cart def checkout() amount = compute_cart_total # computes the amount to charge the customer ::NewRelic::Agent.record_metric('Custom/Cart/charge_amount', amount) charge_customer(amount) ... end end Copy For more information about how data aggregates over time, see Stat aggregation policy. View custom metrics To view these custom metrics, use the query builder to search metrics, create customizable charts, and add those charts to dashboards. For more help Additional documentation resources include: Custom metrics (Overview of custom metrics) Selecting custom dashboard metrics (Viewing custom metrics) Ruby custom instrumentation (Instrumenting code elements New Relic does not automatically instrument)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.87023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> custom metrics",
        "sections": "Metrics and stats in the <em>Ruby</em> <em>agent</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": " impact the performance of your application and your New Relic <em>agent</em>. To avoid data problems, keep the total number of unique custom metrics under 2000. Naming metrics Metric names identify specific data values tracked by New Relic. When using the New Relic <em>Ruby</em> <em>agent</em>&#x27;s <em>API</em> to track custom metrics"
      },
      "id": "603eb880e7b9d2284b2a07e1"
    }
  ],
  "/docs/agents/ruby-agent/attributes/enable-disable-attributes-ruby": [
    {
      "sections": [
        "Ruby agent attributes",
        "httpResponseCode",
        "request.headers.referer",
        "request.parameters.*",
        "job.resque.args.*",
        "job.sidekiq.args.*",
        "Adding custom attributes",
        "Caution",
        "Upgrading the Ruby agent",
        "For more help"
      ],
      "title": "Ruby agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Attributes"
      ],
      "external_id": "76453699d829800b2dc9757c66c6f25f6c37f86a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/attributes/ruby-agent-attributes/",
      "published_at": "2021-07-02T12:16:28Z",
      "updated_at": "2021-06-02T22:15:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations. These attribute settings apply to version 3.12.0 or higher of the Ruby agent. Ruby agent attributes The following table lists the attributes that can be automatically captured by the Ruby agent: httpResponseCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable Note: The httpResponseCode attribute (string value) is deprecated as of agent version 6.12.0. http.statusCode (integer value) should be used instead. request.headers.referer The HTTP referrer header if present (minus the query string). Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.parameters.* The HTTP request parameters, associated with the transaction. Available for Rails, Sinatra, and Grape applications only. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled Note: The capture_params property is deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. job.resque.args.* Job arguments passed to the Resque worker. Arguments passed to Resque workers are positional. These arguments are stored as keys of the form job.resque.args.<position> where position is the index of the argument to the perform method. For example, a Resque job that takes two arguments will have keys job.resque.args.0 and job.resque.args.1. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable Note: The resque.capture_params property is deprecated. However, if set to true, it will enable capture of Resque arguments for transaction traces, traced errors. job.sidekiq.args.* Job arguments passed to the Sidekiq worker. Arguments passed to Sidekiq workers are positional. These arguments are stored as keys of the form job.sidekiq.args.<position> where position is the index of the argument to the perform method. For example, a Sidekiq job that takes two arguments will have keys job.sidekiq.args.0 and job.sidekiq.args.1. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable Note: The sidekiq.capture_params property is deprecated. However, if set to true, it will enable capture of Sidekiq arguments for transaction traces and traced errors. Adding custom attributes To capture additional custom attributes from your application, use NewRelic::Agent.add_custom_attributes. For full reference see Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Caution If you want to query your custom parameters or attributes, avoid using any of the reserved terms for naming them. Upgrading the Ruby agent When upgrading to Ruby agent 3.12.0 or higher, upgrade your newrelic.yml configuration. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by New Relic agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Ruby agent attributes) Attribute examples (scenarios and results of enabling and disabling different Ruby agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.16116,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>Ruby</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by New Relic <em>agents</em>) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>Ruby</em> <em>agent</em> <em>attributes</em>) Attribute examples (scenarios and results of enabling and disabling different <em>Ruby</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "6044042028ccbc7da82c6083"
    },
    {
      "sections": [
        "Collect custom attributes",
        "Requirements",
        "APM: Record custom attributes",
        "Important",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Browser monitoring: Record custom attributes",
        "Infrastructure monitoring: Record custom attributes",
        "Mobile monitoring: Record custom attributes",
        "For more help"
      ],
      "title": "Collect custom attributes",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Install and configure"
      ],
      "external_id": "ad362b1a5cf3a5661eb416584fd9c79db064f539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/data/customize-data/collect-custom-attributes/",
      "published_at": "2021-07-02T19:49:53Z",
      "updated_at": "2021-07-02T19:49:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For some New Relic solutions, one way to report custom data to New Relic is to use custom attributes. For example, for New Relic browser monitoring, you might create a custom attribute to track the user name associated with a slow or failing request. Requirements Custom attributes are available for these New Relic solutions: APM Browser monitoring Mobile monitoring Infrastructure monitoring For other custom data solutions, see Intro to custom data. APM: Record custom attributes Important Review the list of reserved terms used by NRQL. Using reserved terms can cause issues. To enable and use custom attributes for APM, follow the procedure for your APM agent: C SDK To add custom attributes to applications monitored by the C SDK, call one of the attribute functions; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function. Go Custom attribute collection is enabled by default in the Go agent. However, you can disable custom attribute collection. Java Custom attribute collection is enabled by default in Java. You can collect custom attributes using XML and the Java agent APIs. These two methods can be used in conjunction with each other. Method How to do it Specify attributes in XML XML allows you to specify custom attributes without changing any of your source code. You can have multiple XML files for custom attributes that are grouped by some logical facet. To set custom attributes for your Java app via XML: Review the New Relic Java agent's documentation about XML file format, methods and classes, and examples. From your Extensions directory within the New Relic Java agent, create a single XML file. Define the methods you want New Relic to monitor by editing your XML file directly. Define an XML instrumentation file using the New Relic UI. This may require additional config in the common: block of your newrelic.yml. See Report custom attributes under Instrumentation options for more detail. Call the agent's API Example 1: Adding custom attributes to transactions To collect custom attributes using the agent's API, call the relevant methods: For each method you want to record an attribute for, call NewRelic.addCustomParameter(...). Optional: Include or exclude certain attributes with attributes.include and attributes.exclude. For example, to record a variable named userId, include this code in the parent method: NewRelic.addCustomParameter(\"userId\", userId); Copy Example 2: Adding custom attributes to spans in distributed traces To collect custom attributes using the agent's API, call the relevant methods: For each span (currently executing method) that you want to record an attribute for, call NewRelic.getAgent().getTracedMethod().addCustomAttribute(...). Optional: Include or exclude certain attributes with span_events.attributes.include and span_events.attributes.exclude. For example, to record a variable named userId on the current span, include this code in the associated method: NewRelic.getAgent().getTracedMethod().addCustomAttribute(\"userId\", userId); Copy Collect user attributes The Java agent also includes a built-in mechanism to enable user attributes and collect user information from HttpServletRequest.getUserPrincipal() as custom attributes. .NET Custom attribute collection is enabled by default in .NET. To collect custom attributes, call the relevant API methods: For each method for which you want to record an attribute, call AddCustomAttribute. Optional: Include or exclude attributes with the include and exclude configuration options. For example, to record attributes for a coupon code (string) and an item ID code (number), you could include this code in the parent method: IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction .AddCustomAttribute(\"Discount Code\", \"Summer Super Sale\") .AddCustomAttribute(\"Item Code\", 31456); Copy Node.js Custom attribute collection is enabled by default in Node.js. To collect custom attributes, call the relevant API method: For each attribute you want to record, call newrelic.addCustomAttribute. To record multiple attributes using a single call, use newrelic.addCustomAttributes. For example, to record attributes for a coupon code and an item ID code, you could include this in the parent method: newrelic.addCustomAttributes({ \"Discount Code\": \"Summer Super Sale\", \"Item Code\": 31456 }); Copy PHP Custom attribute collection is enabled by default in PHP. To collect custom attributes, call the relevant API method for each method that you want to record an attribute; newrelic_add_custom_parameter for transaction events and spans newrelic_add_custom_span_parameter for only spans For example, to record a variable named $userId, include this code in the parent method: newrelic_add_custom_parameter ('userID', $userId) Copy Python Custom attribute collection is enabled by default in Python. To collect custom attributes, call add_custom_parameter for each method that you want to record an attribute. For example, to record a variable named user_id, include this code in the parent method: newrelic.agent.add_custom_parameter('user_id', user_id) Copy Ruby Custom attribute collection is enabled by default in Ruby. To collect custom attributes, call the relevant API methods: For Ruby agent version 3.12.0 or higher, use the add_custom_attributes method. For example, to record a variable named @user_id, include this code in the parent method: ::NewRelic::Agent.add_custom_attributes({ user_id: @user.id }) Copy For Ruby agent version 3.11.2 or lower, use the add_custom_parameters method. For example, to record a variable named @user_id, include this code in the parent method: ::NewRelic::Agent.add_custom_parameters({ user_id: @user.id }) Copy Browser monitoring: Record custom attributes The browser agent provides an API to specify extra details associated with a page view or browser interaction, either by forwarding attributes from APM to browser monitoring or by specifying custom attributes through JavaScript. Values forwarded from the APM agent are encoded and injected into browser attributes by our browser agent. Infrastructure monitoring: Record custom attributes Our Infrastructure monitoring lets you create custom attributes that are used to annotate the data from the infrastructure agent. You can use this metadata to build filter sets, group your results, and annotate your data. Mobile monitoring: Record custom attributes Mobile agents include API calls to record custom attributes: For an overview of mobile monitoring custom data, see Insert custom events and attributes Android method: setAttribute iOS method: setAttribute For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.45406,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Collect custom <em>attributes</em>",
        "sections": "Collect custom <em>attributes</em>",
        "body": " a variable named user_id, include this code in the parent method: newrelic.<em>agent</em>.add_custom_parameter(&#x27;user_id&#x27;, user_id) Copy <em>Ruby</em> Custom attribute collection is enabled by default in <em>Ruby</em>. To collect custom <em>attributes</em>, call the relevant API methods: For <em>Ruby</em> <em>agent</em> version 3.12.0 or higher, use"
      },
      "id": "603eb9a3196a67a990a83da5"
    },
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "entity_guid",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "Caution",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes",
        "For more help"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-07-02T19:47:38Z",
      "updated_at": "2021-06-20T18:19:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. entity_guid Type String Default nil Environ variable NEW_RELIC_ENTITY_GUID The Entity GUID for the entity running this agent. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED Deprecated. For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The Browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT This is true by default, this enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default \"about,assets:clean,assets:clobber,assets:environment,assets:precompile,assets:precompile:all,db:create,db:drop,db:fixtures:load,db:migrate,db:migrate:status,db:rollback,db:schema:cache:clear,db:schema:cache:dump,db:schema:dump,db:schema:load,db:seed,db:setup,db:structure:dump,db:version,doc:app,log:clear,middleware,notes,notes:custom,rails:template,rails:update,routes,secret,spec,spec:features,spec:requests,spec:controllers,spec:helpers,spec:models,spec:views,spec:routing,spec:rcov,stats,test,test:all,test:all:db,test:recent,test:single,test:uncommitted,time:zones:all,tmp:clear,tmp:create,webpacker:compile\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED If true, enables cross-application tracing. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Deprecated; use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default false Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes. For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, installation, configuration, troubleshooting, known issues, advanced features and configuration, beta releases) Transaction traces and Configuring transaction traces (detailed information about New Relic's Transaction Traces feature)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.99968,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> configuration",
        "sections": "<em>Ruby</em> <em>agent</em> configuration",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " request parameters and attaches them to transaction traces, traced errors, and TransactionError events When using the capture_params setting, the <em>Ruby</em> <em>agent</em> will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the <em>attributes</em>"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    }
  ],
  "/docs/agents/ruby-agent/attributes/ruby-agent-attributes": [
    {
      "sections": [
        "Collect custom attributes",
        "Requirements",
        "APM: Record custom attributes",
        "Important",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Browser monitoring: Record custom attributes",
        "Infrastructure monitoring: Record custom attributes",
        "Mobile monitoring: Record custom attributes",
        "For more help"
      ],
      "title": "Collect custom attributes",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Install and configure"
      ],
      "external_id": "ad362b1a5cf3a5661eb416584fd9c79db064f539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/data/customize-data/collect-custom-attributes/",
      "published_at": "2021-07-02T19:49:53Z",
      "updated_at": "2021-07-02T19:49:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For some New Relic solutions, one way to report custom data to New Relic is to use custom attributes. For example, for New Relic browser monitoring, you might create a custom attribute to track the user name associated with a slow or failing request. Requirements Custom attributes are available for these New Relic solutions: APM Browser monitoring Mobile monitoring Infrastructure monitoring For other custom data solutions, see Intro to custom data. APM: Record custom attributes Important Review the list of reserved terms used by NRQL. Using reserved terms can cause issues. To enable and use custom attributes for APM, follow the procedure for your APM agent: C SDK To add custom attributes to applications monitored by the C SDK, call one of the attribute functions; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function. Go Custom attribute collection is enabled by default in the Go agent. However, you can disable custom attribute collection. Java Custom attribute collection is enabled by default in Java. You can collect custom attributes using XML and the Java agent APIs. These two methods can be used in conjunction with each other. Method How to do it Specify attributes in XML XML allows you to specify custom attributes without changing any of your source code. You can have multiple XML files for custom attributes that are grouped by some logical facet. To set custom attributes for your Java app via XML: Review the New Relic Java agent's documentation about XML file format, methods and classes, and examples. From your Extensions directory within the New Relic Java agent, create a single XML file. Define the methods you want New Relic to monitor by editing your XML file directly. Define an XML instrumentation file using the New Relic UI. This may require additional config in the common: block of your newrelic.yml. See Report custom attributes under Instrumentation options for more detail. Call the agent's API Example 1: Adding custom attributes to transactions To collect custom attributes using the agent's API, call the relevant methods: For each method you want to record an attribute for, call NewRelic.addCustomParameter(...). Optional: Include or exclude certain attributes with attributes.include and attributes.exclude. For example, to record a variable named userId, include this code in the parent method: NewRelic.addCustomParameter(\"userId\", userId); Copy Example 2: Adding custom attributes to spans in distributed traces To collect custom attributes using the agent's API, call the relevant methods: For each span (currently executing method) that you want to record an attribute for, call NewRelic.getAgent().getTracedMethod().addCustomAttribute(...). Optional: Include or exclude certain attributes with span_events.attributes.include and span_events.attributes.exclude. For example, to record a variable named userId on the current span, include this code in the associated method: NewRelic.getAgent().getTracedMethod().addCustomAttribute(\"userId\", userId); Copy Collect user attributes The Java agent also includes a built-in mechanism to enable user attributes and collect user information from HttpServletRequest.getUserPrincipal() as custom attributes. .NET Custom attribute collection is enabled by default in .NET. To collect custom attributes, call the relevant API methods: For each method for which you want to record an attribute, call AddCustomAttribute. Optional: Include or exclude attributes with the include and exclude configuration options. For example, to record attributes for a coupon code (string) and an item ID code (number), you could include this code in the parent method: IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction .AddCustomAttribute(\"Discount Code\", \"Summer Super Sale\") .AddCustomAttribute(\"Item Code\", 31456); Copy Node.js Custom attribute collection is enabled by default in Node.js. To collect custom attributes, call the relevant API method: For each attribute you want to record, call newrelic.addCustomAttribute. To record multiple attributes using a single call, use newrelic.addCustomAttributes. For example, to record attributes for a coupon code and an item ID code, you could include this in the parent method: newrelic.addCustomAttributes({ \"Discount Code\": \"Summer Super Sale\", \"Item Code\": 31456 }); Copy PHP Custom attribute collection is enabled by default in PHP. To collect custom attributes, call the relevant API method for each method that you want to record an attribute; newrelic_add_custom_parameter for transaction events and spans newrelic_add_custom_span_parameter for only spans For example, to record a variable named $userId, include this code in the parent method: newrelic_add_custom_parameter ('userID', $userId) Copy Python Custom attribute collection is enabled by default in Python. To collect custom attributes, call add_custom_parameter for each method that you want to record an attribute. For example, to record a variable named user_id, include this code in the parent method: newrelic.agent.add_custom_parameter('user_id', user_id) Copy Ruby Custom attribute collection is enabled by default in Ruby. To collect custom attributes, call the relevant API methods: For Ruby agent version 3.12.0 or higher, use the add_custom_attributes method. For example, to record a variable named @user_id, include this code in the parent method: ::NewRelic::Agent.add_custom_attributes({ user_id: @user.id }) Copy For Ruby agent version 3.11.2 or lower, use the add_custom_parameters method. For example, to record a variable named @user_id, include this code in the parent method: ::NewRelic::Agent.add_custom_parameters({ user_id: @user.id }) Copy Browser monitoring: Record custom attributes The browser agent provides an API to specify extra details associated with a page view or browser interaction, either by forwarding attributes from APM to browser monitoring or by specifying custom attributes through JavaScript. Values forwarded from the APM agent are encoded and injected into browser attributes by our browser agent. Infrastructure monitoring: Record custom attributes Our Infrastructure monitoring lets you create custom attributes that are used to annotate the data from the infrastructure agent. You can use this metadata to build filter sets, group your results, and annotate your data. Mobile monitoring: Record custom attributes Mobile agents include API calls to record custom attributes: For an overview of mobile monitoring custom data, see Insert custom events and attributes Android method: setAttribute iOS method: setAttribute For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.45396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Collect custom <em>attributes</em>",
        "sections": "Collect custom <em>attributes</em>",
        "body": " a variable named user_id, include this code in the parent method: newrelic.<em>agent</em>.add_custom_parameter(&#x27;user_id&#x27;, user_id) Copy <em>Ruby</em> Custom attribute collection is enabled by default in <em>Ruby</em>. To collect custom <em>attributes</em>, call the relevant API methods: For <em>Ruby</em> <em>agent</em> version 3.12.0 or higher, use"
      },
      "id": "603eb9a3196a67a990a83da5"
    },
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "entity_guid",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "Caution",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes",
        "For more help"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-07-02T19:47:38Z",
      "updated_at": "2021-06-20T18:19:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. entity_guid Type String Default nil Environ variable NEW_RELIC_ENTITY_GUID The Entity GUID for the entity running this agent. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED Deprecated. For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The Browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT This is true by default, this enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default \"about,assets:clean,assets:clobber,assets:environment,assets:precompile,assets:precompile:all,db:create,db:drop,db:fixtures:load,db:migrate,db:migrate:status,db:rollback,db:schema:cache:clear,db:schema:cache:dump,db:schema:dump,db:schema:load,db:seed,db:setup,db:structure:dump,db:version,doc:app,log:clear,middleware,notes,notes:custom,rails:template,rails:update,routes,secret,spec,spec:features,spec:requests,spec:controllers,spec:helpers,spec:models,spec:views,spec:routing,spec:rcov,stats,test,test:all,test:all:db,test:recent,test:single,test:uncommitted,time:zones:all,tmp:clear,tmp:create,webpacker:compile\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED If true, enables cross-application tracing. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Deprecated; use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default false Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes. For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, installation, configuration, troubleshooting, known issues, advanced features and configuration, beta releases) Transaction traces and Configuring transaction traces (detailed information about New Relic's Transaction Traces feature)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.999664,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> configuration",
        "sections": "<em>Ruby</em> <em>agent</em> configuration",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " request parameters and attaches them to transaction traces, traced errors, and TransactionError events When using the capture_params setting, the <em>Ruby</em> <em>agent</em> will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the <em>attributes</em>"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    },
    {
      "sections": [
        "Ruby attribute examples",
        "Contents",
        "Capture request parameters",
        "Exclude sensitive data while capturing request parameters",
        "Capture only specific request parameters",
        "Capture Resque job arguments",
        "Capture Sidekiq job arguments",
        "Disabling all attributes",
        "Selecting specific destinations",
        "Selecting values and destinations",
        "For more help"
      ],
      "title": "Ruby attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Attributes"
      ],
      "external_id": "040a2acaf99cfce727dfe88e69dc0511fbe16d48",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/attributes/ruby-attribute-examples/",
      "published_at": "2021-07-02T12:16:28Z",
      "updated_at": "2021-03-11T10:09:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the New Relic Ruby agent. Contents Capture request parameters Capturing request parameters is not enabled by default. The following configuration will turn on parameter capture for the default destinations: transaction_tracer, transaction_events, and error_collector. To limit the destinations see the Selecting specific destinations example. Configuration: attributes.include: request.parameters.* Copy Request parameters are prefixed with the string request.parameters, and nested parameters have keys to reflect that nesting. For example, a user with a location attribute nested below a profile would have a key ofrequest.parameters.user.profile.location. Similarly, attributes that are members of collections will have keys with indices that reflect the membership. If a user had multiple phone numbers, keys would appear as follows: request.parameters.phone_numbers.0, request.parameters.phone_numbers.1, etc. Exclude sensitive data while capturing request parameters There may be situations where you would like to omit sensitive information from request parameters, such as passwords or credit card numbers. The following configuration will accomplish that: Configuration: attributes.include: request.parameters.* attributes.exclude: [request.parameters.password, request.parameters.credit_card_no] Copy Capture only specific request parameters To capture only specific request parameters, you can simply pass a list to attributes.include: Configuration: attributes.include: [request.parameters.user_id, request.parameters.shard_id] Copy Capture Resque job arguments By default Resque job arguments are not captured. To enable this functionality use the configuration below. attributes.include: job.resque.args.* Copy Note: Arguments to Resque jobs are positional and the keys generated reflect this. For example a job that takes two arguments will have keys job.resque.args.0 and job.resque.args.1 Capture Sidekiq job arguments By default Sidekiq job arguments are not captured. To enable this functionality use the configuration below. attributes.include: job.sidekiq.args.* Copy Note: Arguments to Sidekiq jobs are positional and the keys generated reflect this. For example a job that takes two arguments will have keys job.sidekiq.args.0 and job.sidekiq.args.1 Disabling all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: attributes.enabled: false attributes.include: request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Selecting specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: attributes.enabled: true transaction_tracer.attributes.enabled: false attributes.exclude: foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Selecting values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The lang.oo.python key will be excluded only from transaction traces. The lang and lang.functional keys will be excluded from all destinations. Configuration: browser_monitoring.attributes.enabled: true attributes.exclude: lang* attributes.include: lang.oo.* transaction_tracer.attributes.exclude: lang.oo.python Copy Input keys: lang, lang.functional, lang.oo.ruby, lang.oo.python Copy Output for destinations: transaction_tracer: lang.oo.ruby error_collector: lang.oo.ruby, lang.oo.python transaction_events: lang.oo.ruby, lang.oo.python browser_monitoring: lang.oo.ruby, lang.oo.python Copy For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by New Relic agents) Ruby agent attributes (Ruby-specific attributes available as of version 3.12.0) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Ruby agent attributes) Collect custom attributes (enabling custom attributes by agent)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.283905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>attribute</em> examples",
        "sections": "<em>Ruby</em> <em>attribute</em> examples",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " browser_monitoring: lang.oo.<em>ruby</em>, lang.oo.python Copy For more help Additional documentation resources include: <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by New Relic <em>agents</em>) <em>Ruby</em> <em>agent</em> <em>attributes</em> (<em>Ruby</em>-specific <em>attributes</em> available as of version 3.12.0) Enabling"
      },
      "id": "6044041f28ccbc3e672c60be"
    }
  ],
  "/docs/agents/ruby-agent/attributes/ruby-attribute-examples": [
    {
      "sections": [
        "Ruby agent attributes",
        "httpResponseCode",
        "request.headers.referer",
        "request.parameters.*",
        "job.resque.args.*",
        "job.sidekiq.args.*",
        "Adding custom attributes",
        "Caution",
        "Upgrading the Ruby agent",
        "For more help"
      ],
      "title": "Ruby agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Attributes"
      ],
      "external_id": "76453699d829800b2dc9757c66c6f25f6c37f86a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/attributes/ruby-agent-attributes/",
      "published_at": "2021-07-02T12:16:28Z",
      "updated_at": "2021-06-02T22:15:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations. These attribute settings apply to version 3.12.0 or higher of the Ruby agent. Ruby agent attributes The following table lists the attributes that can be automatically captured by the Ruby agent: httpResponseCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable Note: The httpResponseCode attribute (string value) is deprecated as of agent version 6.12.0. http.statusCode (integer value) should be used instead. request.headers.referer The HTTP referrer header if present (minus the query string). Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.parameters.* The HTTP request parameters, associated with the transaction. Available for Rails, Sinatra, and Grape applications only. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled Note: The capture_params property is deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. job.resque.args.* Job arguments passed to the Resque worker. Arguments passed to Resque workers are positional. These arguments are stored as keys of the form job.resque.args.<position> where position is the index of the argument to the perform method. For example, a Resque job that takes two arguments will have keys job.resque.args.0 and job.resque.args.1. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable Note: The resque.capture_params property is deprecated. However, if set to true, it will enable capture of Resque arguments for transaction traces, traced errors. job.sidekiq.args.* Job arguments passed to the Sidekiq worker. Arguments passed to Sidekiq workers are positional. These arguments are stored as keys of the form job.sidekiq.args.<position> where position is the index of the argument to the perform method. For example, a Sidekiq job that takes two arguments will have keys job.sidekiq.args.0 and job.sidekiq.args.1. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable Note: The sidekiq.capture_params property is deprecated. However, if set to true, it will enable capture of Sidekiq arguments for transaction traces and traced errors. Adding custom attributes To capture additional custom attributes from your application, use NewRelic::Agent.add_custom_attributes. For full reference see Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Caution If you want to query your custom parameters or attributes, avoid using any of the reserved terms for naming them. Upgrading the Ruby agent When upgrading to Ruby agent 3.12.0 or higher, upgrade your newrelic.yml configuration. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by New Relic agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Ruby agent attributes) Attribute examples (scenarios and results of enabling and disabling different Ruby agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.16115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>Ruby</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by New Relic <em>agents</em>) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>Ruby</em> <em>agent</em> <em>attributes</em>) Attribute examples (scenarios and results of enabling and disabling different <em>Ruby</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "6044042028ccbc7da82c6083"
    },
    {
      "sections": [
        "Collect custom attributes",
        "Requirements",
        "APM: Record custom attributes",
        "Important",
        "C SDK",
        "Go",
        "Java",
        ".NET",
        "Node.js",
        "PHP",
        "Python",
        "Ruby",
        "Browser monitoring: Record custom attributes",
        "Infrastructure monitoring: Record custom attributes",
        "Mobile monitoring: Record custom attributes",
        "For more help"
      ],
      "title": "Collect custom attributes",
      "type": "docs",
      "tags": [
        "Using New Relic",
        "Cross-product functions",
        "Install and configure"
      ],
      "external_id": "ad362b1a5cf3a5661eb416584fd9c79db064f539",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/data/customize-data/collect-custom-attributes/",
      "published_at": "2021-07-02T19:49:53Z",
      "updated_at": "2021-07-02T19:49:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "For some New Relic solutions, one way to report custom data to New Relic is to use custom attributes. For example, for New Relic browser monitoring, you might create a custom attribute to track the user name associated with a slow or failing request. Requirements Custom attributes are available for these New Relic solutions: APM Browser monitoring Mobile monitoring Infrastructure monitoring For other custom data solutions, see Intro to custom data. APM: Record custom attributes Important Review the list of reserved terms used by NRQL. Using reserved terms can cause issues. To enable and use custom attributes for APM, follow the procedure for your APM agent: C SDK To add custom attributes to applications monitored by the C SDK, call one of the attribute functions; for example, newrelic_add_attribute_double(). The key name for your custom attribute depends on what you specify when you call the function. Go Custom attribute collection is enabled by default in the Go agent. However, you can disable custom attribute collection. Java Custom attribute collection is enabled by default in Java. You can collect custom attributes using XML and the Java agent APIs. These two methods can be used in conjunction with each other. Method How to do it Specify attributes in XML XML allows you to specify custom attributes without changing any of your source code. You can have multiple XML files for custom attributes that are grouped by some logical facet. To set custom attributes for your Java app via XML: Review the New Relic Java agent's documentation about XML file format, methods and classes, and examples. From your Extensions directory within the New Relic Java agent, create a single XML file. Define the methods you want New Relic to monitor by editing your XML file directly. Define an XML instrumentation file using the New Relic UI. This may require additional config in the common: block of your newrelic.yml. See Report custom attributes under Instrumentation options for more detail. Call the agent's API Example 1: Adding custom attributes to transactions To collect custom attributes using the agent's API, call the relevant methods: For each method you want to record an attribute for, call NewRelic.addCustomParameter(...). Optional: Include or exclude certain attributes with attributes.include and attributes.exclude. For example, to record a variable named userId, include this code in the parent method: NewRelic.addCustomParameter(\"userId\", userId); Copy Example 2: Adding custom attributes to spans in distributed traces To collect custom attributes using the agent's API, call the relevant methods: For each span (currently executing method) that you want to record an attribute for, call NewRelic.getAgent().getTracedMethod().addCustomAttribute(...). Optional: Include or exclude certain attributes with span_events.attributes.include and span_events.attributes.exclude. For example, to record a variable named userId on the current span, include this code in the associated method: NewRelic.getAgent().getTracedMethod().addCustomAttribute(\"userId\", userId); Copy Collect user attributes The Java agent also includes a built-in mechanism to enable user attributes and collect user information from HttpServletRequest.getUserPrincipal() as custom attributes. .NET Custom attribute collection is enabled by default in .NET. To collect custom attributes, call the relevant API methods: For each method for which you want to record an attribute, call AddCustomAttribute. Optional: Include or exclude attributes with the include and exclude configuration options. For example, to record attributes for a coupon code (string) and an item ID code (number), you could include this code in the parent method: IAgent agent = NewRelic.Api.Agent.NewRelic.GetAgent(); ITransaction transaction = agent.CurrentTransaction; transaction .AddCustomAttribute(\"Discount Code\", \"Summer Super Sale\") .AddCustomAttribute(\"Item Code\", 31456); Copy Node.js Custom attribute collection is enabled by default in Node.js. To collect custom attributes, call the relevant API method: For each attribute you want to record, call newrelic.addCustomAttribute. To record multiple attributes using a single call, use newrelic.addCustomAttributes. For example, to record attributes for a coupon code and an item ID code, you could include this in the parent method: newrelic.addCustomAttributes({ \"Discount Code\": \"Summer Super Sale\", \"Item Code\": 31456 }); Copy PHP Custom attribute collection is enabled by default in PHP. To collect custom attributes, call the relevant API method for each method that you want to record an attribute; newrelic_add_custom_parameter for transaction events and spans newrelic_add_custom_span_parameter for only spans For example, to record a variable named $userId, include this code in the parent method: newrelic_add_custom_parameter ('userID', $userId) Copy Python Custom attribute collection is enabled by default in Python. To collect custom attributes, call add_custom_parameter for each method that you want to record an attribute. For example, to record a variable named user_id, include this code in the parent method: newrelic.agent.add_custom_parameter('user_id', user_id) Copy Ruby Custom attribute collection is enabled by default in Ruby. To collect custom attributes, call the relevant API methods: For Ruby agent version 3.12.0 or higher, use the add_custom_attributes method. For example, to record a variable named @user_id, include this code in the parent method: ::NewRelic::Agent.add_custom_attributes({ user_id: @user.id }) Copy For Ruby agent version 3.11.2 or lower, use the add_custom_parameters method. For example, to record a variable named @user_id, include this code in the parent method: ::NewRelic::Agent.add_custom_parameters({ user_id: @user.id }) Copy Browser monitoring: Record custom attributes The browser agent provides an API to specify extra details associated with a page view or browser interaction, either by forwarding attributes from APM to browser monitoring or by specifying custom attributes through JavaScript. Values forwarded from the APM agent are encoded and injected into browser attributes by our browser agent. Infrastructure monitoring: Record custom attributes Our Infrastructure monitoring lets you create custom attributes that are used to annotate the data from the infrastructure agent. You can use this metadata to build filter sets, group your results, and annotate your data. Mobile monitoring: Record custom attributes Mobile agents include API calls to record custom attributes: For an overview of mobile monitoring custom data, see Insert custom events and attributes Android method: setAttribute iOS method: setAttribute For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.45396,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Collect custom <em>attributes</em>",
        "sections": "Collect custom <em>attributes</em>",
        "body": " a variable named user_id, include this code in the parent method: newrelic.<em>agent</em>.add_custom_parameter(&#x27;user_id&#x27;, user_id) Copy <em>Ruby</em> Custom attribute collection is enabled by default in <em>Ruby</em>. To collect custom <em>attributes</em>, call the relevant API methods: For <em>Ruby</em> <em>agent</em> version 3.12.0 or higher, use"
      },
      "id": "603eb9a3196a67a990a83da5"
    },
    {
      "sections": [
        "Ruby agent configuration",
        "Configuration methods and precedence",
        "View and edit config file options",
        "Update the config file",
        "Important",
        "General",
        "license_key",
        "agent_enabled",
        "app_name",
        "entity_guid",
        "monitor_mode",
        "log_level",
        "high_security",
        "security_policies_token",
        "proxy_host",
        "proxy_port",
        "proxy_user",
        "proxy_pass",
        "capture_params",
        "config_path",
        "apdex_t",
        "sync_startup",
        "send_data_on_exit",
        "timeout",
        "force_install_exit_handler",
        "log_file_name",
        "log_file_path",
        "prepend_active_record_instrumentation",
        "capture_memcache_keys",
        "message_tracer.segment_parameters.enabled",
        "marshaller",
        "backport_fast_active_record_connection_lookup",
        "labels",
        "ca_bundle_path",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "clear_transaction_state_after_fork",
        "exclude_newrelic_header",
        "infinite_tracing.trace_observer.host",
        "infinite_tracing.trace_observer.port",
        "Transaction Tracer",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.record_redis_arguments",
        "transaction_tracer.capture_attributes",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.limit_segments",
        "Error Collector",
        "error_collector.enabled",
        "error_collector.capture_attributes",
        "error_collector.ignore_errors",
        "Caution",
        "error_collector.max_backtrace_frames",
        "error_collector.capture_events",
        "error_collector.max_event_samples_stored",
        "Browser Monitoring",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.capture_attributes",
        "Analytics Events",
        "analytics_events.enabled",
        "analytics_events.max_samples_stored",
        "analytics_events.capture_attributes",
        "Attributes",
        "attributes.enabled",
        "transaction_tracer.attributes.enabled",
        "transaction_events.attributes.enabled",
        "error_collector.attributes.enabled",
        "browser_monitoring.attributes.enabled",
        "span_events.attributes.enabled",
        "transaction_segments.attributes.enabled",
        "attributes.exclude",
        "transaction_tracer.attributes.exclude",
        "transaction_events.attributes.exclude",
        "error_collector.attributes.exclude",
        "browser_monitoring.attributes.exclude",
        "span_events.attributes.exclude",
        "transaction_segments.attributes.exclude",
        "attributes.include",
        "transaction_tracer.attributes.include",
        "transaction_events.attributes.include",
        "error_collector.attributes.include",
        "browser_monitoring.attributes.include",
        "span_events.attributes.include",
        "transaction_segments.attributes.include",
        "Audit Log",
        "audit_log.enabled",
        "audit_log.path",
        "audit_log.endpoints",
        "Autostart",
        "autostart.denylisted_constants",
        "autostart.denylisted_executables",
        "autostart.denylisted_rake_tasks",
        "Cross Application Tracer",
        "cross_application_tracer.enabled",
        "Custom Attributes",
        "custom_attributes.enabled",
        "Custom Insights Events",
        "custom_insights_events.enabled",
        "custom_insights_events.max_samples_stored",
        "Disabling",
        "disable_rake",
        "disable_samplers",
        "disable_resque",
        "disable_sidekiq",
        "disable_dj",
        "disable_sinatra",
        "disable_sinatra_auto_middleware",
        "disable_view_instrumentation",
        "disable_activerecord_instrumentation",
        "disable_data_mapper",
        "disable_activejob",
        "disable_action_cable_instrumentation",
        "disable_active_storage",
        "disable_memcached",
        "disable_memcache_client",
        "disable_dalli",
        "disable_dalli_cas_client",
        "disable_memcache_instrumentation",
        "disable_gc_profiler",
        "disable_sequel_instrumentation",
        "disable_database_instrumentation",
        "disable_mongo",
        "disable_redis",
        "disable_vm_sampler",
        "disable_memory_sampler",
        "disable_cpu_sampler",
        "disable_delayed_job_sampler",
        "disable_active_record_notifications",
        "disable_bunny",
        "disable_curb",
        "disable_excon",
        "disable_httpclient",
        "disable_net_http",
        "disable_rack",
        "disable_rack_urlmap",
        "disable_puma_rack",
        "disable_puma_rack_urlmap",
        "disable_typhoeus",
        "disable_httprb",
        "disable_middleware_instrumentation",
        "disable_grape",
        "Distributed Tracing",
        "distributed_tracing.enabled",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Instrumentation",
        "instrumentation.net_http",
        "instrumentation.typhoeus",
        "instrumentation.bunny",
        "instrumentation.httprb",
        "instrumentation.resque",
        "instrumentation.redis",
        "instrumentation.rake",
        "instrumentation.mongo",
        "instrumentation.delayed_job",
        "instrumentation.httpclient",
        "instrumentation.curb",
        "instrumentation.sinatra",
        "instrumentation.rack",
        "instrumentation.rack_urlmap",
        "instrumentation.puma_rack",
        "instrumentation.puma_rack_urlmap",
        "instrumentation.memcached",
        "instrumentation.memcache_client",
        "instrumentation.memcache",
        "instrumentation.excon",
        "instrumentation.grape",
        "Mongo",
        "mongo.capture_queries",
        "mongo.obfuscate_queries",
        "Process Host",
        "process_host.display_name",
        "Rake",
        "rake.tasks",
        "rake.connect_timeout",
        "Resque",
        "resque.capture_params",
        "Rules",
        "rules.ignore_url_regexes",
        "Sidekiq",
        "sidekiq.capture_params",
        "Slow SQL",
        "slow_sql.enabled",
        "slow_sql.explain_threshold",
        "slow_sql.explain_enabled",
        "slow_sql.record_sql",
        "slow_sql.use_longer_sql_id",
        "Span Events",
        "span_events.enabled",
        "span_events.queue_size",
        "span_events.max_samples_stored",
        "Strip Exception Messages",
        "strip_exception_messages.enabled",
        "strip_exception_messages.allowed_classes",
        "Thread Profiler",
        "thread_profiler.enabled",
        "Utilization",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "utilization.detect_kubernetes",
        "For more help"
      ],
      "title": "Ruby agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Configuration"
      ],
      "external_id": "ee72f1c59d456c5e5a089cfa81bfbde6064d7cb0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/configuration/ruby-agent-configuration/",
      "published_at": "2021-07-02T19:47:38Z",
      "updated_at": "2021-06-20T18:19:23Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure the New Relic Ruby agent with settings in a configuration file, environment variables, or programmatically with server-side configuration. This document summarizes the configuration options available for the Ruby agent. If the default value for a configuration option is (Dynamic), this means the Ruby agent calculates the default at runtime. The value for the config setting defaults to the value of another setting as appropriate. Configuration methods and precedence The primary (default) method to configure the Ruby agent is via the configuration file (newrelic.yml) in the config subdirectory. To set configuration values using environment variables: Add the prefix NEW_RELIC_ to the setting's name. Replace any periods . with underscores _. You can also configure a few values in the UI via server-side configuration. The Ruby agent follows this order of precedence for configuration: Environment variables Server-side configuration Configuration file (newrelic.yml) Default configuration settings In other words, environment variables override all other configuration settings and info, server-side configuration overrides the configuration file and default config settings, and so on. View and edit config file options The Ruby agent's newrelic.yml is a standard YAML configuration file. It typically includes a Defaults section at the top, plus sections below for each application environment; for example, Development, Testing, and Production. The Ruby agent determines which section of the newrelic.yml config file to read from by looking at certain environment variables to derive the application's environment. This can be useful, for example, when you want to use info for the log_level config setting in your production environment, and you want more verbose log_level config settings (such as debug in your development environment. Here is an example newrelic.yml config file: common: &default_settings license_key: 'YOUR_LICENSE_KEY' app_name: 'My Application Name' production: <<: *default_settings log_level: info development: <<: *default_settings log_level: debug Copy For non-Rails apps, the Ruby agent looks for the following environment variables, in this order, to determine the application environment: NEW_RELIC_ENV RUBY_ENV RAILS_ENV APP_ENV RACK_ENV If the Ruby agent does not detect values for any of those environment variables, it will default the application environment to development and read from the development section of the newrelic.yml config file. When running the Ruby agent in a Rails app, the agent first looks for the NEW_RELIC_ENV environment variable to determine the application environment and which section of the newrelic.yml to use. If NEW_RELIC_ENV is not present, the agent uses the Rails environment (RAILS_ENV or RAILS.env, depending on the version of Rails) . When you edit the config file, be sure to: Indent only with two spaces. Indent only where relevant, in stanzas such as error_collector. If you do not indent correctly, the agent may throw an Unable to parse configuration file error on startup. To view the most current list of available Ruby agent configuration options, use the rake newrelic:config:docs command. This document describes the most common options. Update the config file This documentation applies to the Ruby agent's latest release. For details on earlier versions, refer to the comments in newrelic.yml itself. To update newrelic.yml file after a new release, use the template in the base directory of the agent gem. When you update to new gem versions, examine or diff config/newrelic.yml and newrelic.yml in the installation directory to take advantage of new configuration options. Important Updating the gem does not automatically update config/newrelic.yml. General These settings are available for agent configuration. Some settings depend on your New Relic subscription level. license_key Type String Default \"\" Environ variable NEW_RELIC_LICENSE_KEY Your New Relic license key. agent_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_AGENT_ENABLED If true, allows the Ruby agent to run. app_name Type String Default (Dynamic) Environ variable NEW_RELIC_APP_NAME Specify the application name used to aggregate data in the New Relic UI. To report data to multiple apps at the same time, specify a list of names separated by a semicolon ;. For example, MyApp or MyStagingApp;Instance1. entity_guid Type String Default nil Environ variable NEW_RELIC_ENTITY_GUID The Entity GUID for the entity running this agent. monitor_mode Type Boolean Default (Dynamic) Environ variable NEW_RELIC_MONITOR_MODE When true, the agent transmits data about your app to the New Relic collector. log_level Type String Default \"info\" Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages. Possible log levels, in increasing verbosity, are: error, warn, info or debug. high_security Type Boolean Default false Environ variable NEW_RELIC_HIGH_SECURITY If true, enables high security mode. Ensure you understand the implications of high security mode before enabling this setting. security_policies_token Type String Default \"\" Environ variable NEW_RELIC_SECURITY_POLICIES_TOKEN Applies Language Agent Security Policy settings. proxy_host Type String Default nil Environ variable NEW_RELIC_PROXY_HOST Defines a host for communicating with the New Relic collector via a proxy server. proxy_port Type Integer Default 8080 Environ variable NEW_RELIC_PROXY_PORT Defines a port for communicating with the New Relic collector via a proxy server. proxy_user Type String Default nil Environ variable NEW_RELIC_PROXY_USER Defines a user for communicating with the New Relic collector via a proxy server. proxy_pass Type String Default nil Environ variable NEW_RELIC_PROXY_PASS Defines a password for communicating with the New Relic collector via a proxy server. capture_params Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_PARAMS When true, the agent captures HTTP request parameters and attaches them to transaction traces, traced errors, and TransactionError events When using the capture_params setting, the Ruby agent will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the attributes.include setting instead. For more information, see the Ruby attribute examples. config_path Type String Default (Dynamic) Environ variable NEW_RELIC_CONFIG_PATH Path to newrelic.yml. If undefined, the agent checks the following directories (in order): config/newrelic.yml, newrelic.yml, $HOME/.newrelic/newrelic.yml and $HOME/newrelic.yml. apdex_t Type Float Default 0.5 Environ variable NEW_RELIC_APDEX_T DEPRECATED Deprecated. For agent versions 3.5.0 or higher, set your Apdex T via the New Relic UI. sync_startup Type Boolean Default false Environ variable NEW_RELIC_SYNC_STARTUP When set to true, forces a synchronous connection to the New Relic collector during application startup. For very short-lived processes, this helps ensure the New Relic agent has time to report. send_data_on_exit Type Boolean Default true Environ variable NEW_RELIC_SEND_DATA_ON_EXIT If true, enables the exit handler that sends data to the New Relic collector before shutting down. timeout Type Integer Default 120 Environ variable NEW_RELIC_TIMEOUT Defines the maximum number of seconds the agent should spend attempting to connect to the collector. force_install_exit_handler Type Boolean Default false Environ variable NEW_RELIC_FORCE_INSTALL_EXIT_HANDLER Forces the exit handler that sends all cached data to collector before shutting down to be installed regardless of detecting scenarios where it generally should not be. Known use-case for this option is where Sinatra is running as an embedded service within another framework and the agent is detecting the Sinatra app and skipping the at_exit handler as a result. Sinatra classically runs the entire application in an at_exit block and would otherwise misbehave if the Agent's at_exit handler was also installed in those circumstances. Note: send_data_on_exit should also be set to true in tandem with this setting. log_file_name Type String Default \"newrelic_agent.log\" Environ variable NEW_RELIC_LOG_FILE_NAME Defines a name for the log file. log_file_path Type String Default \"log/\" Environ variable NEW_RELIC_LOG_FILE_PATH Defines a path to the agent log file, excluding the filename. prepend_active_record_instrumentation Type Boolean Default false Environ variable NEW_RELIC_PREPEND_ACTIVE_RECORD_INSTRUMENTATION If true, uses Module#prepend rather than alias_method for ActiveRecord instrumentation. capture_memcache_keys Type Boolean Default false Environ variable NEW_RELIC_CAPTURE_MEMCACHE_KEYS Enable or disable the capture of memcache keys from transaction traces. message_tracer.segment_parameters.enabled Type Boolean Default true Environ variable NEW_RELIC_MESSAGE_TRACER_SEGMENT_PARAMETERS_ENABLED If true, the agent will collect metadata about messages and attach them as segment parameters. marshaller Type String Default \"json\" Environ variable NEW_RELIC_MARSHALLER Specifies a marshaller for transmitting data to the New Relic collector. Currently json is the only valid value for this setting. backport_fast_active_record_connection_lookup Type Boolean Default false Environ variable NEW_RELIC_BACKPORT_FAST_ACTIVE_RECORD_CONNECTION_LOOKUP Backports the faster ActiveRecord connection lookup introduced in Rails 6, which improves agent performance when instrumenting ActiveRecord. Note that this setting may not be compatible with other gems that patch ActiveRecord. labels Type String Default \"\" Environ variable NEW_RELIC_LABELS A dictionary of label names and values that will be applied to the data sent from this agent. May also be expressed as a semicolon-delimited ; string of colon-separated : pairs. For example, <var>Server</var>:<var>One</var>;<var>Data Center</var>:<var>Primary</var>. ca_bundle_path Type String Default nil Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by New Relic's data collection service. datastore_tracer.instance_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_INSTANCE_REPORTING_ENABLED If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow SQL traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Environ variable NEW_RELIC_DATASTORE_TRACER_DATABASE_NAME_REPORTING_ENABLED If false, the agent will not add database_name parameter to transaction or slow sql traces. clear_transaction_state_after_fork Type Boolean Default false Environ variable NEW_RELIC_CLEAR_TRANSACTION_STATE_AFTER_FORK If true, the agent will clear Tracer::State in Agent.drop_buffered_data. exclude_newrelic_header Type Boolean Default false Environ variable NEW_RELIC_EXCLUDE_NEWRELIC_HEADER Allows newrelic distributed tracing headers to be suppressed on outbound requests. infinite_tracing.trace_observer.host Type String Default \"\" Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_HOST Configures the hostname for the Trace Observer Host. When configured, enables tail-based sampling by sending all recorded spans to a Trace Observer for further sampling decisions, irrespective of any usual agent sampling decision. infinite_tracing.trace_observer.port Type Integer Default 443 Environ variable NEW_RELIC_INFINITE_TRACING_TRACE_OBSERVER_PORT Configures the TCP/IP port for the Trace Observer Host Transaction Tracer The transaction traces feature collects detailed information from a selection of transactions, including a summary of the calling sequence, a breakdown of time spent, and a list of SQL queries and their query plans (on mysql and postgresql). Available features depend on your New Relic subscription level. transaction_tracer.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_ENABLED If true, enables collection of transaction traces. transaction_tracer.transaction_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_TRANSACTION_THRESHOLD Specify a threshold in seconds. Transactions with a duration longer than this threshold are eligible for transaction traces. Specify a float value or the string apdex_f. transaction_tracer.record_sql Type String Default \"obfuscated\" Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_SQL Obfuscation level for SQL queries reported in transaction trace nodes. By default, this is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to none. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. transaction_tracer.record_redis_arguments Type Boolean Default false Environ variable NEW_RELIC_TRANSACTION_TRACER_RECORD_REDIS_ARGUMENTS If true, the agent records Redis command arguments in transaction traces. transaction_tracer.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use transaction_tracer.attributes.enabled instead. transaction_tracer.explain_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_THRESHOLD Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explain_enabled is true. transaction_tracer.explain_enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_TRACER_EXPLAIN_ENABLED If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Environ variable NEW_RELIC_TRANSACTION_TRACER_STACK_TRACE_THRESHOLD Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold. transaction_tracer.limit_segments Type Integer Default 4000 Environ variable NEW_RELIC_TRANSACTION_TRACER_LIMIT_SEGMENTS Maximum number of transaction trace nodes to record in a single transaction trace. Error Collector The agent collects and reports all uncaught exceptions by default. These configuration options allow you to customize the error collection. error_collector.enabled Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_ENABLED If true, the agent captures traced errors and error count metrics. error_collector.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use error_collector.attributes.enabled instead. error_collector.ignore_errors Type String Default \"ActionController::RoutingError,Sinatra::NotFound\" Environ variable NEW_RELIC_ERROR_COLLECTOR_IGNORE_ERRORS Specify a comma-delimited list of error classes that the agent should ignore. Caution Server side configuration takes precedence for this setting over all environment configurations. This differs from all other configuration settings where environment variable take precedence over server side configuration. error_collector.max_backtrace_frames Type Integer Default 50 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_BACKTRACE_FRAMES Defines the maximum number of frames in an error backtrace. Backtraces over this amount are truncated at the beginning and end. error_collector.capture_events Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_CAPTURE_EVENTS If true, the agent collects TransactionError events. error_collector.max_event_samples_stored Type Integer Default 100 Environ variable NEW_RELIC_ERROR_COLLECTOR_MAX_EVENT_SAMPLES_STORED Defines the maximum number of TransactionError events sent to Insights per harvest cycle. Browser Monitoring The Browser monitoring page load timing feature (sometimes referred to as real user monitoring or RUM) gives you insight into the performance real users are experiencing with your website. This is accomplished by measuring the time it takes for your users' browsers to download and render your web pages by injecting a small amount of JavaScript code into the header and footer of each page. browser_monitoring.auto_instrument Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_AUTO_INSTRUMENT This is true by default, this enables auto-injection of the JavaScript header for page load timing (sometimes referred to as real user monitoring or RUM). browser_monitoring.capture_attributes Type Boolean Default false Environ variable NEW_RELIC_BROWSER_MONITORING_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use browser_monitoring.attributes.enabled instead. Analytics Events New Relic dashboards is a resource to gather and visualize data about your software and what it says about your business. With it you can quickly and easily create real-time dashboards to get immediate answers about end-user experiences, clickstreams, mobile activities, and server transactions. analytics_events.enabled Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_ENABLED If true, enables analytics event sampling. analytics_events.max_samples_stored Type Integer Default 1200 Environ variable NEW_RELIC_ANALYTICS_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of request events reported from a single harvest. analytics_events.capture_attributes Type Boolean Default true Environ variable NEW_RELIC_ANALYTICS_EVENTS_CAPTURE_ATTRIBUTES DEPRECATED Deprecated; use transaction_events.attributes.enabled instead. Attributes Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can be viewed within transaction traces in APM, traced errors in APM, transaction events in dashboards, and page views in dashboards. You can customize exactly which attributes will be sent to each of these destinations attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_ATTRIBUTES_ENABLED If true, enables capture of attributes for all destinations. transaction_tracer.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction traces. transaction_events.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes from transaction events. error_collector.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_ENABLED If true, the agent captures attributes from error collection. browser_monitoring.attributes.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_ENABLED If true, the agent captures attributes from browser monitoring. span_events.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on span events. transaction_segments.attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_ENABLED If true, the agent captures attributes on transaction segments. attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from all destinations. Allows * as wildcard at end. transaction_tracer.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction traces. Allows * as wildcard at end. transaction_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction events. Allows * as wildcard at end. error_collector.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from error collection. Allows * as wildcard at end. browser_monitoring.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from browser monitoring. Allows * as wildcard at end. span_events.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from span events. Allows * as wildcard at end. transaction_segments.attributes.exclude Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_EXCLUDE Prefix of attributes to exclude from transaction segments. Allows * as wildcard at end. attributes.include Type Array Default [] Environ variable NEW_RELIC_ATTRIBUTES_INCLUDE Prefix of attributes to include in all destinations. Allows * as wildcard at end. transaction_tracer.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_TRACER_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction traces. Allows * as wildcard at end. transaction_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include in transaction events. Allows * as wildcard at end. error_collector.attributes.include Type Array Default [] Environ variable NEW_RELIC_ERROR_COLLECTOR_ATTRIBUTES_INCLUDE Prefix of attributes to include in error collection. Allows * as wildcard at end. browser_monitoring.attributes.include Type Array Default [] Environ variable NEW_RELIC_BROWSER_MONITORING_ATTRIBUTES_INCLUDE Prefix of attributes to include in browser monitoring. Allows * as wildcard at end. span_events.attributes.include Type Array Default [] Environ variable NEW_RELIC_SPAN_EVENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on span events. Allows * as wildcard at end. transaction_segments.attributes.include Type Array Default [] Environ variable NEW_RELIC_TRANSACTION_SEGMENTS_ATTRIBUTES_INCLUDE Prefix of attributes to include on transaction segments. Allows * as wildcard at end. Audit Log audit_log.enabled Type Boolean Default false Environ variable NEW_RELIC_AUDIT_LOG_ENABLED If true, enables an audit log which logs communications with the New Relic collector. audit_log.path Type String Default (Dynamic) Environ variable NEW_RELIC_AUDIT_LOG_PATH Specifies a path to the audit log file (including the filename). audit_log.endpoints Type Array Default [\".*\"] Environ variable NEW_RELIC_AUDIT_LOG_ENDPOINTS List of allowed endpoints to include in audit log Autostart autostart.denylisted_constants Type String Default \"Rails::Console\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_CONSTANTS Specify a list of constants that should prevent the agent from starting automatically. Separate individual constants with a comma ,. For example, Rails::Console,UninstrumentedBackgroundJob. autostart.denylisted_executables Type String Default \"irb,rspec\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_EXECUTABLES Defines a comma-delimited list of executables that the agent should not instrument. For example, rake,my_ruby_script.rb. autostart.denylisted_rake_tasks Type String Default \"about,assets:clean,assets:clobber,assets:environment,assets:precompile,assets:precompile:all,db:create,db:drop,db:fixtures:load,db:migrate,db:migrate:status,db:rollback,db:schema:cache:clear,db:schema:cache:dump,db:schema:dump,db:schema:load,db:seed,db:setup,db:structure:dump,db:version,doc:app,log:clear,middleware,notes,notes:custom,rails:template,rails:update,routes,secret,spec,spec:features,spec:requests,spec:controllers,spec:helpers,spec:models,spec:views,spec:routing,spec:rcov,stats,test,test:all,test:all:db,test:recent,test:single,test:uncommitted,time:zones:all,tmp:clear,tmp:create,webpacker:compile\" Environ variable NEW_RELIC_AUTOSTART_DENYLISTED_RAKE_TASKS Defines a comma-delimited list of Rake tasks that the agent should not instrument. For example, assets:precompile,db:migrate. Cross Application Tracer cross_application_tracer.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_CROSS_APPLICATION_TRACER_ENABLED If true, enables cross-application tracing. Custom Attributes custom_attributes.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_ATTRIBUTES_ENABLED If false, custom attributes will not be sent on Insights events. Custom Insights Events custom_insights_events.enabled Type Boolean Default true Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_ENABLED If true, the agent captures New Relic Insights custom events. custom_insights_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_CUSTOM_INSIGHTS_EVENTS_MAX_SAMPLES_STORED Specify a maximum number of custom Insights events to buffer in memory at a time. Disabling Use these settings to toggle instrumentation types during agent startup. disable_rake Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RAKE DEPRECATED Please see: instrumentation.rake. If true, disables Rake instrumentation. disable_samplers Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SAMPLERS If true, disables the collection of sampler metrics. Sampler metrics are metrics that are not event-based (such as CPU time or memory usage). disable_resque Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RESQUE DEPRECATED Please see: instrumentation.resque. If true, disables Resque instrumentation. disable_sidekiq Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SIDEKIQ If true, disables Sidekiq instrumentation. disable_dj Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DJ DEPRECATED Please see: instrumentation.delayed_job. If true, disables Delayed::Job instrumentation. disable_sinatra Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA DEPRECATED Please see: instrumentation.sinatra. If true , disables Sinatra instrumentation. disable_sinatra_auto_middleware Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SINATRA_AUTO_MIDDLEWARE If true, disables agent middleware for Sinatra. This middleware is responsible for advanced feature support such as cross application tracing, page load timing, and error collection. disable_view_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VIEW_INSTRUMENTATION If true, disables view instrumentation. disable_activerecord_instrumentation Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_ACTIVERECORD_INSTRUMENTATION If true, disables active record instrumentation. disable_data_mapper Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATA_MAPPER If true, disables DataMapper instrumentation. disable_activejob Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVEJOB If true, disables ActiveJob instrumentation. disable_action_cable_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTION_CABLE_INSTRUMENTATION If true, disables Action Cable instrumentation. disable_active_storage Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_STORAGE If true, disables ActiveStorage instrumentation. disable_memcached Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHED DEPRECATED Please see: instrumentation.memcached. If true, disables instrumentation for the memcached gem. disable_memcache_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_MEMCACHE_CLIENT DEPRECATED Please see: instrumentation.memcache-client. If true, disables instrumentation for the memcache-client gem. disable_dalli Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem. disable_dalli_cas_client Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_DALLI_CAS_CLIENT DEPRECATED Please see: instrumentation.memcache. If true, disables instrumentation for the dalli gem's additional CAS client support. disable_memcache_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMCACHE_INSTRUMENTATION DEPRECATED Please see: instrumentation.memcache. If true, disables memcache instrumentation. disable_gc_profiler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GC_PROFILER If true, disables the use of GC::Profiler to measure time spent in garbage collection disable_sequel_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_SEQUEL_INSTRUMENTATION If true, disables Sequel instrumentation. disable_database_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DATABASE_INSTRUMENTATION DEPRECATED Deprecated; use disable_sequel_instrumentation instead. disable_mongo Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MONGO DEPRECATED Please see: instrumentation.mongo. If true, the agent won't install instrumentation for the Mongo gem. disable_redis Type Boolean Default false Environ variable NEW_RELIC_DISABLE_REDIS DEPRECATED Please see: instrumentation.redis. If true, the agent won't install instrumentation for Redis. disable_vm_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_VM_SAMPLER If true, the agent won't sample performance measurements from the Ruby VM. disable_memory_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MEMORY_SAMPLER If true, the agent won't sample the memory usage of the host process. disable_cpu_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CPU_SAMPLER If true, the agent won't sample the CPU usage of the host process. disable_delayed_job_sampler Type Boolean Default false Environ variable NEW_RELIC_DISABLE_DELAYED_JOB_SAMPLER If true, the agent won't measure the depth of Delayed Job queues. disable_active_record_notifications Type Boolean Default false Environ variable NEW_RELIC_DISABLE_ACTIVE_RECORD_NOTIFICATIONS If true, disables instrumentation for ActiveRecord 4, 5, and 6. disable_bunny Type Boolean Default false Environ variable NEW_RELIC_DISABLE_BUNNY DEPRECATED Please see: instrumentation.bunny. If true, disables instrumentation for the bunny gem. disable_curb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_CURB DEPRECATED Please see: instrumentation.curb. If true, disables instrumentation for the curb gem. disable_excon Type Boolean Default false Environ variable NEW_RELIC_DISABLE_EXCON DEPRECATED Please see: instrumentation.excon. If true, disables instrumentation for the excon gem. disable_httpclient Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPCLIENT DEPRECATED Please see: instrumentation.httpclient. If true, disables instrumentation for the httpclient gem. disable_net_http Type Boolean Default false Environ variable NEW_RELIC_DISABLE_NET_HTTP DEPRECATED Please see: instrumentation.net_http. If true, disables instrumentation for Net::HTTP. disable_rack Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK DEPRECATED Please see: instrumentation.rack. If true, prevents the agent from hooking into the to_app method in Rack::Builder to find gems to instrument during application startup. disable_rack_urlmap Type Boolean Default false Environ variable NEW_RELIC_DISABLE_RACK_URLMAP DEPRECATED Please see: instrumentation.rack_urlmap. If true, prevents the agent from hooking into Rack::URLMap to install middleware tracing. disable_puma_rack Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK DEPRECATED Please see: instrumentation.puma_rack. If true, prevents the agent from hooking into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. disable_puma_rack_urlmap Type Boolean Default (Dynamic) Environ variable NEW_RELIC_DISABLE_PUMA_RACK_URLMAP DEPRECATED Please see: instrumentation.puma_rack_urlmap. If true, prevents the agent from hooking into Puma::Rack::URLMap to install middleware tracing. disable_typhoeus Type Boolean Default false Environ variable NEW_RELIC_DISABLE_TYPHOEUS DEPRECATED Please see: instrumentation.typhoeus. If true, the agent won't install instrumentation for the typhoeus gem. disable_httprb Type Boolean Default false Environ variable NEW_RELIC_DISABLE_HTTPRB DEPRECATED Please see: instrumentation.httprb. If true, the agent won't install instrumentation for the http.rb gem. disable_middleware_instrumentation Type Boolean Default false Environ variable NEW_RELIC_DISABLE_MIDDLEWARE_INSTRUMENTATION If true, the agent won't wrap third-party middlewares in instrumentation (regardless of whether they are installed via Rack::Builder or Rails). disable_grape Type Boolean Default false Environ variable NEW_RELIC_DISABLE_GRAPE DEPRECATED Please see: instrumentation.grape. If true, the agent won't install Grape instrumentation. Distributed Tracing distributed_tracing.enabled Type Boolean Default false Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Distributed tracing lets you see the path that a request takes through your distributed system. Enabling distributed tracing changes the behavior of some New Relic features, so carefully consult the transition guide before you enable this feature. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Instrumentation instrumentation.net_http Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_NET_HTTP Controls auto-instrumentation of Net::HTTP at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.typhoeus Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_TYPHOEUS Controls auto-instrumentation of Typhoeus at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.bunny Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_BUNNY Controls auto-instrumentation of bunny at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httprb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPRB Controls auto-instrumentation of http.rb gem at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.resque Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RESQUE Controls auto-instrumentation of resque at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.redis Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_REDIS Controls auto-instrumentation of Redis at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rake Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RAKE Controls auto-instrumentation of rake at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.mongo Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MONGO Controls auto-instrumentation of Mongo at start up. May be one of [enabled|disabled] . instrumentation.delayed_job Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_DELAYED_JOB Controls auto-instrumentation of Delayed Job at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.httpclient Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_HTTPCLIENT Controls auto-instrumentation of HTTPClient at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.curb Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_CURB Controls auto-instrumentation of Curb at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.sinatra Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_SINATRA Controls auto-instrumentation of Sinatra at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK Controls auto-instrumentation of Rack. When enabled, the agent hooks into the to_app method in Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_RACK_URLMAP Controls auto-instrumentation of Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK Controls auto-instrumentation of Puma::Rack. When enabled, the agent hooks into the to_app method in Puma::Rack::Builder to find gems to instrument during application startup. May be one of [auto|prepend|chain|disabled] . instrumentation.puma_rack_urlmap Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_PUMA_RACK_URLMAP Controls auto-instrumentation of Puma::Rack::URLMap at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcached Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHED Controls auto-instrumentation of memcached gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache_client Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE_CLIENT Controls auto-instrumentation of memcache-client gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.memcache Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_MEMCACHE Controls auto-instrumentation of dalli gem for Memcache at start up. May be one of [auto|prepend|chain|disabled] . instrumentation.excon Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_EXCON Controls auto-instrumentation of Excon at start up. May be one of [enabled|disabled] . instrumentation.grape Type String Default (Dynamic) Environ variable NEW_RELIC_INSTRUMENTATION_GRAPE Controls auto-instrumentation of Grape at start up. May be one of [auto|prepend|chain|disabled] . Mongo mongo.capture_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_CAPTURE_QUERIES If true, the agent captures Mongo queries in transaction traces. mongo.obfuscate_queries Type Boolean Default true Environ variable NEW_RELIC_MONGO_OBFUSCATE_QUERIES If true, the agent obfuscates Mongo queries in transaction traces. Process Host process_host.display_name Type String Default (Dynamic) Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Specify a custom host name for display in the New Relic UI. Rake rake.tasks Type Array Default [] Environ variable NEW_RELIC_RAKE_TASKS Specify an array of Rake tasks to automatically instrument. rake.connect_timeout Type Integer Default 10 Environ variable NEW_RELIC_RAKE_CONNECT_TIMEOUT Timeout for waiting on connect to complete before a rake task Resque resque.capture_params Type Boolean Default false Environ variable NEW_RELIC_RESQUE_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Resque. Rules rules.ignore_url_regexes Type Array Default [] Environ variable NEW_RELIC_RULES_IGNORE_URL_REGEXES Define transactions you want the agent to ignore, by specifying a list of patterns matching the URI you want to ignore. Sidekiq sidekiq.capture_params Type Boolean Default false Environ variable NEW_RELIC_SIDEKIQ_CAPTURE_PARAMS DEPRECATED If true, enables the capture of job arguments for transaction traces and traced errors in Sidekiq. Slow SQL slow_sql.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_ENABLED If true, the agent collects slow SQL queries. slow_sql.explain_threshold Type Float Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_THRESHOLD Specify a threshold in seconds. The agent collects slow SQL queries and explain plans that exceed this threshold. slow_sql.explain_enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_EXPLAIN_ENABLED If true, the agent collects explain plans in slow SQL queries. If this setting is omitted, the transaction_tracer.explain_enabled setting will be applied as the default setting for explain plans in slow SQL as well. slow_sql.record_sql Type String Default (Dynamic) Environ variable NEW_RELIC_SLOW_SQL_RECORD_SQL Defines an obfuscation level for slow SQL queries. Valid options are obfuscated, raw, or none). slow_sql.use_longer_sql_id Type Boolean Default false Environ variable NEW_RELIC_SLOW_SQL_USE_LONGER_SQL_ID Generate a longer sql_id for slow SQL traces. sql_id is used for aggregation of similar queries. Span Events span_events.enabled Type Boolean Default true Environ variable NEW_RELIC_SPAN_EVENTS_ENABLED If true, enables span event sampling. span_events.queue_size Type Integer Default 10000 Environ variable NEW_RELIC_SPAN_EVENTS_QUEUE_SIZE Sets the maximum number of span events to buffer when streaming to the trace observer. span_events.max_samples_stored Type Integer Default 1000 Environ variable NEW_RELIC_SPAN_EVENTS_MAX_SAMPLES_STORED Defines the maximum number of span events reported from a single harvest. Strip Exception Messages strip_exception_messages.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ENABLED If true, the agent strips messages from all exceptions except those in the allowlist. Enabled automatically in high security mode. strip_exception_messages.allowed_classes Type String Default \"\" Environ variable NEW_RELIC_STRIP_EXCEPTION_MESSAGES_ALLOWED_CLASSES Specify a list of exceptions you do not want the agent to strip when strip_exception_messages is true. Separate exceptions with a comma. For example, \"ImportantException,PreserveMessageException\". Thread Profiler thread_profiler.enabled Type Boolean Default (Dynamic) Environ variable NEW_RELIC_THREAD_PROFILER_ENABLED If true, enables use of the thread profiler. Utilization utilization.detect_aws Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AWS If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_AZURE If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_GCP If true, the agent automatically detects that it is running in an Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_PCF If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_DOCKER If true, the agent automatically detects that it is running in Docker. utilization.detect_kubernetes Type Boolean Default true Environ variable NEW_RELIC_UTILIZATION_DETECT_KUBERNETES If true, the agent automatically detects that it is running in Kubernetes. For more help Additional documentation resources include: New Relic for Ruby (compatibility and requirements, installation, configuration, troubleshooting, known issues, advanced features and configuration, beta releases) Transaction traces and Configuring transaction traces (detailed information about New Relic's Transaction Traces feature)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.999664,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Ruby</em> <em>agent</em> configuration",
        "sections": "<em>Ruby</em> <em>agent</em> configuration",
        "tags": "<em>Ruby</em> <em>agent</em>",
        "body": " request parameters and attaches them to transaction traces, traced errors, and TransactionError events When using the capture_params setting, the <em>Ruby</em> <em>agent</em> will not attempt to filter secret information. Recommendation: To filter secret information from request parameters, use the <em>attributes</em>"
      },
      "id": "603eb6f4e7b9d22a5f2f7c73"
    }
  ]
}