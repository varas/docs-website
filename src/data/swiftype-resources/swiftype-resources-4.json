{
  "/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49677,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.89595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-06-20T10:24:03Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.15,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/install-new-relic-php-agent-gae-flexible-environment": [
    {
      "sections": [
        "Install the Go agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get agent troubleshooting logs from GAE"
      ],
      "title": "Install the Go agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Go agent",
        "Installation"
      ],
      "external_id": "9d2ddffb83697c6191c0b6abaed8839516b3aa54",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/go-agent/installation/install-go-agent-gae-flexible-environment/",
      "published_at": "2021-06-20T02:33:04Z",
      "updated_at": "2021-03-11T07:58:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With our Go agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM and browser monitoring. Here we explain how to add New Relic to your GAE flex app by configuring a custom runtime, and give an example of deploying a Go app with Docker. Important The Go agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by installing the Go agent, building a custom Go runtime for Docker, and deploying a golang application. For more information about deploying and configuring your Go app in the GAE flexible environment, see: Google App Engine's documentation for Go Google App Engine's tutorials to deploy a Go app 1. Set up the GAE project and install dependencies Follow standard procedures to install the Go agent for your specific app server, including your license key. Follow Google App Engine procedures for Go to create a new Cloud Platform project, create an App Engine application, download and install git, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: runtime: custom env: flex Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. The following Dockerfile example code defines the golang version used. FROM golang:1.8-onbuild CMD go run main.go Copy 4. Build a Docker image To build the Docker image, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build --rm -t Docker-image-name . Copy 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud --project go-app-name app deploy Copy Wait until the deployment completes. To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see GAE's documentation for debugging an instance. To redirect New Relic Go agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.yml file to: log_file_name: STDOUT Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 278.07004,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the Go <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> the Go <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "<em>Installation</em>",
        "body": "With our Go <em>agent</em>, you can monitor applications that reside in the Google App Engine (<em>GAE</em>) <em>flexible</em> <em>environment</em>. Adding <em>New</em> <em>Relic</em> to your <em>GAE</em> flex app gives you insight into the health and performance of your app and extends <em>GAE</em> with metrics you can view in APM and browser monitoring. Here we"
      },
      "id": "6043cd7164441fc312378efe"
    },
    {
      "sections": [
        "Install New Relic Ruby agent in GAE flexible environment",
        "Deploy using GAE's native support",
        "Build a custom runtime using Docker",
        "Tip",
        "1. Set up the GAE project and install dependencies",
        "2. Configure your app.yaml",
        "3. Configure a Dockerfile",
        "4. Build a Docker image",
        "5. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Handle health checks",
        "Get New Relic agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Ruby agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Ruby agent",
        "Installation"
      ],
      "external_id": "3b7b7ad122a7ba4b37d5edf892bd462bac8fbe62",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/ruby-agent/installation/install-new-relic-ruby-agent-gae-flexible-environment/",
      "published_at": "2021-06-20T07:34:01Z",
      "updated_at": "2021-03-13T07:26:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Ruby agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view using Full-Stack Observability options like APM and browser monitoring. This document explains how to add New Relic to your GAE flex app using either of these methods: Google App Engine's \"native mode\" installation with a standard GAE runtime Docker installation using a custom runtime The custom runtime method includes an example of deploying a Sinatra app. If you need specific libraries or headers, New Relic recommends using the custom runtime method. Deploy using GAE's native support When using Google App Engine \"native mode\" installation, you provide your app code and an app.yaml file. Google App Engine then deploys to a standard prebuilt Docker image. To deploy with native support for Sinatra or Rails: Follow New Relic's standard procedures to install the gem, including your license key. Install the Ruby agent configuration file. Once the gem and configuration file have been installed, the Ruby agent can automatically monitor applications that reside in the GAE flexible environment. Wait until the deployment completes, then view your GAE flex app data in the APM Summary page. Build a custom runtime using Docker Tip If your Ruby app needs specific libraries or headers, New Relic recommends using the custom runtime method. In addition, New Relic recommends that you allow Google App Engine to handle health checks. See Google's documentation for building custom runtimes. This example describes how to add New Relic to your GAE flex app by building a custom runtime for Docker. The example uses a Sinatra app for Ruby. For more information about deploying and configuring your Ruby app in the GAE flexible environment, see: Google App Engine's documentation for Ruby Google App Engine's tutorials for Ruby 1. Set up the GAE project and install dependencies Follow standard procedures to install New Relic's Ruby agent, including your license key. Follow Google App Engine procedures for Ruby to create a new Google Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. The Google Cloud SDK provides the gcloud command line tool to manage and deploy GAE apps. 2. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom entrypoint: bundle exec ruby app.rb Copy 3. Configure a Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. To create the recommended base image for apps monitored by the New Relic Ruby agent: FROM gcr.io/google-appengine/ruby:latest Copy 4. Build a Docker image Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t custom_ruby_app_container:latest . Copy After running this command, verify that you have a Docker image named custom_ruby_app_container and tagged latest. 5. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Handle health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. New Relic recommends that you allow health checks for Ruby apps so that Google can check that your service is up and balanced properly. However, if excessive health checks cause congested transaction traces, you can set the Ruby agent to ignore the health check requests. To handle health checks, add a route for _ah/health in your app. To ignore health check requests, set the rules.ignore_url_regexes config setting in the application’s Ruby agent config to include '_ah/health'. Get New Relic agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an instance. To redirect New Relic Ruby agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.js configuration file to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 267.22592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>New</em> <em>Relic</em> Ruby <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> <em>New</em> <em>Relic</em> Ruby <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "<em>Installation</em>",
        "body": ". For more information about deploying and configuring your Ruby app in the <em>GAE</em> <em>flexible</em> <em>environment</em>, see: Google App Engine&#x27;s documentation for Ruby Google App Engine&#x27;s tutorials for Ruby 1. Set up the <em>GAE</em> project and <em>install</em> dependencies Follow standard procedures to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s Ruby <em>agent</em>"
      },
      "id": "604404a6196a6738b9960f75"
    },
    {
      "sections": [
        "Install New Relic Java agent in GAE flexible environment",
        "Important",
        "Build a custom runtime using Docker",
        "GAE flex example with Tomcat",
        "1. Set up GAE flexible project and install dependencies",
        "2. Configure Maven pom.xml to include Java agent and build project",
        "Tip",
        "3. Configure your app.yaml",
        "4. Configure the Dockerfile",
        "5. Build the Docker image",
        "6. Deploy Docker image to initialized GAE flexible environment",
        "Recommendation: Disable health checks",
        "Get Java agent troubleshooting logs from GAE"
      ],
      "title": "Install New Relic Java agent in GAE flexible environment",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Additional installation"
      ],
      "external_id": "23be7203ed71a09a417de2f56584dedb67fd14f6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/additional-installation/install-new-relic-java-agent-gae-flexible-environment/",
      "published_at": "2021-06-20T08:44:53Z",
      "updated_at": "2021-03-11T07:54:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With APM's Java agent, you can monitor applications that reside in the Google App Engine (GAE) flexible environment. Adding New Relic to your GAE flex app gives you insight into the health and performance of your app and extends GAE with metrics you can view in APM, Browser, and dashboards. This document explains how to add New Relic to your GAE flex app by configuring a custom runtime, and gives an example of deploying a Tomcat app with Docker. Important The New Relic Java agent can run in a GAE flexible environment using a custom runtime. Due to limitations of other environments, do not use the GAE standard environment or Google App Engine's \"native mode\" installation. Build a custom runtime using Docker See Google's documentation for building custom runtimes. There are many ways to build a custom runtime that contains the New Relic Java agent (for example, using Tomcat). In general, to build a custom runtime: Set up your application and install necessary GAE-related dependencies for custom runtimes. Include the New Relic Java agent in the project. Configure Maven or Gradle as applicable. Configure the app.yaml file. Configure the Dockerfile. Build the Docker image. Deploy the Docker image to the initialized GAE flexible environment. Recommendation: Disable GAE health checks. For more information about deploying and configuring your Java app in the GAE flexible environment, see: Google App Engine's documentation for Java Google App Engine's tutorials to deploy a Java app GAE flex example with Tomcat This example describes how to add New Relic to your GAE flex app by installing the New Relic Java agent, building a custom runtime, and deploying an application WAR to Tomcat. Be sure to install the Java agent as necessary for your specific app server. 1. Set up GAE flexible project and install dependencies Follow standard procedures to install the Java agent as necessary for your specific app server, and obtain your license key. Follow Google App Engine procedures for Java to create a new Cloud Platform project, create an App Engine application, and complete other prerequisites for the Google Cloud SDK. Install any necessary dependencies, such as the Maven or Gradle App Engine plugin, and Java. The Google Cloud SDKprovides the gcloud command line tool to manage and deploy GAE apps. 2. Configure Maven pom.xml to include Java agent and build project This example uses Maven to build the project, a Docker Tomcat image to run it, and the gcloud command line tool to deploy the Docker image to a GAE flexible environment. Add the Java agent dependencies to the project's target directory when the project is built, when you download and unzip all Java agent components. After adding the Java agent dependencies to the pom.xml, build your application by running: mvn clean install Copy Check your project's target directory to find the app's WAR file and an unzipped newrelic directory. These files will be incorporated into a Docker image. Tip You can also add the App Engine Maven or Jetty Maven plugin to your pom.xml. This will allow you to use Maven to deploy your app to a GAE flexible environment. 3. Configure your app.yaml The app.yaml configuration file is required for a GAE flexible environment app with a custom runtime. At a minimum, make sure it contains: env: flex runtime: custom Copy 4. Configure the Dockerfile The Dockerfile defines the Docker image to be built and is required for a GAE flexible environment app. In the following Dockerfile example code, the newrelic.yml and catalina.sh files have been configured locally, to replace those already copied to the Docker image. (You can add your New Relic license key directly to your Dockerfile, or use an environment variable in your docker run command.) # base Tomcat image to build Docker image from FROM tomcat:8.5.14-jre8 MAINTAINER Jane Doe <janedoe@mail.com> # Tomcat directory to copy Java agent files to ENV NEWRELIC_HOME /usr/local/tomcat/newrelic # copy application war from target to Tomcat webapps ADD target/*.war /usr/local/tomcat/webapps # copy Java agent files from target to Tomcat NEWRELIC_HOME ADD target/newrelic ${NEWRELIC_HOME} # update Java agent yml with license_key and app_name and copy to image ADD newrelic.yml ${NEWRELIC_HOME} # update catalina.sh with -javaagent:/path/to/newrelic.jar and copy to image ADD catalina.sh /usr/local/tomcat/bin/ Copy 5. Build the Docker image To build a Docker image that runs Tomcat with the New Relic Java agent monitoring your deployed application WAR, run the following command. Be sure to include the period at the end of the code, to indicate the current directory contains the build files. docker build -f Dockerfile -t newrelic-tomcat . Copy After running this command, verify that you have a Docker image named newrelic-tomcat. 6. Deploy Docker image to initialized GAE flexible environment To deploy your Docker image to your initialized GAE flexible environment, run the following command: gcloud app deploy Copy Wait until the deployment completes. To open the app in the browser, run the following command: gcloud app browse Copy To view your GAE flex app data in New Relic, go to the APM Summary page. Recommendation: Disable health checks Google App Engine sends periodic health check requests to confirm that an instance has been successfully deployed, and to check that a running instance maintains a healthy status. A health check is an HTTP request to the URL /_ah/health. If you create a custom runtime, your app must be able to handle a large number of health check requests. Otherwise, your app data may not display correctly in APM. To avoid adding additional instrumentation overhead and skewing throughput for your application, we recommend that you disable the health check. Recommendation: Configure your app.yaml to disable health checks by adding: health_check: enable_health_check: False Copy Get Java agent troubleshooting logs from GAE Use these resources to troubleshoot your GAE flex environment app: To connect to the GAE instance and start a shell in the Docker container running your code, see Debugging an Instance. To redirect New Relic Java agent logs to Stackdriver in the Cloud Platform Console, change the newrelic.ymlfile to: log_file_name: STDOUT Copy To view the logs, use the Cloud Platform Console's Log Viewer.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 260.9612,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>New</em> <em>Relic</em> Java <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "sections": "<em>Install</em> <em>New</em> <em>Relic</em> Java <em>agent</em> <em>in</em> <em>GAE</em> <em>flexible</em> <em>environment</em>",
        "tags": "Additional <em>installation</em>",
        "body": "With APM&#x27;s Java <em>agent</em>, you can monitor applications that reside in the Google App Engine (<em>GAE</em>) <em>flexible</em> <em>environment</em>. Adding <em>New</em> <em>Relic</em> to your <em>GAE</em> flex app gives you insight into the health and performance of your app and extends <em>GAE</em> with metrics you can view in APM, Browser, and dashboards"
      },
      "id": "6043b98628ccbcef312c60c5"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/php-agent-heroku": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49673,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.89592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Tip",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-06-20T04:21:32Z",
      "updated_at": "2021-04-16T09:16:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.67897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Container options The <em>PHP</em> <em>agent</em> requires two components to work: the <em>PHP</em> <em>agent</em> (one for each application) and a daemon, which aggregates data sent from one or more <em>agents</em>"
      },
      "id": "60441c1ee7b9d23165579a29"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.4967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-06-20T10:24:03Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.14996,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Tip",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-06-20T04:21:32Z",
      "updated_at": "2021-04-16T09:16:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.67897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Container options The <em>PHP</em> <em>agent</em> requires two components to work: the <em>PHP</em> <em>agent</em> (one for each application) and a daemon, which aggregates data sent from one or more <em>agents</em>"
      },
      "id": "60441c1ee7b9d23165579a29"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/silent-mode-install-script-advanced": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.4967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.89589,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-06-20T10:24:03Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.14996,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/starting-php-daemon-advanced": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.4967,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.89589,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-06-20T10:24:03Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.14996,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/uninstalling-php-agent": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 166.49667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.89587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-06-20T10:24:03Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.14996,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    }
  ],
  "/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php": [
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.89587,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (<em>advanced</em>)",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "PHP agent and Heroku",
        "Prepare your application",
        "Install the PHP agent",
        "Via the Heroku website",
        "Via Heroku toolbelt",
        "Configure the agent on Heroku",
        "Caution",
        "Name your application",
        "Verify your installation",
        "Troubleshooting the agent on Heroku",
        "For more help"
      ],
      "title": "PHP agent and Heroku",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "9f6eae3896918ade4e325f2db7ee5685477c1cf2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-heroku/",
      "published_at": "2021-06-20T10:24:03Z",
      "updated_at": "2021-05-21T20:05:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Heroku is a Platform as a Service (PaaS) solution for hosting web applications in various languages, including PHP. With New Relic, you can extend Heroku with metrics from APM and browser monitoring. Prepare your application Before installing the PHP agent, make sure your PHP web application is installed and running under Heroku. For more information, see Getting Started with PHP on Heroku. Install the PHP agent After deploying your PHP app on Heroku, install our PHP agent: Via the Heroku website To install the New Relic add-on through the Heroku website: From the New Relic Add-on Page, select a subscription plan. From the Select an app dropdown, select your app. Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Via Heroku toolbelt To install the New Relic add-on with Heroku toolbelt: Via Heroku toolbelt, run the following command and substitute the appropriate subscription plan: heroku addons:create newrelic:YOUR_PLAN_LEVEL Copy Give your application a descriptive name with this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy Push a change to Heroku (for example, git commit --allow-empty) to enable the PHP extension during build. Generate some traffic to your app. Within a few minutes, data should start appearing in your APM Summary page. If no data appears, see the verification and troubleshooting procedures in this document. Configure the agent on Heroku Heroku automatically configures default environment variables for your app. To customize your settings, create and upload a newrelic.ini file to Heroku: Download a \"clean\" copy of newrelic.ini_.heroku [INI | 16KB] . Rename the file from newrelic.ini _ .heroku to newrelic.ini. Copy newrelic.ini to the root directory of your project repository. Customize your settings as described in PHP agent configuration. Caution Do not change newrelic.license, newrelic.loglevel, or newrelic.appname. These settings are configured by Heroku toolbelt. Commit your config file changes to your repository, and push your changes to Heroku. Instruct Heroku to use your customized config file via this Heroku toolbelt command: heroku config:set NEW_RELIC_CONFIG_FILE=newrelic.ini Copy Name your application To ensure that metrics from each app are reported separately, give each app a descriptive name. Your application name defaults to PHP Application on Heroku. New Relic uses the app name to aggregate data. If you do not change this name, New Relic will aggregate the data from each additional PHP app you install under this same name. To name your application, run this Heroku toolbelt command: heroku config:set NEW_RELIC_APP_NAME='YOUR_APP_NAME' Copy To verify your app's name change, run: heroku run env | grep NEW_RELIC_APP_NAME Copy Verify that the confirmation prompt returns the new app name: NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Verify your installation To verify that Heroku has installed the New Relic add-on, run this Heroku toolbelt command: heroku run env | grep NEW_RELIC Copy This will generate a list of New Relic environment variables in Heroku. The agent uses these environment variables to determine which account to report data to. You should see at least the following variables: NEW_RELIC_LICENSE_KEY='YOUR_LICENSE_KEY' NEW_RELIC_LOG_LEVEL=\"warning\" NEW_RELIC_APP_NAME=\"YOUR_APP_NAME\" Copy You can also use phpinfo to verify that your app is being instrumented. Troubleshooting the agent on Heroku To troubleshoot the PHP agent on Heroku, examine your log file, which is stored in the Heroku web server log. To view the web server log, run this Heroku toolbelt command: heroku logs -t | tee newrelic.log Copy Use the log file to troubleshoot the issue. If you need further assistance, get support at support.newrelic.com. The PHP agent defaults to the warning log level. New Relic Support may also request logs at the verbosedebug log level. To change the log level to verbosedebug, run this Heroku toolbelt command: heroku config:set NEW_RELIC_LOG_LEVEL=verbosedebug Copy Caution The verbosedebug log level quickly generates a large volume of data. Use this setting only if New Relic Support requests it, and remove this setting as soon as you collect the output by running this Heroku toolbelt command: heroku config:unset NEW_RELIC_LOG_LEVEL Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for PHP (overview of the New Relic PHP agent) Using multiple names for an app (advanced techniques to \"roll up\" data from multiple applications under a single name)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.14996,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> and Heroku",
        "sections": "<em>Install</em> the <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": " Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Heroku Dev Center (information on the Heroku site on installing New Relic) New Relic for <em>PHP</em> (overview of the New Relic <em>PHP</em> <em>agent</em>) Using multiple names for an app (<em>advanced</em> techniques to &quot;roll up&quot; data from multiple applications under a single name)"
      },
      "id": "603eb5dae7b9d210e22a07ec"
    },
    {
      "sections": [
        "Docker and other container environments: Install PHP agent",
        "Tip",
        "Container options",
        "Install agent and daemon in different containers",
        "Caution",
        "Set up the daemon container",
        "Set up the PHP agent container",
        "Install agent and daemon in the same container",
        "Dockerfile example",
        "For more help"
      ],
      "title": "Docker and other container environments: Install PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "465fc699c40a9b42d4cd4322e137b7cc00152337",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/docker-other-container-environments-install-php-agent/",
      "published_at": "2021-06-20T04:21:32Z",
      "updated_at": "2021-04-16T09:16:52Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can install the PHP agent on a Docker container or other container to monitor one or more of your PHP applications. This is supported for containers that meet PHP agent requirements. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Container options The PHP agent requires two components to work: the PHP agent (one for each application) and a daemon, which aggregates data sent from one or more agents and sends it to New Relic. For this reason, there are two options for enabling the PHP agent for container environments: Install agent and daemon on different containers. This is the recommended setup. Install agent and daemon on the same container. This may be useful if you want to reduce your number of containers. Install agent and daemon in different containers Requirements: Meet PHP agent requirements PHP agent version 9.2 or higher To see an example application, go to New Relic's Explorers Hub. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. If the agent and daemon are running on different hosts, we recommend that you use a private network connection between the agent and daemon. Set up the daemon container If you use Docker, you can pull our daemon image from Docker Hub: Run this command: docker pull newrelic/php-daemon. To customize the image, follow the steps on Docker Hub. You can also build your own daemon image: To install the daemon, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install_daemon argument. Start the daemon using --address and --watchdog-foreground arguments. The --address argument sets a port for the daemon to accept connections. The --watchdog-foreground argument ensures that the daemon runs in the foreground. Set up the PHP agent container To set up the PHP agent container for Docker: Make sure a PHP installation is available in the container. For example, use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site, and run the newrelic-install script with the install argument. In the newrelic.ini file, set the application name and license key with the newrelic.appname and newrelic.license entries . Point the agent to the daemon by setting the newrelic.daemon.address option in the newrelic.ini file. Make sure the value for this option is HOST:PORT, where HOST is the name or IP address of the host where the daemon is running, and PORT is the port number where the daemon is listening Install agent and daemon in the same container To set up the PHP agent and daemon in the same Docker container: Make sure a PHP installation is available in the container. For example: you might use a published Docker image like php:7.1. To install the agent, download the PHP agent package from New Relic's tar file download site and run the newrelic-install script with the install argument. Set the application name and license key via the newrelic.license and newrelic.appname entries in the newrelic.ini file. By default, the first transaction causes the agent to trigger a daemon start and an application connection initialization. However, for performance reasons, the agent does not wait for those operations to complete before it initializes the connection, which can result in the loss of the first few transactions after a container starts. To prevent this, set both newrelic.daemon.start_timeout and newrelic.daemon.app_connect_timeout entries in the newrelic.ini file to recommended values. Dockerfile example FROM php:7.1 RUN \\ curl -L PHP_AGENT_URL | tar -C /tmp -zx && \\ export NR_INSTALL_USE_CP_NOT_LN=1 && \\ export NR_INSTALL_SILENT=1 && \\ /tmp/newrelic-php5-*/newrelic-install install && \\ rm -rf /tmp/newrelic-php5-* /tmp/nrinstall* && \\ sed -i \\ -e 's/\"REPLACE_WITH_REAL_KEY\"/\"YOUR_LICENSE_KEY\"/' \\ -e 's/newrelic.appname = \"PHP Application\"/newrelic.appname = \"YOUR_APPLICATION_NAME\"/' \\ -e 's/;newrelic.daemon.app_connect_timeout =.*/newrelic.daemon.app_connect_timeout=15s/' \\ -e 's/;newrelic.daemon.start_timeout =.*/newrelic.daemon.start_timeout=5s/' \\ /usr/local/etc/php/conf.d/newrelic.ini Copy You must edit three parts of this example Dockerfile: PHP_AGENT_URL: The download URL for your PHP agent version. To find the most recent version of the agent, go to download.newrelic.com/php_agent/release/. YOUR_LICENSE_KEY: Replace this with your New Relic license key. Note that \"REPLACE_WITH_REAL_KEY\" is an actual string in the default newrelic.ini file for the PHP agent. Don't edit that string. The sed command replaces that default string with the actual 40-character key, in quotes. YOUR_APPLICATION_NAME: Replace with the your application name, in quotes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.67897,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "sections": "Docker and other container environments: <em>Install</em> <em>PHP</em> <em>agent</em>",
        "tags": "<em>Advanced</em> <em>installation</em>",
        "body": "! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Container options The <em>PHP</em> <em>agent</em> requires two components to work: the <em>PHP</em> <em>agent</em> (one for each application) and a daemon, which aggregates data sent from one or more <em>agents</em>"
      },
      "id": "60441c1ee7b9d23165579a29"
    }
  ],
  "/docs/agents/php-agent/api-guides/guide-using-php-agent-api": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.91803,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.15452,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "Guide to using the Java agent API",
        "Important",
        "Use the API",
        "Transactions",
        "Instrument asynchronous work",
        "Distributed tracing API usage",
        "Caution",
        "Cross application tracing (CAT) API usage",
        "Obtain references to New Relic API classes",
        "Additional API functionality",
        "Additional API usage examples"
      ],
      "title": "Guide to using the Java agent API ",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "API guides"
      ],
      "external_id": "d2e891456fe10b28930afad273f760ef9f06a85a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/api-guides/guide-using-java-agent-api/",
      "published_at": "2021-06-20T08:46:20Z",
      "updated_at": "2021-06-02T15:30:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Java agent API lets you control, customize, and extend the functionality of the APM Java agent. This API consists of: Static methods on the com.newrelic.api.agent.NewRelic class A @Trace annotation for implementing custom instrumentation A hierarchy of API objects providing additional functionality Use this API to set up custom instrumentation of your Java app and collect more in-depth data. For detailed information about this API, see the complete Javadoc on GitHub. Another way to set up custom instrumentation is to use XML instrumentation. The XML option is simpler and does not require modification of your app code, but it lacks the complete functionality of the Java agent API. Important For best results when using the API, ensure that you have the latest Java agent release. Several APIs used in the examples require Java agent 6.4.0 or higher. For all available New Relic APIs, see Intro to APIs. Use the API To access the API class, add newrelic-api.jar to your application class path. The jar is in the New Relic Java agent's installation zip file. You can call the API when the Java agent is not running. The API methods are just stubs; the implementation is added when the Java agent loads the class. Transactions To instrument Transactions in your application, use the following APIs. If you want to... Use this Create a Transaction when New Relic does not create one automatically @Trace(dispatcher = true) on the method that encompasses the work to be reported. When this annotation is used on a method within the context of an existing transaction, this will not start a new transaction, but rather include the method in the existing transaction. Capture the duration of a method that New Relic does not automatically trace @Trace() on the method you want to time. Set the name of the current Transaction NewRelic.setTransactionName(...) Start the timer for the response time of the current Transaction and to cause a Transaction you create to be reported as a Web transaction, rather than as an Other transaction NewRelic.setRequestAndReponse(...) Add custom attributes to Transactions and TransactionEvents NewRelic.addCustomParameter(...) Prevent a Transaction from being reported to New Relic NewRelic.ignoreTransaction() Exclude a Transaction when calculating your app's Apdex score NewRelic.ignoreApdex() Instrument asynchronous work For detailed information, see Java agent API for asynchronous applications. If you want to... Use this Trace an asynchronous method if it is linked to an existing Transaction... @Trace(async = true) Link the Transaction associated with the Token on the current thread... Token.link() or Token.linkAndExpire() Expire a Token associated with the current Transaction... Token.expire() Stop timing a Segment and have it report as part of its parent Transaction Segment.end() Stop timing a Segment and not have it report as part of its parent Transaction Segment.ignore() Distributed tracing API usage These APIs require distributed tracing to be enabled. See Java agent configuration for all distributed tracing config options. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. To see these APIs in action, see Using Java agent distributing tracing API with Kafka. Important With agent version 6.4.0, the following distributed tracing APIs were introduced, with the exception of addCustomAttribute(), which was introduced in 6.1.0. We highly recommended using these APIs instead of the deprecated ones. If you want to... Use this Create and insert distributed tracing headers into a Headers data structure. This API will insert both newrelic and W3C Trace Context headers (traceparent & tracestate), unless the agent is explicitly configured to exclude newrelic headers. Transaction.insertDistributedTraceHeaders(Headers) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Accept the distributed tracing headers sent from the calling service and link these services together in a distributed trace. Transaction.acceptDistributedTraceHeaders(TransportType, Headers) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. The type-specific headers of an inbound or outbound message. For a provided implementation of Headers use ConcurrentHashMapHeaders. Headers Copy A utility class that provides enum constants for defining the transport type when accepting distributed tracing headers. TransportType Copy Add custom attributes to SpanEvents in distributed traces NewRelic.getAgent().getTracedMethod().addCustomAttribute(...) Caution With agent version 6.4.0, the following distributed tracing APIs have been deprecated and replaced by the APIs in the above table. It's highly recommended to upgrade the agent and use the new APIs instead of these deprecated ones. If you want to... Use this Create a payload to be sent to a called service. Transaction.createDistributedTracePayload() Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Caution API deprecated as of agent 6.4.0 Accept a payload sent from the first service; this will link these services together in a trace. Transaction.acceptDistributedTracePayload(...) Copy For more on obtaining references to the current transaction and other API classes, see Obtain references. Caution API deprecated as of agent 6.4.0 Payload used to connect services. The text() call returns a JSON string representation of the payload. DistributedTracePayload.text() Caution API deprecated as of agent 6.4.0 Payload used to connect services. The httpSafe() call returns a base64 encoded JSON string representation of the payload. DistributedTracePayload.httpSafe() Caution API deprecated as of agent 6.4.0 Cross application tracing (CAT) API usage To track external calls and add cross application tracing, use the following APIs: If you want to... Use this Trace across a custom transport channel that New Relic does not support by default, such as a proprietary RPC transport Transaction.getRequestMetadata(), .processRequestMetadata(...), .getResponseMetadata(), .processResponseMetadata(...) Copy Also refer to the information in this document about using Transaction to obtain references to New Relic API classes. View or change the metric name or a rollup metric name of a TracedMethod (A rollup metric name, such as OtherTransaction/all, is not scoped to a specific transaction. It represents all background transactions.) TracedMethod.getMetricName(), .setMetricName(...), .setRollupMetricName(...) Copy Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Report a call to an external HTTP service, database server, message queue, or other external resource that is being traced using the Java agent API's @Trace annotation TracedMethod.reportAsExternal(...) passing arguments constructed using ExternalParameters builder. Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Enable and add cross application tracing when communicating with an external HTTP or JMS service that is instrumented by New Relic TracedMethod.addOutboundRequestHeaders(...) along with TracedMethod.reportAsExternal(...) Also refer to the information in this document about using TracedMethod to obtain references to New Relic API classes. Add timing for an application server or dispatcher that is not supported automatically Transaction.setRequest(...), Transaction.setResponse(...), or NewRelic.setRequestAndResponse(...), and Transaction.markResponseSent() Also refer to the information in this document about using Transaction to obtain references to New Relic API classes. Obtain references to New Relic API classes Other tasks require the New Relic Agent object. The Agent object exposes multiple objects that give you the following functionality: If you want to... Use this Get a reference to the current Transaction NewRelic.getAgent().getTransaction() Get a Token to link asynchronous work NewRelic.getAgent().getTransaction().getToken() Copy Start and get a reference to a Segment NewRelic.getAgent().getTransaction().startSegment() Copy Get a reference to the method currently being traced NewRelic.getAgent().getTracedMethod() Get a reference to the Agent logger NewRelic.getAgent().getLogger() Get a reference to the Agent configuration NewRelic.getAgent().getConfig() Get a reference to an aggregator for custom metrics NewRelic.getAgent().getAggregator() Get a reference to Insights (our original name for the feature that governed custom events) in order to record custom events NewRelic.getAgent().getInsights() Additional API functionality The following APIs provide additional functionality, such as setting app server info, reporting errors, adding page load timing information, recording custom metrics, and sending custom events. If you want to... Use this Explicitly set port, name, and version information for an application server or dispatcher and the instance name for a JVM NewRelic.setAppServerPort(...), .setServerInfo(...), and .setInstanceName(...) Copy Report an error that New Relic does not report automatically NewRelic.noticeError(...) When inside a transaction, the last call to noticeError wins. Only 1 error will be reported per transaction. Add browser page load timing for Transactions that New Relic does not add to the header automatically NewRelic.getBrowserTimingHeader(), .getBrowserTimingFooter(), .setUserName(String name), .setAccountName(String name), and .setProductName(String name) Copy Create and accumulate custom metrics NewRelic.recordMetric(...), .recordResponseTimeMetric(...), or .incrementCounter(...) Record custom events Insights.recordCustomEvent(...) Or, use NewRelic.addCustomParameter(...) to add custom attributes to the New Relic-defined TransactionEvent type. Also refer to the information in this document about using Insights to obtain references to New Relic API classes. Additional API usage examples For detailed code examples about using the APIs, see New Relic's documentation about custom instrumentation for: External calls, cross application traces, messaging, datastores, and web frameworks Cross application tracing and external datastore calls Apps using custom instrumentation with annotation Custom framework instrumentation API Preventing unwanted instrumentation Inserting custom attributes Inserting custom events Collecting custom metrics",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 77.445786,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Guide</em> to using the Java <em>agent</em> <em>API</em> ",
        "sections": "<em>Guide</em> to using the Java <em>agent</em> <em>API</em>",
        "tags": "<em>API</em> <em>guides</em>",
        "body": "The New Relic Java <em>agent</em> <em>API</em> lets you control, customize, and extend the functionality of the APM Java <em>agent</em>. This <em>API</em> consists of: Static methods on the com.newrelic.<em>api.agent</em>.NewRelic class A @Trace annotation for implementing custom instrumentation A hierarchy of <em>API</em> objects providing additional"
      },
      "id": "6043c7f8e7b9d2dd935799df"
    }
  ],
  "/docs/agents/php-agent/attributes/attribute-examples": [
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-06-02T20:32:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent to New Relic Browser in page views. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.8539,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable or disable <em>attributes</em>",
        "sections": "Enable or disable <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Learn about properties to enable or disable <em>attributes</em>, and the rules that New Relic uses when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the <em>PHP</em> <em>agent</em> properties that have been deprecated with the release of New Relic <em>agent</em> <em>attributes</em>"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "PHP agent attributes",
        "response.statusCode",
        "newrelic_add_custom_parameter API call",
        "request.headers.accept",
        "request.headers.contentType",
        "request.headers.contentLength",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.\\*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "SERVER_NAME",
        "Change where attributes are sent",
        "Upgrading the PHP agent",
        "For more help"
      ],
      "title": "PHP agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "8625d9cf6f7f2f7afee4aaca1787466601a1d9ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/php-agent-attributes/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-04-16T09:20:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and annotate the data in New Relic. Both default and custom attributes are visible in APM transaction traces, distributed traces, and error analytics; and APM and browser events. You can customize exactly which attributes will be sent to each of these destinations. Read on to learn about the PHP agent attributes, how to enable or disable them, and the rules the agent follows to determine which attributes to include or exclude for a destination. PHP agent attributes In addition to the default APM attributes, you can configure the following attributes in the PHP agent. See PHP agent (newrelic.ini) settings and Enabling and disabling attributes for more information. response.statusCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable newrelic_add_custom_parameter API call Attributes added to an newrelic_add_custom_parameter() call on the New Relic API. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Enabled request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.headers.userAgent The contents of the User-Agent HTTP header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.\\* Request parameters from the transaction. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.uri The request URI from the transaction. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType The outgoing response content-type as read from the Content-Type response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable SERVER_NAME The name of the server host under which the current script is executing. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Disabled Change where attributes are sent Tip All destinations are open to attribute collection by default in the PHP agent, except newrelic.browser_monitoring.attributes.enabled. To change which attributes are sent to New Relic destinations: Open or close any destination to attribute collection by changing the .enabled destination property. Change the default attribute setting by adding the attribute name to the destination's .include or .exclude properties. See Attribute rules for which settings supersede each other. Upgrading the PHP agent When upgrading to PHP agent 4.9 or higher, upgrade your configuration file. For more information about deprecated properties, see Enabling and disabling attributes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.55607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", distributed traces, and error analytics; and APM and browser events. You can customize exactly which <em>attributes</em> will be sent to each of these destinations. Read on to learn about the <em>PHP</em> <em>agent</em> <em>attributes</em>, how to enable or disable them, and the rules the <em>agent</em> follows to determine which <em>attributes</em>"
      },
      "id": "603e863628ccbc8187eba775"
    },
    {
      "sections": [
        "APM agent security: PHP",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "For more help"
      ],
      "title": "APM agent security: PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "596768c4a7e0d13fe9949726b49ab09167759582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/apm-agent-security-php/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-06-02T15:08:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic PHP agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: PHP agent configuration file Attribute settings PHP agent API Setting Effects on data security newrelic.daemon.auditlog string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the New Relic collector. You can then evaluate the information that the agent sends to the New Relic collector to see if it includes sensitive information. newrelic.high_security boolean Default: false To enable high security mode, set this to true and enable high security in New Relic. This restricts the information you can send to New Relic. newrelic.daemon.proxy string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. newrelic.attributes.enabled boolean Default: true By default, you are sending attributes to New Relic. If you do not want to send attributes to New Relic, set this to false. newrelic.attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using newrelic.attributes.exclude. This restricts the information sent to New Relic. Consider if you want to exclude these potentially sensitive attributes using newrelic.attributes.exclude or if you need the information sent to New Relic: request.headers.*: Removes all request headers. response.headers.*: Removes all response headers. newrelic.custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via newrelic_record_custom_event(). If you enable high security mode, this is automatically set to false. newrelic.transaction_tracer.record_sql string Default: obfuscated By default, newrelic.transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.71781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>PHP</em>",
        "sections": "APM <em>agent</em> security: <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "The <em>PHP</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can"
      },
      "id": "6043da63196a67cb6f960f6a"
    }
  ],
  "/docs/agents/php-agent/attributes/enable-or-disable-attributes": [
    {
      "sections": [
        "Attribute examples",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disabling all attributes",
        "Selecting specific destinations",
        "Selecting values and destinations",
        "For more help"
      ],
      "title": "Attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "d87eef67a3263b3a62afcbad7c77c4321314afb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/attribute-examples/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-04-16T09:20:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the New Relic PHP agent. To use these settings: Modify your newrelic.ini file as applicable. Restart the agent and its daemon for changes to take effect. Capture request parameters By default, the agent does not capture request parameters. You can use the following configuration to turn on parameter capture for these default destinations: transaction_tracer, transaction_events, and error_collector. If you want to limit the destinations that you capture parameters for, see Selecting specific destinations. Configuration: newrelic.attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can pass a list to attributes.include: Configuration: newrelic.attributes.include = request.parameters.user_id request.parameters.product_id Copy Disabling all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: newrelic.attributes.enabled = false newrelic.attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Selecting specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: newrelic.attributes.enabled = true newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Selecting values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: newrelic.browser_monitoring.attributes.enabled = true newrelic.attributes.exclude = food* newrelic.attributes.include = food.fruit.* newrelic.transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Agent attributes (types, destinations, and limits for attributes used by New Relic agents) PHP agent attributes (PHP-specific attributes available as of version 4.9) Enabling and disabling attributes (properties, rules, and backwards compatibility information for PHP agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.55607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Attribute</em> examples",
        "sections": "Disabling all <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by New Relic <em>agents</em>) <em>PHP</em> <em>agent</em> <em>attributes</em> (<em>PHP</em>-specific <em>attributes</em> available as of version 4.9) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>PHP</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "603e789564441f6a044e883b"
    },
    {
      "sections": [
        "PHP agent attributes",
        "response.statusCode",
        "newrelic_add_custom_parameter API call",
        "request.headers.accept",
        "request.headers.contentType",
        "request.headers.contentLength",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.\\*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "SERVER_NAME",
        "Change where attributes are sent",
        "Upgrading the PHP agent",
        "For more help"
      ],
      "title": "PHP agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "8625d9cf6f7f2f7afee4aaca1787466601a1d9ae",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/php-agent-attributes/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-04-16T09:20:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. These key-value pairs can help you gain greater insight into your application and annotate the data in New Relic. Both default and custom attributes are visible in APM transaction traces, distributed traces, and error analytics; and APM and browser events. You can customize exactly which attributes will be sent to each of these destinations. Read on to learn about the PHP agent attributes, how to enable or disable them, and the rules the agent follows to determine which attributes to include or exclude for a destination. PHP agent attributes In addition to the default APM attributes, you can configure the following attributes in the PHP agent. See PHP agent (newrelic.ini) settings and Enabling and disabling attributes for more information. response.statusCode The response status code for a web request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable newrelic_add_custom_parameter API call Attributes added to an newrelic_add_custom_parameter() call on the New Relic API. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Enabled request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Disabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.headers.userAgent The contents of the User-Agent HTTP header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.\\* Request parameters from the transaction. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Unavailable request.uri The request URI from the transaction. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength The outgoing response size in bytes as read from the Content-Length response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType The outgoing response content-type as read from the Content-Type response header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable SERVER_NAME The name of the server host under which the current script is executing. Defaults Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Disabled Change where attributes are sent Tip All destinations are open to attribute collection by default in the PHP agent, except newrelic.browser_monitoring.attributes.enabled. To change which attributes are sent to New Relic destinations: Open or close any destination to attribute collection by changing the .enabled destination property. Change the default attribute setting by adding the attribute name to the destination's .include or .exclude properties. See Attribute rules for which settings supersede each other. Upgrading the PHP agent When upgrading to PHP agent 4.9 or higher, upgrade your configuration file. For more information about deprecated properties, see Enabling and disabling attributes. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.55607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ", distributed traces, and error analytics; and APM and browser events. You can customize exactly which <em>attributes</em> will be sent to each of these destinations. Read on to learn about the <em>PHP</em> <em>agent</em> <em>attributes</em>, how to enable or disable them, and the rules the <em>agent</em> follows to determine which <em>attributes</em>"
      },
      "id": "603e863628ccbc8187eba775"
    },
    {
      "sections": [
        "APM agent security: PHP",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "For more help"
      ],
      "title": "APM agent security: PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "596768c4a7e0d13fe9949726b49ab09167759582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/apm-agent-security-php/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-06-02T15:08:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic PHP agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: PHP agent configuration file Attribute settings PHP agent API Setting Effects on data security newrelic.daemon.auditlog string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the New Relic collector. You can then evaluate the information that the agent sends to the New Relic collector to see if it includes sensitive information. newrelic.high_security boolean Default: false To enable high security mode, set this to true and enable high security in New Relic. This restricts the information you can send to New Relic. newrelic.daemon.proxy string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. newrelic.attributes.enabled boolean Default: true By default, you are sending attributes to New Relic. If you do not want to send attributes to New Relic, set this to false. newrelic.attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using newrelic.attributes.exclude. This restricts the information sent to New Relic. Consider if you want to exclude these potentially sensitive attributes using newrelic.attributes.exclude or if you need the information sent to New Relic: request.headers.*: Removes all request headers. response.headers.*: Removes all response headers. newrelic.custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via newrelic_record_custom_event(). If you enable high security mode, this is automatically set to false. newrelic.transaction_tracer.record_sql string Default: obfuscated By default, newrelic.transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.7178,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>PHP</em>",
        "sections": "APM <em>agent</em> security: <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "The <em>PHP</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can"
      },
      "id": "6043da63196a67cb6f960f6a"
    }
  ],
  "/docs/agents/php-agent/attributes/php-agent-attributes": [
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-06-02T20:32:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent to New Relic Browser in page views. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.85388,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Enable or disable <em>attributes</em>",
        "sections": "Enable or disable <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Learn about properties to enable or disable <em>attributes</em>, and the rules that New Relic uses when determining which <em>attributes</em> to include or exclude for a destination. This also includes a summary of the <em>PHP</em> <em>agent</em> properties that have been deprecated with the release of New Relic <em>agent</em> <em>attributes</em>"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "Attribute examples",
        "Capture request parameters",
        "Capture only specific request parameters",
        "Disabling all attributes",
        "Selecting specific destinations",
        "Selecting values and destinations",
        "For more help"
      ],
      "title": "Attribute examples",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "d87eef67a3263b3a62afcbad7c77c4321314afb7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/attribute-examples/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-04-16T09:20:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some examples of using attributes with the New Relic PHP agent. To use these settings: Modify your newrelic.ini file as applicable. Restart the agent and its daemon for changes to take effect. Capture request parameters By default, the agent does not capture request parameters. You can use the following configuration to turn on parameter capture for these default destinations: transaction_tracer, transaction_events, and error_collector. If you want to limit the destinations that you capture parameters for, see Selecting specific destinations. Configuration: newrelic.attributes.include = request.parameters.* Copy Capture only specific request parameters To capture only specific request parameters, you can pass a list to attributes.include: Configuration: newrelic.attributes.include = request.parameters.user_id request.parameters.product_id Copy Disabling all attributes In this example, attributes are disabled, so the include and exclude lists will be ignored and all attributes will be filtered out. Configuration: newrelic.attributes.enabled = false newrelic.attributes.include = request.parameters.* Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: none transaction_events: none browser_monitoring: none Copy Selecting specific destinations In this example: Attributes are disabled for transaction traces. The include and exclude lists will be ignored, and all attributes will be filtered out for this destination. Attributes are also disabled for browser monitoring by default. Request parameters (prefixed with request.parameters.) are off by default for all destinations. As a result, only bar is sent in traced errors and transaction events. Configuration: newrelic.attributes.enabled = true newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.exclude = foo Copy Input keys: foo, bar, request.parameters.foo, request.parameters.bar Copy Output for destinations: transaction_tracer: none error_collector: bar transaction_events: bar browser_monitoring: none Copy Selecting values and destinations In this example, specific input keys are selected for certain output destinations and excluded from others. The food.fruit.banana key will be excluded only from transaction traces. The food and food.bread keys will be excluded from all destinations. Configuration: newrelic.browser_monitoring.attributes.enabled = true newrelic.attributes.exclude = food* newrelic.attributes.include = food.fruit.* newrelic.transaction_tracer.attributes.exclude = food.fruit.banana Copy Input keys: food, food.bread, food.fruit.banana, food.fruit.apple Copy Output for destinations: transaction_tracer: food.fruit.apple error_collector: food.fruit.banana, food.fruit.apple transaction_events: food.fruit.banana, food.fruit.apple browser_monitoring: food.fruit.banana, food.fruit.apple Copy For more help Additional documentation resources include: Suggest a change and learn how to contribute to our PHP agent open source repository. Agent attributes (types, destinations, and limits for attributes used by New Relic agents) PHP agent attributes (PHP-specific attributes available as of version 4.9) Enabling and disabling attributes (properties, rules, and backwards compatibility information for PHP agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.55607,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Attribute</em> examples",
        "sections": "Disabling all <em>attributes</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by New Relic <em>agents</em>) <em>PHP</em> <em>agent</em> <em>attributes</em> (<em>PHP</em>-specific <em>attributes</em> available as of version 4.9) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>PHP</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "603e789564441f6a044e883b"
    },
    {
      "sections": [
        "APM agent security: PHP",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "For more help"
      ],
      "title": "APM agent security: PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "596768c4a7e0d13fe9949726b49ab09167759582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/apm-agent-security-php/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-06-02T15:08:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic PHP agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: PHP agent configuration file Attribute settings PHP agent API Setting Effects on data security newrelic.daemon.auditlog string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the New Relic collector. You can then evaluate the information that the agent sends to the New Relic collector to see if it includes sensitive information. newrelic.high_security boolean Default: false To enable high security mode, set this to true and enable high security in New Relic. This restricts the information you can send to New Relic. newrelic.daemon.proxy string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. newrelic.attributes.enabled boolean Default: true By default, you are sending attributes to New Relic. If you do not want to send attributes to New Relic, set this to false. newrelic.attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using newrelic.attributes.exclude. This restricts the information sent to New Relic. Consider if you want to exclude these potentially sensitive attributes using newrelic.attributes.exclude or if you need the information sent to New Relic: request.headers.*: Removes all request headers. response.headers.*: Removes all response headers. newrelic.custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via newrelic_record_custom_event(). If you enable high security mode, this is automatically set to false. newrelic.transaction_tracer.record_sql string Default: obfuscated By default, newrelic.transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.7178,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>PHP</em>",
        "sections": "APM <em>agent</em> security: <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "The <em>PHP</em> <em>agent</em> default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can"
      },
      "id": "6043da63196a67cb6f960f6a"
    }
  ],
  "/docs/agents/php-agent/configuration/name-your-php-application": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.79324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "Use the newrelic-install script for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " operation of both the <em>PHP</em> <em>agent</em> and daemon, review the <em>PHP</em> <em>configuration</em> options. Use the install_daemon mode To install the daemon without the <em>agent</em>, use <em>PHP</em> <em>agent</em> 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-06-02T20:32:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent to New Relic Browser in page views. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.921715,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes <em>configuration</em> for these properties when upgrading your <em>PHP</em> <em>agent</em>. Deprecated property New"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection",
        "For more help"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "3df33fa70e015d6c9561d1a2217472d981b00ea0",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-06-20T18:18:27Z",
      "updated_at": "2021-04-16T19:20:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.24841,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " INI settings. Otherwise, they may not take effect immediately. <em>Configuration</em> order of precedence Here is a simple illustration of the order of precedence that the <em>PHP</em> <em>agent</em> follows for <em>configuration</em>. Server-side <em>configuration</em> is not applicable. The only values you can change in the UI for apps"
      },
      "id": "60446d8b28ccbcf6572c60ba"
    }
  ],
  "/docs/agents/php-agent/configuration/php-agent-configuration": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.79323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "Use the newrelic-install script for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " operation of both the <em>PHP</em> <em>agent</em> and daemon, review the <em>PHP</em> <em>configuration</em> options. Use the install_daemon mode To install the daemon without the <em>agent</em>, use <em>PHP</em> <em>agent</em> 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-06-02T20:32:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent to New Relic Browser in page views. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.9217,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes <em>configuration</em> for these properties when upgrading your <em>PHP</em> <em>agent</em>. Deprecated property New"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "Proxy daemon (newrelic.cfg) settings",
        "Recommended configuration",
        "Manual configuration",
        "Important",
        "logfile",
        "loglevel",
        "ssl",
        "ssl_ca_bundle",
        "ssl_ca_path",
        "proxy",
        "address (alias for port)",
        "pidfile",
        "auditlog",
        "For more help"
      ],
      "title": "Proxy daemon (newrelic.cfg) settings",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "d8d7d5a8bee26ffa9f1819944d3154f3fc249e4f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/configuration/proxy-daemon-newreliccfg-settings/",
      "published_at": "2021-06-20T08:59:02Z",
      "updated_at": "2021-04-16T09:23:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The daemon (newrelic-daemon) acts as a proxy between the PHP agent and the New Relic collector to reduce network traffic and to improve response time for instrumented applications. The daemon process starts when your system starts, and must be running for data to be sent to New Relic. Recommended configuration Beginning with version 3.0 of the PHP agent, the daemon can be automatically configured and started by the agent. Auto-configuration does not require the newrelic.cfg file. This is the recommended configuration. However, there are still some cases where manually starting the daemon is useful. For more information about the startup process, see New Relic daemon startup modes. Manual configuration A sample daemon configuration file was created during installation. To manually configure the daemon, copy and rename newrelic.cfg.template from /etc/newrelic/newrelic.cfg.template to /etc/newrelic/newrelic.cfg and edit the file. All settings are optional and most have default values. Important The agent will not automatically start the daemon if it finds a newrelic.cfg file in the /etc/newrelic/ directory. logfile Default: [none] Sets the name of the log file to use. Can be set on the command line by the daemon -l option. Setting this value on the command line will override the value set in newrelic.cfg Although the daemon itself provides no default name for the log file, the daemon startup scripts use the -l option to set the default location and name to /var/log/newrelic/newrelic-daemon.log. loglevel Default: info Sets the level of detail for messages sent to the log file. This field has the same possible values as the agent, which are, in increasing order of detail: error warning info debug If you are encountering problems with the daemon, set the log level debug for at least long enough to reproduce the problem. A debug log file is often necessary to debug issues with the proxy daemon. Can be set on the command line using the daemon --loglevel option. Setting this value on the command line will override the value set in newrelic.cfg ssl Default: yes This configuration setting is only available in PHP agent versions lower than 8.0. Versions 8.0 and higher will ignore this setting and always use HTTPS encryption to communicate with New Relic. When set to yes, the proxy will only use a secure connection to communicate with the collector. While the setting specifies SSL, the setting refers to HTTPS encryption to the latest industry standards. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to New Relic and the New Relic REST API. Can be enabled or disabled on the command line by the daemon --tls option. Setting this value on the command line will override the value set in newrelic.cfg ssl_ca_bundle Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If ssl_ca_path is also set (see below), the certificates in this file will be searched first, followed by the certificates contained in the ssl_ca_path directory. This setting has no effect when ssl is set to false. ssl_ca_path Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If ssl_ca_bundle is also set (see above), it will be searched first followed by the certificates contained in ssl_ca_path. This setting has no effect when ssl is set to false. proxy Default: [none] Certain sites have very restrictive egress firewalls and require you to use a proxy in order to communicate with the outside world. If this applies to your site, you will need to set this value. The value is in the form scheme://user:password@hostname:port. The values scheme, user, password, and port may be omitted depending on your proxy configuration. For example, if you are using a HTTP proxy that does not require a user name and password, you could just use hostname:port. The port defaults to 1080 for most proxies. Can be set on the command line using the daemon --proxy option. Setting this value on the command line will override the value set in newrelic.cfg address (alias for port) Default: /tmp/.newrelic.sock Sets the socket endpoint the daemon will listen on. This endpoint allows agents to communicate with the daemon. This must be the same value as the agent's newrelic.daemon.address setting. This can be specified in these ways: Recommended. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). To enable connections from applications that are running on different hosts (helpful for container environments), set this value to host:port, where host denotes the host name or IP address of the local host, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for PHP agent version 9.2.0.247 or higher. These options may also be set via the command line using the daemon --address option. Setting this value on the command line will override the value set in newrelic.cfg. pidfile Default: /tmp/newrelic.pid Sets the name of the file in which the daemon will record its process ID (pid). Although the daemon sets this to a default value of /tmp/newrelic.pid, the startup script almost always uses the --pidfile option to set it to /var/run/newrelic-daemon.pid. Can be set on the command line using the daemon --pidfile option. Setting this value on the command line will override the value set in newrelic.cfg auditlog Default: [none] This feature was introduced in version 3.4. When enabled, the agent will create an audit log, which contains all of the data sent from the daemon to New Relic. This data includes the full URL, date, time, and the uncompressed, un-encoded data for each request. This allows you to observe exactly what data is sent to New Relic in order to ensure no sensitive data is included. The file specified can not be the same file as the daemon log, as described above. This audit log can become very large very quickly, so New Relic recommends that you do not use it for extended periods of time. Can be set on the command line using the daemon --auditlog option. Setting this value on the command line will override the value set in newrelic.cfg For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.18438,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Recommended <em>configuration</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>configuration</em> Beginning with version 3.0 of the <em>PHP</em> <em>agent</em>, the daemon can be automatically configured and started by the <em>agent</em>. Auto-<em>configuration</em> does not require the newrelic.cfg file. This is the recommended <em>configuration</em>. However, there are still some cases where manually starting the daemon"
      },
      "id": "60441c8d64441f3825378ed8"
    }
  ],
  "/docs/agents/php-agent/configuration/php-directory-ini-settings": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.79323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "Use the newrelic-install script for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " operation of both the <em>PHP</em> <em>agent</em> and daemon, review the <em>PHP</em> <em>configuration</em> options. Use the install_daemon mode To install the daemon without the <em>agent</em>, use <em>PHP</em> <em>agent</em> 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-06-02T20:32:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent to New Relic Browser in page views. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.9217,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes <em>configuration</em> for these properties when upgrading your <em>PHP</em> <em>agent</em>. Deprecated property New"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection",
        "For more help"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "3df33fa70e015d6c9561d1a2217472d981b00ea0",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-06-20T18:18:27Z",
      "updated_at": "2021-04-16T19:20:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.248405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " INI settings. Otherwise, they may not take effect immediately. <em>Configuration</em> order of precedence Here is a simple illustration of the order of precedence that the <em>PHP</em> <em>agent</em> follows for <em>configuration</em>. Server-side <em>configuration</em> is not applicable. The only values you can change in the UI for apps"
      },
      "id": "60446d8b28ccbcf6572c60ba"
    }
  ],
  "/docs/agents/php-agent/configuration/proxy-daemon-newreliccfg-settings": [
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.79321,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "Use the newrelic-install script for <em>PHP</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " operation of both the <em>PHP</em> <em>agent</em> and daemon, review the <em>PHP</em> <em>configuration</em> options. Use the install_daemon mode To install the daemon without the <em>agent</em>, use <em>PHP</em> <em>agent</em> 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-06-02T20:32:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent to New Relic Browser in page views. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 96.92169,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes <em>configuration</em> for these properties when upgrading your <em>PHP</em> <em>agent</em>. Deprecated property New"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    },
    {
      "sections": [
        "PHP agent configuration",
        "Important",
        "Configuration order of precedence",
        "Configuration file variables",
        "Variable scope",
        "Variable type",
        "General configuration settings",
        "newrelic.appname (HIGHLY RECOMMENDED)",
        "Caching example",
        "newrelic.capture_params",
        "Caution",
        "newrelic.framework",
        "newrelic.ignored_params",
        "newrelic.license (REQUIRED)",
        "Tip",
        "newrelic.loglevel",
        "newrelic.transaction_tracer.detail",
        "newrelic.high_security",
        "newrelic.labels",
        "newrelic.process_host.display_name",
        "Daemon .ini settings",
        "newrelic.daemon.app_timeout",
        "newrelic.daemon.app_connect_timeout",
        "newrelic.daemon.auditlog",
        "newrelic.daemon.collector_host",
        "newrelic.daemon.dont_launch",
        "newrelic.daemon.location",
        "newrelic.daemon.logfile",
        "newrelic.daemon.loglevel",
        "newrelic.daemon.pidfile",
        "newrelic.daemon.address (alias for newrelic.daemon.port)",
        "newrelic.daemon.proxy",
        "newrelic.daemon.ssl",
        "newrelic.daemon.ssl_ca_bundle",
        "newrelic.daemon.ssl_ca_path",
        "newrelic.daemon.start_timeout",
        "Transaction tracer .ini settings",
        "newrelic.transaction_tracer.custom",
        "newrelic.transaction_tracer.enabled",
        "newrelic.transaction_tracer.explain_enabled",
        "newrelic.transaction_tracer.explain_threshold",
        "newrelic.transaction_tracer.internal_functions_enabled",
        "newrelic.transaction_tracer.record_sql",
        "newrelic.transaction_tracer.slow_sql",
        "newrelic.transaction_tracer.stack_trace_threshold",
        "newrelic.transaction_tracer.threshold",
        "newrelic.transaction_tracer.gather_input_queries",
        "newrelic.transaction_tracer.max_segments_web",
        "newrelic.transaction_tracer.max_segments_cli",
        "Other tracer .ini settings",
        "newrelic.cross_application_tracer.enabled",
        "newrelic.distributed_tracing_enabled",
        "newrelic.distributed_tracing_exclude_newrelic_header",
        "newrelic.span_events_enabled",
        "newrelic.infinite_tracing.trace_observer.host",
        "newrelic.infinite_tracing.trace_observer.port",
        "newrelic.infinite_tracing.span_events.queue_size",
        "newrelic.error_collector.enabled",
        "newrelic.error_collector.record_database_errors",
        "newrelic.error_collector.prioritize_api_errors",
        "newrelic.error_collector.ignore_exceptions",
        "newrelic.error_collector.ignore_errors",
        "newrelic.framework.drupal.modules",
        "newrelic.framework.wordpress.hooks",
        "newrelic.webtransaction.name.files",
        "newrelic.webtransaction.name.functions",
        "newrelic.webtransaction.name.remove_trailing_path",
        "newrelic.datastore_tracer.instance_reporting.enabled",
        "newrelic.datastore_tracer.database_name_reporting.enabled",
        "Attribute settings",
        "newrelic.attributes.enabled",
        "newrelic.{destination}.attributes.enabled",
        "newrelic.attributes.{include|exclude}",
        "Other .ini settings",
        "newrelic.enabled",
        "newrelic.logfile",
        "newrelic.transaction_events.enabled",
        "newrelic.error_collector.capture_events",
        "newrelic.feature_flag",
        "newrelic.browser_monitoring.auto_instrument",
        "newrelic.guzzle.enabled",
        "newrelic.preload_framework_library_detection",
        "For more help"
      ],
      "title": "PHP agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Configuration"
      ],
      "external_id": "3df33fa70e015d6c9561d1a2217472d981b00ea0",
      "image": "https://docs.newrelic.com/static/66502cc6c05ca93aa4dc63e260a19739/8c557/php-config-cascade.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/configuration/php-agent-configuration/",
      "published_at": "2021-06-20T18:18:27Z",
      "updated_at": "2021-04-16T19:20:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent has a number of settings to fine-tune the types and amounts of data reported. For most users, the default values produce the best possible mix of overhead and utility. However, you can change the settings for your specific needs. Important Always restart your web server after changing INI settings. Otherwise, they may not take effect immediately. Configuration order of precedence Here is a simple illustration of the order of precedence that the PHP agent follows for configuration. Server-side configuration is not applicable. The only values you can change in the UI for apps using the PHP agent are the app's alias and its Apdex-T value. With New Relic's PHP agent, API settings override per-directory configuration settings. Per-directory settings override the php.ini file settings. Server-side configuration is not applicable. Configuration file variables During installation, the newrelic-install script provides information about the configuration files it created or a list of files you need to edit. By default it will attempt to create a configuration file named newrelic.ini. In some cases, you may be instructed to add configuration options to your php.ini file. Only do this if necessary. Exactly which file you need to edit depends on how your particular version (or versions) of PHP were configured. The two most common configurations are: Use a single newrelic.ini file. This is usually the default if you have installed or compiled PHP yourself with no special options. Scan a given directory for all .ini files. If you are unsure which file to edit: From the command line, review the output of php -i. In a browser, review the output of a page containing the script: <?php phpinfo(); ?> Copy If the newrelic.ini file appears, use it. Variable scope Each variable for your newrelic.ini file has a defined scope. The scope controls where the setting can be established or modified. The two scopes supported for New Relic settings are: SYSTEM: Values set globally in the global newrelic.ini file. PERDIR: Values set on a per-directory basis. Each can also be set at a more general level. Valid locations for each are: Can be set for: SYSTEM PERDIR Set in the global newrelic.ini file. Set on a per-directory basis. Important You cannot use ini_set() for New Relic settings. Variable type Each variable for your newrelic.ini file has a defined type. The type specifies the syntax for the value you use. Variable type Formatting and contents String String values can contain any alphanumeric character and punctuation. The value is delimited by quotes. Boolean A logical true or false setting. Valid values are: For true or enabled: on, true, the number 1. For false or disabled: off, false, the number 0. Number Numeric values can only contain digits, plus a period to indicate floats. Unless otherwise stated, all numbers are integers, not floats. Duration A string value delimited by quotes that represent a time duration. Use character flags to delimit time components. If there are no flags, the time is in milliseconds. w\\ = weeks d\\ = days h\\ = hours m\\ = minutes s\\ = seconds ms\\ = milliseconds us\\ = microseconds Example durations: \"1w3d23h10m\"\\ = 1 week, 3 days, 23 hours, and 10 minutes \"5h30m\"\\ = 5 hours and 30 minutes \"500\"\\ = 500 milliseconds General configuration settings These settings are available in the newrelic.ini file. newrelic.appname (HIGHLY RECOMMENDED) Scope: PERDIR Type: String (use quotes) Default: \"PHP Application\" This config option sets the application name that data is reported under in APM. We highly recommends that you replace the default name with a descriptive name to avoid confusion and unintended aggregation of data. Data for all applications with the same name will be merged in New Relic, so set this carefully. For all application-naming options, including per-directory settings, see Name your PHP application. The setting's value is a semicolon-separated list of up to three application names. The first name in the list is the primary application name. It must be unique for each account. The application name is used as a key into a cache. When using multiple names for an app, New Relic only uses the first name for caching. Therefore, each application name can only appear as the first element once. Caching example If you set newrelic.appname=\"App1;App2\" and later in the code set newrelic.appname=\"App1;App3\", the second one will appear not to work. It will report to App1 and App2 because of the caching. If you need overlapping application names, set the common application name in the second or third positions. For example: newrelic.appname=\"App2;App1\" and newrelic.appname=\"App3;App1\". This is useful, for example, when you want to track a superset of applications. newrelic.capture_params Scope: PERDIR Type: Boolean Default: false Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. To set this value programmatically, use the newrelic_capture_params() API function. If you pass sensitive information directly in the URL, keep this disabled. If set to true, this will enable the recording of parameters passed to a PHP script via the URL (everything after the ? in the URL) in transaction traces. These will appear under the Parameters dropdown when displaying transaction traces. newrelic.framework Scope: PERDIR Type: String (use quotes) Default: (auto-detected) The New Relic PHP agent automatically detects the frameworks it supports, but problems may arise if you are using experimental new versions or if you have customized the framework. This setting disables automatic framework detection, instead telling the agent to attempt to name transactions according to the specified framework. Specifying \"no_framework\" will disable framework-related transaction naming entirely. Use any of the following values, as appropriate: \"cakephp\" \"codeigniter\" \"drupal\" (for Drupal 6 and 7) \"drupal8\" \"joomla\" \"kohana\" \"laravel\" \"magento\" \"magento2\" \"mediawiki\" \"silex\" \"symfony1\" \"symfony2\" (for Symfony 2 and 3) \"symfony4\" \"wordpress\" \"yii\" \"zend\" \"zend2\" (for Zend Framework 2 and 3) \"no_framework\" (to force no framework even if one was detected) If the framework auto-detection fails, this command will also fail. newrelic.ignored_params Scope: PERDIR Type: String (use quotes) Default: \"\" Caution This setting has been deprecated and may not behave as expected. Instead, use attribute properties. Use the newrelic.ignored_params setting to specify a comma-separated list of parameter names to be excluded from the list of parameters sent to the New Relic servers. Enclose the string values with quote marks. If you enable parameter capturing with newrelic.capture_params, there may be parameters with sensitive user data you do not want to be captured by New Relic or visible in transaction traces. Use this to block the recording of this data. newrelic.license (REQUIRED) Scope: PERDIR Type: String (use quotes) Default: \"\" Notes: Introduced in agent version 3.0. Sets the New Relic license key to use. In a multi-tenant system this can be set on a per-directory basis. Tip When you upgrade from an old agent version to 3.0 or higher, the license will be removed from your daemon configuration file (with a comment explaining why) and stored in the file /etc/newrelic/upgrade_please.key. Copy the license out of that file and set it in your newrelic.ini file. Delete the upgrade_please.key file. newrelic.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the level of detail of messages sent to the log file. Possible values, in increasing order of detail, include: error warning info verbose debug verbosedebug When reporting any agent issues to New Relic technical support, verbosedebug is the most useful setting. However, this can generate a lot of information very quickly, so avoid keeping the agent at verbosedebug level for longer than it takes to reproduce the problem you are experiencing. When reporting any agent issues to New Relic Technical Support, you may be asked to set this to a custom level, enabling debugging only for certain subsystems. Custom levels are beyond the scope of this document. newrelic.transaction_tracer.detail Scope: PERDIR Type: Number Default: 1 Notes: This used to be newrelic.transaction_tracer.top100. Sets the level of detail in a transaction trace: When set to 1, all server calls are traced. When set to 0, traces only include internally instrumented calls by New Relic and those defined by the user using newrelic.transaction_tracer.custom. The default level of 1 does have a performance impact. If you need to improve performance, try setting the detail level to 0. When not tracing all server calls, blocks of time in transaction traces will be labeled as uninstrumented time, and only certain functions (defined internally by the agent) are instrumented. Even when reporting all calls, there may be uninstrumented time in the traces. newrelic.high_security Scope: SYSTEM Type: Boolean Default: false Enables high security for all applications. When high security is set to true, the following behaviors take effect: Data will not be sent to New Relic unless the newrelic-daemon is using a secure connection (HTTPS). If the PHP process spawns a newrelic-daemon, it will be configured to use HTTPS regardless of the value of newrelic.daemon.ssl. Raw query strings will never be gathered, regardless of the value of newrelic.transaction_tracer.record_sql. Request attributes will never be captured, regardless of the newrelic.attributes configuration settings. The newrelic_add_custom_parameter and newrelic_set_user_attributes API function will have no effect, and they will return false. The newrelic_record_custom_event API function will not submit any events to New Relic. The agent strips exception messages from errors. Caution If you change the newrelic.high_security setting, you must also change the security setting in the APM user interface. If the two settings do not match, then no data will be collected. For more information, see High security. newrelic.labels Scope: PERDIR Type: String (use quotes) Default: \"\" Adds tags. Example tags \"Server:One;Data Center:Primary\" Copy newrelic.process_host.display_name Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. Daemon .ini settings The values of these settings control the daemon startup. When the agent detects that the daemon needs to be started, it will convert these options into the appropriate command line options for the daemon. All of these settings mirror the settings in the newrelic.cfg file. They are repeated here to keep all of the .ini settings in one place. Each setting in newrelic.cfg has its counterpart here, with newrelic.daemon. as the prefix. For example, the ssl setting in newrelic.cfg is newrelic.daemon.ssl in an .ini file. Important If the file /etc/newrelic/newrelic.cfg exists, the agent ignores these settings, and the agent will not start the daemon automatically. For more information about ways to start the daemon and when to use an external configuration file, see PHP daemon startup modes. newrelic.daemon.app_timeout Scope: SYSTEM Type: Time specification string; for example, \"5m\" or \"1h20m\" Default: \"10m\" Sets the elapsed time after which an application will be considered inactive. Inactive applications do not count against the maximum limit of 250 applications. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". A value of 0 will be interpreted as \"no timeout.\" This will result in new applications always counting towards the 250 application limit, as well as the daemon being unable to release a small amount of memory per application back to the operating system. Recommendation: Do not use this value unless New Relic Support requests it. Instead, for occasional background transactions, use a value of twice the interval. For example, for an hourly background job, set the timeout to 2 hours. newrelic.daemon.app_connect_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon connecting an application. A value of 0 causes the agent to only make one attempt at connecting to the daemon. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\", and \"h\". With this timeout set, the agent will not immediately drop a transaction when the daemon hasn't connected to the backend yet, but rather grant the daemon time to establish the connection. Recommendation: If setting a timeout, the recommended value is 15s. Only set this timeout when instrumenting long-lived background tasks, as in case of connection problems the agent will block for the given timeout at every transaction start. newrelic.daemon.auditlog Scope: SYSTEM Type: String (use quotes) Default: \"\" The setting specifies the name of an audit log, which will contain all of the data sent from the daemon to the New Relic servers, including the full URL, date, time, and the uncompressed, unencoded data for each request. This file cannot be the same file as the daemon log. Important This audit log can become very large, very quickly. Avoid using the newrelic.daemon.auditlog setting for extended periods of time. Its primary purpose is to allow system administrators to perform security reviews and to observe exactly what data transmits. newrelic.daemon.collector_host Scope: SYSTEM Type: String (use quotes) Default: \"collector.newrelic.com\" Sets the name and optional port of the collector host which the daemon will contact to verify your license key and send agent data. This is either just the name of the host or the name and port number in the form \"hostname:port\". Specifying a port number of 0 will use the default port, which is 80. Caution Do not change this value without guidance from New Relic Support. newrelic.daemon.dont_launch Scope: SYSTEM Type: Number Default: 0 If you prefer to have the daemon launched externally before the agent starts up, this value determines when the agent is allowed to start the daemon: 0: No restrictions are placed on daemon startup and the agent can start the daemon any time. 1: Non-command line (such as Apache or php-fpm) agents can start the daemon. 2: Only command line agents can start the daemon. 3: The agent will never start the daemon. Use this setting if you are configuring the daemon via newrelic.cfg and starting it outside of the agent. Important If /etc/newrelic/newrelic.cfg exists, the agent assumes the daemon is meant to be started by its startup script, not via the agent. This setting has no meaning to and does not appear in newrelic.cfg. newrelic.daemon.location Scope: SYSTEM Type: String (use quotes) Default: \"/usr/bin/newrelic-daemon\" Sets the name of the daemon executable to launch. This variable identifies the full path to the daemon executable file. If the New Relic system was installed using the standard packages, the default location will be correct. If you have installed to a custom location using the tar distribution (and do not have permission to write to /usr/bin), then the daemon may reside at another location. This setting does not appear in the newrelic.cfg file as it is only relevant to PHP. Important On OpenSolaris, /usr is frequently a read-only file system. The default daemon location for OpenSolaris is /opt/newrelic/bin/newrelic-daemon. newrelic.daemon.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/newrelic-daemon.log\" Sets the name of the log file to record daemon specific log messages. This file must be writable by the daemon. The most common case is that the Apache user will end up starting the daemon when Apache itself starts up, thus you should ensure that the file is writable by whichever user runs the Apache process. Caution If the daemon log file is not writable, the daemon will not start automatically, which will prevent data from reporting. You can use write permissions to this file as a means of restricting who can start the daemon. newrelic.daemon.loglevel Scope: SYSTEM Type: String (use quotes) Default: \"info\" Sets the detail level for messages recorded to New Relic's daemon log file. Possible values, in increasing order of detail, are: error warning info debug The more verbose settings can generate a lot of information very quickly. When necessary, set debug for short periods of time to identify problems. newrelic.daemon.pidfile Scope: SYSTEM Type: String (use quotes) Default: (depends on OS) Sets the name of the file in which the daemon will record its process ID (pid). This file is used by the daemon startup and shutdown script to determine whether or not the daemon is already running. newrelic.daemon.address (alias for newrelic.daemon.port) Scope: SYSTEM Type: String or Number Default: \"@newrelic\" on Linux, \"/tmp/.newrelic.sock\" otherwise Tip From v9.2.0.247, the PHP agent supports a new setting, newrelic.daemon.address,which serves as an alias to newrelic.daemon.port. You can use either to specify the location of the New Relic PHP daemon. If both values are set, newrelic.daemon.address takes precedence. Sets the socket endpoint for agent to daemon communications. This can be specified in four ways. To use a specified file as a UNIX domain socket (UDS), provide an absolute path name as a string. This is the default on non-Linux systems. To use a standard TCP port, specify a number in the range 1 to 65534. To use an abstract socket, use the value @newrelic-daemon (available for agent version 5.2.0.141 or higher). This is the default on Linux systems. To connect to a daemon that is running on a different host (helpful for container environments), set this value to host:port, where host denotes either a host name or an IP, and port denotes a valid port number. Both IPv4 and IPv6 are supported. This is available for agent version 9.2.0.247 or higher. Caution Data transmitted from the agent to the daemon is not encrypted. The only exception to this is the SQL obfuscation that happens before sending data to the daemon. We recommend only using a private network connection between the agent and daemon (this only applies when the agent and daemon are running on different hosts). If you use port numbers, Unix systems require that ports in the range 1 to 1023 require the daemon be run as the super-user. In case the daemon uses a non-standard port, this variable also sets the port number the agent will use for communicating with the daemon. Important If you're using the newrelic.cfg startup mechanism for the daemon, this setting and the address setting in that file must match. newrelic.daemon.proxy Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the host and user credentials to use as an egress proxy. This is only used if your site requires a proxy in order to access the New Relic data collection servers. It can take any of the following forms, depending on the proxy setup: hostname hostname:port user@hostname user@hostname:port user:password@hostname user:password@hostname:port proxytype://user:password@hostname:port A proxy type of HTTP is assumed unless another proxytype is specified. In that case, proxytype can be one of http, socks4, socks4a, or socks5. newrelic.daemon.ssl Scope: SYSTEM Type: Boolean Default: true This setting is ignored on PHP agent versions 8.0 and higher, and HTTPS will always be used to communicate with New Relic. On versions of the PHP agent versions lower than 8.0, controls whether or not communication with New Relic collectors should use a secure HTTP connection. The agent communicates with New Relic via HTTPS by default, and New Relic requires HTTPS for all traffic to APM and the New Relic REST API. newrelic.daemon.ssl_ca_bundle Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a file containing CA certificates in PEM format. When set, the certificates in this file will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA bundle. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_path is also set, the certificates in this file will be searched first, followed by the certificates contained in the newrelic.daemon.ssl_ca_path directory. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.ssl_ca_path Scope: SYSTEM Type: String (use quotes) Default: \"\" Sets the location of a directory containing trusted CA certificates in PEM format. When set, the certificates in this directory will be used to authenticate the New Relic collector. In most cases it should not be necessary to configure a CA path. The New Relic PHP agent comes bundled with the necessary CA certificates. If newrelic.daemon.ssl_ca_bundle is also set, it will be searched first followed by the certificates contained in newrelic.daemon.ssl_ca_path. This setting has no effect when newrelic.daemon.ssl is set to false. newrelic.daemon.start_timeout Scope: SYSTEM Type: Time specification string; for example, \"1s\" or \"5m\" Default: \"0\" Sets the maximum time the agent should wait for the daemon to start after a daemon launch was triggered. A value of 0 causes the agent to not wait. Allowed units are \"ns\", \"us\", \"ms\", \"s\", \"m\" and \"h\". The specified timeout value will be passed to the daemon via the --wait-for-port flag. This causes daemon startup to block until a socket is acquired or until the timeout is elapsed. Recommendation: If setting a timeout, the recommended value is 2s to 5s. It is recommended to only set this timeout when instrumenting long-lived background tasks, as in case of daemon start problems the agent will block for the given timeout at every transaction start. Transaction tracer .ini settings The values of these settings are used to control transaction traces. newrelic.transaction_tracer.custom Scope: PERDIR Type: String (use quotes) Default: \"\" Set this to a comma-separated list of user defined functions or methods to instrument: \"myfunction,myclass::method,otherfunction\" Copy Internal PHP functions cannot have custom tracing. You can add to the list of custom functions with each PERDIR file, but you cannot remove a function or method that has already been added. If you want to programmatically add functions or methods to be instrumented, use the newrelic_add_custom_tracer() API function call. newrelic.transaction_tracer.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables the transaction tracer. The tracer creates a detailed transaction trace for transactions that take more time than the threshold, as set by the newrelic.transaction_tracer.threshold value. Only one transaction trace per application per harvest cycle is stored and it is always the slowest transaction during that cycle. Transaction traces are useful for diagnosing why a particular transaction was slow. Unless memory and performance are critical, they should almost never be disabled. Enabling this does have a very slight performance impact and does use more memory. For more information, see newrelic.transaction_tracer.detail. newrelic.transaction_tracer.explain_enabled Scope: PERDIR Type: Boolean Default: true Enables or disables requesting explain plans from MySQLi and PDO MySQL libraries for slow query calls. Explain plans will only be available when newrelic.transaction_tracer.slow_sql is set to true and newrelic.transaction_tracer.record_sql is not set to \"off\". newrelic.transaction_tracer.explain_threshold Scope: PERDIR Type: Duration Default: \"500\" Sets the threshold beyond which queries are considered \"slow\" and thus candidates for the Slow Queries page. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.internal_functions_enabled Scope: SYSTEM Type: Boolean Default: false Enables or disables support for tracing internal functions (that is, functions written in C and provided either via the PHP standard library or PECL extensions). When enabled, internal functions appear in transaction traces like functions written in PHP. Enabling this option may result in transactions being slower, especially when collecting many traces from PHP 5.x. Enabling this option is only recommended when specifically debugging performance issues where an internal function is suspected to be slow. newrelic.transaction_tracer.record_sql Scope: PERDIR Type: String (use quotes) Default: \"obfuscated\" Sets how queries are recorded (if at all). When recording transaction traces internally, the full query for slow query calls is recorded. Sending this query to New Relic can have serious security implications, so by default, all database statements are obfuscated before being sent to New Relic. The obfuscation is not reversible, as it replaces strings and numbers in any query with question marks. The only things that survive intact are field names, not any of their values. If you are testing with data that is not sensitive and you need to see the raw queries in transaction traces, set this to \"raw\". If you do not want queries recorded at all, set this to \"off\". Important Always set this back to \"obfuscated\" or \"off\" in any production environment. newrelic.transaction_tracer.slow_sql Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable the Slow Queries feature. When enabled, it will: Record the top 10 slowest database queries per application per minute. Create a stack trace leading up to the query. If this variable is set to false or SQL recording is disabled, the New Relic agent does not gather any slow query data. newrelic.transaction_tracer.stack_trace_threshold Scope: PERDIR Type: Duration Default: \"500\" This sets the threshold above which the agent will record the full PHP stack for transaction traces for which queries are being recorded. Specify duration as an absolute value with units. Default unit is in milliseconds if none is specified. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" Stack traces can consume memory, so be careful of setting this value too low. This variable has no meaning if newrelic.transaction_tracer.record_sql is set to \"off\". newrelic.transaction_tracer.threshold Scope: PERDIR Type: Duration Default: \"apdex_f\" Use this variable to set the threshold beyond which transactions are eligible for being traced. Available values include: Use \"apdex_f\" to set the threshold to 4 times the application's apdex_t value. For more information, see Apdex: Measuring user satisfaction. Use any other duration string to set a specific time threshold. Specify the duration as an absolute value and the unit of measurement. If none is specified, the unit defaults to millisecond. Example durations \"200ms\" \"1s250ms\" \"1h30m\" \"750us\" newrelic.transaction_tracer.gather_input_queries Scope: PERDIR Type: Boolean Default: true Use this setting to enable or disable gathering of DQL input queries with Slow Queries and Transaction Traces. When enabled, these will appear along with slow queries and transaction traces. newrelic.transaction_tracer.max_segments_web Scope: PERDIR Type: Number Default: 0 Specifies the maximum number of segments the PHP agent shall record for web transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP web processes; it will not effect PHP CLI processes. To set a limit for CLI processes use newrelic.transaction_tracer.max_segments_cli. newrelic.transaction_tracer.max_segments_cli Scope: PERDIR Type: Number Default: 100000 Specifies the maximum number of segments the PHP agent shall record for CLI transactions. Once that maximum is reached sampling will occur. The PHP agent reports transaction traces and distributed traces as a collection of segments. Each segment represents a method or a function call in a transaction trace. The default value for this configuration is 0, indicating that the PHP agent shall capture all segments during a web transaction. At the end of a transaction, it assembles the highest priority segments to report in a transaction trace. For long-running PHP processes with hundreds of thousands or millions of function calls, setting this to a value greater than 1 prevents the PHP agent from exhausting system memory when recording segments. Segment size can vary based upon the length of the corresponding method's name, the length of its class name, and the number of subsequent calls made by the method. That said, a conservative estimate is 400 bytes per segment. To limit the PHP agent to 40 MB for segment capture, set this value to 100000. If this value is set lower than 2000, it further limits the total number of segments reported for transaction traces. This configuration setting is only for PHP CLI processes; it will not effect PHP web processes. To set a limit for web processes use newrelic.transaction_tracer.max_segments_web. Other tracer .ini settings The values of these settings are used to control various tracer features. newrelic.cross_application_tracer.enabled Important A distributed tracing feature is available. Distributed tracing improves on cross application tracing and is recommended for monitoring activity in complex distributed systems. Scope: PERDIR Type: Boolean Default: true Enable or disable the cross application tracer. The cross application tracer inserts HTTP headers into outbound requests and the response in order to link together web transaction metrics and transaction traces between applications. Distributed tracing and cross application tracing cannot be used simultaneously. The default configuration for the PHP agent disables distributed tracing and enables cross application tracing. newrelic.distributed_tracing_enabled Scope: PERDIR Type: Boolean Default: false Important Enabling distributed tracing disables cross-application tracing. Before enabling, read the transition guide to understand effects on New Relic features. Enable or disable distributed tracing. When the agent's transaction tracer and distributed tracing features are enabled, the agent will insert headers into outbound requests, and scan incoming requests for distributed tracing headers. newrelic.transaction_tracer.enabled = true newrelic.distributed_tracing_enabled = true Copy newrelic.distributed_tracing_exclude_newrelic_header Scope: PERDIR Type: Boolean Default: false Set this to true to exclude the New Relic distributed tracing header that is attached to outbound requests, and to instead only rely on W3C Trace Context Headers for distributed tracing. If this is false then both types of headers are attached to outbound requests. The New Relic distributed tracing header allows interoperability with older agents that do not support W3C Trace Context headers. Agent versions that support W3C Trace Context headers will prioritize them over New Relic headers for distributed tracing. newrelic.span_events_enabled Scope: PERDIR Type: Boolean Default: true Span events are reported for distributed tracing. Span event reporting requires distributed tracing to be enabled. This option enables/disables the reporting of span events. newrelic.infinite_tracing.trace_observer.host Scope: PERDIR Type: String Default: \"\" Configures the Trace Observer used for Infinite Tracing. If empty, Infinite Tracing support will be disabled. This requires distributed tracing and span events to be enabled. newrelic.infinite_tracing.trace_observer.port Scope: PERDIR Type: Integer Default: 443 Configures the TCP/IP port used to communicate with the Infinite Tracing Trace Observer. This setting is ignored if newrelic.infinite_tracing.trace_observer.host is empty. This setting will not usually need to be changed. newrelic.infinite_tracing.span_events.queue_size Scope: PERDIR Type: Integer (1000 or higher) Default: 100000 Sets the number of span events that can be queued for transmission to the Infinite Tracing Trace Observer. The agent internally manages span events for Infinite Tracing in span batches. Those span batches can hold a maximum of 1000 spans. Therefore, the span events queue size cannot be lower than 1000, as otherwise not even a single span batch can be queued. If a queue size lower than 1000 is specified, the minimum size of 1000 is used. newrelic.error_collector.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the error collector. When enabled, the agent collects and reports PHP errors to the New Relic UI. The agent records only the single most severe error for each transaction, and up to 20 errors per harvest cycle. Tip For an overview of error configuration in APM, see Manage errors in APM. newrelic.error_collector.record_database_errors Scope: PERDIR Type: Boolean Default: true When enabled, the agent collects errors returned by MySQL functions as if they were PHP errors. newrelic.error_collector.prioritize_api_errors Scope: PERDIR Type: Boolean Default: false Set this to true to assign the highest priority to errors identified through the newrelic_notice_error() API function. newrelic.error_collector.ignore_exceptions Scope: PERDIR Type: String Default: (none) A comma separated list of fully-qualified exception class names that the agent should ignore. When an unhandled exception occurs, the agent will perform the equivalent of $exception instanceof Class for each of the classes listed. If any of those checks returns true, the agent will not record an exception. Depending on the supported PHP release, these values are equivalent to disabling exception reporting: Supported PHP 5 versions: newrelic.error_collector.ignore_exceptions = Exceptions Supported PHP 7 versions: newrelic.error_collector.ignore_exceptions = Throwable newrelic.error_collector.ignore_errors Scope: PERDIR Type: Integer or a bitwise expression of PHP-defined error constants Default: 0 Sets the error levels for the PHP agent to ignore. The value for this setting uses similar syntax to PHP's error_reporting option. For example, to configure the PHP agent to ignore E_WARNING and E_ERROR level errors, use: newrelic.error_collector.ignore_errors = E_WARNING | E_ERROR or newrelic.error_collector.ignore_errors = 3 To configure the PHP agent to ignore everything but E_WARNING, use: newrelic.error_collector.ignore_errors = E_ALL & ~E_WARNING newrelic.framework.drupal.modules Scope: PERDIR Type: Boolean Default: true Notes: In agents prior to version 3.0 the default for this value was false. Setting this option implied newrelic.transaction_tracer.detail = 1. To enable Drupal module tracking, set this to true. This option has the same performance impact as newrelic.transaction_tracer.detail. It will enable the recording of Drupal module functions and call counts, and they will display under the Modules tab, much like web transactions. newrelic.framework.wordpress.hooks Scope: PERDIR Type: Boolean Default: true To enable WordPress hook tracking, set this to true. It will enable the recording of WordPress hooks, plugins, and themes, and they will display under the WordPress tab in the New Relic UI. newrelic.webtransaction.name.files Scope: PERDIR Type: String (use quotes) Default: \"\" This is the same as newrelic.webtransaction.name.functions, except it uses file names to name the web transaction. The file names can be standard POSIX regular expression to be used with PCRE; for example, \"controllers/actions/.*\". newrelic.webtransaction.name.functions Scope: PERDIR Type: String (use quotes) Default: \"\" Unless the New Relic agent detects a specific framework, such as Drupal or Wordpress, web transactions are named after the initial PHP file; for example, article.php. When the initial file is a dispatcher, this naming scheme produces less than useful data. Use this variable to specify a list of functions that are the \"actions\" generated by the dispatcher. The name of the web transaction will be the first action function executed. Example dispatch function naming If index.php dispatches to functions named: login, logout, admin, show, and edit You would set this value to \"login,logout,admin,show,edit\". The web transactions will be named login, logout, etc. instead of /index.php (the initial file name). newrelic.webtransaction.name.remove_trailing_path Scope: PERDIR Type: Boolean Default: false When enabled,this removes any content in the request URI after the script name. For example, this would remove the trailing /xyz/zy from /path/to/foo.php/xyz/zy. newrelic.datastore_tracer.instance_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not report datastore instance metrics, nor add host or port_path_or_id parameters to transaction or slow sql traces. newrelic.datastore_tracer.database_name_reporting.enabled Scope: PERDIR Type: Boolean Default: true If false, the agent will not add database_name parameter to transaction or slow sql traces. Attribute settings This section lists the settings that affect attribute collection and reporting. newrelic.attributes.enabled Scope: PERDIR Type: Boolean Default: true Enable or disable the collection of attributes generated by the PHP agent or generated by the user through newrelic_add_custom_parameter(). This setting will take precedence over all other attribute configuration settings. For more information, see Enabling and disabling attributes. newrelic.{destination}.attributes.enabled Scope: PERDIR Type: Boolean Default: True, except for browser_monitoring.attributes.enabled Control which destinations receive attributes. These configuration settings will override the .include and .exclude settings. For more information on the destinations available, see Enabling and disabling attributes. newrelic.attributes.{include|exclude} Scope: PERDIR Type: String Default: (none) This is a family of configuration options that allow fine control over the destinations of attributes. For more information, see Enabling and disabling attributes. Other .ini settings This section lists the remaining newrelic.ini settings. newrelic.enabled Scope: SYSTEM Type: Boolean Default: (none) Enable or disable the New Relic agent. By default the New Relic PHP agent is enabled for all directories. If you have multiple sites on your web server but only want the PHP agent to monitor specific ones: Make sure newrelic.enabled is set to true at the global (SYSTEM) level in your newrelic.ini file. Set newrelic.enabled to false for one or more specific sites on a per-directory basis (PERDIR). If you need to disable the agent globally, set the newrelic.enabled value to false in the newrelic.ini file. When the agent is globally disabled, it does not initialize completely. It assumes you are globally disabling it for a critical reason, and the agent will attempt to have as close to zero impact on PHP as possible. Important You cannot globally disable the agent and then selectively enable it on a per-directory basis by using .htaccess. newrelic.logfile Scope: SYSTEM Type: String (use quotes) Default: \"/var/log/newrelic/php_agent.log\" This identifies the file name for logging messages. This is useful for debugging any issues with the agent. Whatever you set this to, ensure that: The permissions for the containing directory and the file itself are correct. The user that PHP runs as can write to the file. Usually this is the same user as the web server. newrelic.transaction_events.enabled Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report analytics event data. Event data allows the New Relic UI to show additional information such as histograms and percentiles. newrelic.error_collector.capture_events Scope: PERDIR Type: Boolean Default: true When set to true, the agent will collect and report error event data. Event data allows the New Relic UI to show Error analytics. newrelic.feature_flag Scope: PERDIR Type: Boolean Default: true This setting enables new and experimental features within the PHP agent. These flags are used to selectively enable features that are intended to be enabled by default in later versions of the PHP agent. newrelic.browser_monitoring.auto_instrument Scope: PERDIR Type: Boolean Default: true This enables auto-insertion of the JavaScript fragments for browser monitoring. When enabled will cause the agent to insert a header and a footer in HTML output that will generate metrics on page load timing for the end-user experience. For more information, see Page load timing in PHP. newrelic.guzzle.enabled Scope: PERDIR Type: Boolean Default: true Enables or disables support for the Guzzle library when used with New Relic. PHP agent version 6.4 or higher: This setting is set to true by default. newrelic.preload_framework_library_detection Scope: SYSTEM Type: Boolean Default: true Notes: Introduced in PHP agent version 9.4 Enables the detection of frameworks and libraries when preloading is enabled. Preloading was introduced in PHP version 7.4. newrelic.preload_framework_library_detection will only take effect when opcache.preload is set in the php.ini file. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 92.248405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "sections": "<em>PHP</em> <em>agent</em> <em>configuration</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " INI settings. Otherwise, they may not take effect immediately. <em>Configuration</em> order of precedence Here is a simple illustration of the order of precedence that the <em>PHP</em> <em>agent</em> follows for <em>configuration</em>. Server-side <em>configuration</em> is not applicable. The only values you can change in the UI for apps"
      },
      "id": "60446d8b28ccbcf6572c60ba"
    }
  ],
  "/docs/agents/php-agent/features/browser-monitoring-php-agent": [
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs",
        "For more help"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "cbf055d7c7d64c050bf702149c2b88d5eee35127",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-06-20T03:21:00Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.47776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "60441c8d196a678911960f45"
    },
    {
      "sections": [
        "Multiple accounts",
        "Set per virtual host",
        "Set with the API",
        "For more help"
      ],
      "title": "Multiple accounts",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "3e74614bd2214accd1220625328f2f5226f1260c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/multiple-accounts/",
      "published_at": "2021-06-20T09:36:01Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure New Relic to support multiple accounts per host. For example, you may be a service provider supporting multiple customers in a shared hosting environment. Set per virtual host Set a New Relic license key for each virtual host using newrelic.license. For example, with Apache: <VirtualHost 192.168.42.43> ServerName www.myvhost1.com DocumentRoot \"/path/to/vhost1/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 1\" </IfModule> </VirtualHost> <VirtualHost 192.168.123.45> ServerName www.myvhost2.com DocumentRoot \"/path/to/vhost2/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 2\" </IfModule> </VirtualHost> Copy Set with the API Use newrelic_set_appname() to change the account during the current transaction. For example: newrelic_set_appname(\"APP NAME\", \"NEW RELIC LICENSE KEY\"); Copy Set this as early in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: The PHP API (the PHP API reference) PHP agent (newrelic.ini) settings (The PHP .ini file reference) PHP per-directory INI settings (configuring New Relic on a per directory basis) Creating multiple accounts (setting up multiple New Relic accounts on the same email)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.47776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional"
      },
      "id": "603e9159e7b9d27d5e2a07dd"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Contents",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-06-20T05:09:07Z",
      "updated_at": "2021-04-16T05:40:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Contents Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.45209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " %s\\n&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/features/distributed-tracing-php-agent": [
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-06-20T02:56:56Z",
      "updated_at": "2021-04-16T09:22:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the Browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's Browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.30839,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "Multiple accounts",
        "Set per virtual host",
        "Set with the API",
        "For more help"
      ],
      "title": "Multiple accounts",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "3e74614bd2214accd1220625328f2f5226f1260c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/multiple-accounts/",
      "published_at": "2021-06-20T09:36:01Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure New Relic to support multiple accounts per host. For example, you may be a service provider supporting multiple customers in a shared hosting environment. Set per virtual host Set a New Relic license key for each virtual host using newrelic.license. For example, with Apache: <VirtualHost 192.168.42.43> ServerName www.myvhost1.com DocumentRoot \"/path/to/vhost1/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 1\" </IfModule> </VirtualHost> <VirtualHost 192.168.123.45> ServerName www.myvhost2.com DocumentRoot \"/path/to/vhost2/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 2\" </IfModule> </VirtualHost> Copy Set with the API Use newrelic_set_appname() to change the account during the current transaction. For example: newrelic_set_appname(\"APP NAME\", \"NEW RELIC LICENSE KEY\"); Copy Set this as early in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: The PHP API (the PHP API reference) PHP agent (newrelic.ini) settings (The PHP .ini file reference) PHP per-directory INI settings (configuring New Relic on a per directory basis) Creating multiple accounts (setting up multiple New Relic accounts on the same email)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.47776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional"
      },
      "id": "603e9159e7b9d27d5e2a07dd"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Contents",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-06-20T05:09:07Z",
      "updated_at": "2021-04-16T05:40:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Contents Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.45209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " %s\\n&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/features/multiple-accounts": [
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-06-20T02:56:56Z",
      "updated_at": "2021-04-16T09:22:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the Browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's Browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.30839,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs",
        "For more help"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "cbf055d7c7d64c050bf702149c2b88d5eee35127",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-06-20T03:21:00Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.47776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "60441c8d196a678911960f45"
    },
    {
      "sections": [
        "Recording deployments using a PHP script",
        "Contents",
        "Customizing the script",
        "Example script",
        "Caution",
        "For more help"
      ],
      "title": "Recording deployments using a PHP script",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "a2e5e788adfeebe926e84af53714f51b2d45531f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/recording-deployments-using-php-script/",
      "published_at": "2021-06-20T05:09:07Z",
      "updated_at": "2021-04-16T05:40:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can send information about application deployments to New Relic via the REST API or via a PHP program or script. To record deployments via a script, you must have libcurl available for your PHP installation. Contents Customizing the script Customize the example script to record deployments with your PHP application: Ensure that libcurl is installed in your PHP installation. Copy the example script below to a text editor. In the $apikey line, specify your New Relic API key. Specify the app for which you want New Relic to record a deployment: Specify an existing New Relic app ID. OR Specify an $app_name corresponding to an existing New Relic for PHP app. If you specify the app via its app name, ensure you uncomment the following line in the data string section of the script: $dep_dat = \"deployment[app_name]=\".$app_name; Copy Optional: Customize the $dep_description, $dep_change, $dep_user, and $dep_rev values to record additional details about the deployment. If you customize these values, ensure you uncomment their lines in the data string section of the script. For example, to record user name in your script, uncomment this line of the data string section: $dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; Copy Save the script. Call the script during your deployment process. Example script Caution Caution: This is a generic example and should be customized for your system configuration. #!/usr/bin/php <?php #Deployment # Assumes the availability of libcurl in the PHP environment. #Make your changes here: $apikey = \"{INSERT YOUR API KEY HERE}\"; #Specify an existing New Relic app name OR app ID #$app_name = \"{INSERT YOUR APPLICATION NAME HERE}\"; $app_id = \"{INSERT YOUR APPLICATION ID HERE}\"; $dep_description = \"This is your app id deployment\"; #$dep_change = \"This is a change log entry\"; #$dep_user = \"This is the user entry\"; #$dep_rev = \"This is a version number\"; #compose the data string for curl #$dep_dat = \"deployment[app_name]=\".$app_name; $dep_dat = \"deployment[app_id]=\".$app_id; $dep_dat = $dep_dat.\"&deployment[description]=\".$dep_description; #$dep_dat = $dep_dat.\"&deployment[changelog]=\".$dep_change; #$dep_dat = $dep_dat.\"&deployment[user]=\".$dep_user; #$dep_dat = $dep_dat.\"&deployment[revision]=\".$dep_rev; #There should be no changes necessary beyond this point #deployment url at New Relic $url = \"https://api.newrelic.com/deployments.xml\"; #Create header info $header = array(\"x-api-key:\".$apikey); #initialize curl $ch = curl_init(); curl_setopt ($ch, CURLOPT_VERBOSE, 1); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 1); curl_setopt ($ch, CURLOPT_HTTPHEADER, $header ); curl_setopt ($ch, CURLOPT_POSTFIELDS, $dep_dat ); # Make the curl call for deployment $http_result = curl_exec ($ch); $error = curl_error($ch); $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); #close curl curl_close ($ch); #output status vprintf (\"Code %s\\n\", $http_code); vprintf (\"Results %s\\n\", $http_result); if ($error) { vprintf (\"Error %s\\n\",$error); } ?> Copy For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server's Apdex scores, response times, throughput, and errors) Setting up deployment notifications (agent-specific instructions)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.45209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Recording deployments using a <em>PHP</em> script",
        "sections": "Recording deployments using a <em>PHP</em> script",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " %s\\n&quot;,$error); } ?&gt; Copy For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional documentation resources include: Deployments page (recent deployments and their impact on your end user and app server&#x27;s Apdex scores, response times, throughput, and errors) Setting up deployment notifications (<em>agent</em>-specific instructions)"
      },
      "id": "603ecf7f196a679e81a83dd1"
    }
  ],
  "/docs/agents/php-agent/features/php-custom-instrumentation": [
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-06-20T02:56:56Z",
      "updated_at": "2021-04-16T09:22:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the Browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's Browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.30838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs",
        "For more help"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "cbf055d7c7d64c050bf702149c2b88d5eee35127",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-06-20T03:21:00Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.47776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "60441c8d196a678911960f45"
    },
    {
      "sections": [
        "Multiple accounts",
        "Set per virtual host",
        "Set with the API",
        "For more help"
      ],
      "title": "Multiple accounts",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "3e74614bd2214accd1220625328f2f5226f1260c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/multiple-accounts/",
      "published_at": "2021-06-20T09:36:01Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure New Relic to support multiple accounts per host. For example, you may be a service provider supporting multiple customers in a shared hosting environment. Set per virtual host Set a New Relic license key for each virtual host using newrelic.license. For example, with Apache: <VirtualHost 192.168.42.43> ServerName www.myvhost1.com DocumentRoot \"/path/to/vhost1/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 1\" </IfModule> </VirtualHost> <VirtualHost 192.168.123.45> ServerName www.myvhost2.com DocumentRoot \"/path/to/vhost2/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 2\" </IfModule> </VirtualHost> Copy Set with the API Use newrelic_set_appname() to change the account during the current transaction. For example: newrelic_set_appname(\"APP NAME\", \"NEW RELIC LICENSE KEY\"); Copy Set this as early in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: The PHP API (the PHP API reference) PHP agent (newrelic.ini) settings (The PHP .ini file reference) PHP per-directory INI settings (configuring New Relic on a per directory basis) Creating multiple accounts (setting up multiple New Relic accounts on the same email)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.47776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional"
      },
      "id": "603e9159e7b9d27d5e2a07dd"
    }
  ],
  "/docs/agents/php-agent/features/recording-deployments-using-php-script": [
    {
      "sections": [
        "Browser monitoring and the PHP agent",
        "Use auto-instrumentation",
        "Manually instrument via agent API",
        "Important",
        "Manually instrument for various frameworks",
        "WordPress",
        "Drupal",
        "View Browser data",
        "Disable auto-instrumentation",
        "For more help"
      ],
      "title": "Browser monitoring and the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "395fa4b5823c7c8b40c6b4a16867b2ecd19d3aa2",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/browser-monitoring-php-agent/",
      "published_at": "2021-06-20T02:56:56Z",
      "updated_at": "2021-04-16T09:22:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the PHP agent, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser agent. Then follow the procedures in this section to set up the PHP agent. To use browser monitoring with your PHP agent, ensure you have the latest release. For more information, see the agent installation instructions. Use auto-instrumentation To configure the agent to automatically instrument pages with the browser monitoring script, add or edit the auto-instrumentation flag in your INI file. The PHP agent will automatically inject the browser monitoring's JS snippet into your pages. newrelic.browser_monitoring.auto_instrument=1 Copy Auto-instrumentation does not work when the HTTP header field Content-Length is set. To use browser monitoring in this situation, disable auto-instrumentation and manually insert the JavaScript header and footer into your templates. Manually instrument via agent API To manually configure browser monitoring, include the appropriate scripts in your pages. The New Relic PHP agent has an API to automatically generate the required JavaScript header and footer in place. Important Calls to the PHP agent API are conditional on the newrelic extension being loaded so that the PHP agent is running. If the agent is not running, calls to generate the JavaScript header and footer will result in errors, as the functions will not be defined. For more information, see: auto_instrument agent settings newrelic_get_browser_timing_header() newrelic_get_browser_timing_footer() Manually instrument for various frameworks This document does not provide detailed procedures to manually insert the Browser agent via the agent API. This is because there too many possible ways to construct a framework. The manual instrumentation examples show how to add instrumentation to frameworks that already support auto-instrumentation. If you are using another framework or modified versions of Drupal or WordPress, be sure to call the API functions for instrumentation at the right place. Insert the return value of newrelic_get_browser_timing_header() as part of the output page's <head> tag, preferably as the very first thing. As the very last thing before the closing </body> tag in the document, or as close to it as possible, insert the return value of newrelic_get_browser_timing_footer(). Here are some basic examples. WordPress This example shows how to call the PHP agent API to generate headers and footers for a WordPress installation using the default twentyten theme. Insert a call to generate the JavaScript header in website home dir/wordpress/wp-content/themes/twentyten/header.php. <body <?php body_class(); ?>> <div id=\"wrapper\" class=\"hfeed\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"masthead\"> ... Copy Insert a call to generate the end user monitoring footer in website home dir/wordpress/wp-content/themes/twentyten/footer.php. ... </div><!-- #site-generator --> </div><!-- #colophon --> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> </div><!-- #footer --> Copy Drupal This example shows how to call the PHP agent API to generate headers and footers for a Drupal installation using the default garland theme. Insert a call to generate the JavaScript header right after the opening header tag in website home dir/drupal/themes/garland/page.tpl.php. <div id=\"container\" class=\"clear-block\"> <div id=\"header\"> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_header(); } ?> <div id=\"logo-floater\"> ... Copy Insert a call to generate the footer right before the last closing layout tag: ... </div> <?php if( extension_loaded('newrelic') ) { echo newrelic_get_browser_timing_footer(); } ?> <!-- /layout --> <?php print $closure ?> </body> </html> Copy Important In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the JavaScript (newrelic.js) is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. View Browser data Once you enable browser monitoring and generate traffic for your app, data will appear in your app's Browser Summary page. There is a short delay the first time you start the daemon (or when the PHP agent encounters a new application) while the daemon verifies the settings. After that, the New Relic JavaScript snippet is available. Disable auto-instrumentation For how to disable browser monitoring with the PHP agent config, see Browser monitoring config option. For how to use the API to disable browser monitoring, see newrelic_disable_autorum(). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.30838,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "sections": "Browser monitoring and the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "With the <em>PHP</em> <em>agent</em>, you can add browser monitoring to your pages either automatically or manually. To enable browser monitoring in the user interface, follow the procedures to install the browser <em>agent</em>. Then follow the procedures in this section to set up the <em>PHP</em> <em>agent</em>. To use browser monitoring"
      },
      "id": "60441c8c28ccbcbac92c60b2"
    },
    {
      "sections": [
        "Distributed tracing for the PHP agent",
        "Enable distributed tracing for PHP",
        "Important",
        "Enable Infinite Tracing",
        "Leverage automatic distributed tracing instrumentation",
        "Set trace detail level",
        "Manually instrument applications and services",
        "Tip",
        "Header API",
        "Insert distributed trace headers",
        "Accept the distributed tracing headers",
        "Payload API (deprecated)",
        "Create a distributed trace payload",
        "Accept the distributed tracing payload",
        "Optional: Use HTTP safe payload strings",
        "Command line PHP programs",
        "For more help"
      ],
      "title": "Distributed tracing for the PHP agent",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "cbf055d7c7d64c050bf702149c2b88d5eee35127",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/distributed-tracing-php-agent/",
      "published_at": "2021-06-20T03:21:00Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent supports distributed tracing (including W3C Trace Context, as of PHP Agent version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains PHP-specific tips to enable distributed tracing for a PHP application or service. Enable distributed tracing for PHP Important When distributed tracing is enabled, it implicitly disables cross application tracing. The PHP agent will ignore the cross application tracing configuration value, and act as though this value is set to false. To enable or disable distributed tracing for the PHP agent: If applicable, update your PHP agent to support distributed tracing (version 8.4 or higher, although we recommend version 9.8 or higher for the most complete functionality). Make sure that the transaction tracer configuration option is enabled (default is true): newrelic.transaction_tracer.enabled = true Copy Enable (or disable) distributed tracing for the PHP agent with the distributed_tracing_enabled configuration option: newrelic.distributed_tracing_enabled = true Copy Set the transaction tracer threshold value to a suitable value. Recommendation: If you want to make all transactions eligible for a distributed trace, set this value to 0 seconds. If you are only interested in traces for longer running transactions, or if generating a trace for every transaction creates unacceptable application performance, set this value higher than 0 seconds. For example: newrelic.transaction_tracer.threshold = 0 Copy Optionally, if only W3C Trace Context tracing is desired, the New Relic Distributed Tracing headers can be disabled with the newrelic.distributed_tracing_exclude_newrelic_header configuration option: newrelic.distributed_tracing_exclude_newrelic_header = 1 Enable spans with the configuration setting: newrelic.span_events_enabled = true Be sure to restart your web server (or other PHP SAPI) so the agent will pick up the newly configured values. Enable Infinite Tracing Infinite Tracing (PHP agent version 9.12 or later) extends distributed tracing to collect your span data in a trace observer, which runs in a cluster of services in AWS called New Relic Edge. The PHP agent sends all your spans to the trace observer so they can be assembled into traces for you to view in New Relic. To turn on Infinite Tracing, enable distributed tracing and configure the additional settings below: newrelic.span_events_enabled = true newrelic.infinite_tracing.trace_observer.host= \"YOUR_TRACE_OBSERVER_HOST\" Leverage automatic distributed tracing instrumentation The PHP agent automatically will instrument a number of native PHP functions, as well as some third party HTTP clients, with distributed trace information. These include: PHP function file_get_contents PHP functions curl_exec and curl_multi_exec Guzzle 4, Guzzle 5, Guzzle 6 Drupal's drupal_http_request function Laravel's queue jobs Set trace detail level Distributed tracing support depends on the PHP agent's transaction tracer. When distributed tracing is enabled, a span is created for each segment seen by the transaction tracer. As spans are sampled, the PHP agent will prioritize spans related to external calls above other spans, which are then recorded in descending order of their duration. If you find that there are too many unimportant spans being reported for PHP function calls, you can reduce the detail of the transaction tracer by setting newrelic.transaction_tracer.detail to 0. You may then use the newrelic.transaction_tracer.custom configuration setting or the newrelic_add_custom_tracer API method to add trace segments and spans for the specific PHP function or methods you want to add to your traces. Important For PHP agent versions 8.4 to 8.7: When distributed tracing is enabled, these versions behave as if newrelic.transaction_tracer.detail is set to 0 (as described above), which results in PHP function calls not generating spans. To get spans related to PHP function calls, update to version 9.0 or higher. Manually instrument applications and services Important W3C Trace Context support was added in version 9.8. With this, the API for manually instrumenting applications has changed from the JSON payload related functions newrelic_create_distributed_trace_payload() and newrelic_accept_distributed_trace_payload($payload), to the header array forms newrelic_insert_distributed_trace_headers($outbound_headers) and newrelic_accept_distributed_trace_headers($inbound_headers). The JSON functions are now considered deprecated, and will be removed in a future release. If you're using an unsupported library, or have a non-HTTP based distributed system component (such as messaging queues), you can use the PHP agent API to manually identify transactions to be included in a distributed trace. This is a two step process: Modify your service or application to create or insert the distributed tracing data Modify your service or application to accept distributed trace data created by other transactions or requests. The following example uses a generic message/job queue. While the actual details will vary depending on what sort of system you're trying to add to a distributed trace, the core concepts are the same. Also, while we've used a job queue as an example, you can use these methods with any distributed system component. Tip When you create a payload or insert headers, you're telling New Relic you want this request or transaction or request to participate in a distributed trace. When you accept them, you're linking the current request or transaction with its parent request or transaction. For more information about using manual instrumentation to get more detail or to see connections between services, see the documentation about distributed tracing APIs. Header API Insert distributed trace headers Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to insert distributed trace headers into an array by using newrelic_insert_distributed_trace_headers, and then add those headers to the job's data: $outbound_headers = array(); if (newrelic_insert_distributed_trace_headers($outbound_headers)) { // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the headers to the job data $job->setData('nr_dt_headers', $outbound_headers); // save the job $job->save(); } else { echo \"Unable to obtain distributed tracing headers\"; } Copy Tip Tip: The headers created via newrelic_insert_distributed_trace_headers() are HTTP safe. This is step one: You've inserted the distributed trace headers. Accept the distributed tracing headers Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept distributed trace headers, use the newrelic_accept_distributed_trace_headers function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $inbound_headers = $job->getData('nr_dt_headers'); if($inbound_headers) { newrelic_accept_distributed_trace_headers($inbound_headers); } $job->run(); } Copy Payload API (deprecated) Create a distributed trace payload Somewhere in your application you'll have code that looks or acts like the following: // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // save the job $job->save(); Copy If you want this job to appear in a distributed trace, you need to create a distributed trace payload using newrelic_create_distributed_trace_payload, and then add that payload to the job's data: $payload = newrelic_create_distributed_trace_payload(); // create a job object $job = new \\Generic\\Queue\\Job; // set the information needed to run the queue job $job->setData('info', $info); // add the payload data to the job data as a text json string $job->setData('dt_payload', $payload->Text()); // save the job $job->save(); Copy This is step one: You've created a distributed trace payload. Accept the distributed tracing payload Next, somewhere in your application stack you'll have a queue runner that looks or acts like the following: // create the job runner $jobRunner = \\Generic\\Queue\\Runner; // grab jobs until there aren't any while($job = $jobRunner->next()) { // run the job $job->run(); } Copy In order to accept a distributed trace payload, use the newrelic_accept_distributed_trace_payload function // create the job runner $jobRunner = \\Generic\\Queue\\Runner; while($job = $jobRunner->next()) { $payload = $job->getData('dt_payload'); if($payload) { newrelic_accept_distributed_trace_payload($payload); } $job->run(); } Copy Optional: Use HTTP safe payload strings If you need to transport the payload via a mechanism that requires HTTP safe strings, (HTTP headers, URL query strings, POST fields, etc.), the API includes distributed tracing methods and functions that will create and accept HTTP safe versions of the strings. // create the HTTP safe payload string $payload = newrelic_create_distributed_trace_payload(); $httpSafePayload = $payload->httpSafe(); // ... // accept the HTTP safe payload string newrelic_accept_distributed_trace_payload_httpsafe($httpSafePayload); Copy Command line PHP programs PHP programs run from the PHP command line are always sampled by the agent's distributed tracer. Depending on the programs you run, these processes could see an over-representation in your collection of distributed traces. In these situations, you can opt to disable command line instrumentation by using the per-directory newrelic.enabled setting in your newrelic.ini files. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.47776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "sections": "Distributed tracing for the <em>PHP</em> <em>agent</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "New Relic&#x27;s <em>PHP</em> <em>agent</em> supports distributed tracing (including W3C Trace Context, as of <em>PHP</em> <em>Agent</em> version 9.8), which lets you see the path that requests take as they travel through a distributed system. This document contains <em>PHP</em>-specific tips to enable distributed tracing for a <em>PHP</em> application"
      },
      "id": "60441c8d196a678911960f45"
    },
    {
      "sections": [
        "Multiple accounts",
        "Set per virtual host",
        "Set with the API",
        "For more help"
      ],
      "title": "Multiple accounts",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Features"
      ],
      "external_id": "3e74614bd2214accd1220625328f2f5226f1260c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/features/multiple-accounts/",
      "published_at": "2021-06-20T09:36:01Z",
      "updated_at": "2021-04-16T09:24:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can configure New Relic to support multiple accounts per host. For example, you may be a service provider supporting multiple customers in a shared hosting environment. Set per virtual host Set a New Relic license key for each virtual host using newrelic.license. For example, with Apache: <VirtualHost 192.168.42.43> ServerName www.myvhost1.com DocumentRoot \"/path/to/vhost1/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 1\" </IfModule> </VirtualHost> <VirtualHost 192.168.123.45> ServerName www.myvhost2.com DocumentRoot \"/path/to/vhost2/\" ... <IfModule php5_module> php_value newrelic.license \"NEW RELIC LICENSE KEY 2\" </IfModule> </VirtualHost> Copy Set with the API Use newrelic_set_appname() to change the account during the current transaction. For example: newrelic_set_appname(\"APP NAME\", \"NEW RELIC LICENSE KEY\"); Copy Set this as early in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our PHP agent open source repository. Additional documentation resources include: The PHP API (the PHP API reference) PHP agent (newrelic.ini) settings (The PHP .ini file reference) PHP per-directory INI settings (configuring New Relic on a per directory basis) Creating multiple accounts (setting up multiple New Relic accounts on the same email)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.47776,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " in the transaction process as possible; otherwise the transaction may already be locked into a prior configuration. Note: newrelic_start_transaction() can also be used. This is not typical usage. For more help Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Additional"
      },
      "id": "603e9159e7b9d27d5e2a07dd"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/analyze-phpunit-test-data-new-relic": [
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.99767,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-06-20T05:11:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the New Relic Browser JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.59665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/aws-elastic-beanstalk-installation-php": [
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.99765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-06-20T05:11:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the New Relic Browser JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.59665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality": [
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.99765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    },
    {
      "sections": [
        "WordPress specific functionality",
        "Configuration",
        "Metrics",
        "Integration with New Relic partners",
        "WordPress plugin for browser monitoring",
        "For more help"
      ],
      "title": "WordPress specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "b5d4790113af57bce82944d22d3f6878de72d717",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you install New Relic for WordPress websites, the PHP agent receives additional metrics. A WordPress page appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a WordPress app). Configuration You can control which WordPress-specific metrics your app sends to New Relic by using the PHP agent's ini setting newrelic.framework.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.framework.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic, including hooks, plugins, and themes. Metrics The PHP agent receives metrics for the following: Hooks: These metrics indicate time spent within each WordPress hook. Time is calculated from the hook dispatch functions apply_filters, apply_filters_ref_array, do_action, and do_action_ref_array. Plugins and themes: These metrics indicate time spent within each WordPress plugin and theme. Time is calculated from the dispatch functions for hooks. Integration with New Relic partners By integrating your WordPress application with APM, you can view performance directly from your WordPress app's Administration page. For example, W3 Total Cache is one of New Relic's Connect partners that specializes in WordPress apps. WordPress plugin for browser monitoring Signing up for a New Relic account and adding browser monitoring to your WordPress site is fast and easy with the browser monitoring plugin for WordPress. The plugin and our browser monitoring do not require the special access required to install our PHP agent. This makes them generally compatible with all WordPress hosting providers. In addition, the WordPress plugin is supported by the authors and the WordPress community. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.45224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by using the <em>PHP</em> <em>agent</em>&#x27;s ini setting newrelic.<em>framework</em>.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.<em>framework</em>.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic"
      },
      "id": "6043d263196a67bd4f960f59"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/guzzle": [
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.99765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-06-20T05:11:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the New Relic Browser JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.59665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality": [
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-06-20T05:11:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the New Relic Browser JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.59665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    },
    {
      "sections": [
        "WordPress specific functionality",
        "Configuration",
        "Metrics",
        "Integration with New Relic partners",
        "WordPress plugin for browser monitoring",
        "For more help"
      ],
      "title": "WordPress specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "b5d4790113af57bce82944d22d3f6878de72d717",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you install New Relic for WordPress websites, the PHP agent receives additional metrics. A WordPress page appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a WordPress app). Configuration You can control which WordPress-specific metrics your app sends to New Relic by using the PHP agent's ini setting newrelic.framework.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.framework.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic, including hooks, plugins, and themes. Metrics The PHP agent receives metrics for the following: Hooks: These metrics indicate time spent within each WordPress hook. Time is calculated from the hook dispatch functions apply_filters, apply_filters_ref_array, do_action, and do_action_ref_array. Plugins and themes: These metrics indicate time spent within each WordPress plugin and theme. Time is calculated from the dispatch functions for hooks. Integration with New Relic partners By integrating your WordPress application with APM, you can view performance directly from your WordPress app's Administration page. For example, W3 Total Cache is one of New Relic's Connect partners that specializes in WordPress apps. WordPress plugin for browser monitoring Signing up for a New Relic account and adding browser monitoring to your WordPress site is fast and easy with the browser monitoring plugin for WordPress. The plugin and our browser monitoring do not require the special access required to install our PHP agent. This makes them generally compatible with all WordPress hosting providers. In addition, the WordPress plugin is supported by the authors and the WordPress community. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.45224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by using the <em>PHP</em> <em>agent</em>&#x27;s ini setting newrelic.<em>framework</em>.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.<em>framework</em>.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic"
      },
      "id": "6043d263196a67bd4f960f59"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/php-frameworks-integrate-support-new-relic": [
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.99765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-06-20T05:11:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the New Relic Browser JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.59665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/predis-library-php": [
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.99765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-06-20T05:11:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the New Relic Browser JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.59665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "WordPress specific functionality",
        "Configuration",
        "Metrics",
        "Integration with New Relic partners",
        "WordPress plugin for browser monitoring",
        "For more help"
      ],
      "title": "WordPress specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "b5d4790113af57bce82944d22d3f6878de72d717",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you install New Relic for WordPress websites, the PHP agent receives additional metrics. A WordPress page appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a WordPress app). Configuration You can control which WordPress-specific metrics your app sends to New Relic by using the PHP agent's ini setting newrelic.framework.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.framework.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic, including hooks, plugins, and themes. Metrics The PHP agent receives metrics for the following: Hooks: These metrics indicate time spent within each WordPress hook. Time is calculated from the hook dispatch functions apply_filters, apply_filters_ref_array, do_action, and do_action_ref_array. Plugins and themes: These metrics indicate time spent within each WordPress plugin and theme. Time is calculated from the dispatch functions for hooks. Integration with New Relic partners By integrating your WordPress application with APM, you can view performance directly from your WordPress app's Administration page. For example, W3 Total Cache is one of New Relic's Connect partners that specializes in WordPress apps. WordPress plugin for browser monitoring Signing up for a New Relic account and adding browser monitoring to your WordPress site is fast and easy with the browser monitoring plugin for WordPress. The plugin and our browser monitoring do not require the special access required to install our PHP agent. This makes them generally compatible with all WordPress hosting providers. In addition, the WordPress plugin is supported by the authors and the WordPress community. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.45224,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by using the <em>PHP</em> <em>agent</em>&#x27;s ini setting newrelic.<em>framework</em>.wordpress.hooks. This is enabled by default in versions 5.3 or higher, and it can be disabled with: newrelic.<em>framework</em>.wordpress.hooks = false Copy Although this setting uses the word .hooks, it controls all WordPress metrics sent to New Relic"
      },
      "id": "6043d263196a67bd4f960f59"
    }
  ],
  "/docs/agents/php-agent/frameworks-libraries/wordpress-specific-functionality": [
    {
      "sections": [
        "Magento-specific functionality",
        "Magento 1",
        "Magento 2",
        "Web APIs",
        "FrontControllerInterface plugins",
        "Escape automatic transaction naming",
        "For more help"
      ],
      "title": "Magento-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "69bf5ad584ab59bb4059d6742405a12a57af23bb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/magento-specific-functionality/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's PHP agent includes support for automatic transaction naming for the Community and Enterprise editions of Magento 1 and 2. This document describes how this works and how you can use the automated names to track issues on your Magento application. Magento 1 Transactions in Magento 1 applications are named based on the module, controller, and action that handle the request. For example, a transaction for the default customer account page will be named customer/account/index, which indicates that the indexAction() method in Mage_Customer_AccountController (the account controller in the customer module) was responsible for the transaction. Magento 2 Normal web transactions in Magento 2 applications are named similarly to Magento 1 transactions: the transaction name encodes the module, controller, and action that handled the request. For example, a request handled by the Magento\\Customer\\Controller\\Account\\Index controller class will also be named customer/account/index. Web APIs Magento 2 also includes built-in support for web APIs. These are web services that are made available through REST and SOAP. As of PHP agent version 7.0, New Relic supports automatically naming transactions that use this functionality. Previous versions of the PHP agent named web API transactions as unknown by default. Magento 2 web APIs Comments SOAP SOAP transactions are named based on the service class and method that handled the request. For example, the transaction name Webapi/Soap/Magento\\Catalog\\Api\\CategoryManagementInterface/getTree indicates that a SOAP request was handled by the getTree() method on the model implementing Magento\\Catalog\\Api\\CategoryManagementInterface. WSDL transactions are also named automatically: Webapi/Soap/WsdlList is used for transactions that return the list of available APIs, whereas Webapi/Soap/Wsdl is used for transactions that get the WSDL for a specific SOAP API. REST From Magento 2.1 onwards, REST transactions are named similarly to SOAP transactions. The only difference is that REST requests are prefixed with Webapi/Rest instead of Webapi/Soap. On Magento 2.0, the PHP agent is unable to automatically name the specific service class and method that handled the transaction. Instead, REST requests currently receive the generic name FrontController/Magento\\Webapi\\Controller\\Rest\\Interceptor. This may be improved in a future PHP agent release. As a workaround, New Relic recommends using newrelic_name_transaction() in the service method if greater resolution is required. FrontControllerInterface plugins It is possible in Magento 2 to register a plugin or interceptor for the Magento\\Framework\\App\\FrontControllerInterface interface to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\Framework\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic's PHP agent version 7.0 or higher. You can also use newrelic_name_transaction() for manual naming if needed. Escape automatic transaction naming If automatic transaction naming is not useful, you can override the PHP agent's automatic transaction naming by using the newrelic_name_transaction() API function. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.99765,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " to replace the default routing engine. For example, this is how the web API features operate. If an interceptor is registered for Magento\\<em>Framework</em>\\App\\FrontControllerInterface, the name of that class will be used as the default transaction name when using New Relic&#x27;s <em>PHP</em> <em>agent</em> version 7.0 or higher"
      },
      "id": "6043d26328ccbc04a22f68b5"
    },
    {
      "sections": [
        "Drupal-specific functionality",
        "Configuration",
        "Metrics",
        "Drupal and Browser instrumentation",
        "Cron tasks",
        "For more help"
      ],
      "title": "Drupal-specific functionality",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "15cc72f072d2bb5dcf06d6178fa30cd33321cec4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/drupal-specific-functionality/",
      "published_at": "2021-06-20T05:11:08Z",
      "updated_at": "2021-04-16T05:41:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent captures special metrics for Drupal websites. When these metrics are collected, a Drupal tab appears in the New Relic user interface: Go to one.newrelic.com > APM > (select a Drupal app). Configuration The collection of Drupal-specific metrics can be controlled by newrelic.framework.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.framework.drupal.modules = 0 Copy Though this setting uses the word \"modules,\" it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The PHP agent collects metrics for the following: Modules: Versions 2.5 or higher. These metrics indicate time spent within each Drupal module. In versions 3.5 or higher, time is calculated from the hook dispatch functions module_invoke and module_invoke_all. In previous versions, time was calculated from functions from a file with the \".module\" extension where the file name and function prefix were a match. Hooks: Versions 3.5 or higher. These metrics indicate time spent within each Drupal hook. Time is calculated from the hook dispatch functions module_invoke and module_invoke_all. Views: Versions 3.5 or higher. These metrics indicate time spent within a view's view::execute method. Drupal and Browser instrumentation In Drupal 7.15, Compress cached pages is turned on by default. If you also select Cache pages for anonymous users, the New Relic Browser JavaScript is not inserted into the served pages for anonymous users. This is because Drupal's pages are compressed directly from the database before they are stored in the cache (with gzip), so New Relic's PHP agent does not have a chance to parse any HTML. In this situation, manual instrumentation provides a better opportunity to capture data for anonymous users. For more information, see Browser monitoring and the PHP agent. Cron tasks Drupal supports periodically executing tasks to perform routine maintenance or similar work on behalf of installed Drupal modules. These tasks can be run without any manual involvement beyond the initial configuration. Commonly, these are referred to as cron tasks. Starting in version 4.3, the New Relic PHP agent detects the execution of these tasks and automatically marks them as background transactions regardless of how they were started. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.59665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Drupal <em>and</em> Browser instrumentation",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": " by newrelic.<em>framework</em>.drupal.modules. It is enabled by default (in versions 3.0 or higher), and can be disabled with: newrelic.<em>framework</em>.drupal.modules = 0 Copy Though this setting uses the word &quot;modules,&quot; it controls the collection of all Drupal metrics: modules, views, and hooks. Metrics The <em>PHP</em> <em>agent</em> collects metrics"
      },
      "id": "6043cdff64441f2c28378ec1"
    },
    {
      "sections": [
        "Predis library in PHP",
        "For more help"
      ],
      "title": "Predis library in PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Frameworks and libraries"
      ],
      "external_id": "6d2bd1fb8cc8f9390af773a679d1f722a2349dd4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/frameworks-libraries/predis-library-php/",
      "published_at": "2021-06-20T05:12:03Z",
      "updated_at": "2021-04-16T09:25:32Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic added support for the Predis library in PHP agent release 4.22. The agent instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands. The PHP agent does not support calls to the executeRaw or transaction methods, PubSub, monitor, or similar. These will not be instrumented. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.99016,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Predis <em>library</em> in <em>PHP</em>",
        "sections": "Predis <em>library</em> in <em>PHP</em>",
        "tags": "<em>Frameworks</em> <em>and</em> <em>libraries</em>",
        "body": "New Relic added support for the Predis library in <em>PHP</em> <em>agent</em> release 4.22. The <em>agent</em> instruments standard calls to a Predis\\Client object or to a pipeline. Any commands sent via a pipeline will be grouped and treated as a single command metric named pipeline rather than the individual commands"
      },
      "id": "6043d2f2196a679c3a960f76"
    }
  ],
  "/docs/agents/php-agent/getting-started/apm-agent-security-php": [
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-06-20T07:54:57Z",
      "updated_at": "2021-04-28T01:18:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 5.5 or higher (except 5.6) Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 5.0 (\"lenny\") or higher Ubuntu 9.10 (\"Karmic Koala\") or higher Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 1.2, 1.3, and 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Silex 1.x and 2.x Joomla 1.5, 1.6, 2.x, and 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 1.x, 2.x, 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.37616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Tip",
        "Monitor app performance",
        "Architecture",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "521da8f62e16ad0899ae6db9916e19bb8aa1ab3d",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-06-20T06:07:37Z",
      "updated_at": "2021-04-16T05:42:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.12225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts"
      },
      "id": "603e8f6564441f32f24e8843"
    },
    {
      "sections": [
        "New Relic daemon processes",
        "PHP daemon initial or idle states",
        "Watchdog and worker processes",
        "Important",
        "Stop the daemon",
        "For more help"
      ],
      "title": "New Relic daemon processes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "69548b21d1a3ff86bbb694e783788e58e38e866d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/new-relic-daemon-processes/",
      "published_at": "2021-06-20T08:59:02Z",
      "updated_at": "2021-04-16T05:59:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent consists of two parts: The PHP extension module, newrelic.so The agent daemon, newrelic-daemon The daemon acts as a proxy between the PHP agent and the New Relic collector to reduce network traffic and to improve response time for instrumented applications. If the daemon is not running, no data is reported to New Relic. PHP daemon initial or idle states When the daemon is in an initial or idle state, two transactions must occur before it will start reporting. In an initial state: With the first transaction, the daemon adds your newly-reporting application to its own application information table. Once the application is added, the daemon reports the second transaction to New Relic. In an idle state: The first transaction wakes up the daemon and re-establishes the connection to New Relic. The second transaction reports data to New Relic. Watchdog and worker processes If you do a process listing, you will see that there are always two daemon processes running: $ ps -ef | grep newrelic-daemon newrelic 1368 1 0 00:28 ? 00:00:00 /usr/bin/newrelic-daemon ... newrelic 1370 1368 0 00:28 ? 00:00:00 /usr/bin/newrelic-daemon ... Copy Having two processes running is normal behavior. The first column is the process owner, the second is the process ID (PID), and the third is the parent process ID (PPID). Daemon processes Comments Watchdog (first process) The first process, the one owned by PID 1, is the \"watchdog\" process. It watches the second process, which is the \"worker\" process. Worker (second process) The worker process does the following: Accepts connections from the PHP agent Gathers metrics Communicates with the New Relic collector Terminating processes When the daemon is being gracefully terminated (usually by running /etc/init.d/newrelic-daemon stop), it will send a termination signal to the watchdog process. This will cleanly terminate the worker process and give it a chance to send any pending data to New Relic. Important If you need to manually terminate the daemon, always terminate the watchdog, not the worker. If the worker process encounters a fatal error and terminates unexpectedly, the watchdog process will immediately re-spawn a new worker process. This helps to ensure that the daemon experiences absolute minimum downtime. Stop the daemon The following methods can be used to kill the daemon: Recommended process: Use /etc/init.d/newrelic-daemon stop. This is the preferred method for interacting with the daemon. Kill the process directly with its process ID: kill 1368 Copy Use the watchdog PID file: kill `cat /var/run/newrelic-daemon.pid` Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.51995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>PHP</em> daemon initial or idle states",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to <em>get</em> help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "603e902d64441fb6084e8862"
    }
  ],
  "/docs/agents/php-agent/getting-started/introduction-new-relic-php": [
    {
      "sections": [
        "APM agent security: PHP",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "For more help"
      ],
      "title": "APM agent security: PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "596768c4a7e0d13fe9949726b49ab09167759582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/apm-agent-security-php/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-06-02T15:08:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic PHP agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: PHP agent configuration file Attribute settings PHP agent API Setting Effects on data security newrelic.daemon.auditlog string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the New Relic collector. You can then evaluate the information that the agent sends to the New Relic collector to see if it includes sensitive information. newrelic.high_security boolean Default: false To enable high security mode, set this to true and enable high security in New Relic. This restricts the information you can send to New Relic. newrelic.daemon.proxy string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. newrelic.attributes.enabled boolean Default: true By default, you are sending attributes to New Relic. If you do not want to send attributes to New Relic, set this to false. newrelic.attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using newrelic.attributes.exclude. This restricts the information sent to New Relic. Consider if you want to exclude these potentially sensitive attributes using newrelic.attributes.exclude or if you need the information sent to New Relic: request.headers.*: Removes all request headers. response.headers.*: Removes all response headers. newrelic.custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via newrelic_record_custom_event(). If you enable high security mode, this is automatically set to false. newrelic.transaction_tracer.record_sql string Default: obfuscated By default, newrelic.transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.36282,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>PHP</em>",
        "sections": "APM <em>agent</em> security: <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to <em>get</em> help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043da63196a67cb6f960f6a"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-06-20T07:54:57Z",
      "updated_at": "2021-04-28T01:18:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 5.5 or higher (except 5.6) Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 5.0 (\"lenny\") or higher Ubuntu 9.10 (\"Karmic Koala\") or higher Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 1.2, 1.3, and 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Silex 1.x and 2.x Joomla 1.5, 1.6, 2.x, and 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 1.x, 2.x, 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.37616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "New Relic daemon processes",
        "PHP daemon initial or idle states",
        "Watchdog and worker processes",
        "Important",
        "Stop the daemon",
        "For more help"
      ],
      "title": "New Relic daemon processes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "69548b21d1a3ff86bbb694e783788e58e38e866d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/new-relic-daemon-processes/",
      "published_at": "2021-06-20T08:59:02Z",
      "updated_at": "2021-04-16T05:59:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent consists of two parts: The PHP extension module, newrelic.so The agent daemon, newrelic-daemon The daemon acts as a proxy between the PHP agent and the New Relic collector to reduce network traffic and to improve response time for instrumented applications. If the daemon is not running, no data is reported to New Relic. PHP daemon initial or idle states When the daemon is in an initial or idle state, two transactions must occur before it will start reporting. In an initial state: With the first transaction, the daemon adds your newly-reporting application to its own application information table. Once the application is added, the daemon reports the second transaction to New Relic. In an idle state: The first transaction wakes up the daemon and re-establishes the connection to New Relic. The second transaction reports data to New Relic. Watchdog and worker processes If you do a process listing, you will see that there are always two daemon processes running: $ ps -ef | grep newrelic-daemon newrelic 1368 1 0 00:28 ? 00:00:00 /usr/bin/newrelic-daemon ... newrelic 1370 1368 0 00:28 ? 00:00:00 /usr/bin/newrelic-daemon ... Copy Having two processes running is normal behavior. The first column is the process owner, the second is the process ID (PID), and the third is the parent process ID (PPID). Daemon processes Comments Watchdog (first process) The first process, the one owned by PID 1, is the \"watchdog\" process. It watches the second process, which is the \"worker\" process. Worker (second process) The worker process does the following: Accepts connections from the PHP agent Gathers metrics Communicates with the New Relic collector Terminating processes When the daemon is being gracefully terminated (usually by running /etc/init.d/newrelic-daemon stop), it will send a termination signal to the watchdog process. This will cleanly terminate the worker process and give it a chance to send any pending data to New Relic. Important If you need to manually terminate the daemon, always terminate the watchdog, not the worker. If the worker process encounters a fatal error and terminates unexpectedly, the watchdog process will immediately re-spawn a new worker process. This helps to ensure that the daemon experiences absolute minimum downtime. Stop the daemon The following methods can be used to kill the daemon: Recommended process: Use /etc/init.d/newrelic-daemon stop. This is the preferred method for interacting with the daemon. Kill the process directly with its process ID: kill 1368 Copy Use the watchdog PID file: kill `cat /var/run/newrelic-daemon.pid` Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.51995,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>PHP</em> daemon initial or idle states",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to <em>get</em> help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "603e902d64441fb6084e8862"
    }
  ],
  "/docs/agents/php-agent/getting-started/new-relic-daemon-processes": [
    {
      "sections": [
        "APM agent security: PHP",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "For more help"
      ],
      "title": "APM agent security: PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "596768c4a7e0d13fe9949726b49ab09167759582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/apm-agent-security-php/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-06-02T15:08:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic PHP agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: PHP agent configuration file Attribute settings PHP agent API Setting Effects on data security newrelic.daemon.auditlog string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the New Relic collector. You can then evaluate the information that the agent sends to the New Relic collector to see if it includes sensitive information. newrelic.high_security boolean Default: false To enable high security mode, set this to true and enable high security in New Relic. This restricts the information you can send to New Relic. newrelic.daemon.proxy string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. newrelic.attributes.enabled boolean Default: true By default, you are sending attributes to New Relic. If you do not want to send attributes to New Relic, set this to false. newrelic.attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using newrelic.attributes.exclude. This restricts the information sent to New Relic. Consider if you want to exclude these potentially sensitive attributes using newrelic.attributes.exclude or if you need the information sent to New Relic: request.headers.*: Removes all request headers. response.headers.*: Removes all response headers. newrelic.custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via newrelic_record_custom_event(). If you enable high security mode, this is automatically set to false. newrelic.transaction_tracer.record_sql string Default: obfuscated By default, newrelic.transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.362816,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>PHP</em>",
        "sections": "APM <em>agent</em> security: <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to <em>get</em> help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043da63196a67cb6f960f6a"
    },
    {
      "sections": [
        "PHP agent compatibility and requirements",
        "PHP releases",
        "Important",
        "Permissions",
        "License key",
        "Processor type",
        "Operating systems",
        "Web servers",
        "Frameworks",
        "Databases and libraries",
        "Other APM software",
        "Instance details",
        "Message queuing",
        "Security requirements",
        "Connect the agent to other New Relic features",
        "For more help"
      ],
      "title": "PHP agent compatibility and requirements",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "7dcc0dfcba63adaf1c406559a68dac52fe817f7f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements/",
      "published_at": "2021-06-20T07:54:57Z",
      "updated_at": "2021-04-28T01:18:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic for PHP, make sure your system meets the applicable requirements. PHP releases New Relic supports PHP versions 5.5, 5.6, 7.0, 7.1, 7.2, 7.3, 7.4, and 8.0. Important Compatibility note: When PHP 8.0 detects the New Relic agent, it disables Just-In-Time compilation. We recommend using a supported release of PHP, especially 7.3, 7.4, and 8.0. PHP 5.1 support was deprecated in release 4.0 of the agent, and removed in release 4.5. PHP 5.2 support was deprecated in release 6.8 of the agent, and removed in release 7.0. PHP 5.3 and PHP 5.4 support was deprecated in release 9.15 of the agent, and removed in release 9.17. Permissions Installation: Root access is required for most installations. Running: Root access is not required. License key For any installation, you will need your New Relic license key. This is a 40-character hexadecimal string that New Relic provides when you sign up for your account. For more information, see the PHP install script and license key settings in the PHP INI file. Processor type Intel (and compatible) platforms only Support for SSE2 instructions is required Operating systems Important The Windows operating system is not supported. Operating system Supported by New Relic's PHP agent Linux (x86 and x86_64) AWS Linux 2 Red Hat Enterprise Linux (RHEL) 5 or higher CentOS 5.5 or higher (except 5.6) Important As of January 2021, we will discontinue support for CentOS 5. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. Debian 5.0 (\"lenny\") or higher Ubuntu 9.10 (\"Karmic Koala\") or higher Any other Linux distribution with: Kernel version 2.6.13 or higher (2.6.26 or higher highly recommended) glibc 2.5 or higher with NPTL support; or musl libc version 1.1 or higher macOS (x86_64 only) Important As of January 2021, we will discontinue support for macOS. For more information, see our PHP agent release notes v9.15.0 and our Explorers Hub post. macOS 10.6 or higher (See macOS troubleshooting notes.) Since modern versions of macOS can't run 32-bit applications, New Relic removed support for 32-bit macOS with PHP agent release 4.6. FreeBSD (x64) The latest agent supports the latest Production Release. SmartOS and Solaris (x64) (DEPRECATED) Last supported PHP Agent for Solaris and SmartOS is 8.1 SmartOS: All versions OpenSolaris 10: snv_134b or higher Must use i86pc architecture. SPARC architectures are not supported. Web servers Apache 2.2 or 2.4 via mod_php Any web server that supports FastCGI using PHP-FPM Frameworks Supported PHP frameworks include: Frameworks CakePHP 1.2, 1.3, and 2.x Magento 1.x and 2.x, CE and EE CodeIgniter 2.x MediaWiki Drupal 6.x, 7.x, 8.x, and 9.x Silex 1.x and 2.x Joomla 1.5, 1.6, 2.x, and 3.x Slim 2.x, 3.x, and 4.x Kohana 3.2 and 3.3 Symfony 1.x, 2.x, 3.x, 4.x, 5.x Laminas 3.x Wordpress Laravel 4.x, 5.x, 6.x, and 7.x Yii 1.x Laravel Lumen 6.x, 7.x, and 8.x Zend Framework 1.x, 2.x, and 3.x Important Joomla 3.x is not supported on PHP 8. Important As of PHP agent version 9.17, the following frameworks or framework versions are no longer supported and may be removed from future agent builds: Cake PHP 1.x Joomla 1.5, 1.6, and 2.x Kohana Silex 1.x and 2.x Symfony 1.x and 2.x The PHP agent's list of frameworks continues to grow. Even if the framework you are using is not listed here, the PHP agent may be able to provide you with useful information about your app. For more information, see PHP frameworks: Integrating support for New Relic. If you want to suggest support for other popular PHP frameworks, visit us at the Explorers Hub and create a Feature Idea! Databases and libraries Supported databases and libraries: Databases and Libraries Firebird Oracle Guzzle PHPUnit Informix PDO Memcached Postgres MongoDB Predis Microsoft SQL Server Redis MySQL SQLite ODBC Sybase Other APM software If your application uses other application performance monitoring (APM) software besides our agent, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors when using other monitoring software. Instance details New Relic collects instance details for a variety of databases and database drivers. The ability to view specific instances and the types of database information in APM depends on your New Relic agent version. New Relic's PHP agent version 6.8 or higher supports instance details for the following: Database Extension Minimum agent version MongoDB mongodb 7.1 MySQL mysql 6.8 MySQL mysqli 6.8 MySQL pdo_mysql 6.8 PostgreSQL pgsql 6.9 PostgreSQL pdo_pgsql 6.9 Redis predis 7.1 Redis redis 7.1 To disable collection of host information, use either of these options: Set newrelic.datastore_tracer.instance_reporting.enabled to false in the newrelic.ini. Omit the database name with newrelic.datastore_tracer.database_name_reporting.enabled = false. To request instance-level information from datastores currently not listed for your New Relic agent, get support at support.newrelic.com. Message queuing HTTP Laravel Queuing, available as an experimental feature in the PHP Agent 6.6.0.169 release, enabled by default since PHP Agent 8.0.0.204. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Connect the agent to other New Relic features The PHP agent integrates with other New Relic features to give you end-to-end visibility: Product Integration Browser monitoring The PHP agent automatically injects the browser agent's JS code when you enable auto-instrumentation. After enabling browser injection, you can view data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the PHP agent. Infrastructure monitoring When you install the infrastructure and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure UI. For more information, see APM data in infrastructure monitoring. New Relic Dashboards The PHP agent sends default events and attributes for NRQL queries. You can also record custom events for advanced analysis. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.37616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "sections": "<em>PHP</em> <em>agent</em> compatibility and requirements",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the <em>PHP</em> <em>agent</em>. Infrastructure monitoring When you install the infrastructure and APM <em>agents</em> on the same host, they automatically detect one another. You can then view"
      },
      "id": "60441ccae7b9d21edf5799c4"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Tip",
        "Monitor app performance",
        "Architecture",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "521da8f62e16ad0899ae6db9916e19bb8aa1ab3d",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-06-20T06:07:37Z",
      "updated_at": "2021-04-16T05:42:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.122246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts"
      },
      "id": "603e8f6564441f32f24e8843"
    }
  ],
  "/docs/agents/php-agent/getting-started/php-agent-compatibility-requirements": [
    {
      "sections": [
        "APM agent security: PHP",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "For more help"
      ],
      "title": "APM agent security: PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "596768c4a7e0d13fe9949726b49ab09167759582",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/apm-agent-security-php/",
      "published_at": "2021-06-20T05:13:06Z",
      "updated_at": "2021-06-02T15:08:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent default security settings automatically provide security for your APM data to ensure data privacy and to limit the kind of information New Relic receives. You may have business reasons to change these settings. If you want to restrict the information that New Relic receives, you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the New Relic PHP agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. HTTPS: The agent communicates with New Relic using HTTPS. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: PHP agent configuration file Attribute settings PHP agent API Setting Effects on data security newrelic.daemon.auditlog string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the New Relic collector. You can then evaluate the information that the agent sends to the New Relic collector to see if it includes sensitive information. newrelic.high_security boolean Default: false To enable high security mode, set this to true and enable high security in New Relic. This restricts the information you can send to New Relic. newrelic.daemon.proxy string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. newrelic.attributes.enabled boolean Default: true By default, you are sending attributes to New Relic. If you do not want to send attributes to New Relic, set this to false. newrelic.attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send to New Relic in transaction traces, identify them using newrelic.attributes.exclude. This restricts the information sent to New Relic. Consider if you want to exclude these potentially sensitive attributes using newrelic.attributes.exclude or if you need the information sent to New Relic: request.headers.*: Removes all request headers. response.headers.*: Removes all response headers. newrelic.custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via newrelic_record_custom_event(). If you enable high security mode, this is automatically set to false. newrelic.transaction_tracer.record_sql string Default: obfuscated By default, newrelic.transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.362816,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>PHP</em>",
        "sections": "APM <em>agent</em> security: <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to <em>get</em> help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043da63196a67cb6f960f6a"
    },
    {
      "sections": [
        "Introduction to New Relic for PHP",
        "Tip",
        "Monitor app performance",
        "Architecture",
        "Install the agent",
        "Configure the agent",
        "Extend agent instrumentation",
        "Troubleshoot your installation",
        "For more help"
      ],
      "title": "Introduction to New Relic for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "521da8f62e16ad0899ae6db9916e19bb8aa1ab3d",
      "image": "https://docs.newrelic.com/static/7e5643352388bedfe89a8f53bcde978d/c1b63/PHP_Agent_Diagram_5.png",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/introduction-new-relic-php/",
      "published_at": "2021-06-20T06:07:37Z",
      "updated_at": "2021-04-16T05:42:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our PHP agent monitors your application to help you identify and solve performance issues. You can also extend the agent's performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance one.newrelic.com > APM > (select an app) > Summary: After installing the PHP agent, view a summary of your app's performance. View the big picture of your app Monitor your app's Apdex (user satisfaction) Get a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts for the metric timeslice data most important to you, including any custom metrics you are sending to New Relic. Alert your team when errors or problems occur before they affect your users Track performance after a deploy Drill down into performance details Examine code-level transaction traces Examine database query traces Examine error traces Analyze business data Use the PHP agent to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes or add your own Query your data using NRQL Send your own event data Create and share customizable, interactive dashboards Architecture The PHP agent has two binaries that work together to forward data to New Relic: The agent handles automatic and API instrumentation of your PHP code. The daemon acts as a proxy between the agent and the New Relic platform. You can connect up to 500 applications/agents to one daemon. The daemon imposes sampling when the harvest cycle limits are reached, so consider this when deciding how many applications/agents to connect to a single daemon. Tip The number of applications/agents per daemon may be lower when running in separate Docker containers, depending on the capacity of the connection between containers. The flow of data from your PHP applications to New Relic. The workflow between your application and New Relic must occur in this order: The agent establishes a socket connection with the daemon by sending the first payload of instrumentation data. The daemon establishes an HTTPS link with the New Relic platform. The daemon must be invoked before your instrumented application is invoked. This is called agent mode and is the default. To avoid losing reported data, make sure your instrumented application doesn't send transactions before both connections are established. Install the agent Before you install the PHP agent, ensure your system meets the system requirements. The PHP agent supports many of the most common PHP frameworks, databases, and libraries. You can also use the agent in a Google App Engine (GAE) flexible environment. Tip If you are installing the agent on a shared hosting service, ensure you have root permissions to install the agent or contact your hosting provider for technical assistance. To install the agent, sign up for New Relic first. Once logged in, use our launcher, or see the instructions for specific installations. Add PHP data For standard installations, see: PHP agent installation overview (the basic installation steps for the most common setups). Installing on RedHat or CentOS Installing on Ubuntu or Debian Installing with tar archive (generic method to use on any supported systems such as Linux variants, OpenSolaris, SmartOS, FreeBSD, macOS, etc) The newrelic-install script (how to use the interactive script that automates some installation tasks) For other types of PHP installations and advanced installation topics, see: PHP agent installation: Non-standard PHP Starting the PHP daemon (a standard New Relic installation starts the daemon automatically, but you can also start the daemon manually) Silent mode for the install script Google App Engine (GAE) flex environment installation for New Relic's PHP agent Configure the agent The agent includes a variety of configuration options to further customize and fine-tune your installation. Tip The most important part of agent configuration is to give your app a descriptive name. New Relic uses this app name to aggregate metrics when you have multiple apps or hosts. After changing any agent configuration options, restart your web server. Extend agent instrumentation After installing the agent, go further and extend the agent's instrumentation: Page load timing: Integrate the PHP agent with browser monitoring to gain visibility into end-user activity. Custom instrumentation: Instrument transactions not captured as part of our framework instrumentation. Agent API: Use the agent API to customize the agent's behavior. For example, you can collect custom metrics, flag an error, or ignore a particular transaction entirely. Agent attributes: Customize the attributes attached to transactions. Customizing attributes allows you to avoid sending sensitive attributes, or to collect additional attributes for deeper visibility into your transactions. Troubleshoot your installation If you encounter issues with the PHP agent, see our full list of troubleshooting documentation. Common installation issues include: No data appears (PHP) Determining permissions requirements INI settings not taking effect immediately Why and when to restart your web server (PHP) For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.122246,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>PHP</em>",
        "sections": "Introduction to New Relic for <em>PHP</em>",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": " the <em>PHP</em> <em>agent</em>, view a summary of your app&#x27;s performance. View the big picture of your app Monitor your app&#x27;s Apdex (user satisfaction) <em>Get</em> a high-level summary of your app Create architectural maps of your app Find errors and problems quickly Track key transactions Search and create customizable charts"
      },
      "id": "603e8f6564441f32f24e8843"
    },
    {
      "sections": [
        "New Relic daemon processes",
        "PHP daemon initial or idle states",
        "Watchdog and worker processes",
        "Important",
        "Stop the daemon",
        "For more help"
      ],
      "title": "New Relic daemon processes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Getting started"
      ],
      "external_id": "69548b21d1a3ff86bbb694e783788e58e38e866d",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/getting-started/new-relic-daemon-processes/",
      "published_at": "2021-06-20T08:59:02Z",
      "updated_at": "2021-04-16T05:59:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The PHP agent consists of two parts: The PHP extension module, newrelic.so The agent daemon, newrelic-daemon The daemon acts as a proxy between the PHP agent and the New Relic collector to reduce network traffic and to improve response time for instrumented applications. If the daemon is not running, no data is reported to New Relic. PHP daemon initial or idle states When the daemon is in an initial or idle state, two transactions must occur before it will start reporting. In an initial state: With the first transaction, the daemon adds your newly-reporting application to its own application information table. Once the application is added, the daemon reports the second transaction to New Relic. In an idle state: The first transaction wakes up the daemon and re-establishes the connection to New Relic. The second transaction reports data to New Relic. Watchdog and worker processes If you do a process listing, you will see that there are always two daemon processes running: $ ps -ef | grep newrelic-daemon newrelic 1368 1 0 00:28 ? 00:00:00 /usr/bin/newrelic-daemon ... newrelic 1370 1368 0 00:28 ? 00:00:00 /usr/bin/newrelic-daemon ... Copy Having two processes running is normal behavior. The first column is the process owner, the second is the process ID (PID), and the third is the parent process ID (PPID). Daemon processes Comments Watchdog (first process) The first process, the one owned by PID 1, is the \"watchdog\" process. It watches the second process, which is the \"worker\" process. Worker (second process) The worker process does the following: Accepts connections from the PHP agent Gathers metrics Communicates with the New Relic collector Terminating processes When the daemon is being gracefully terminated (usually by running /etc/init.d/newrelic-daemon stop), it will send a termination signal to the watchdog process. This will cleanly terminate the worker process and give it a chance to send any pending data to New Relic. Important If you need to manually terminate the daemon, always terminate the watchdog, not the worker. If the worker process encounters a fatal error and terminates unexpectedly, the watchdog process will immediately re-spawn a new worker process. This helps to ensure that the daemon experiences absolute minimum downtime. Stop the daemon The following methods can be used to kill the daemon: Recommended process: Use /etc/init.d/newrelic-daemon stop. This is the preferred method for interacting with the daemon. Kill the process directly with its process ID: kill 1368 Copy Use the watchdog PID file: kill `cat /var/run/newrelic-daemon.pid` Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.51994,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>PHP</em> daemon initial or idle states",
        "tags": "<em>Getting</em> <em>started</em>",
        "body": ": Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to <em>get</em> help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "603e902d64441fb6084e8862"
    }
  ],
  "/docs/agents/php-agent/index": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.91794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 81.15438,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "Enable or disable attributes",
        "Properties",
        "newrelic.attributes.enabled",
        "newrelic.browser_monitoring.attributes.enabled",
        "newrelic.error_collector.attributes.enabled",
        "newrelic.transaction_events.attributes.enabled",
        "newrelic.transaction_tracer.attributes.enabled",
        "newrelic.span_events.attributes.enabled",
        "newrelic.attributes.include",
        "newrelic.attributes.exclude",
        "newrelic.browser_monitoring.attributes.include",
        "newrelic.browser_monitoring.attributes.exclude",
        "newrelic.error_collector.attributes.include",
        "newrelic.error_collector.attributes.exclude",
        "newrelic.transaction_events.attributes.include",
        "newrelic.transaction_events.attributes.exclude",
        "newrelic.transaction_tracer.attributes.include",
        "newrelic.transaction_tracer.attributes.exclude",
        "newrelic.span_events.attributes.include",
        "newrelic.span_events.attributes.exclude",
        "Attribute rules",
        "Root level takes precedence for enabled.",
        "Destination enabled takes precedence over include and exclude.",
        "Attribute is included if the destination is enabled.",
        "Exclude always supersedes include.",
        "Keys are case sensitive.",
        "Use a star (\\*) for wildcards.",
        "Most specific setting for a key takes priority.",
        "Include or exclude affects the specific destination.",
        "Deprecated properties",
        "For more help"
      ],
      "title": "Enable or disable attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Attributes"
      ],
      "external_id": "6e9bf6c2e32a6add76412e6381a7bd4c99a0bc1c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/attributes/enable-or-disable-attributes/",
      "published_at": "2021-06-20T05:57:55Z",
      "updated_at": "2021-06-02T20:32:03Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the PHP agent properties that have been deprecated with the release of New Relic agent attributes. Properties Use the following destination properties to open or close the destination to any attribute collection: newrelic.attributes.enabled Type Boolean Default True Turns on or turns off all attributes in all destinations. newrelic.browser_monitoring.attributes.enabled Type: Boolean Default: False Turns on or turns off all attributes for browser monitoring. This is the data that gets attached to page view events. If newrelic.attributes.enabled is false, no attributes will be sent to browser monitoring regardless of how this property is set. newrelic.error_collector.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for traced errors. If newrelic.attributes.enabled is false, no attributes will be sent to traced errors regardless of how this property is set. newrelic.transaction_events.attributes.enabled Type: Boolean Default: True Turns on or turns off all attributes for transaction events. If newrelic.attributes.enabled is false, no attributes will be sent to transaction events regardless of how this property is set. newrelic.transaction_tracer.attributes.enabled Type Boolean Default True Turns on or off all attributes for transaction traces. If newrelic.attributes.enabled is false, no attributes will be sent to transaction traces regardless of how this property is set. newrelic.span_events.attributes.enabled Type Boolean Default True Turns on or off all attributes for Span data. If newrelic.attributes.enabled is false, no attributes will be sent to spans regardless of how this property is set. Use the following attribute/destination specific .include or .exclude properties to add or remove specific attributes in specific destinations: newrelic.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled, all attribute keys in this list will be sent to New Relic. newrelic.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic. newrelic.browser_monitoring.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for browser_monitoring, all attribute keys in this list will be sent to New Relic Browser in page views. newrelic.browser_monitoring.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys found in this list will not be sent to New Relic in page views. newrelic.error_collector.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for traced errors, all attribute keys in this list will be sent to New Relic in traced errors. newrelic.error_collector.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in traced errors. newrelic.transaction_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction events, all attribute keys in this list will be sent to New Relic in transaction events. newrelic.transaction_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction events. newrelic.transaction_tracer.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for transaction traces, all attribute keys in this list will be sent to New Relic in transaction traces. newrelic.transaction_tracer.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in transaction traces. newrelic.span_events.attributes.include Type: Comma-delimited list of strings Default: Empty If attributes are enabled for span events, all attribute keys in this list will be sent to New Relic in span events. newrelic.span_events.attributes.exclude Type: Comma-delimited list of strings Default: Empty All attribute keys in this list will not be sent to New Relic in span events. Attribute rules New Relic follows these rules when determining which attributes to include or exclude for a destination. Root level takes precedence for enabled. The newrelic.attributes.enabled field trumps all other settings. When false, no attributes will be reported to New Relic. Example configuration: newrelic.attributes.enabled = false newrelic.attributes.include = foo,bar newrelic.transaction_tracer.attributes.enabled = true Copy Example output: Keys passed in: password, foo, bar, bat Keys included for all destinations: Keys excluded for all destinations: password, foo, bar, bat Copy Destination enabled takes precedence over include and exclude. newrelic.{destination}.attributes.enabled flags take precedence over include and exclude keys. Example configuration: newrelic.transaction_tracer.attributes.enabled = false newrelic.attributes.include = one,two newrelic.transaction_tracer.attributes.include = three,four Copy Example output: Keys passed in: one, two, three, four Keys included for transaction traces: Keys excluded for transaction traces: one, two, three, four Copy Attribute is included if the destination is enabled. If a destination is enabled, all user attributes are sent to that destination by default. All user attributes default to true. However, by default, request attributes and message parameters are disabled for all destinations. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = myAttKey Copy Example output: Keys passed in: foo, bar, myAttKey Keys included: foo, bar Keys excluded: myAttKey Copy Exclude always supersedes include. If the same key is listed in the include and exclude lists, then attributes with the specified key will be excluded. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = foo,myCustomAtt newrelic.attributes.exclude = password,myCustomAtt Copy Example output: Keys passed in: foo, myCustomAtt, password Keys included: foo Keys excluded: password, myCustomAtt Copy Keys are case sensitive. Keys are case sensitive. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.exclude = password,PaSsWoRd Copy Example output: Keys passed in: password, Password, PASSWORD, PaSsWoRd, PassWORD Keys included: Password, PASSWORD, PassWORD Keys excluded: password, PaSsWoRd Copy Use a star (\\*) for wildcards. You can use an asterisk or star (*) at the end of a key as a wildcard. This will match a set of attributes with the same prefix. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = custom* newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: custom, custom.key1, custom.key2, request.parameters., request.parameters.foo, request.parameters.bar Keys included: custom, custom.key1, custom.key2 Keys excluded: request.parameters., request.parameters.foo, request.parameters.bar Copy Most specific setting for a key takes priority. If multiple include or exclude attributes affect the same key, the most specific setting will have priority. Example configuration: newrelic.attributes.enabled = true newrelic.attributes.include = request.parameters.foo newrelic.attributes.exclude = request.parameters.* Copy Example output: Keys passed in: request.parameters., request.parameters.foo, request.parameters.bar Keys included: request.parameters.foo Keys excluded: request.parameters., request.parameters.bar Copy Include or exclude affects the specific destination. If the attribute include or exclude is specified on a destination, then it only impacts that destination. Example configuration: newrelic.attributes.include = foo newrelic.transaction_events.attributes.exclude = foo Copy Example output: Keys passed in: foo Keys included for transaction events: Keys included for other destinations: foo Keys excluded for transaction events: foo Copy Deprecated properties The following properties have been deprecated. Switch to the new attributes configuration for these properties when upgrading your PHP agent. Deprecated property New property newrelic.capture_params newrelic.attributes.include = request.parameters.* By default, request parameters are not sent to New Relic. Add request.parameters.* to the newrelic.attributes.include list to turn on all request parameters. The newrelic.capture_params property has been deprecated. newrelic.ignored_params newrelic.attributes.exclude = request.parameters.{name} Add each request parameter key to the newrelic.attributes.exclude list, delimited by commas. Be sure to prepend the key with request.parameters. The newrelic.ignored_params property has been deprecated. newrelic.{destination}.capture_attributes newrelic.{destination}.attributes.enabled The old newrelic.{destination}.capture_attributes flag would turn off user attribute collection. This has been deprecated. Use newrelic.{destination}.attributes.enabled instead. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 75.19954,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Learn about properties to enable or disable attributes, and the rules that New Relic uses when determining which attributes to include or exclude for a destination. This also includes a summary of the <em>PHP</em> <em>agent</em> properties that have been deprecated with the release of New Relic <em>agent</em> attributes"
      },
      "id": "603e9d6de7b9d22a5f2f3445"
    }
  ],
  "/docs/agents/php-agent/installation/install-php-agent-shared-hosting-service": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.89783,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.19601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.120026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-aws-linux-redhat-centos": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.89783,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.19601,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.120026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-overview": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.89781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.195984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.12001,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-tar-file": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.89781,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.195984,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.12001,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/installation/php-agent-installation-ubuntu-debian": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.89779,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.19597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.11999,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/installation/update-php-agent": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.89779,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> <em>installation</em> fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ". Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause <em>PHP</em> <em>agent</em> <em>installation</em> requires the daemon program to be installed in &#x2F;usr&#x2F;bin and the extension module in &#x2F;usr"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "PHP agent installation: Non-standard PHP (advanced)",
        "Important",
        "Requirements",
        "Use the command line newrelic-install script (recommended)",
        "Add your PHP location to your PATH",
        "Set the NR_INSTALL_PATH",
        "Set the NR_INSTALL_PHPLIST",
        "Install New Relic manually",
        "Get installation parameters from phpinfo()",
        "Manual configuration",
        "Verify installation",
        "For more help"
      ],
      "title": "PHP agent installation: Non-standard PHP (advanced)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "160a8cd76de0ea68a6a8ded1ab71b61c75ddf8a1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/php-agent-installation-non-standard-php-advanced/",
      "published_at": "2021-06-20T04:22:46Z",
      "updated_at": "2021-06-08T14:59:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are using a non-standard PHP installation, follow this procedure to properly install New Relic. This is common in instances where the default installer does not find your PHP installation (for example, if you have self-compiled PHP or a self-contained PHP stack). Important As part of the installation process, change the default application name to a meaningful name. Requirements Use the command line version of PHP (php -i) or look at the output of phpinfo() to determine: The PHP extension version (20090626, 20100525, 20121212, 20131226, 20151012, or 20160303) The extension or module installation directory Whether or not your version of PHP has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New Relic at the right directory by using any of these options: Add your PHP location to your PATH The install script needs to be able to find your command line php or php-config. You can add the directory that contains those programs to your current PATH. Set the NR_INSTALL_PATH This can be a colon-separated list of directories for PHP installations in addition to those in your PATH. Make sure these directories contain php or php-config. For example: NR_INSTALL_PATH=/u/php/5.3/bin; export NR_INSTALL_PATH newrelic-install Copy Set the NR_INSTALL_PHPLIST Optional: Use a colon-separated list to set the exact locations (directories) where to search. This option will ignore PATH and NR_INSTALL_PATH. For example: NR_INSTALL_PHPLIST=/usr/local/bin:u/php/5.3/bin; export NR_INSTALL_PHPLIST newrelic-install Copy Invoke the newrelic-install script from its directory. Depending on your server and your paths, the install script may find other versions of PHP on your system. Select your specific version from the list. For more information, see PHP install script. Install New Relic manually If you do not want to use the install script, you can perform a fully manual installation. Be sure to gather information about your PHP installation. You can review and obtain the appropriate values from your phpinfo(). Then create and link or copy the files into place manually. Get installation parameters from phpinfo() If this process doesn't work for you, you can get the correct information from your phpinfo() and pass the appropriate settings to your system as environment variables. phpinfo() Notes PHPAPI This is labeled PHP Extension in the phpinfo() header. ARCH This can be determined by executing file /path/to/php. If you see a reference to ELF-32, then the ARCH is x86. If you see a reference to ELF-64, then the ARCH is x64. MODULEDIR This is labeled extension_dir in the PHP Core section. PHPZTS ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. To determine whether ZTS is compiled in, look for the Thread Safety setting at the top of the phpinfo() output. If this is disabled, then PHPZTS is empty. If this is enabled, then PHPZTS is the string -zts, which includes a leading hyphen as noted. NRBASEDIR This is the base directory of the New Relic agent installation directory; for example, /usr/lib/newrelic-php5 or the directory where you extracted the tar file for tarball installations. Use this information to execute the following commands to install the PHP module. Be sure to adjust the example's values to your actual settings. NRBASEDIR=/usr/lib/newrelic-php5; export NRBASEDIR MODULEDIR=/usr/lib/php/modules; export MODULEDIR ARCH=x64; export ARCH PHPAPI=20090626; export PHPAPI PHPZTS=\"-zts\"; export PHPZTS rm -f $MODULEDIR/newrelic.so ln -s $NRBASEDIR/agent/$ARCH/newrelic-${PHPAPI}${PHPZTS}.so \\ $MODULEDIR/newrelic.so Copy Manual configuration The next step is configuration. Copy the $NRBASEDIR/scripts/newrelic.ini.template to the directory from where your PHP installation reads additional config files and rename it newrelic.ini. To determine the destination, look at your phpinfo() output for the item, called Scan this dir for additional .ini files. If the directory listed is (none), add settings from this file to your listed PHP config files (usually php.ini). Replace the license key setting in your newrelic.ini file with your license key. Also change any other sessions as needed (for example, newrelic.appname). Copy $NRBASEDIR/daemon/newrelic-daemon.$architecture to /usr/bin/newrelic-daemon. Depending on your system, $architecture will be either x86 or x64. Restart your dispatcher/web server. Verify that your site is functioning properly. If it isn't, remove newrelic.ini or the newrelic.so you created, and restart your dispatcher/web server again to restore the old operation. Examine your web server/dispatcher logfiles (not newrelic) to help determine the issue. If you still need assistance, get support at support.newrelic.com. Verify installation Check that the agent is installed after the restart, by investigating the phpinfo() page for a newrelic section. If it appears the agent was successfully installed, check your system to verify that two newrelic-daemon processes are running: For RedHat based systems: ps -aef | grep newrelic-daemon Copy For Debian based systems: ps aux | grep newrelic-daemon Copy Generate some traffic on your app, then wait for three to five minutes for results to arrive in your APM Summary page. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.19597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "sections": "<em>PHP</em> <em>agent</em> <em>installation</em>: Non-standard <em>PHP</em> (advanced)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " <em>installation</em> directory Whether or not your version of <em>PHP</em> has been compiled with ZTS (Zend Thread Safety) support ZTS options apply only to <em>PHP</em> <em>agent</em> versions 9.17 and earlier. ZTS is not available for <em>PHP</em> versions 9.18 or higher. Use the command line newrelic-install script (recommended) Point New"
      },
      "id": "603e782f196a67bef8a83dcc"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.11999,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-<em>install</em> script for <em>PHP</em>",
        "sections": "Work with multiple <em>PHP</em> <em>installations</em>",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": ": The <em>installation</em> script is in the &#x2F;usr&#x2F;bin directory. Via a tarball: The <em>installation</em> script is in the directory where you extracted the tar archive file. The script in the tar distribution includes <em>installation</em> steps otherwise handled by the package manager. Tip To use <em>PHP</em> or any other <em>agent</em>, as well"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/index": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 697.37634,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 577.4028,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 577.40173,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_add_custom_parameter": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.7496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_add_custom_tracer": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67026,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.7496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74939,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_background_job": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.7496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_capture_params": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.7496,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_disable_autorum": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_end_of_transaction": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67023,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_end_transaction": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_get_browser_timing_footer": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_get_browser_timing_header": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67021,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_ignore_apdex": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.6702,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_ignore_transaction": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.6702,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749596,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_name_transaction": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_notice_error": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_record_custom_event": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_record_datastore_segment": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_set_appname": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67017,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.749374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_set_user_attributes": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelic_start_transaction": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67014,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtraceheaders": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayload-php-agent-api": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicacceptdistributedtracepayloadhttpsafe-php-agent-api": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74959,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicaddcustomspanparameter-php-agent-api": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.6701,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newreliccreatedistributedtracepayload-php-agent-api": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.6701,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74937,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api": [
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    },
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "For more help"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9819fcee135fb8afb5e8e97527cdb49d26c57239",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-06-20T09:01:32Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "603e7eb4196a6733aaa83daf"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicgetlinkingmetadata": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67009,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67007,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "For more help"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9819fcee135fb8afb5e8e97527cdb49d26c57239",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-06-20T09:01:32Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "603e7eb4196a6733aaa83daf"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67007,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_is_sampled",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_is_sampled",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "1f6754a2f95e762f1cc3cbb225a9f277967d9958",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicissampled/",
      "published_at": "2021-06-20T09:01:34Z",
      "updated_at": "2021-04-16T07:08:48Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction is marked as sampled. Return values Returns true if distributed tracing is enabled, and the current transaction is marked as sampled, otherwise false. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74958,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_is_sampled() Copy Returns a value indicating whether or not the current transaction is marked as sampled. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns a value indicating whether or not the current transaction"
      },
      "id": "6043d6e9e7b9d2f426579a1c"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    }
  ],
  "/docs/agents/php-agent/php-agent-api/newrelicissampled": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.67007,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all <em>agent</em> versions. Description Record custom metrics that aren&#x27;t captured by default by the <em>PHP</em> <em>agent</em>"
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "newrelic_get_trace_metadata",
        "Syntax",
        "Requirements",
        "Description",
        "Return values",
        "Examples",
        "Populate B3 Headers for use with Zipkin",
        "For more help"
      ],
      "title": "newrelic_get_trace_metadata",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9a94226064e71d3ba2ba310f5430c19128d6b0d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicgettracemetadata/",
      "published_at": "2021-06-20T09:00:31Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires PHP agent version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers of the current trace and the parent span. This information is useful for integrating with third party distributed tracing tools, such as Zipkin. Return values An associative array containing the keys: trace.id: the currently executing trace identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled.Returns: span.id: the currently executing span identifier. An empty value will be returned if the transaction does not support this functionality or distributed tracing is disabled. Examples Populate B3 Headers for use with Zipkin Adds necessary distributed tracing metadata to the HTTP headers being sent to a Zipkin consumer: function make_http_request($url) { $metadata = newrelic_get_trace_metadata(); $sampled = newrelic_is_sampled(); $ch = curl_init($url); curl_setopt($ch, CURLOPT_HTTPHEADER, array( 'X-B3-TraceId: ' . $metadata['trace_id'], 'X-B3-SpanId: ' . substr(uniqid() . uniqid(), 0, 16), 'X-B3-ParentSpanId: ' . $metadata['span_id'], 'X-B3-Sampled: ' . $sampled)); return curl_exec($ch); } $status = make_http_request(\"zipkin-consumer.example\"); Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_get_trace_metadata() Copy Returns an associative array containing the identifiers of the current trace and the parent span. Requirements Requires <em>PHP</em> <em>agent</em> version 9.3 or higher. Must be called inside a transaction. Description Returns an associative array containing the identifiers"
      },
      "id": "603e8588196a67301fa83dd7"
    },
    {
      "sections": [
        "newrelic_insert_distributed_trace_headers",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "For more help"
      ],
      "title": "newrelic_insert_distributed_trace_headers",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "9819fcee135fb8afb5e8e97527cdb49d26c57239",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newrelicinsertdistributedtraceheaders/",
      "published_at": "2021-06-20T09:01:32Z",
      "updated_at": "2021-04-16T07:07:17Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires PHP agent version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers to manually add distributed tracing headers an array of outbound headers. When Distributed Tracing is enabled, newrelic_insert_distributed_trace_headers will always insert W3C trace context headers. It also, by default, inserts the New Relic Distributed Tracing header, but this can be disabled via the newrelic.distributed_tracing_exclude_newrelic_header INI setting. Parameters Parameter Description $headers array Required. An (optionally empty) array of outbound headers. This argument is passed by reference, and therefore must be a variable as opposed to a literal. Return values True if any headers were successfully inserted into the provided array, otherwise returns False Examples For examples of how and when to use this API method, see the documentation to manually instrument applications and services. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.74936,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>PHP</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic_insert_distributed_trace_headers (array $headers) Copy Inserts W3C Trace Context headers and New Relic Distributed Tracing headers into an outbound array of headers. Requirements Requires <em>PHP</em> <em>agent</em> version 9.8 or higher. Description Use newrelic_insert_distributed_trace_headers"
      },
      "id": "603e7eb4196a6733aaa83daf"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/agent-stops-working-after-updating-php": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.7209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62485,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/checking-loaded-configuration-files-directory": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.7209,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26814,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62485,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/data-stops-reporting-while-using-selinux": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.268135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.624825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/data-stops-reporting": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.268135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.624825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/determine-permissions-requirements-php": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72089,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.268135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.624825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/first-php-transaction-not-reported": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26812,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62481,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/generating-logs-troubleshooting-php": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26812,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62481,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/ini-settings-not-taking-effect-immediately": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26811,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62479,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/missing-php-module": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72085,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26811,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62479,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/no-data-appears-php": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.720825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.2681,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62477,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/php-agent-not-reporting-errors": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.720825,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.2681,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62477,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan": [
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.2681,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62477,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    },
    {
      "sections": [
        "No data appears (PHP)",
        "Problem",
        "Solution",
        "For more help"
      ],
      "title": "No data appears (PHP)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "8dba59344797bc93b3fd1a3b92fdfbb590111766",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/no-data-appears-php/",
      "published_at": "2021-06-20T20:48:35Z",
      "updated_at": "2021-04-16T07:13:46Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing the New Relic PHP agent, generating some traffic, and waiting at least five minutes, no data appears in your New Relic UI. Solution If no data appears after you generate traffic to your app and wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve the problem, try the following: PHP agent troubleshooting Comments Compatibility Make sure your system meets the PHP agent's compatibility and requirements. Non-standard PHP version If you are using a non-standard version of PHP, follow the advanced installation procedures to make sure the default installer can find your version of PHP. App name Make sure your apps have a descriptive, unique name. For example, if you have multiple apps with the same name, such as the default app name PHP Application, data from each of these apps rolls up into the default app name, and it may appear as if an individual app is not reporting. Web server Restart your web server (Apache, Nginx, PHP-FPM, etc.), and wait a few minutes for data to appear. phpinfo() Check phpinfo() to verify that you installed the PHP agent and that the license key in it is correct. SELinux If your system uses SELinux, configure SELinux to work with the PHP agent. Log files Verify that both the agent and the daemon are writing to their log files. If not, reinstall the agent. Verify the log file permissions to make sure the log owner is the same as the New Relic user. PHP agent permissions Make sure you have the correct permissions to use the PHP agent. Other If none of these solutions solve the problem, see the troubleshooting procedures for: Agent stops after you update PHP After previously reporting data, the PHP agent stops reporting For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 94.66796,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>PHP</em>)",
        "sections": "No data appears (<em>PHP</em>)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " common problems and suggest <em>troubleshooting</em>. If that does not solve the problem, try the following: <em>PHP</em> <em>agent</em> <em>troubleshooting</em> Comments Compatibility Make sure your system meets the <em>PHP</em> <em>agent</em>&#x27;s compatibility and requirements. Non-standard <em>PHP</em> version If you are using a non-standard version of <em>PHP</em>"
      },
      "id": "603e8faae7b9d2b56c2a07df"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/protocol-mismatch-error": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72081,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26809,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.624756,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/submitting-troubleshooting-results-php": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72081,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26809,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.624756,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/threaded-apache-worker-mpms": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.720795,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.268074,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62474,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/transactions-named-indexphp-or-unknown": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.720795,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.268074,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.62474,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/troubleshoot-php-agent-instance-count": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26807,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.624725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/uninstrumented-time-traces": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26807,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.624725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/using-phpinfo-verify-php": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72077,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26807,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.624725,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/verifying-php-daemon": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26805,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.6247,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/php-agent/troubleshooting/why-when-restart-your-web-server-php": [
    {
      "sections": [
        "PHP installation fails on OS X 10.11 - El Capitan",
        "Problem",
        "Failure with the install script",
        "Failure with the manual install process",
        "Solution",
        "Caution",
        "Cause",
        "For more help"
      ],
      "title": "PHP installation fails on OS X 10.11 - El Capitan ",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Troubleshooting"
      ],
      "external_id": "1c8572d06d604519b1dd307afb0fd7342a92eea0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/troubleshooting/php-installation-fails-os-x-1011-el-capitan/",
      "published_at": "2021-06-20T20:49:20Z",
      "updated_at": "2021-06-09T03:49:59Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You attempt to install the PHP agent on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL: New Relic agent installation failed. Please contact http://support.newrelic.com and report the above error. We have also created a tar file with log files and other system info that can help solve the problem. Copy Failure with the manual install process You used the manual install process with the install utility nrmaninstall.php, or you followed the manual instructions, and then you encountered something similar to this: $ sudo cp ./agent/x86_64/newrelic-20121212.so /usr/lib/php/extensions/no-debug-non-zts-20121212/ cp: /usr/lib/php/extensions/no-debug-non-zts-20121212/newrelic-20121212.so: Operation not permitted $ sudo cp ./daemon/newrelic-daemon.x86_64 /usr/bin/newrelic-daemon cp: /usr/bin/newrelic-daemon: Operation not permitted Copy Solution If necessary, you can install the PHP agent by disabling Apple's System Integrity Protection (SIP). This is true for the newrelic-install script and for manual installations. Caution This is not an endorsement for disabling SIP in general. Be sure to verify that this does not violate the security policies of your organization. Follow this general procedure: Boot into recovery mode. Disable SIP and reboot. Install the New Relic PHP agent. Boot into recovery mode. Re-enable SIP and reboot. There are many articles available on the web that describe SIP and the steps for disabling, re-enabling, and checking the status. Cause PHP agent installation requires the daemon program to be installed in /usr/bin and the extension module in /usr/lib. However, those directories have R-X permissions, which means the daemon cannot be installed by normal means. Apple's System Integrity Protection, SIP, prevents the modification of permissions on these directories even when logged in as root, admin, or via a sudo privileged account. This also applies in situations where the PHP bin is self-contained (for example, MAMP). For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.72075,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan ",
        "sections": "<em>PHP</em> installation fails on OS X 10.11 - El Capitan",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": "Problem You attempt to install the <em>PHP</em> <em>agent</em> on OS X 10.11 - El Capitan, and it fails. Failure with the install script You used the script newrelic-install and encountered something similar to this: Install daemon ([y]es, [n]o or x to e[x]it): y FATAL: failed to copy new daemon into place FATAL"
      },
      "id": "603e90b9e7b9d293502a0819"
    },
    {
      "sections": [
        "newrelic_custom_metric (PHP agent API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Return values",
        "Examples",
        "Record a 100 millisecond response time",
        "For more help"
      ],
      "title": "newrelic_custom_metric (PHP agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "PHP agent API"
      ],
      "external_id": "deb7672b5467e6e125c0fee7cf7c10351b0aeeb8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/php-agent-api/newreliccustommetric-php-agent-api/",
      "published_at": "2021-06-20T05:16:08Z",
      "updated_at": "2021-06-02T14:07:21Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic_custom_metric(string $metric_name, float $value) Copy Add a custom metric (in milliseconds) to time a component of your app not captured by default. Requirements Compatible with all agent versions. Description Record custom metrics that aren't captured by default by the PHP agent. Then you can: Use the data explorer to search for your custom metrics, create customizable charts, and add them to dashboards. Use the New Relic REST API to programmatically retrieve and use custom metric data outside of the New Relic UI. Create custom metric alerts to notify you or your team when your custom metric exceeds specific values. Parameters Parameter Description $metric_name string Required. Name your custom metrics with a Custom/ prefix (for example, Custom/MyMetric). This helps the UI organize your custom metrics in one place, and it makes them easily findable via the Metric Explorer. $value float Required. Records timing in milliseconds. For example: a value of 4 is stored as .004 seconds in New Relic's systems. If the value is NaN, Infinity, denorm or negative zero, the behavior of this function is undefined. New Relic may discard 1 or more bits of precision (ULPs) from the given value. Return values Returns true if the metric was added successfully. Examples Record a 100 millisecond response time function example() { if (extension_loaded('newrelic')) { // Ensure PHP agent is available newrelic_custom_metric(\"Custom/custom-metric-name\", 100.00); } } Copy For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 102.26805,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "sections": "newrelic_custom_metric (<em>PHP</em> <em>agent</em> API)",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our <em>PHP</em> <em>agent</em> open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our <em>troubleshooting</em> tool for Linux, Windows, and macOS. Review New Relic&#x27;s data security and licenses documentation."
      },
      "id": "6043cb1828ccbc54ec2c60bf"
    },
    {
      "sections": [
        "Use the newrelic-install script for PHP",
        "Important",
        "Find the installer script",
        "Tip",
        "Work with multiple PHP installations",
        "Invoke the installer script",
        "Use the install mode",
        "1. Invoke install mode.",
        "2. Provide your New Relic license key.",
        "3. Select which PHP version to use if applicable.",
        "4. Install the daemon if applicable.",
        "5. Restart your web server.",
        "6. Note your archive file.",
        "7. Fine-tune your configuration.",
        "Use the install_daemon mode",
        "Troubleshoot your PHP installation",
        "Uninstall mode",
        "Uninstall and keep config files.",
        "Permanently uninstall New Relic.",
        "For more help"
      ],
      "title": "Use the newrelic-install script for PHP",
      "type": "docs",
      "tags": [
        "Agents",
        "PHP agent",
        "Advanced installation"
      ],
      "external_id": "71ab50634a65e0f31ac82963ee78cf99dbaf752b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/php-agent/advanced-installation/use-newrelic-install-script-php/",
      "published_at": "2021-06-20T21:31:41Z",
      "updated_at": "2021-06-09T01:14:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The interactive newrelic-install script simplifies installing PHP applications in New Relic. It works with multiple PHP installations as well as installations in non-standard locations. Running it will: Copy the correct PHP modules into place. Install sample ini files. Configure the New Relic proxy daemon. Important Be sure to review the information about working with multiple installations and non-standard locations before running the script. Find the installer script The installer script location depends on how you installed the New Relic PHP agent. Via system package manager: The installation script is in the /usr/bin directory. Via a tarball: The installation script is in the directory where you extracted the tar archive file. The script in the tar distribution includes installation steps otherwise handled by the package manager. Tip To use PHP or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Work with multiple PHP installations For newrelic-install to correctly detect multiple installations, ensure your PATH environment variable is correctly set. The newrelic-install script can only install the agent for versions it can find. If you want to... Do this... Specify additional directories Use the NR_INSTALL_PATH environment variable with a colon-separated list. Override NR_INSTALL_PATH and PATH Specify a set of directories in the NR_INSTALL_PHPLIST environment variable as a colon-separated list. These directories must contain either the command line version of PHP or the php-config script. Invoke the installer script The script has two modes: install and uninstall. If you invoke it with no arguments, you will be prompted to select a mode. From the command line, run the script at its location: Via system package manager: /usr/bin/newrelic-install Via a tar archive directory: ./newrelic-install Use the install mode Follow this process to install New Relic. 1. Invoke install mode. Invoke install mode by using one of these methods: Run newrelic-install with the install command line option. Run newrelic-install with no options and select the install option from the main menu when invoking the script. 2. Provide your New Relic license key. At the prompt, enter your New Relic license key. This key will be inserted into any INI files created during the rest of the installation process. 3. Select which PHP version to use if applicable. If newrelic-install finds more than one version of PHP, select which version of PHP to use. You will not see this screen if the script only finds a single version of PHP. Example: The menu shows seven options: 1) /usr/bin 2) /usr/local/php/5.2.16/bin 3) /usr/local/php/5.2.16-zts/bin 4) /usr/local/php/5.3.4/bin 5) /usr/local/php/5.3.4-zts/bin 6) /usr/local/php/5.4.19-zts/bin 7) /usr/local/php/5.5.4-zts/bin 0) Exit Select (1-7, 0 to exit, or all): Copy ZTS options apply only to PHP agent versions 9.17 and earlier. ZTS is not available for PHP versions 9.18 or higher. At the menu, use any of these options: To select only one version, enter the number indicating the version you want to use. To select multiple versions, enter a comma- or space-separated list of numbers. To select every version listed, enter the keyword all. To exit the installation process, Enter 0. For each directory selected, the script will attempt to install the agent in the proper place and report on each attempt. Important For PHP installations that allow multiple .ini files, the install script will copy a template file into place, if a modified one is not already installed. Make a note of the .ini files you will need to modify manually. As of PHP agent version 4.0, the installer will not work properly if it detects a single version of PHP 5.1, which is deprecated (2013). If you must run PHP 5.1, use PHP agent version 3.9.5.13. If you need help, get support at support.newrelic.com. 4. Install the daemon if applicable. If the daemon was not installed by the package manager, install the daemon. If this is an update or reinstall, the script provide a confirmation prompt before overwriting the old copy of the daemon. If installation is successful, the script will show this final message: New Relic is now installed on your system. Congratulations! Copy 5. Restart your web server. To activate the PHP agent, restart your web server. If you are running PHP-FPM, you may also need to restart PHP-FPM separately before the agent will be active. 6. Note your archive file. Note the name and location of the install archive file. This file will be located at /tmp/nrinstall-<var>nnnn</var>.tar and will contain both the install log and useful system information to help New Relic Technical Support with troubleshooting. 7. Fine-tune your configuration. After you install New Relic successfully and restart your web server, you can begin gathering data about your applications. After a few minutes, data will begin to appear on your APM Summary page. To fine-tune operation of both the PHP agent and daemon, review the PHP configuration options. Use the install_daemon mode To install the daemon without the agent, use PHP agent 9.2 or higher. Run newrelic-install with the install_daemon command line option. This is useful if the daemon runs on a different host or in a different container than the PHP application. For example, this may happen with agent install on containers. Troubleshoot your PHP installation If there were problems with the installation process, or if no data appears in the UI, review the PHP troubleshooting procedures before contacting New Relic for support. Be sure to attach your archive file to any bug report, as well as the output of the phpinfo() function produced by your web server. Uninstall mode You can uninstall New Relic but keep valuable config files (useful when upgrading), or permanently uninstall New Relic from your system. Uninstall and keep config files. This method is useful when you want to uninstall and upgrade. The uninstall does not remove important configuration files, such as your daemon configuration file. Also, it does not remove any newrelic.ini files that you have modified. To uninstall New Relic using the install script, use either of these options: Invoke newrelic-install with the uninstall option. Run newrelic-install with no options, and select the uninstall option from the main menu when invoking the script. Permanently uninstall New Relic. To permanently uninstall New Relic from your system: Invoke newrelic-install with the purge option. This will remove all the configuration files and any links created at installation time. This will not affect any configuration parameters placed in files such as php.in. Also, this will not remove the software packages installed on the system. To remove the New Relic software packages installed with a package manager, see Uninstalling RedHat and CentOS or Uninstalling Ubuntu and Debian. For more help If you need more help, check out these support and learning resources: Suggest a change and learn how to contribute to our PHP agent open source repository. Browse the Explorers Hub to get help from the community and join in discussions. Find answers on our sites and learn how to use our support portal. Run New Relic Diagnostics, our troubleshooting tool for Linux, Windows, and macOS. Review New Relic's data security and licenses documentation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 101.6247,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use the newrelic-install script for <em>PHP</em>",
        "sections": "<em>Troubleshoot</em> your <em>PHP</em> installation",
        "tags": "<em>PHP</em> <em>agent</em>",
        "body": " or in a different container than the <em>PHP</em> application. For example, this may happen with <em>agent</em> install on containers. <em>Troubleshoot</em> your <em>PHP</em> installation If there were problems with the installation process, or if no data appears in the UI, review the <em>PHP</em> <em>troubleshooting</em> procedures before contacting New"
      },
      "id": "603e841728ccbc222aeba788"
    }
  ],
  "/docs/agents/python-agent/api-guides/guide-using-python-agent-api": [
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-06-20T09:05:27Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 79.48087,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " in place of the platform <em>API</em>. 2.104.0.86 Release notes: <em>Python</em> <em>agent</em> 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: <em>Python</em> <em>agent</em> 2.56.0.42 Deprecated config"
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-06-20T13:31:57Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 77.9886,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "application (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.application(name=None) Copy Returns object corresponding to an <em>agent</em> monitored app; required by some <em>Python</em> <em>agent</em> <em>API</em> calls. Description This call returns an object corresponding to an <em>agent</em>-monitored application. If no name value is set, the name set via the <em>Python</em> <em>agent</em>"
      },
      "id": "604400d028ccbc356e2c6098"
    },
    {
      "sections": [
        "record_exception (Python agent API)",
        "Syntax"
      ],
      "title": "record_exception (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "9015995153e8263671a1a2b94be9b49ab3e65ab0",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/recordexception-python-agent-api/",
      "published_at": "2021-06-20T09:11:13Z",
      "updated_at": "2021-05-28T17:55:52Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This API has been deprecated. Please use notice_error().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 77.87789,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "sections": "record_exception (<em>Python</em> <em>agent</em> <em>API</em>)",
        "tags": "<em>Python</em> <em>agent</em> <em>API</em>",
        "body": "Syntax newrelic.<em>agent</em>.record_exception(exc=None, value=None, tb=None, params={}, ignore_errors=[], application=None) Copy This <em>API</em> has been deprecated. Please use notice_error()."
      },
      "id": "6043fc80e7b9d213b75799f8"
    }
  ],
  "/docs/agents/python-agent/async-instrumentation/asyncpg": [
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "79aadb3940f68996204599b6d67122be14ad1a20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2021-06-20T14:18:30Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.88667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7ce2e7b9d226062a080e"
    },
    {
      "sections": [
        "Django ASGI Mode",
        "Automatic initialization with admin script",
        "Event loop diagnostic support"
      ],
      "title": "Django ASGI Mode",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "1871aa8881deeeb349ea435d554846abc63aa3dd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/django-asgi-mode/",
      "published_at": "2021-06-20T21:35:42Z",
      "updated_at": "2021-03-11T01:23:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 6.0.0.154 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.04535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that deploys Django with ASGI. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our <em>Python</em>"
      },
      "id": "6043b84264441f9b98378f01"
    },
    {
      "sections": [
        "Troubleshoot Java asynchronous instrumentation",
        "Verify your instrumentation",
        "Use logs to troubleshoot",
        "Problem: Transaction times are too long",
        "Problem: No transaction trace data",
        "Problem: Too few async calls",
        "Ensure that each activity you monitor is appropriately linked",
        "Check if you are missing required annotations"
      ],
      "title": "Troubleshoot Java asynchronous instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "0f21da73ba02edc45ec0cbbbaa7e0fc45678404b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/troubleshoot-java-asynchronous-instrumentation/",
      "published_at": "2021-06-20T06:04:41Z",
      "updated_at": "2021-03-16T09:03:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are having problems using the Java agent API for async tokens and segments, use these techniques to help you find answers and solve problems. Verify your instrumentation The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use these techniques to verify that your application’s instrumentation is correct: After instrumenting your code, verify that the logs show that an equal number of tokens have been created and expired. For more information on which log messages to look for, see Use logs to troubleshoot. Check the garbage collection statistics under APM's JVMs page to determine whether or not your changes have significantly altered garbage collection patterns. Check if any segments or tokens are timing out by reviewing your transaction traces for a timed_out attribute. If so, you can change the limit with token_timeout and segment_timeout. Use logs to troubleshoot To customize your Java agent logging, see Generating logs. Then, you can examine your logs for these common messages: To view created tokens, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: created active token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view expired tokens and the time that they expired, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: expired token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view created segments, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@486b7f04: startSegment(): com.newrelic.agent.Segment@2b7fdad3 created and started with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy To view ended segments and the time that they ended, check logs at FINEST for: com.newrelic.agent.Transaction@486b7f04--finish segment(): com.newrelic.agent.Segment@2b7fdad3 async finish with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy Problem: Transaction times are too long Make sure to expire tokens and end or ignore segments; otherwise transactions may take longer to report to New Relic. The Java agent has a timeout mechanism for tokens and segments that are not ended correctly. For more information, see token_timeout and segment_timeout. Problem: No transaction trace data Inspect transaction traces to make sure expected asynchronous work is reported. If you do not see any transaction traces, make sure your transaction duration exceeds the transaction trace threshold set in transaction_threshold. Problem: Too few async calls If too few calls are being reported: Ensure that each activity you monitor is appropriately linked In the faulty example below, a parallel stream is being used, which means that the work done inside the lambda in the call to map() can be scheduled on a different thread than the thread handling the request. Without creating a token to link all this work together, you will not see any of the work that gets scheduled on a different thread inside of your transaction. @RequestMapping(\"parallel_stream_bad\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad(@RequestParam(\"ids\") List<long> ids) { List<item> results = ids .parallelStream() .map(i -> requestItem(i)) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad\", results); } Copy Check if you are missing required annotations The example below will report only a subset of the calls to requestItem() because it is impossible to put @Trace(async = true) around blocks of anonymous work inside the call to map(). Instead, you should pass the token into requestItem() and link it, and then add @Trace(async=true) around it. Or use a helper function like requestItemAsync() to do this without changing your existing methods. @RequestMapping(\"parallel_stream_bad2\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad2(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> { token.link(); return requestItem(id); }) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad2\", results); } Copy Compare this to the correct example below, in which the lambda expression is wrapped by the wrapper class InstrumentedCallable. This class accepts a token and a lambda, then wraps asynchronous work in @Trace(async = true) and uses a token to link the work to the request thread. @RequestMapping(\"parallel_stream_wrap\") @Trace(dispatcher = true) public ResponseEntity parallelStreamWrap(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> InstrumentedCallable.instrumentCallable(token, () -> requestItem(id))) .map(c -> c.call()) .filter(item -> item != null) .collect(Collectors.toList()); token.expire(); return formattedResponse(\"parallel_stream_wrap\", results); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.29031,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot Java <em>asynchronous</em> <em>instrumentation</em>",
        "sections": "Troubleshoot Java <em>asynchronous</em> <em>instrumentation</em>",
        "tags": "<em>Async</em> <em>instrumentation</em>",
        "body": "If you are having problems using the Java <em>agent</em> API for <em>async</em> tokens and segments, use these techniques to help you find answers and solve problems. Verify your <em>instrumentation</em> The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use"
      },
      "id": "603eb55a196a67260aa83dac"
    }
  ],
  "/docs/agents/python-agent/async-instrumentation/django-asgi-mode": [
    {
      "sections": [
        "Asyncpg",
        "Automatic initialization with admin script",
        "Using the Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Asyncpg",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "2f2944f2b60c89b711393131cc8ea0bd486c42ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/async-instrumentation/asyncpg/",
      "published_at": "2021-06-20T21:35:44Z",
      "updated_at": "2021-03-16T14:26:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips for integrating our Python agent with an app that uses asyncpg. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.20.0.149 or higher, you can use the recommended admin script integration method For example: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program python path_to_app Copy Using the Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.59811,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Asyncpg</em>",
        "sections": "Using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> supports recording database transactions when using the asyncpg database client module for PostgresSQL. This feature captures timing of database queries, SQL statements for the database query, and a stack trace for long database queries. Read about the requirements and tips"
      },
      "id": "603e8a89196a6741a8a83df1"
    },
    {
      "sections": [
        "Python agent and FastAPI web framework",
        "Automatic initialization with admin script",
        "Python agent API",
        "Event loop diagnostic support"
      ],
      "title": "Python agent and FastAPI web framework",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Async instrumentation"
      ],
      "external_id": "79aadb3940f68996204599b6d67122be14ad1a20",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/web-frameworks-servers/python-agent-fastapi-web-framework/",
      "published_at": "2021-06-20T14:18:30Z",
      "updated_at": "2021-03-16T06:26:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about the requirements and tips for integrating our Python agent with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the Python agent. Automatic initialization with admin script If you start your app with python app.py and use our Python agent version 5.22.0.151 or higher, you can use the recommended admin script integration method. Here's an example using the admin script method: NEW_RELIC_CONFIG_FILE=path/to/newrelic.ini newrelic-admin run-program [web server] path_to_app Copy Python agent API You can use the Python agent API to monitor any ASGI server or framework. To do this, mark the ASGI application entry point and set the transaction names. Event loop diagnostic support Our Python agent supports asyncio event loop diagnostics. For more information, see Python event loop diagnostics. cs).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 145.88667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "sections": "<em>Python</em> <em>agent</em> and FastAPI web framework",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "Read about the requirements and tips for integrating our <em>Python</em> <em>agent</em> with an app that uses the FastAPI web framework. To return to the general install instructions, go to Install the <em>Python</em> <em>agent</em>. Automatic initialization with admin script If you start your app with <em>python</em> app.py and use our"
      },
      "id": "603e7ce2e7b9d226062a080e"
    },
    {
      "sections": [
        "Troubleshoot Java asynchronous instrumentation",
        "Verify your instrumentation",
        "Use logs to troubleshoot",
        "Problem: Transaction times are too long",
        "Problem: No transaction trace data",
        "Problem: Too few async calls",
        "Ensure that each activity you monitor is appropriately linked",
        "Check if you are missing required annotations"
      ],
      "title": "Troubleshoot Java asynchronous instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Java agent",
        "Async instrumentation"
      ],
      "external_id": "0f21da73ba02edc45ec0cbbbaa7e0fc45678404b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/java-agent/async-instrumentation/troubleshoot-java-asynchronous-instrumentation/",
      "published_at": "2021-06-20T06:04:41Z",
      "updated_at": "2021-03-16T09:03:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you are having problems using the Java agent API for async tokens and segments, use these techniques to help you find answers and solve problems. Verify your instrumentation The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use these techniques to verify that your application’s instrumentation is correct: After instrumenting your code, verify that the logs show that an equal number of tokens have been created and expired. For more information on which log messages to look for, see Use logs to troubleshoot. Check the garbage collection statistics under APM's JVMs page to determine whether or not your changes have significantly altered garbage collection patterns. Check if any segments or tokens are timing out by reviewing your transaction traces for a timed_out attribute. If so, you can change the limit with token_timeout and segment_timeout. Use logs to troubleshoot To customize your Java agent logging, see Generating logs. Then, you can examine your logs for these common messages: To view created tokens, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: created active token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view expired tokens and the time that they expired, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@5a7cc8e: expired token com.newrelic.agent.TokenImpl@7db8d0e8 Copy To view created segments, check logs at FINEST for: Transaction com.newrelic.agent.Transaction@486b7f04: startSegment(): com.newrelic.agent.Segment@2b7fdad3 created and started with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy To view ended segments and the time that they ended, check logs at FINEST for: com.newrelic.agent.Transaction@486b7f04--finish segment(): com.newrelic.agent.Segment@2b7fdad3 async finish with tracer com.newrelic.agent.tracers.OtherRootTracer@4df4a953 Copy Problem: Transaction times are too long Make sure to expire tokens and end or ignore segments; otherwise transactions may take longer to report to New Relic. The Java agent has a timeout mechanism for tokens and segments that are not ended correctly. For more information, see token_timeout and segment_timeout. Problem: No transaction trace data Inspect transaction traces to make sure expected asynchronous work is reported. If you do not see any transaction traces, make sure your transaction duration exceeds the transaction trace threshold set in transaction_threshold. Problem: Too few async calls If too few calls are being reported: Ensure that each activity you monitor is appropriately linked In the faulty example below, a parallel stream is being used, which means that the work done inside the lambda in the call to map() can be scheduled on a different thread than the thread handling the request. Without creating a token to link all this work together, you will not see any of the work that gets scheduled on a different thread inside of your transaction. @RequestMapping(\"parallel_stream_bad\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad(@RequestParam(\"ids\") List<long> ids) { List<item> results = ids .parallelStream() .map(i -> requestItem(i)) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad\", results); } Copy Check if you are missing required annotations The example below will report only a subset of the calls to requestItem() because it is impossible to put @Trace(async = true) around blocks of anonymous work inside the call to map(). Instead, you should pass the token into requestItem() and link it, and then add @Trace(async=true) around it. Or use a helper function like requestItemAsync() to do this without changing your existing methods. @RequestMapping(\"parallel_stream_bad2\") @Trace(dispatcher = true) public ResponseEntity parallelStreamBad2(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> { token.link(); return requestItem(id); }) .filter(item -> item != null) .collect(Collectors.toList()); return formattedResponse(\"parallel_stream_bad2\", results); } Copy Compare this to the correct example below, in which the lambda expression is wrapped by the wrapper class InstrumentedCallable. This class accepts a token and a lambda, then wraps asynchronous work in @Trace(async = true) and uses a token to link the work to the request thread. @RequestMapping(\"parallel_stream_wrap\") @Trace(dispatcher = true) public ResponseEntity parallelStreamWrap(@RequestParam(\"ids\") List<long> ids) { final Token token = NewRelic.getAgent().getTransaction().getToken(); List<item> results = ids .parallelStream() .map(id -> InstrumentedCallable.instrumentCallable(token, () -> requestItem(id))) .map(c -> c.call()) .filter(item -> item != null) .collect(Collectors.toList()); token.expire(); return formattedResponse(\"parallel_stream_wrap\", results); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.29031,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot Java <em>asynchronous</em> <em>instrumentation</em>",
        "sections": "Troubleshoot Java <em>asynchronous</em> <em>instrumentation</em>",
        "tags": "<em>Async</em> <em>instrumentation</em>",
        "body": "If you are having problems using the Java <em>agent</em> API for <em>async</em> tokens and segments, use these techniques to help you find answers and solve problems. Verify your <em>instrumentation</em> The API has a number of built-in safety mechanisms to prevent issues caused by incorrect API usage, but you can use"
      },
      "id": "603eb55a196a67260aa83dac"
    }
  ],
  "/docs/agents/python-agent/attributes/enabling-disabling-attributes-python": [
    {
      "sections": [
        "Python agent attributes",
        "Python agent web transaction attributes",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "response.status",
        "thread.concurrency",
        "webfrontend.queue.seconds",
        "wsgi.input.bytes",
        "wsgi.input.calls.read",
        "wsgi.input.calls.readline",
        "wsgi.input.calls.readlines",
        "wsgi.input.seconds",
        "wsgi.output.bytes",
        "wsgi.output.calls.write",
        "wsgi.output.calls.yield",
        "wsgi.output.seconds",
        "Python agent message transaction attributes",
        "message.correlationId",
        "message.exchangeType",
        "message.headers.*",
        "message.queueName",
        "message.replyTo",
        "message.routingKey",
        "Python agent external trace attributes",
        "http.url",
        "Python agent database trace attributes",
        "db.instance",
        "host",
        "port_path_or_id",
        "sql",
        "peer.hostname",
        "peer.address",
        "db.statement",
        "db.operation",
        "Python agent datastore trace attributes",
        "Python agent span attributes",
        "error.class",
        "error.message",
        "Add custom attributes",
        "Important",
        "Add custom attributes to exceptions",
        "Upgrade your config file",
        "For more help"
      ],
      "title": "Python agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "806c873188185d5e74dc7ecef103bb377f6a0561",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/attributes/python-agent-attributes/",
      "published_at": "2021-06-20T21:36:31Z",
      "updated_at": "2021-05-28T11:05:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. We enable users to customize exactly which attributes will be sent to each of these destinations: Transaction traces Traced errors Transaction events Page views These attribute settings apply to Python agent version 2.56.0.42 or higher. To take advantage of all available features, update your Python agent to the latest release. Python agent web transaction attributes The following lists the attributes that can be configured in the Python agent for web transactions. For more information, see Python agent configuration: attributes. request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.userAgent The incoming request user-agent as read from the User-Agent request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.* Parameters from the query string of the request URL. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled request.uri The URI of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength Taken from the Content-Length response header, this specifies the size of the outgoing response in bytes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType Taken from the Content-Type response header, this specifies the content type of the outgoing response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.status The outgoing response status. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable thread.concurrency A measure of \"thread utilization,\" representing the number of threads handling concurrent requests. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable webfrontend.queue.seconds Time (in seconds) spent in request queuing. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.bytes Number of bytes received in the WSGI input stream (file-like object.) Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.read Number of calls to read() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readline Number of calls to readline() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readlines Number of calls to readlines() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.seconds Time (in seconds) to read WSGI input stream. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.bytes Number of bytes sent in the WSGI output response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.write Number of calls to write() by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.yield Number of calls to yield by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.seconds Time (in seconds) to send the WSGI response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable Python agent message transaction attributes The following sections list the attributes that can be configured in the Python agent for message transactions started by incoming message brokers like RabbitMQ. For more information, see Python agent configuration: attributes. message.correlationId The application-generated identifier used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.exchangeType The type of exchange this message was consumed from: direct, fanout, topic, or headers Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.headers.* The headers of the incoming message. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.queueName The name of the queue this message was consumed from. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled message.replyTo The callback queue used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.routingKey The routing key of the incoming message. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Python agent external trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by outgoing libraries, like httplib, boto3, requests, and so on, or when using the external trace API. For more information, see Python agent configuration: attributes. http.url The url of the outgoing call, stripped of any request parameters. Excluded when: A rule matching 'http.url' is present in the \"transaction_segments.attributes.exclude\" setting. (for segments) A rule matching 'http.url' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled Python agent database trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by database libraries like mysql, psycopg2, cx_Oracle, and so on, or when using the database trace API. For more information, see Python agent configuration: attributes. db.instance The name of the database used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments) If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled sql The SQLl used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Transaction segments: Enabled, reported as \"obfuscated\" SQL. peer.hostname The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the database, including the port or path information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled db.statement The SQL used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Span events: Enabled, reported as \"obfuscated\" SQL. db.operation The database operation that was performed by this span. Only to be included if db.statement is not applicable. Excluded when: The attribute db.statement is reported. Defaults: Transaction segments: Enabled Span events: Enabled Python agent datastore trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by datastore libraries like redis, memcache, pymongo, and so on, or when using the datastore trace API. For more information, see Python agent configuration: attributes. db.instance The name of the datastore instance used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments). If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting (for spans). Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled peer.hostname The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the datastore, including the port, path, or ID information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled Python agent span attributes The following sections list the attributes that can be configured in the Python agent for span events. For more information, see Python agent configuration: attributes. error.class The class of exception, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled error.message The exception message, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled Add custom attributes To capture additional custom attributes from your application, use newrelic.agent.add_custom_parameter(). For full reference see, Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Important Before creating custom attributes, review our list of reserved terms. Otherwise, unexpected results might occur. Add custom attributes to exceptions When using the newrelic.agent.notice_error() API call, you can pass in a dictionary of params that will be recorded as attributes on the traced error. Defaults: Transaction traces: Unavailable Error collector (traced errors): Enabled Transaction events: Unavailable Page views (browser monitoring): Unavailable Upgrade your config file Upgrade your newrelic.ini configuration file when you upgrade to Python agent 2.56.0.42 or higher. For more information about deprecated configuration settings, see Enabling and disabling attributes. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by our agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Python agent attributes) Attribute examples (scenarios and results of enabling and disabling different Python agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.17265,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " configuration settings, see Enabling and disabling <em>attributes</em>. For more help Additional documentation resources include: <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by our <em>agents</em>) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>Python</em> <em>agent</em> <em>attributes</em>) Attribute examples (scenarios and results of enabling and disabling different <em>Python</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "6043b71264441fff7e378ee7"
    },
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-06-20T21:37:24Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.33333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: <em>Python</em> <em>agent</em> configuration file Custom <em>attributes</em> <em>Python</em> <em>agent</em> API Tip Some of these settings can be changed using environment"
      },
      "id": "6044103f64441fbcef378ef7"
    },
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-06-20T09:05:27Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.12219,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: <em>Python</em> <em>agent</em> 1.0.3.138 <em>Attributes</em> from WSGI requests: <em>Attributes</em> captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_<em>AGENT</em> now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters."
      },
      "id": "6043ff58196a67822f960f94"
    }
  ],
  "/docs/agents/python-agent/attributes/python-agent-attributes": [
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-06-20T21:37:24Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.33333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: <em>Python</em> <em>agent</em> configuration file Custom <em>attributes</em> <em>Python</em> <em>agent</em> API Tip Some of these settings can be changed using environment"
      },
      "id": "6044103f64441fbcef378ef7"
    },
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-06-20T09:05:27Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.12219,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: <em>Python</em> <em>agent</em> 1.0.3.138 <em>Attributes</em> from WSGI requests: <em>Attributes</em> captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_<em>AGENT</em> now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters."
      },
      "id": "6043ff58196a67822f960f94"
    },
    {
      "sections": [
        "Python agent configuration",
        "Configuration methods and precedence",
        "Agent configuration file",
        "Tip",
        "Server-side configuration",
        "Important",
        "Environment variables",
        "Per-request configuration",
        "Example: Apache/mod_wsgi app name",
        "newrelic.set_background_task",
        "newrelic.ignore_transaction",
        "newrelic.suppress_apdex_metric",
        "newrelic.suppress_transaction_trace",
        "newrelic.disable_browser_autorum",
        "Multiple environment configuration",
        "General configuration settings",
        "license_key (REQUIRED)",
        "app_name (HIGHLY RECOMMENDED)",
        "monitor_mode",
        "developer_mode",
        "log_file",
        "log_level",
        "high_security",
        "proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass",
        "audit_log_file",
        "Caution",
        "labels (tags)",
        "Two tags",
        "process_host.display_name",
        "api_key",
        "ca_bundle_path",
        "apdex_t",
        "Attributes",
        "attributes.enabled",
        "attributes.include",
        "attributes.exclude",
        "Transaction tracer configuration",
        "transaction_tracer.enabled",
        "transaction_tracer.transaction_threshold",
        "transaction_tracer.record_sql",
        "transaction_tracer.stack_trace_threshold",
        "transaction_tracer.explain_enabled",
        "transaction_tracer.explain_threshold",
        "transaction_tracer.attributes.enabled",
        "transaction_tracer.attributes.include",
        "transaction_tracer.attributes.exclude",
        "transaction_tracer.function_trace",
        "Transaction segment configuration",
        "transaction_segments.attributes.enabled",
        "transaction_segments.attributes.include",
        "transaction_segments.attributes.exclude",
        "Error collector configuration",
        "error_collector.enabled",
        "error_collector.ignore_classes",
        "error_collector.ignore_status_codes",
        "error_collector.expected_classes",
        "error_collector.expected_status_codes",
        "error_collector.attributes.enabled",
        "error_collector.attributes.include",
        "error_collector.attributes.exclude",
        "error_collector.capture_events",
        "Browser monitoring settings",
        "browser_monitoring.enabled",
        "browser_monitoring.auto_instrument",
        "browser_monitoring.content_type",
        "Instrument xhtml+xml page responses",
        "browser_monitoring.attributes.enabled",
        "browser_monitoring.attributes.include",
        "browser_monitoring.attributes.exclude",
        "Transaction events settings",
        "transaction_events.enabled",
        "transaction_events.attributes.enabled",
        "transaction_events.attributes.include",
        "transaction_events.attributes.exclude",
        "Custom events settings",
        "custom_insights_events.enabled",
        "Datastore tracer settings",
        "datastore_tracer.instance_reporting.enabled",
        "datastore_tracer.database_name_reporting.enabled",
        "Distributed tracing settings",
        "distributed_tracing.enabled",
        "Span event configuration",
        "span_events.enabled",
        "span_events.attributes.enabled",
        "span_events.attributes.include",
        "span_events.attributes.exclude",
        "Event harvest configuration",
        "Usage example",
        "event_harvest_config.harvest_limits.analytic_event_data",
        "event_harvest_config.harvest_limits.custom_event_data",
        "event_harvest_config.harvest_limits.span_event_data",
        "event_harvest_config.harvest_limits.error_event_data",
        "Event loop visibility settings",
        "event_loop_visibility.enabled",
        "event_loop_visibility.blocking_threshold",
        "Garbage collection runtime metrics settings",
        "gc_runtime_metrics.enabled",
        "gc_runtime_metrics.top_object_count_limit",
        "Other configuration settings",
        "utilization.detect_aws",
        "utilization.detect_azure",
        "utilization.detect_gcp",
        "utilization.detect_pcf",
        "utilization.detect_docker",
        "slow_sql.enabled",
        "thread_profiler.enabled",
        "cross_application_tracer.enabled",
        "strip_exception_messages.enabled",
        "strip_exception_messages.whitelist",
        "startup_timeout",
        "shutdown_timeout",
        "compressed_content_encoding",
        "Heroku",
        "heroku.use_dyno_names",
        "heroku.dyno_name_prefixes_to_shorten",
        "Built-in instrumentation",
        "Example: Disabling MySQLdb database query instrumentation"
      ],
      "title": "Python agent configuration",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Configuration"
      ],
      "external_id": "fbf3e79a0cdd654ffc6b8539840c5cccd8a38ef4",
      "image": "https://docs.newrelic.com/static/0bbb623699fa652795cba242b01caa6b/8c557/diagram-python-config-precedence_0.png",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/configuration/python-agent-configuration/",
      "published_at": "2021-06-20T19:41:55Z",
      "updated_at": "2021-06-03T16:54:13Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent lets you change the default agent behavior agent using configuration options. The only required Python agent configuration setting is the license key. The license key identifies the account where the agent reports application data. Depending on how you are hosting your application, the license key can be provided via a configuration file or an environment variable. Configuration methods and precedence The primary way to configure the Python agent is via the configuration file, which is generated as part of the standard install process. It is also possible to set a limited number of configuration options using server-side configuration in the UI or by using environment variables. You can also specify some settings on a per-request basis by passing settings with the WSGI request environ dictionary. The Python agent follows this order of precedence for configuration: With the Python agent, per-request options override server-side config. If enabled, server-side config overrides all corresponding values in the agent config file, even if the server-side values are left blank. The agent config file overrides environment variables. Environment variables override the agent defaults. Here are detailed descriptions of each configuration method: Agent configuration file Typically you configure your Python agent from a local configuration file on the agent's host system. Supply the path to the config file at startup using one of these methods: When you call newrelic.agent.initialize(), provide the path to the config file as the first argument. OR Set the NEW_RELIC_CONFIG_FILE environment variable. If you use the newrelic-admin wrapper script, you must use the environment variable because the wrapper script calls the agent automatically. The configuration file uses a structure similar to Microsoft Windows .ini files. For more information, see the Python ConfigParser module's file format documentation. Tip A sample configuration file is included with the Python agent as newrelic/newrelic.ini. You can also generate one from the newrelic-admin script using the generate-config command, or download a copy from our download repo. Server-side configuration Tip Owner or Admins Server-side configuration allows you to configure certain settings in the New Relic One UI. This applies your changes automatically to all agents even if they run across multiple hosts. Where available, this document includes the UI labels for server-side config under individual config options as the Server-side label. Important If server-side config is enabled, the agent ignores any value in the config file that could be set in the UI. Even if the UI value is empty, the agent treats this as an empty string and does not use the agent config file. Environment variables Environment variables allow you to override the defaults for certain core settings. If the equivalent setting is explicitly listed in the agent config file, the config file settings take precedence over the environment variable. Where available, environment variables are documented below under individual config options as the Environ variable. For simple configurations, you can use the environment variables in conjunction with server-side configuration and avoid the agent config file altogether. This is the default setup with Heroku, where installing the New Relic add-on automatically populates the necessary environment variables. Environment variable Configuration setting NEW_RELIC_LICENSE_KEY license_key NEW_RELIC_APP_NAME app_name NEW_RELIC_MONITOR_MODE monitor_mode NEW_RELIC_DEVELOPER_MODE developer_mode NEW_RELIC_LOG log_file NEW_RELIC_LOG_LEVEL log_level NEW_RELIC_HIGH_SECURITY high_security NEW_RELIC_PROXY_SCHEME proxy_scheme NEW_RELIC_PROXY_HOST proxy_host NEW_RELIC_PROXY_PORT proxy_port NEW_RELIC_PROXY_USER proxy_user NEW_RELIC_PROXY_PASS proxy_pass NEW_RELIC_AUDIT_LOG audit_log_file NEW_RELIC_STARTUP_TIMEOUT startup_timeout NEW_RELIC_SHUTDOWN_TIMEOUT shutdown_timeout NEW_RELIC_LABELS labels NEW_RELIC_PROCESS_HOST_DISPLAY_NAME process_host.display_name NEW_RELIC_API_KEY api_key NEW_RELIC_CA_BUNDLE_PATH ca_bundle_path NEW_RELIC_DISTRIBUTED_TRACING_ENABLED distributed_tracing.enabled NEW_RELIC_FEATURE_FLAG feature_flag Per-request configuration For certain WSGI servers, you can override the app name and capture attributes settings on a per-request basis. This is possible with WSGI servers where you can define additional key/value pairs that are passed into the per-request WSGI environ dictionary. Set these values with the strings on, off, true, false, 1 and 0. If set from a configuration mechanism implemented using Python code, Python objects evaluating to True or False will also be accepted. Example: Apache/mod_wsgi app name In the Apache/mod_wsgi server, you can use the SetEnv directive to override config settings (optionally inside a Location or Directory block). For example, you could override the app name for a complete virtual host, or for a subset of URLs handled by the WSGI application for that virtual host. In addition to being able to override certain agent configuration settings, you can set other per-request configuration settings with their WSGI environment key: newrelic.set_background_task If set to true, this web transaction will instead be reported as a non-web transaction. newrelic.ignore_transaction If set to true, this web transaction will not be reported. newrelic.suppress_apdex_metric If set to true, no Apdex metric will be generated for this web transaction. newrelic.suppress_transaction_trace If set to true, this web transaction cannot be recorded in a transaction trace. newrelic.disable_browser_autorum If set to true, this disables automatic insertion of the JavaScript header/footer for page load timing (sometimes referred to as real user monitoring or RUM). Only applicable if auto-insertion is available for your web framework. Important Using a WSGI middleware to set these values will not work where the Python agent's own WSGI application wrapper was applied at an outer scope. In these cases you must make calls to the agent API to achieve the same outcome. Multiple environment configuration The agent reads its primary configuration from an agent config section called newrelic. You can provide overrides for specific deployment environments (for example, Development, Staging, Production) in additional sections. Preface these sections with [newrelic:environment], where environment is replaced with the name of your environment. To specify that the agent should use an environment-based configuration, use one of these methods: When you call newrelic.agent.initialize(), provide the environment name as the second argument. OR Set the NEW_RELIC_ENVIRONMENT environment variable to the environment name. If no environment is specified, the agent will use the default settings as specified in the newrelic agent config section. The basic structure of the configuration file is: [newrelic] ... default settings [newrelic:development] ... override settings [newrelic:staging] ... override settings [newrelic:production] ... override settings Copy General configuration settings These settings are available in the agent configuration file. license_key (REQUIRED) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LICENSE_KEY Specifies the license key of your New Relic account. This key associates your app's metrics with your New Relic account. app_name (HIGHLY RECOMMENDED) Type String Default Python Application Set in Per-request option, config file, environment variable Per-request option newrelic.app_name Environ variable NEW_RELIC_APP_NAME The application name used to aggregate data in the New Relic One UI. To report data to multiple apps at the same time, specify a list of names separated with a semicolon ;. Do not put a space before the semicolon, which causes the Python config parser to interpret the name as an embedded comment. monitor_mode Type Boolean Default true Set in Config file, environment variable Environ variable NEW_RELIC_MONITOR_MODE When true, the agent collects performance data about your app and reports this data to our data collector. developer_mode Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DEVELOPER_MODE When true, the agent will instrument your web app, but will not send any actual data. In this offline mode, you will not be billed for an active agent. Use developer mode to test new versions of the agent, or test the agent against third-party packages in a developer environment. Offline mode is not a way of running the APM locally, because the metrics the agent collects are not reported anywhere. log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LOG Sets the name of a log file, which is useful for debugging issues with the agent. This is not set by default, since the agent does not know your web app process's parent user or what directories that process has permission to write to. For detailed information, see Python agent logging. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct, and that the user that your web application runs as can write to the file. Tip Use an absolute path unless you are sure what the working directory of your application will be at startup. If you can't write out a log file, you can also use stderr and output to standard error output. This would normally result in output appearing in your web server log. log_level Type String Default info Set in Config file, environment variable Environ variable NEW_RELIC_LOG_LEVEL Sets the level of detail of log messages, if you've set the log file location. This log_level will not affect the Python logging module log level. Possible values, in increasing order of detail, are critical, error, warning, info, and debug. To report agent issues, the most useful setting is debug. However, debug generates a lot of information very quickly, so do not keep the agent at this level for longer than it takes to reproduce your problem. high_security Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_HIGH_SECURITY High security mode enforces certain security settings and prevents them from being overridden, so that no sensitive data is sent to us. Enabling high security mode means that request parameters are not collected, and you cannot send raw SQL. To activate high security mode, set it to true in the local .ini configuration file and activate it in the Account Settings in the UI. For more information, see High security. proxy_scheme, proxy_host, proxy_port, proxy_user, proxy_pass Type Strings Default (none) Set in Config file, environment variable Environ variables NEW_RELIC_PROXY_SCHEME NEW_RELIC_PROXY_HOST NEW_RELIC_PROXY_PORT NEW_RELIC_PROXY_USER NEW_RELIC_PROXY_PASS By default, the Python agent attempts to directly connect to our servers. If there is a firewall between your host and the our collector that requires you to use an HTTP proxy, set proxy_host and proxy_port to the required values for your HTTP proxy. If proxy authentication is implemented by the HTTP proxy, also set proxy_user and proxy_pass. The proxy_scheme setting dictates what protocol scheme is used to talk to the HTTP proxy. When set to http, the agent uses a SSL tunnel through the HTTP proxy for end-to-end encryption. Instead of setting the proxy_scheme, proxy_host and proxy_port settings, you can also set the proxy_host setting to a valid URI for the proxy. Include the scheme, host, and port; for example, http://proxy-host:8000. This also works if you set the details of the HTTP proxy with the NEW_RELIC_PROXY_HOST environment variable. Tip Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending whether ssl is disabled or enabled. If you are upgrading from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the ssl setting for backwards compatibility. As proxies are usually only configured to accept proxy requests via the http protocol scheme, not setting proxy_scheme may result in a failure. audit_log_file Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_AUDIT_LOG Sets the name of the audit log file. If set, the agent logs details of messages passed back and forth between the monitored process and the collector. This allows you to evaluate the security of the Python agent. Use an absolute path unless you are sure what your app's working directory will be at startup. Whatever you set this to, ensure the permissions for the containing directory and the file itself are correct. Also ensure your web app's parent user can write to the file. Caution Do not use audit logging on an ongoing basis, especially in a production environment. Because the agent does not truncate or rotate the log file, the log file can grow very quickly. labels (tags) Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_LABELS Adds tags. Specify name:value separated by a colon :, and separate additional tags with semicolons ;. Two tags Server:One;Data Center:Primary Copy process_host.display_name Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_PROCESS_HOST_DISPLAY_NAME Sets the hostname to be displayed in the APM UI. If set, this overrides the default hostname that the agent captures automatically. api_key Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_API_KEY Sets the api_key to be used with newrelic-admin record-deploy. ca_bundle_path Type String Default (none) Set in Config file, environment variable Environ variable NEW_RELIC_CA_BUNDLE_PATH Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Tip This configuration option is only available in Python agent versions 4.2.0 and newer. apdex_t Type Float Default 0.5 Set in Config file, environment variable Environ variable NEW_RELIC_APDEX_T We'll record transaction traces when they exceed this threshold. The format is a number of seconds (decimal points allowed). See our glossary entry for apdex_t Attributes Attributes are key-value pairs that provide information for transaction traces, traced errors, browser monitoring, and transaction events. In addition to configuring attributes for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see Python agent attributes, Enabling and disabling attributes, and Attribute examples. attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes. attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled, attribute keys found in this list will be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent to us. Keys in the list should be space-separated as shown below: key1 key2 key3 Copy Rules for attributes can be found on the agent attributes page. Transaction tracer configuration Important Do not use brackets [suffix] at the end of your transaction name. The agent automatically strips brackets from the name. Instead, use parentheses (suffix) or other symbols if needed. For more information about transaction traces, see Transaction traces. transaction_tracer.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable transaction tracing? If enabled, the transaction tracer captures deep information about slow transactions. transaction_tracer.transaction_threshold Type Positive float or string (apdex_f) Default apdex_f Set in Server-side config, config file Server-side label Threshold Threshold in seconds for when to collect a transaction trace. When the response time of a controller action exceeds this threshold, the agent records a transaction trace. Valid values are any positive float, or apdex_f (four times apdex_t). transaction_tracer.record_sql Type String Default obfuscated Set in Server-side config, config file Server-side label Record SQL? When the transaction tracer is enabled, the agent can record SQL statements. The recorder has three modes: off (sends no SQL), raw (sends the SQL statement in its original form), and obfuscated (strips out numeric and string literals). Most web frameworks (including Django) parameterize SQL queries so they do not actually contain the values used to fill out the query. If you use raw mode with one of these frameworks, the Python agent will only see the SQL prior to insertion of values. The parametrized SQL will look much like obfuscated mode. transaction_tracer.stack_trace_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Stack trace threshold Threshold in seconds for when to collect stack traces from SQL calls. When SQL statements exceed this threshold, the agent captures the current stack trace. This is helpful for pinpointing where long SQL calls originate in an application. transaction_tracer.explain_enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable SQL query plans? Determines whether the Python agent will capture query plans for slow SQL queries. Only supported in MySQL and PostgreSQL. transaction_tracer.explain_threshold Type Float Default 0.5 Set in Server-side config, config file Server-side label Query plan threshold Queries in transaction traces that exceed this threshold will report slow query data and any available explain plans. Explain plan collection will not happen if transaction_tracer.explain_enabled is false. transaction_tracer.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to transaction traces regardless on how this configuration setting (transaction_tracer.attributes.enabled) is set. transaction_tracer.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for transaction traces, all attribute keys found in this list will be sent to us in transaction traces. For more information, see the agent attribute rules. transaction_tracer.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in transaction traces. For more information, see the agent attribute rules. transaction_tracer.function_trace Type String Default (none) Set in Config file For the specified functions or methods, the agent will capture additional function timing instrumentation. Specify these names in the form module:function or module:class.function. Transaction segment configuration Here are Transaction segment settings available via the agent configuration file. transaction_segments.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for segments of transaction traces. If attributes.enabled at the root level is false, no attributes will be sent to segments of transaction traces regardless on how this configuration setting (transaction_segments.attributes.enabled) is set. transaction_segments.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for segments of transaction traces, all attribute keys found in this list will be sent in segments of transaction traces. For more information, see the agent attribute rules. transaction_segments.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in segments of transaction traces. For more information, see the agent attribute rules. Error collector configuration Here are error collector settings available via the agent configuration file. Tip For an overview of error configuration in APM, see Manage errors in APM. error_collector.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable error collection? If enabled, the error collector captures information about uncaught exceptions. error_collector.ignore_classes Type String Default (none) Set in Server-side config, config file Server-side label Ignore these errors To stop collecting specific errors, set this to a space-separated list of the Python exception type names to ignore. Use the form module:class for the exception name. Tip Before version 6.4.0 of the agent, this setting was named error_collector.ignore_errors. If your configuration file still uses ignore_errors, update your agent to use ignore_classes. error_collector.ignore_status_codes Type String Default 100-102 200-208 226 300-308 404 Set in Server-side config, config file Server-side label Ignore these status codes Lists HTTP status codes which the agent should ignore rather than record as errors. List additional status codes as integers separated by spaces, and specify ranges with a hyphen - separator between the start and end values. To add one of the default codes to your allow list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option can only be set in server-side configuration in Python agent versions 6.4.0 and newer. error_collector.expected_classes Type String Default (none) Set in Server-side config, config file Server-side label Expect these error class names Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM. Set this to a space-separated list of the Python exception type names to be expected. Use the form module:class for the exception name. Tip This configuration option is only available in Python agent versions 6.4.0 and newer. error_collector.expected_status_codes Type String Default (none) Set in Server-side config, config file Server-side label Expect these status codes Prevents specified HTTP status codes from affecting error rate or Apdex score while still reporting the errors to APM. List status codes as integers separated by spaces and specify ranges with a hyphen - separator between the start and end values. To negate one of the codes in your list, preface the code with an exclamation point !. This setting is only compatible with some web frameworks, as some frameworks do not use exceptions to return HTTP responses. Tip This configuration option is only available in Python Agent versions 6.4.0 and newer. error_collector.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for traced errors. If attributes.enabled is false at the root level, then no attributes will be sent to traced errors regardless on how this configuration setting (error_collector.attributes.enabled) is set. error_collector.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for traced errors, all attribute keys found in this list will be sent to in traced errors. For more information, see the agent attribute rules. error_collector.attributes.exclude Type List of strings Default (none) Set in Config file Attribute keys found in this list will not be sent to in traced errors. For more information, see the agent attribute rules. error_collector.capture_events Type Boolean Default true Set in Config file If enabled, the error collector captures event data for advanced analytics. For more information, see APM Errors. Browser monitoring settings Here are browser monitoring settings available via the agent configuration file. browser_monitoring.enabled Type Boolean Default true Set in Config file Enables browser monitoring. For more information, see Page load timing in Python. Important Before enabling browser monitoring in the config file, enable it in the application settings in the browser monitoring UI. browser_monitoring.auto_instrument Type Boolean Default true Set in Config file For supported Python web frameworks, this setting enables auto-insertion of the browser monitoring JavaScript fragments. browser_monitoring.content_type Type String Default text/html Set in Config file Specify the HTML Content-Type(s) that our browser monitoring agent should auto-instrument. Add additional entries in a space-separated list. Instrument xhtml+xml page responses If you are generating HTML page responses and using the Content-Type of application/xhtml+xml, you can override the allowed content types to list both this content type and the default text/html by using: browser_monitoring.content_type = text/html application/xhtml+xml Copy Important The browser monitoring JavaScript snippet prevents the page from validating as application/xhtml+xml, although the page should load and render in end-user browsers. browser_monitoring.attributes.enabled Type Boolean Default false Set in Config file This setting can be used to turn on or off all attributes for browser monitoring. This is the data which gets sent to page view events. If attributes.enabled is false at the root level, no attributes will be sent up in browser monitoring regardless on how the configuration setting (browser_monitoring.attributes.enabled) is set. browser_monitoring.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for browser_monitoring, all attribute keys found in this list will be sent in page views. For more information, see the agent attribute rules. browser_monitoring.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in page views. For more information, see the agent attribute rules. Transaction events settings Here are Transaction events settings available via the agent configuration file. Tip These configuration settings used to be called analytic_events. If your configuration file still uses analytic_events, update your agent to use transaction_events. transaction_events.enabled Type Boolean Default true Set in Config file Transaction event data allows the use of additional information such as histograms and percentiles. transaction_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off all attributes for transaction events. If attributes.enabled is false at the root level, then no attributes will be sent to transaction events regardless on how this configuration setting (transaction_events.attributes.enabled) is set. transaction_events.attributes.include Type List of Strings Default (none) Set in Config file If attributes are enabled for transaction events, all attribute keys found in this list will be sent in transaction events. For more information, see the agent attribute rules. transaction_events.attributes.exclude Type List of Strings Default (none) All attribute keys found in this list will not be sent to in transaction events. Note that excluding attributes from transaction events does not exclude from span events. For more information, see the agent attribute rules. Custom events settings Here are custom events settings available via the agent configuration file. custom_insights_events.enabled Type Boolean Default true Set in Config file Allow recording of events to the Insights custom events API via record_custom_event(). Datastore tracer settings These datastore tracer settings are available via the agent configuration file: datastore_tracer.instance_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects datastore instance metrics (such as host and port) for some database drivers. These are also reported on slow query traces and transaction traces. datastore_tracer.database_name_reporting.enabled Type Boolean Default true Set in Config file When enabled, the agent collects database name for some database drivers. The database name is reported on slow query traces and transaction traces. Distributed tracing settings Important Enabling distributed tracing disables cross application tracing and has other effects on APM features. Before enabling, read the transition guide. Requires Python agent version 4.2.0.100 or higher. Distributed tracing lets you see the path that a request takes as it travels through a distributed system. Settings include: distributed_tracing.enabled Type Boolean Default false Set in Config file, environment variable Environ variable NEW_RELIC_DISTRIBUTED_TRACING_ENABLED Set this to true to enable distributed tracing. Span event configuration Span events are collected for distributed tracing. Distributed tracing must be enabled to report span events. Configuration options include: span_events.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off whether the Python agent sends spans. span_events.attributes.enabled Type Boolean Default true Set in Config file This setting can be used to turn on or off for all attributes for span events. If attributes.enabled at the root level is false, no attributes will be sent to span events regardless on how this configuration setting (span_events.attributes.enabled) is set. For more information, see the agent attribute rules. span_events.attributes.include Type List of strings Default (none) Set in Config file If attributes are enabled for span events, all attribute keys found in this list will be sent in span events. For more information, see the agent attribute rules. span_events.attributes.exclude Type List of Strings Default (none) Set in Config file All attribute keys found in this list will not be sent in span events. For more information, see the agent attribute rules. Event harvest configuration Event harvest settings limit the amount of event type data sent to New Relic. When you use these settings, consider these important points: Event harvest settings affect the limits for a single instance of the agent, and not across the entire application. See the usage example below for how to set limits across an entire application. Real time streaming sends data every five seconds (12 times per minute), but the event harvest settings still affect the rate in events per minute. Enabling or disabling real time streaming does not require changing these settings. With real time streaming (enabled by default), New Relic will display the event harvest limits for entities in five second intervals. This means, for example, when you set a limit value of 1200 in the config file, you'll see it as 100 in New Relic. Usage example Let's say an application is deployed across 10 hosts, each running four processes per host. To limit the number of span events to 10,000 events per minute for the entire application, divide that number by 10 hosts. Then divide again by four processes per host. 10000 / (10 * 4) = 250 Based on that calculation, the final setting is: event_harvest_config.harvest_limits.span_event_data = 250 Event harvest configuration settings include: event_harvest_config.harvest_limits.analytic_event_data Type Integer Default 1200 Set in Config file Limit for analytic events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.custom_event_data Type Integer Default 1200 Set in Config file Limit for custom events per minute sent by an instance of the Python agent to New Relic. Custom events are created through the Python Telemetry SDK. event_harvest_config.harvest_limits.span_event_data Type Integer Default 1000 Set in Config file Limit for span events per minute sent by an instance of the Python agent to New Relic. event_harvest_config.harvest_limits.error_event_data Type Integer Default 100 Set in Config file Limit for error events per minute sent by an instance of the Python agent to New Relic. Event loop visibility settings Important Requires Python agent version 5.0.0.124 or higher. Event loop visibility surfaces information about transactions that block the event loop. The agent will generate information about transactions that have waited a significant amount of time to acquire control of the event loop. Settings include: event_loop_visibility.enabled Type Boolean Default true Set in Config file Set this to false to disable event loop information. event_loop_visibility.blocking_threshold Type Float Default 0.1 Set in Config file Threshold in seconds for how long a transaction must block the event loop before generating event loop information. Garbage collection runtime metrics settings Important Requires Python agent version 6.2.0.156 or higher. These garbage collection runtime metrics settings are available via the agent configuration file: gc_runtime_metrics.enabled Type Boolean Default false Set in Config file When enabled, the agent will generate and send garbage collection metrics. gc_runtime_metrics.top_object_count_limit Type Integer Default 5 Set in Config file The agent reports object count metrics for the most common object types being collected by the garbage collector. For each object type, this setting allows you to set the maximum number of individual metrics that will be sampled. Other configuration settings Here are assorted other settings available via the agent configuration file. utilization.detect_aws Type Boolean Default true If true, the agent automatically detects that it is running in an AWS environment. utilization.detect_azure Type Boolean Default true If true, the agent automatically detects that it is running in an Azure environment. utilization.detect_gcp Type Boolean Default true If true, the agent automatically detects that it is running in a Google Cloud Platform environment. utilization.detect_pcf Type Boolean Default true If true, the agent automatically detects that it is running in a Pivotal Cloud Foundry environment. utilization.detect_docker Type Boolean Default true If true, the agent automatically detects that it is running in Docker. slow_sql.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable Slow SQL? If enabled, the agent captures details from long-running SQL database queries. thread_profiler.enabled Type Boolean Default true Set in Server-side config, config file Server-side label Enable thread profiler? Enables you to schedule thread profiling sessions. The thread profiler will periodically capture a snapshot of the call stack for each active thread in the application to construct a statistically representative call tree. cross_application_tracer.enabled Type Boolean Default true Set in Config file Enables cross application tracing, which connect your apps and services within your service-oriented architecture. strip_exception_messages.enabled Type Boolean Default false Set in Config file If enabled, exception messages will be stripped from error traces before they are sent to the collector, in order to prevent the inadvertent capture of sensitive information. This option is automatically enabled in high security mode. strip_exception_messages.whitelist Type String Default (none) Set in Config file Exceptions listed in your allow list will not have their messages stripped, even if strip_exception_messages.enabled is true. The allow list is a space-separated string of exception types, each in the form of module:exception_name. List built-in exceptions as exception_name; you do not need to prepend module: to them. Example: Built-in exception and user-defined exception KeyError my_module:MyException Copy startup_timeout Type Float Default 0.0 Set in Config file, environment variable Environ variable NEW_RELIC_STARTUP_TIMEOUT By default, the agent starts when it receives the first transaction (either web or non-web). The agent then starts in parallel, ensuring that this initial request is not delayed. However, the agent does not record the details of this initial request because the agent cannot collect data until registration is complete. To override this, you can set a startup timeout in seconds. The agent will then pause the initial transaction and wait for registration to complete. Important Since startup_timeout delays your app start, we recommend only setting a startup timeout for background task queuing systems, not web applications. shutdown_timeout Type Float Default 2.5 Set in Config file, environment variable Environ variable NEW_RELIC_SHUTDOWN_TIMEOUT On process shutdown, the agent attempts one final upload to the collector. To prevent the agent running indefinitely in case of an issue, the process shuts down normally if the shutdown_timeout threshold is reached. This shutdown can result in data loss, but the agent prioritizes key metric data during the upload process. For background task queuing systems, especially those which run a small number of tasks per process, you may want to increase the shutdown timeout to ensure the agent can upload all data on process shutdown. Tip The agent defaults to a 2.5 second timeout because Apache and many other web servers have a 3.0 second process termination timeout. The agent exits at 2.5 seconds to allow atexit cleanup code registered for the process to run. compressed_content_encoding Type String Default gzip Set in Config file If the data compression threshold is reached in the payload, the agent compresses data, using gzip compression by default. The config option compression_content_encoding can be set to deflate to use deflate compression. Heroku heroku.use_dyno_names Type Boolean Default true Environ variable NEW_RELIC_HEROKU_USE_DYNO_NAMES If true, the agent uses Heroku dyno names as the hostname. heroku.dyno_name_prefixes_to_shorten Type Array Default [\"scheduler\", \"run\"] Environ variable NEW_RELIC_HEROKU_DYNO_NAME_PREFIXES_TO_SHORTEN Ordinarily the agent reports dyno names with a trailing dot and process ID (for example, worker.3). You can remove this trailing data by specifying the prefixes you want to report without trailing data (for example, worker). Built-in instrumentation The Python agent instruments a range of Python packages/modules. This instrumentation only occurs when the target Python package/module is imported by an application. To disable default instrumentation, provide a special import-hook section corresponding to the name of the module that triggered instrumentation. Then set the enabled setting to false to disable instrumentation of that module. Example: Disabling MySQLdb database query instrumentation Add the following to the configuration file: [import-hook:MySQLdb] enabled = false Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 110.2737,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> configuration",
        "sections": "<em>Python</em> <em>agent</em> configuration",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " to configuring <em>attributes</em> for all four destinations with the general attribute settings below, they can also be configured on a per-destination basis. For more information, see <em>Python</em> <em>agent</em> <em>attributes</em>, Enabling and disabling <em>attributes</em>, and Attribute examples. <em>attributes</em>.enabled Type Boolean Default"
      },
      "id": "604454a1e7b9d25e645799ff"
    }
  ],
  "/docs/agents/python-agent/attributes/python-attribute-examples": [
    {
      "sections": [
        "Python agent attributes",
        "Python agent web transaction attributes",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "response.status",
        "thread.concurrency",
        "webfrontend.queue.seconds",
        "wsgi.input.bytes",
        "wsgi.input.calls.read",
        "wsgi.input.calls.readline",
        "wsgi.input.calls.readlines",
        "wsgi.input.seconds",
        "wsgi.output.bytes",
        "wsgi.output.calls.write",
        "wsgi.output.calls.yield",
        "wsgi.output.seconds",
        "Python agent message transaction attributes",
        "message.correlationId",
        "message.exchangeType",
        "message.headers.*",
        "message.queueName",
        "message.replyTo",
        "message.routingKey",
        "Python agent external trace attributes",
        "http.url",
        "Python agent database trace attributes",
        "db.instance",
        "host",
        "port_path_or_id",
        "sql",
        "peer.hostname",
        "peer.address",
        "db.statement",
        "db.operation",
        "Python agent datastore trace attributes",
        "Python agent span attributes",
        "error.class",
        "error.message",
        "Add custom attributes",
        "Important",
        "Add custom attributes to exceptions",
        "Upgrade your config file",
        "For more help"
      ],
      "title": "Python agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "806c873188185d5e74dc7ecef103bb377f6a0561",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/attributes/python-agent-attributes/",
      "published_at": "2021-06-20T21:36:31Z",
      "updated_at": "2021-05-28T11:05:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. We enable users to customize exactly which attributes will be sent to each of these destinations: Transaction traces Traced errors Transaction events Page views These attribute settings apply to Python agent version 2.56.0.42 or higher. To take advantage of all available features, update your Python agent to the latest release. Python agent web transaction attributes The following lists the attributes that can be configured in the Python agent for web transactions. For more information, see Python agent configuration: attributes. request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.userAgent The incoming request user-agent as read from the User-Agent request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.* Parameters from the query string of the request URL. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled request.uri The URI of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength Taken from the Content-Length response header, this specifies the size of the outgoing response in bytes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType Taken from the Content-Type response header, this specifies the content type of the outgoing response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.status The outgoing response status. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable thread.concurrency A measure of \"thread utilization,\" representing the number of threads handling concurrent requests. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable webfrontend.queue.seconds Time (in seconds) spent in request queuing. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.bytes Number of bytes received in the WSGI input stream (file-like object.) Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.read Number of calls to read() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readline Number of calls to readline() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readlines Number of calls to readlines() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.seconds Time (in seconds) to read WSGI input stream. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.bytes Number of bytes sent in the WSGI output response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.write Number of calls to write() by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.yield Number of calls to yield by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.seconds Time (in seconds) to send the WSGI response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable Python agent message transaction attributes The following sections list the attributes that can be configured in the Python agent for message transactions started by incoming message brokers like RabbitMQ. For more information, see Python agent configuration: attributes. message.correlationId The application-generated identifier used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.exchangeType The type of exchange this message was consumed from: direct, fanout, topic, or headers Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.headers.* The headers of the incoming message. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.queueName The name of the queue this message was consumed from. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled message.replyTo The callback queue used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.routingKey The routing key of the incoming message. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Python agent external trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by outgoing libraries, like httplib, boto3, requests, and so on, or when using the external trace API. For more information, see Python agent configuration: attributes. http.url The url of the outgoing call, stripped of any request parameters. Excluded when: A rule matching 'http.url' is present in the \"transaction_segments.attributes.exclude\" setting. (for segments) A rule matching 'http.url' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled Python agent database trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by database libraries like mysql, psycopg2, cx_Oracle, and so on, or when using the database trace API. For more information, see Python agent configuration: attributes. db.instance The name of the database used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments) If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled sql The SQLl used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Transaction segments: Enabled, reported as \"obfuscated\" SQL. peer.hostname The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the database, including the port or path information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled db.statement The SQL used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Span events: Enabled, reported as \"obfuscated\" SQL. db.operation The database operation that was performed by this span. Only to be included if db.statement is not applicable. Excluded when: The attribute db.statement is reported. Defaults: Transaction segments: Enabled Span events: Enabled Python agent datastore trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by datastore libraries like redis, memcache, pymongo, and so on, or when using the datastore trace API. For more information, see Python agent configuration: attributes. db.instance The name of the datastore instance used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments). If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting (for spans). Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled peer.hostname The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the datastore, including the port, path, or ID information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled Python agent span attributes The following sections list the attributes that can be configured in the Python agent for span events. For more information, see Python agent configuration: attributes. error.class The class of exception, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled error.message The exception message, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled Add custom attributes To capture additional custom attributes from your application, use newrelic.agent.add_custom_parameter(). For full reference see, Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Important Before creating custom attributes, review our list of reserved terms. Otherwise, unexpected results might occur. Add custom attributes to exceptions When using the newrelic.agent.notice_error() API call, you can pass in a dictionary of params that will be recorded as attributes on the traced error. Defaults: Transaction traces: Unavailable Error collector (traced errors): Enabled Transaction events: Unavailable Page views (browser monitoring): Unavailable Upgrade your config file Upgrade your newrelic.ini configuration file when you upgrade to Python agent 2.56.0.42 or higher. For more information about deprecated configuration settings, see Enabling and disabling attributes. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by our agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Python agent attributes) Attribute examples (scenarios and results of enabling and disabling different Python agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.17264,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "sections": "<em>Python</em> <em>agent</em> <em>attributes</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " configuration settings, see Enabling and disabling <em>attributes</em>. For more help Additional documentation resources include: <em>Agent</em> <em>attributes</em> (types, destinations, and limits for <em>attributes</em> used by our <em>agents</em>) Enabling and disabling <em>attributes</em> (properties, rules, and backwards compatibility information for <em>Python</em> <em>agent</em> <em>attributes</em>) Attribute examples (scenarios and results of enabling and disabling different <em>Python</em> <em>agent</em> <em>attributes</em>)"
      },
      "id": "6043b71264441fff7e378ee7"
    },
    {
      "sections": [
        "APM agent security: Python",
        "Default security settings",
        "High security mode settings",
        "Custom security settings",
        "Caution",
        "Tip"
      ],
      "title": "APM agent security: Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "ad1cc218ab320532980be60513a8ce52b5e209c3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/apm-agent-security-python/",
      "published_at": "2021-06-20T21:37:24Z",
      "updated_at": "2021-06-03T06:22:45Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent default security settings automatically provide security for your data to ensure data privacy and to limit the kind of information we ingest. You may have business reasons to change these settings. If you want to restrict the information that we ingest you can enable high security mode. If high security mode or the default settings do not work for your business needs, you can apply custom settings. For more information about security measures, see our security and privacy documentation, or visit the New Relic security website. Default security settings By default, here is how the Python agent handles the following potentially sensitive data: Request parameters: The agent does not capture HTTP request parameters. SQL: The agent sets SQL recording to obfuscated, which removes the potentially sensitive numeric and string literal values. High security mode settings When you enable high security mode, the default settings are locked so that users cannot change them. In addition: The agent does not collect message queue parameters. You cannot create custom events. The agent strips exception messages from errors. Custom security settings Caution If you customize security settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: Python agent configuration file Custom attributes Python agent API Tip Some of these settings can be changed using environment variables. See Python agent environment variables for the complete list. Setting Effects on data security audit_log_file string Default: (none) If you use this to set the name of the audit log file, the agent will log details of messages passed back and forth between the monitored process and the data collector. You can then evaluate the information that the agent sends to the collector to see if it includes sensitive information. high_security boolean Default: false To enable high security mode, set this to true and enable high security. This restricts the information you can send. proxy_host string Default: (none) Some proxies default to using HTTP, which is a less secure protocol. attributes.enabled boolean Default: true By default, you are sending attributes. If you do not want to send attributes, set this to false. attributes.exclude string Default: (none) If there are specific attribute keys that you do not want to send in transaction traces, identify them using attributes.exclude. This restricts the information sent. Consider if you want to exclude these potentially sensitive attributes using attributes.exclude or if you need the information sent: request.headers.*: Removes all request headers. (Note that HTTP headers that contain sensitive data such as cookie and authorization are never collected.) response.headers.*: Removes all response headers. custom_insights_events.enabled boolean Default: true By default, the agent records events sent to the Event API via record_custom_event(). If you enable high security mode, this is automatically set to false. transaction_tracer.record_sql string Default: obfuscated By default, transaction_tracer.record_sql is set to obfuscated, which strips out the numeric and string literals. If you do not want the agent to capture query information, set this to off. If you want the agent to capture all query information in its original form, set this to raw. When you enable high security mode, this is automatically set to obfuscated. strip_exception_messages.enabled boolean Default: false If you enable high security mode, this is automatically set to true. If you are not using high security mode but want to strip messages from all exceptions except those in your allow list, set this to true.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.33332,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "APM <em>agent</em> security: <em>Python</em>",
        "sections": "APM <em>agent</em> security: <em>Python</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " settings, it may impact the security of your application. If you need different security settings than default or high security mode, you can customize these settings: <em>Python</em> <em>agent</em> configuration file Custom <em>attributes</em> <em>Python</em> <em>agent</em> API Tip Some of these settings can be changed using environment"
      },
      "id": "6044103f64441fbcef378ef7"
    },
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-06-20T09:05:27Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 112.12218,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: <em>Python</em> <em>agent</em> 1.0.3.138 <em>Attributes</em> from WSGI requests: <em>Attributes</em> captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_<em>AGENT</em> now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters."
      },
      "id": "6043ff58196a67822f960f94"
    }
  ],
  "/docs/agents/python-agent/back-end-services/python-agent-celery": [
    {
      "sections": [
        "Compatibility and requirements for the Python agent",
        "Basic requirements",
        "Python package instrumentation",
        "Python version support",
        "Support for new Python releases",
        "End of support for Python releases reaching EOL",
        "Connect the agent to other Full-Stack Observability capabilities"
      ],
      "title": "Compatibility and requirements for the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "bac256a07ebdd3c81f4f7eefdee029990831a57e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/compatibility-requirements-python-agent/",
      "published_at": "2021-06-20T21:37:24Z",
      "updated_at": "2021-03-11T04:33:50Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before you install New Relic's Python agent, make sure your system meets these requirements. Basic requirements The Python agent supports many of the most common Python web frameworks. Additional configuration may be required depending on your specific hosting mechanism, hosting service, web framework, or back-end services. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The Python agent does not support Windows environments. Python Python (CPython/PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8 Recommendation: Use Python version 3.6 or higher with our agent. Python versions 2.6 and 3.3 are supported only by Python agent versions 3.4.0.95 or lower. Python version 3.4 is supported only by Python agent versions 4.20.0.120 or lower. Python versions 2.7 and 3.5 follow our end of life (EOL) support requirements. Supported web frameworks Supported web frameworks include: Aiohttp Bottle CherryPy Django Falcon FastAPI Flask gRPC Pylons Pyramid Sanic Starlette Tornado 6 Web2Py Unsupported frameworks Some WSGI servers, frameworks, and apps have special requirements. Although a specific Python WSGI web framework may not be supported, you can still use the agent. For unsupported frameworks, a breakout of time spent in key parts of the framework will not appear in web transaction performance breakdowns and transaction traces. In addition, the agent will not be able to meaningfully group any web transactions handled by specific handlers in your code that you use to make them more useful and targeted. In these situations you can use the Python agent API to name web transactions or add custom instrumentation. Hosting Web hosting mechanisms compliant with WSGI 1.0 (PEP 333). For example, you can install the Python agent in a Google App Engine flexible environment. Security requirements As a standard security measure for data collection, your app server must support SHA-2 (256-bit). SHA-1 is not supported. Other monitoring software If your application uses other monitoring software besides ours, we cannot guarantee that our agent will work correctly and we cannot offer technical support. For more information, see Errors while using other monitoring software. Python package instrumentation The agent also provides instrumentation for a range of other Python packages and modules. Instrumentation includes database queries, memcache requests, external service requests, instance-level details, and more. The results will appear automatically in APM's user interface within web transaction performance breakdowns and transaction traces for slow transactions. Python version support The agent in general will support all released and active Python branches. However, to keep up with upcoming changes, the agent will also follow this Python version support schedule. The version support policy does not replace the general New Relic agent and plugin end-of-life (EOL) policy. Support for new Python releases The following are proposed time ranges. The actual release date may vary. Python version Active long term support (LTS) start date Initial release date of Python agent with support 3.8 October 21, 2019 November-December 2019 End of support for Python releases reaching EOL The following are proposed time ranges. The actual release date may vary. Python version End of life (EOL) date Initial release date of Python agent dropping support 3.5 September 13, 2020 Deprecated as of Python agent version 5.22.0.151 Python agent versions released after December 22, 2020 do not support Python 3.5. For more information, see our Python agent release notes and our Explorers Hub post. 2.7 January 1, 2020 TBD Connect the agent to other Full-Stack Observability capabilities The Python agent integrates with other capabilities to give you end-to-end visibility: Product Integration Browser monitoring The Python agent automatically injects the browser JavaScript agent when you enable auto-instrumentation. After enabling browser injection, you can view browser data in the APM Summary page and quickly switch between the APM and browser data for a particular app. For configuration options and manual instrumentation, see Browser monitoring and the Python agent. Infrastructure monitoring When you install the Infrastructure monitoring and APM agents on the same host, they automatically detect one another. You can then view a list of hosts in the APM UI, and filter your Infrastructure hosts by APM app in the Infrastructure monitoring UI. For more information, see APM data in Infrastructure. Synthetic monitoring Synthetic transaction traces connect requests from synthetic monitors to the underlying APM transaction.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 87.76128,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "sections": "Compatibility and requirements for the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " framework, or <em>back</em>-<em>end</em> <em>services</em>. Resource Requirements Operating systems UNIX-like operating systems including Linux, Solaris, FreeBSD, and macOS. The <em>Python</em> <em>agent</em> does not support Windows environments. <em>Python</em> <em>Python</em> (CPython&#x2F;PyPy) versions supported: 2.7, 3.5, 3.6, 3.7, 3.8 Recommendation: Use <em>Python</em>"
      },
      "id": "6044108b64441fb65f378efc"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-06-20T21:34:55Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 80.02002,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these <em>services</em> together in a trace Use accept_distributed_trace_payload. <em>Agent</em> configuration, initialization, shutdown These calls help you manage <em>Python</em> <em>agent</em> behavior"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "Update the Python agent",
        "Update with Python package index (PyPi)",
        "Tip",
        "Download package manually",
        "Python agent versions not supported",
        "Update unsupported agent versions",
        "Important"
      ],
      "title": "Update the Python agent",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Installation"
      ],
      "external_id": "c588f21742d1c26983012738479f7184343794ac",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/installation/update-python-agent/",
      "published_at": "2021-06-20T09:05:27Z",
      "updated_at": "2021-05-28T03:18:44Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To take full advantage of our latest features, enhancements, and important security patches, we recommend you update your Python agent to the latest version. For additional information about specific agent updates, refer to the Python agent release notes. Update with Python package index (PyPi) The Python agent package is listed on PyPi at http://pypi.python.org/pypi/newrelic. To update with a specific package, follow the corresponding instructions: Python package Installation procedures pip To update the newrelic package directly from PyPi, run: pip install --upgrade newrelic Copy If you have New Relic in your requirements.txt file, you can do a mass update of all required packages by running: pip install -r requirements.txt Copy easy_install To update using easy_install, run: easy_install --upgrade newrelic Copy Tip We recommend using pip rather than using easy_install, because pip will correctly remove old versions when updating the agent software. buildout Install the package by creating an appropriate section for the newrelic package using the zc.recipe.egg recipe. Download package manually To manually download the New Relic Python package: Remove the current New Relic package. Download the new package, then follow the Python agent installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the agent software. Python agent versions not supported End of life notification: As of January 26, 2015, we will no longer accept data from Python agent versions earlier than 2.42.0. These agent versions use an out-of-date protocol when communicating with our data collection services. In addition, many of these versions contain a potential security issue where they may incorrectly send sensitive data to our data collector. Update unsupported agent versions Important If you are updating from an older agent version, including major version jumps, review the following list for changes in functionality. Migration Comments 4.2.0.100 and higher Release notes: Python agent 4.2.0.100 Manual override for the path to your local CA bundle. This CA bundle will be used to validate the SSL certificate presented by our data collection service. Set with the Python agent config file. 4.0.0.99 Release notes: Python agent 4.0.0.99 Previously deprecated APIs removed: Transaction.add_user_attribute (use Transaction.add_custom_parameter) Transaction.add_user_attributes (use Transaction.add_custom_parameters) wrap_callable (use FunctionWrapper) Removed support for Python 2.6 and Python 3.3: Python 2.6 and Python 3.3 are no longer supported. Recommendation: Update your application to a supported version of Python in order to continue to receive updates to the Python agent. Python versions 2.6 and 3.3: These are supported only by Python agent versions 3.4.0.95 or lower. 3.0.0.89 Release notes: Python agent 3.0.0.89 Previously deprecated APIs removed: transaction (use current_transaction) name_transaction (use set_transaction_name) Application.record_metric (use Application.record_custom_metric) Application.record_metrics (use Application.record_custom_metrics) Transaction.record_metric (use Transaction.record_custom_metric) Transaction.name_transaction (use Transaction.set_transaction_name) Deprecated APIs: Transaction.add_user_attribute has been deprecated in favor of Transaction.add_custom_parameter. Transaction.add_user_attribute will be removed in a future release. Transaction.add_user_attributes has been deprecated in favor of Transaction.add_custom_parameters. Transaction.add_user_attributes will be removed in a future release. wrap_callable has been deprecated in favor of FunctionWrapper. wrap_callable will be removed in a future release. data-source admin command: The platform API (used by newrelic-admin data-source) has been removed. Please use data sources in place of the platform API. 2.104.0.86 Release notes: Python agent 2.104.0.86 SSL: Disabling SSL connections has been deprecated. SSL connections are enabled by default. In a future release, the option to disable SSL will be removed. 2.56.0.42 Release notes: Python agent 2.56.0.42 Deprecated config settings: Several configuration settings have been deprecated. The most commonly used of the deprecated settings are capture_params and ignored_params. To achieve the same functionality as the old settings, use the new attributes.include and attributes.exclude settings. 2.10.0.8 Release notes: Python agent 2.10.0.8 Deprecated API: Do not use the agent API function add_user_attribute(), which is now deprecated. Instead, use the add_custom_parameter() function. Optional: To display these parameters in browser traces, enable the browser_monitoring.capture_attributes agent configuration setting. At or below 2.0.0 Proxy settings: Python agent versions 2.0.0 or earlier do not provide the proxy_scheme setting, and the protocol scheme defaults to http or https depending on whether SSL is disabled or enabled. If you are updating from an older agent version and your config file doesn't include proxy_scheme, ensure you add the setting and set it appropriately. If you don't, the agent will continue to base the protocol scheme on the SSL setting for backwards compatibility. Proxies are usually only configured to accept proxy requests via the http protocol scheme. If you do not set proxy_scheme, this may result in a failure. 1.11.0.55 Release notes: Python agent 1.11.0.55 Thread profiling for WSGI servers: We have disabled the ability to get thread profiling information when a WSGI server uses coroutine libraries such as gevent or eventlet. This is because, due to the nature of how coroutines are implemented, we are not able to generate accurate usable data. 1.0.3.138 Release notes: Python agent 1.0.3.138 Attributes from WSGI requests: Attributes captured from WSGI request environments such as REQUEST_METHOD, HTTP_REFERER, and HTTP_USER_AGENT now appear in the UI under the Request environment category in error details and slow transaction traces. Previously they appeared in the UI under Custom parameters.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 79.01898,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Update the <em>Python</em> <em>agent</em>",
        "sections": "Update the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " package. Download the new package, then follow the <em>Python</em> <em>agent</em> installation procedures. Tip We recommend using pip rather than using manual installation, because pip will correctly remove old versions when updating the <em>agent</em> software. <em>Python</em> <em>agent</em> versions not supported <em>End</em> of life notification"
      },
      "id": "6043ff58196a67822f960f94"
    }
  ],
  "/docs/agents/python-agent/configuration/python-agent-configuration": [
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-06-20T21:34:55Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.68121,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. <em>Agent</em> <em>configuration</em>, initialization, shutdown These calls help you manage <em>Python</em> <em>agent</em> behavior"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "Python agent attributes",
        "Python agent web transaction attributes",
        "request.headers.accept",
        "request.headers.contentLength",
        "request.headers.contentType",
        "request.headers.host",
        "request.headers.referer",
        "request.headers.userAgent",
        "request.method",
        "request.parameters.*",
        "Tip",
        "request.uri",
        "response.headers.contentLength",
        "response.headers.contentType",
        "response.status",
        "thread.concurrency",
        "webfrontend.queue.seconds",
        "wsgi.input.bytes",
        "wsgi.input.calls.read",
        "wsgi.input.calls.readline",
        "wsgi.input.calls.readlines",
        "wsgi.input.seconds",
        "wsgi.output.bytes",
        "wsgi.output.calls.write",
        "wsgi.output.calls.yield",
        "wsgi.output.seconds",
        "Python agent message transaction attributes",
        "message.correlationId",
        "message.exchangeType",
        "message.headers.*",
        "message.queueName",
        "message.replyTo",
        "message.routingKey",
        "Python agent external trace attributes",
        "http.url",
        "Python agent database trace attributes",
        "db.instance",
        "host",
        "port_path_or_id",
        "sql",
        "peer.hostname",
        "peer.address",
        "db.statement",
        "db.operation",
        "Python agent datastore trace attributes",
        "Python agent span attributes",
        "error.class",
        "error.message",
        "Add custom attributes",
        "Important",
        "Add custom attributes to exceptions",
        "Upgrade your config file",
        "For more help"
      ],
      "title": "Python agent attributes",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Attributes"
      ],
      "external_id": "806c873188185d5e74dc7ecef103bb377f6a0561",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/attributes/python-agent-attributes/",
      "published_at": "2021-06-20T21:36:31Z",
      "updated_at": "2021-05-28T11:05:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Attributes are key-value pairs containing information that determines the properties of an event or transaction. We enable users to customize exactly which attributes will be sent to each of these destinations: Transaction traces Traced errors Transaction events Page views These attribute settings apply to Python agent version 2.56.0.42 or higher. To take advantage of all available features, update your Python agent to the latest release. Python agent web transaction attributes The following lists the attributes that can be configured in the Python agent for web transactions. For more information, see Python agent configuration: attributes. request.headers.accept The types as read from the HTTP Accept request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentLength The incoming request size in bytes as read from the Content-Length request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.contentType The incoming request content-type as read from the Content-Type request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.host The name from the HTTP host request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.referer The incoming request referer as read from the Referer request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.headers.userAgent The incoming request user-agent as read from the User-Agent request header. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.method The HTTP method of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable request.parameters.* Parameters from the query string of the request URL. Tip The capture_params property has been deprecated. However, if set to true, it will enable request parameters for transaction traces and traced errors. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled Page views (browser monitoring): Disabled request.uri The URI of the incoming request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentLength Taken from the Content-Length response header, this specifies the size of the outgoing response in bytes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.headers.contentType Taken from the Content-Type response header, this specifies the content type of the outgoing response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable response.status The outgoing response status. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Unavailable thread.concurrency A measure of \"thread utilization,\" representing the number of threads handling concurrent requests. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable webfrontend.queue.seconds Time (in seconds) spent in request queuing. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.bytes Number of bytes received in the WSGI input stream (file-like object.) Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.read Number of calls to read() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readline Number of calls to readline() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.calls.readlines Number of calls to readlines() by the WSGI server to handle request. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.input.seconds Time (in seconds) to read WSGI input stream. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.bytes Number of bytes sent in the WSGI output response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.write Number of calls to write() by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.calls.yield Number of calls to yield by the WSGI server to send the response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable wsgi.output.seconds Time (in seconds) to send the WSGI response. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Disabled Page views (browser monitoring): Unavailable Python agent message transaction attributes The following sections list the attributes that can be configured in the Python agent for message transactions started by incoming message brokers like RabbitMQ. For more information, see Python agent configuration: attributes. message.correlationId The application-generated identifier used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.exchangeType The type of exchange this message was consumed from: direct, fanout, topic, or headers Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.headers.* The headers of the incoming message. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.queueName The name of the queue this message was consumed from. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled message.replyTo The callback queue used in RPC configurations. Defaults: Transaction traces: Disabled Error collector (traced errors): Disabled Transaction events: Disabled message.routingKey The routing key of the incoming message. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Python agent external trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by outgoing libraries, like httplib, boto3, requests, and so on, or when using the external trace API. For more information, see Python agent configuration: attributes. http.url The url of the outgoing call, stripped of any request parameters. Excluded when: A rule matching 'http.url' is present in the \"transaction_segments.attributes.exclude\" setting. (for segments) A rule matching 'http.url' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled Python agent database trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by database libraries like mysql, psycopg2, cx_Oracle, and so on, or when using the database trace API. For more information, see Python agent configuration: attributes. db.instance The name of the database used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments) If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting. (for spans) Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled sql The SQLl used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Transaction segments: Enabled, reported as \"obfuscated\" SQL. peer.hostname The host used to connect to the database. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the database, including the port or path information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" is reported instead.) Defaults: Span events: Enabled db.statement The SQL used in the query, as processed according to the transaction_tracer.record_sql setting. Large queries are limited in size. Excluded when: The \"transaction_tracer.record_sql setting\" setting is set to \"off.\" Defaults: Span events: Enabled, reported as \"obfuscated\" SQL. db.operation The database operation that was performed by this span. Only to be included if db.statement is not applicable. Excluded when: The attribute db.statement is reported. Defaults: Transaction segments: Enabled Span events: Enabled Python agent datastore trace attributes The following sections list the attributes that can be configured in the Python agent for traces started by datastore libraries like redis, memcache, pymongo, and so on, or when using the datastore trace API. For more information, see Python agent configuration: attributes. db.instance The name of the datastore instance used in the query. Excluded when: The \"datastore_tracer.database_name_reporting.enabled\" configuration setting is set to False. If a rule matching 'db.instance' is present in the \"transaction_segments.attributes.exclude\" setting (for segments). If a rule matching 'db.instance' is present in the \"span_events.attributes.exclude\" configuration setting (for spans). Defaults: Transaction segments: Enabled Span events: Enabled host The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled port_path_or_id The port, path, or ID of the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. Defaults: Transaction segments: Enabled peer.hostname The host used to connect to the datastore. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled peer.address The host used to connect to the datastore, including the port, path, or ID information. Excluded when: The \"datastore_tracer.instance_reporting.enabled configuration\" setting is set to False. (Otherwise, \"Unknown\" will be reported instead.) Defaults: Span events: Enabled Python agent span attributes The following sections list the attributes that can be configured in the Python agent for span events. For more information, see Python agent configuration: attributes. error.class The class of exception, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled error.message The exception message, if one exists, that is recorded on the span event. Exception details can be recorded on spans with the notice_error API. Defaults: Span events: Enabled Add custom attributes To capture additional custom attributes from your application, use newrelic.agent.add_custom_parameter(). For full reference see, Collecting custom attributes. Defaults: Transaction traces: Enabled Error collector (traced errors): Enabled Transaction events: Enabled Page views (browser monitoring): Disabled Important Before creating custom attributes, review our list of reserved terms. Otherwise, unexpected results might occur. Add custom attributes to exceptions When using the newrelic.agent.notice_error() API call, you can pass in a dictionary of params that will be recorded as attributes on the traced error. Defaults: Transaction traces: Unavailable Error collector (traced errors): Enabled Transaction events: Unavailable Page views (browser monitoring): Unavailable Upgrade your config file Upgrade your newrelic.ini configuration file when you upgrade to Python agent 2.56.0.42 or higher. For more information about deprecated configuration settings, see Enabling and disabling attributes. For more help Additional documentation resources include: Agent attributes (types, destinations, and limits for attributes used by our agents) Enabling and disabling attributes (properties, rules, and backwards compatibility information for Python agent attributes) Attribute examples (scenarios and results of enabling and disabling different Python agent attributes)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 105.675934,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>agent</em> attributes",
        "sections": "<em>Python</em> <em>agent</em> attributes",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " <em>configuration</em> settings, see Enabling and disabling attributes. For more help Additional documentation resources include: <em>Agent</em> attributes (types, destinations, and limits for attributes used by our <em>agents</em>) Enabling and disabling attributes (properties, rules, and backwards compatibility information for <em>Python</em> <em>agent</em> attributes) Attribute examples (scenarios and results of enabling and disabling different <em>Python</em> <em>agent</em> attributes)"
      },
      "id": "6043b71264441fff7e378ee7"
    },
    {
      "sections": [
        "application (Python agent API)",
        "Syntax",
        "Description",
        "Important",
        "Parameters",
        "Return values",
        "Examples",
        "Generate and use an application object"
      ],
      "title": "application (Python agent API)",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Python agent API"
      ],
      "external_id": "bad4642930cf5c4643c984dbc5fbd25cf0c5d657",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/python-agent-api/application-python-agent-api/",
      "published_at": "2021-06-20T13:31:57Z",
      "updated_at": "2021-05-28T11:07:28Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax newrelic.agent.application(name=None) Copy Returns object corresponding to an agent monitored app; required by some Python agent API calls. Description This call returns an object corresponding to an agent-monitored application. If no name value is set, the name set via the Python agent configuration is used. The returned application object does not present any public API, but is required by some other API calls. Important This call only returns the application object. It won't attempt to register the application with the data collector if this has not already occurred. Parameters Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via Python agent configuration. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples Generate and use an application object To generate an application object, use: import newrelic.agent app = newrelic.agent.application() Copy Some other Python agent API calls take the application object as a parameter. For an example, see the notice_error call.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 103.4263,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "application (<em>Python</em> <em>agent</em> API)",
        "sections": "application (<em>Python</em> <em>agent</em> API)",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " Parameter Description name string Optional. The name of the application. If set, this overrides the application name set via <em>Python</em> <em>agent</em> <em>configuration</em>. Return values Returns an application object. The object itself does not present any public API, but is required by some other API calls. Examples"
      },
      "id": "604400d028ccbc356e2c6098"
    }
  ],
  "/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file": [
    {
      "sections": [
        "Python custom instrumentation",
        "Instrumentation via Config file or API",
        "Additional considerations",
        "Caution"
      ],
      "title": "Python custom instrumentation",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "bb99d88356cade541a5fce0c6302ef7e823b1491",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation/",
      "published_at": "2021-06-20T21:37:23Z",
      "updated_at": "2021-03-11T04:36:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Custom instrumentation allows you to expand the agent's default monitoring and behavior to target additional functional calls and activity. You can do so via the agent config file, or via the agent API. Instrumentation via Config file or API There are two main methods for adding custom instrumentation: If you simply want to trace time spent in additional functions or methods of classes, you can identify a list of functions or methods in the agent configuration file. For more information, see Instrumentation via config file. For more complex cases, or if you want to customize how the function is identified in the New Relic One UI, you can place API calls in your application code. For more information, see Instrumentation via API. In either case, these mechanisms only target the designated function call. It is not recursive, nor does it enable full profiling below the annotated function. Additional considerations You must individually annotate each function call you want to trace. If you are not sure which function you should annotate, you can use thread profiling features to narrow it down. Caution Collecting too many metrics can impact the performance of both your application and the agent. To avoid potential data problems, try to keep the total number of unique metrics introduced by custom instrumentation under 2000.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.62932,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "<em>Custom</em> <em>instrumentation</em> allows you to expand the <em>agent</em>&#x27;s default monitoring and behavior to target additional functional calls and activity. You can do so via the <em>agent</em> config file, or via the <em>agent</em> API. <em>Instrumentation</em> via Config file or API There are two main methods for adding <em>custom</em>"
      },
      "id": "6043f88de7b9d287e25799e1"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-06-20T21:34:55Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.01674,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> API allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> API to: Manually <em>instrument</em> an unsupported framework or third-party system. Add <em>instrumentation</em> to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> API calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-06-20T21:38:55Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.92115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for <em>custom</em> <em>instrumentation</em> and APIs, The <em>Python</em> <em>agent</em> offers multiple building blocks to customize the data you need from your app. Our <em>Python</em> works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the <em>Python</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    }
  ],
  "/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation": [
    {
      "sections": [
        "Python custom instrumentation via config file",
        "Listing functions in the configuration file",
        "Using dumbdbm",
        "Restrictions on wrapping extension APIs",
        "Overriding the reported function name",
        "Instrument with the API"
      ],
      "title": "Python custom instrumentation via config file",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Custom instrumentation"
      ],
      "external_id": "24ff7215889cbc9dbae8ffe435aa17fcd125b315",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/custom-instrumentation/python-custom-instrumentation-config-file/",
      "published_at": "2021-06-20T07:13:46Z",
      "updated_at": "2021-03-11T06:51:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can extend the Python agent's monitoring to trace time spent in additional functions or methods of classes by modifying your configuration file. This form of custom instrumentation is simpler to implement than API calls, and does not require you to modify your code. However, for more complex needs, you may need to implement Python instrumentation by API. Listing functions in the configuration file To extend instrumentation to designated functions and class methods, add them to the transaction_tracer.function_trace setting within the newrelic section of the agent configuration file. The identifier for a function should have the form module:function and that of a class method module:class.function. Using dumbdbm In this example, you use the Python dumbdbm module and want to instrument the time it took to open a database, and then to write that database back to a file. In this case you would use: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy To list more than one item, use either of these methods: One line: Separate each item with a space. Multiple lines: Follow the ini file convention to indent the subsequent lines. When data is reported for the instrumented function, the metric will have a name in the form Function/module:function or Function/module:class.function. In the performance breakdown for a transaction, the category will show as Function and the segment will be module:function or module:class.function. For slow transaction traces, only the segment name appears. Note that where a function is actually returning a generator, only the time spent in returning the generator will be recorded and not the consumption of the values from the generator. Restrictions on wrapping extension APIs When wrapping functions by listing them in the agent configuration file, you cannot designate class methods this way when the method is a member of a class which is implemented in C code by a C extension module. This is because it is not possible to modify the method table of a type implemented using the Python C API. Overriding the reported function name When using the transaction_tracer.function_trace setting in the agent configuration file, the name of the function will be used in the metric name, with it being classified as a Function. If it is necessary to override what function name may be used in the metric name or classify it differently, then an alternate means of defining the function trace in the configuration file can be used. The equivalent for: transaction_tracer.function_trace = dumbdbm:open dumbdbm:_Database._commit Copy would be to create two new configuration sections in the agent configuration file, one for each function to be traced: [function-trace:dumbdbm-1] enabled = true function = dumbdbm:open name = dumbdbm:open group = Function [function-trace:dumbdbm-2] enabled = true function = dumbdbm:_Database._commit name = dumbdbm:_Database._commit group = Function Copy The ini file section name should start with function-trace:. The name component that follows that prefix can be anything but should be unique across all function trace sections in the configuration file. The group and name settings can be overridden as necessary to arrive at the desired metric name. The enabled setting defaults to false and needs to be set to true to enable the function trace. Instrument with the API For simple custom instrumentation purposes, the config file method works well. For more precise and customized instrumentation and agent behavior adjustments, you will want to use the Python agent API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.63779,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "sections": "<em>Python</em> <em>custom</em> <em>instrumentation</em> via config file",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " and needs to be set to true to enable the function trace. <em>Instrument</em> with the API For simple <em>custom</em> <em>instrumentation</em> purposes, the config file method works well. For more precise and customized <em>instrumentation</em> and <em>agent</em> behavior adjustments, you will want to use the <em>Python</em> <em>agent</em> API."
      },
      "id": "60440ff1196a67b065960f6b"
    },
    {
      "sections": [
        "Guide to using the Python agent API",
        "Custom instrumentation or API",
        "Monitor transactions and segments",
        "Add and edit transaction metadata",
        "Report custom events and custom metric data",
        "Message-related calls",
        "Implement distributed tracing",
        "Agent configuration, initialization, shutdown",
        "Control the Browser monitoring agent"
      ],
      "title": "Guide to using the Python agent API",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "API guides"
      ],
      "external_id": "41f2cf33977b57e872b8c69a30b77fd603b51926",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/api-guides/guide-using-python-agent-api/",
      "published_at": "2021-06-20T21:34:55Z",
      "updated_at": "2021-06-02T13:37:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Python agent API allows you to customize and extend your monitoring. Use the Python agent API to: Manually instrument an unsupported framework or third-party system. Add instrumentation to supplement the agent's default monitoring. This document describes some of the available Python API calls. For a description of all our available APIs, see Introduction to APIs. Custom instrumentation or API If your goal is custom instrumentation, consider using the configuration file method, which allows you to add functions and class methods to the config file that will be auto-instrumented by the agent. The benefit of the config-file method is that it does not require you to change your application code. However, the Python agent API is much more powerful and is best for setting up more complex and tailored instrumentation. To ensure you have access to the full API functionality, update to the latest Python agent. Monitor transactions and segments The Python agent is compatible with most of the common WSGI web frameworks. If the agent supports your framework, web requests automatically will be captured as transactions and displayed in the New Relic One UI. A transaction can also have function-level segments that are captured as part of a transaction trace. Use these methods to monitor web transactions, non-web transactions, and transaction segments: If you want to... Do this... Monitor WSGI web transactions The Python agent automatically captures web transactions for supported frameworks. If you do not have a supported framework, you can use the wsgi_application function to monitor your WSGI entry point. Monitor non-web transactions The Python agent classifies non-web transactions as background tasks. To capture non-web transactions, use background_task. Capture more details about a transaction If your transaction traces do not have the level of detail you want: Use function_trace to capture more function-level detail in transactions. Use datastore_trace to capture more detail about datastore calls. Ignore a transaction Use any of these options: To ignore a transaction altogether, use ignore_transaction. To prevent a transaction from producing a transaction trace, use suppress_transaction_trace. To end a transaction before the agent would end it automatically, use end_of_transaction. Add and edit transaction metadata Sometimes the code you target is visible in our UI, but some details of the method are not useful. For example: The default name is not helpful, or it is causing a metric grouping issue. You want to add custom attributes to your transactions so you can filter them when querying. Use these calls when you want to change the metadata of an existing transaction: If you want to... Do this... Get reference to current transaction To return an object representing the current transaction, use current_transaction. This is required by some other Python agent API calls. Change the name of a transaction Use set_transaction_name. Add metadata (such as a customer's subscription level) to transactions Add custom attributes to your transactions using add_custom_parameter, or use other API calls to report custom data. Mark a transaction as a background job To convert a web transaction into a background task so that it appears as a non-web transaction in the UI, use set_background_task. Prevent a transaction from affecting your Apdex score Use suppress_apdex_metric. Report custom events and custom metric data The agent reports data in two primary forms: Metric data measures numeric, time-based values; for example, connections per minute. Event data captures discrete event information. Events have key-value attributes attached to them. You can analyze and query event data. Use these methods to create new event data and new metric data: If you want to... Do this... Send data about an event for use when querying your data. Use record_custom_event. Report time-based metrics on application performance To report a single metric, use record_custom_metric. To report a set of metrics, use record_custom_metrics. Report an exception as an error By default, the Python agent only reports unhandled exceptions. To report a Python exception as an error, use notice_error. Report query string parameters For security reasons, query string parameters associated with web transactions are disabled by default. Use capture_request_params to enable them. Tag events with metadata To add attributes to events for more detailed analysis in Insights or error analytics, use add_custom_parameter. Generate metrics from data sources and data factories To generate metrics with a pull-style API rather than the push-style API implemented by record_custom_metric(), use these API calls: register_data_source data_source_generator data_source_factory Message-related calls These API calls allow you to collect performance data on your message-passing architecture or service; for example, RabbitMQ. To use these calls, make sure you have Python agent version 2.88.0.72 or higher. If you want to... Do this... Report messages as a transaction Use message_transaction. Report message details as transaction trace segments Use message_trace. Implement distributed tracing These APIs require distributed tracing to be enabled. Services and applications monitored by our agents will automatically pass distributed tracing context to each other when using a supported framework. When not using a supported framework, you will need to use the distributed tracing APIs to manually accept this context. Supported web frameworks (for example, Flask, Django, Tornado) will automatically call accept_distributed_trace_payload when creating a transaction. Supported external web services libraries will automatically call create_distributed_trace_payload before making an external HTTP call. For general instructions on how to use the calls below to implement distributed tracing, see Use distributed tracing APIs. If you want to... Do this... Create a payload to be sent to a called service. Use create_distributed_trace_payload. Accept a payload sent from the first service; this will link these services together in a trace Use accept_distributed_trace_payload. Agent configuration, initialization, shutdown These calls help you manage Python agent behavior, such as initializing and integrating the agent, and referencing or changing configuration settings: If you want to... Do this... Initialize the agent To initialize the Python agent with a specific configuration file as part of advanced integration process, use initialize. Get a reference to the application object The application object represents an agent-monitored application and is used by some Python agent API calls. Get a reference to configuration settings To control the Python agent's behavior, you can use configuration settings. To get a reference to config file and environment variable settings and make changes to them, use global_settings. To get a reference to all settings, including server-side configuration from our UI, use application_settings. Shut down the agent To forcibly shut down the agent instead of allowing it to make the standard final attempt to upload data, use shutdown_agent. Control the Browser monitoring agent You can install the browser monitoring agent by automatically adding it to your pages or by deploying it on specific pages by copying and pasting the browser agent JavaScript snippet. You can also control the browser agent by using APM agent API calls. For more information, see Browser agent and the Python agent. If you want to... Do this... Monitor specific page views To inject the browser agent header and footer JavaScript snippets into views you want to monitor, use both get_browser_timing_header and get_browser_timing_footer. Disable monitoring of specific page views To disable browser monitoring for specific page views, use disable_browser_autorum.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.01672,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Guide to using the <em>Python</em> <em>agent</em> API",
        "sections": "Guide to using the <em>Python</em> <em>agent</em> API",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": "The <em>Python</em> <em>agent</em> API allows you to customize and extend your monitoring. Use the <em>Python</em> <em>agent</em> API to: Manually <em>instrument</em> an unsupported framework or third-party system. Add <em>instrumentation</em> to supplement the <em>agent</em>&#x27;s default monitoring. This document describes some of the available <em>Python</em> API calls"
      },
      "id": "60441c8d64441f0ec7378eff"
    },
    {
      "sections": [
        "Introduction to New Relic for Python",
        "Tip",
        "Monitor app performance",
        "Install the Python agent",
        "Monitor non-web scripts, background tasks, and functions",
        "What's next after installation?",
        "Troubleshooting",
        "Check the source code"
      ],
      "title": "Introduction to New Relic for Python",
      "type": "docs",
      "tags": [
        "Agents",
        "Python agent",
        "Getting started"
      ],
      "external_id": "7e61d2a3be97afabad770b9034c64a3da611c9f7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/python-agent/getting-started/introduction-new-relic-python/",
      "published_at": "2021-06-20T21:38:55Z",
      "updated_at": "2021-03-11T03:11:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Python agent monitors your Python application to help you identify and solve performance issues. You can also extend your performance monitoring to collect and analyze business data to help you improve the customer experience and make data-driven business decisions. With flexible options for custom instrumentation and APIs, The Python agent offers multiple building blocks to customize the data you need from your app. Our Python works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the Python agent in a Google App Engine flexible environment. Tip To use Python or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Monitor app performance After you install the Python agent, it begins to collect data about your app. You can view the data as charts and tables in New Relic One. View the big picture of your app. Monitor your app's Apdex (user satisfaction). Get a high-level summary of your app with Summary page. Enable distributed tracing to see activity across an architecture having many services. Install Infrastructure monitoring and view detailed server/host data for your app. Find errors and problems quickly. Track key transactions specific to your business. Create custom dashboards for important metrics. Alert your team when an error or problem occurs before it affects your users. View performance after a deployment. Drill down into performance details. Examine code-level transaction traces. Examine database query traces. Examine error traces. Use thread profiler sessions to see detailed stack traces of sampled threads Other helpful tools include: Tools Description Browser monitoring Integrate the Python agent with Browser monitoring to gain visibility into end-user browser activity. Simple scripts and background tasks Monitor job-based or task queuing systems, like Celery, or other standalone non-web functions. Business data analysis with data exploration. Use the Python agent with our data explorer to organize, query, and visualize your data to answer key questions about application performance and customer experience. Use default transaction attributes, or add your own. Query your data using the New Relic Query Language (NRQL). Send your own event data. Create and share customizable, interactive dashboards. Install the Python agent Before you install the Python agent, make sure your system meets the system requirements. You must also create a New Relic account. We support a number of web frameworks and libraries right out of the box, including Django, WSGI, and Gunicorn. If you use one of the supported web frameworks, installation is easy. If you use an unsupported framework, the process will involve some additions to your app code and/or web server files. For a quick and simple install process that will work for the majority of setups, follow these simple steps: Download and install the Python package. Create config file. Integrate the Python agent with your application. Read the Quick Start guide Add Python data Monitor non-web scripts, background tasks, and functions The Python agent also lets you monitor non-web scripts, worker processes, tasks, and functions. The installation process for these non-web transactions is similar to the one used for a web app, with one major difference: instead of going through the standard integration process described in the install instructions, you would manually \"wrap\" any function you want to monitor. For more information, see Non-web tasks and processes. For instructions on monitoring Celery tasks, see Celery background tasks. What's next after installation? Once you get the agent up and running, some suggested next steps are: Explore your data in and get comfortable with the user interface. Read some documentation about Full-Stack Observability. For example, read about the capabilities of Full-Stack observability and the APM page. Change your application's name, or other configuration options. Learn about setting up custom instrumentation for application activity not monitored by default. Consider these open source telemetry tools: OpenCensus exporter and Python Telemetry SDK. Troubleshooting After you complete the install process, your data should appear in the APM UI within five minutes. If it does not, use these troubleshooting resources: If no data appears, follow these troubleshooting steps. If you experience issues when installing or running the Python agent on a new host, test that the package is installed correctly and that it can contact New Relic's data collector service. For other problems, see the full list of troubleshooting documentation. Check the source code The Python agent is open source software. That means you can browse its source code and send improvements, or create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 95.92115,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic for <em>Python</em>",
        "sections": "Install the <em>Python</em> <em>agent</em>",
        "tags": "<em>Python</em> <em>agent</em>",
        "body": " for <em>custom</em> <em>instrumentation</em> and APIs, The <em>Python</em> <em>agent</em> offers multiple building blocks to customize the data you need from your app. Our <em>Python</em> works with a wide variety of web frameworks and hosting mechanisms, including Django, Gunicorn, WSGI, CherryPy, uWSGI, and more. You can also install the <em>Python</em>"
      },
      "id": "6044108be7b9d29b61579a05"
    }
  ]
}