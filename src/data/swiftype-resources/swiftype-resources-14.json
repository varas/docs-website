{
  "/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/analyze-network-requests-using-mobilerequest-event-data": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 349.2867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP errors: <em>Network</em> failure analysis",
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and <em>network</em> failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.51378,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    },
    {
      "sections": [
        "Map page for mobile apps (deprecated)",
        "Important",
        "View a map of your mobile app services"
      ],
      "title": "Map page for mobile apps (deprecated)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "a082467948ce481c9ecb544d26a802e8d5f3894b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated/",
      "published_at": "2021-06-25T23:38:02Z",
      "updated_at": "2021-05-16T00:48:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The mobile Maps UI will be deprecated on December 22, 2020. Service maps are available in New Relic One's left navigation for each mobile entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post. Maps help you find performance problems for a mobile app or its services. This gives you a clear picture of your app's relationships to other services and the influence of each service on the others. If one service fails, you can see at a glance which other services are affected. View a map of your mobile app services To view your mobile app and its related services as an architectural map, go to one.newrelic.com > Mobile > (select a mobile app) > Monitor > Service map. For more information, see the service maps documentation. If you need to use the deprecated mobile Map page, follow these steps: Go to one.newrelic.com > Mobile > (select an app) > Network > Map. To view HTTP request details for a service, select its name. To view details for an app monitored by APM that is related to the service, select the service's name below the associated hostname. To view throughput details as a chart, select the icon or the cpm bar below the service's name. To view detailed metrics for a service, mouse over the throughput chart. The Map page for Mobile monitoring gives an architectural view of your mobile app and the services it uses,",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.35138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "sections": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " <em>mobile</em> app services To view your <em>mobile</em> app and its related services as an architectural map, go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select a <em>mobile</em> app) &gt; <em>Monitor</em> &gt; Service map. For more information, see the service maps documentation. If you need to use the deprecated <em>mobile</em> Map <em>page</em>, follow these steps"
      },
      "id": "6044141828ccbc0f862c60ae"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 349.28644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP errors: <em>Network</em> failure analysis",
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and <em>network</em> failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Map page for mobile apps (deprecated)",
        "Important",
        "View a map of your mobile app services"
      ],
      "title": "Map page for mobile apps (deprecated)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "a082467948ce481c9ecb544d26a802e8d5f3894b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated/",
      "published_at": "2021-06-25T23:38:02Z",
      "updated_at": "2021-05-16T00:48:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The mobile Maps UI will be deprecated on December 22, 2020. Service maps are available in New Relic One's left navigation for each mobile entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post. Maps help you find performance problems for a mobile app or its services. This gives you a clear picture of your app's relationships to other services and the influence of each service on the others. If one service fails, you can see at a glance which other services are affected. View a map of your mobile app services To view your mobile app and its related services as an architectural map, go to one.newrelic.com > Mobile > (select a mobile app) > Monitor > Service map. For more information, see the service maps documentation. If you need to use the deprecated mobile Map page, follow these steps: Go to one.newrelic.com > Mobile > (select an app) > Network > Map. To view HTTP request details for a service, select its name. To view details for an app monitored by APM that is related to the service, select the service's name below the associated hostname. To view throughput details as a chart, select the icon or the cpm bar below the service's name. To view detailed metrics for a service, mouse over the throughput chart. The Map page for Mobile monitoring gives an architectural view of your mobile app and the services it uses,",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.35136,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "sections": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " <em>mobile</em> app services To view your <em>mobile</em> app and its related services as an architectural map, go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select a <em>mobile</em> app) &gt; <em>Monitor</em> &gt; Service map. For more information, see the service maps documentation. If you need to use the deprecated <em>mobile</em> Map <em>page</em>, follow these steps"
      },
      "id": "6044141828ccbc0f862c60ae"
    },
    {
      "sections": [
        "Analyze network requests using MobileRequest event data",
        "Enable MobileRequest for earlier versions of iOS and Android",
        "Enable for Android",
        "Enable for iOS",
        "Query HTTP and network requests in Insights",
        "View HTTP and network requests in Mobile"
      ],
      "title": "Analyze network requests using MobileRequest event data",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "58f524c972e26114817018c004bd4d03aeda4fb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/analyze-network-requests-using-mobilerequest-event-data/",
      "published_at": "2021-06-26T14:36:46Z",
      "updated_at": "2021-03-16T09:36:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Monitoring HTTP and network requests gives you insight into how your app is performing and provides data that can help you improve your app. To find HTTP and network requests and errors, you can view them in the Mobile monitoring UI or query MobileRequest and MobileRequestError events in Insights. Enable MobileRequest for earlier versions of iOS and Android MobileRequest data is enabled by default for: Android version 5.15.2 or higher iOS version 6.0.0 or higher For earlier versions, starting with Android version 5.14.0 or iOS version 5.14.0, you must enable the feature. Upgrade to the latest Android or iOS version, or add the following feature flag to your app, before the New Relic start call: Enable for Android Place the feature flag before the start call in the onCreate method of the MainActivity class. NewRelic.enableFeature(FeatureFlag.NetworkRequests); NewRelic.withApplicationToken(\"NEW_RELIC_TOKEN\").start(this.getApplication()); Copy Enable for iOS Place the feature flag before the start call which should be the first line of didFinishLaunchingWithOptions method. Objective-C [NewRelic enableFeatures:NRFeatureFlag_NetworkRequestEvents] [NewRelic startWithApplicationToken:@\"NEW_RELIC_TOKEN\"] Copy Swift NewRelic.enableFeatures(NRMAFeatureFlags.NRFeatureFlag_NetworkRequestEvents) NewRelic.start(withApplicationToken:\"NEW_RELIC_TOKEN\") Copy Query HTTP and network requests in Insights To create custom dashboards for HTTP and network requests, run queries using the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View HTTP and network requests in Mobile To explore MobileRequest and MobileRequestError data in the UI, go to the following pages: Page What you can do here Mobile crash event trail The Mobile crash event trail shows you the events leading up to a crash of a mobile app, based on your subscription level's data retention policy. These events can help you diagnose the cause of the crash. HTTP requests The HTTP requests page includes charts for your top five domains by response time and average throughput. Network Errors The Network errors page helps you to better understand HTTP errors and network failures associated with your mobile app and to connect errors to services that are causing issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.8946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Analyze <em>network</em> requests using <em>MobileRequest</em> event data",
        "sections": "Analyze <em>network</em> requests using <em>MobileRequest</em> event data",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " events and attributes: <em>Mobile</em>RequestError events and attributes <em>Mobile</em>Request events and attributes View HTTP and <em>network</em> requests in <em>Mobile</em> To explore <em>Mobile</em>Request and <em>Mobile</em>RequestError data in the <em>UI</em>, go to the following <em>pages</em>: <em>Page</em> What you can do here <em>Mobile</em> crash event trail The <em>Mobile</em> crash"
      },
      "id": "603e8586e7b9d294c52a080a"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/connection-types-page": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 349.28644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP errors: <em>Network</em> failure analysis",
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and <em>network</em> failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.51376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    },
    {
      "sections": [
        "Map page for mobile apps (deprecated)",
        "Important",
        "View a map of your mobile app services"
      ],
      "title": "Map page for mobile apps (deprecated)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "a082467948ce481c9ecb544d26a802e8d5f3894b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated/",
      "published_at": "2021-06-25T23:38:02Z",
      "updated_at": "2021-05-16T00:48:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The mobile Maps UI will be deprecated on December 22, 2020. Service maps are available in New Relic One's left navigation for each mobile entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post. Maps help you find performance problems for a mobile app or its services. This gives you a clear picture of your app's relationships to other services and the influence of each service on the others. If one service fails, you can see at a glance which other services are affected. View a map of your mobile app services To view your mobile app and its related services as an architectural map, go to one.newrelic.com > Mobile > (select a mobile app) > Monitor > Service map. For more information, see the service maps documentation. If you need to use the deprecated mobile Map page, follow these steps: Go to one.newrelic.com > Mobile > (select an app) > Network > Map. To view HTTP request details for a service, select its name. To view details for an app monitored by APM that is related to the service, select the service's name below the associated hostname. To view throughput details as a chart, select the icon or the cpm bar below the service's name. To view detailed metrics for a service, mouse over the throughput chart. The Map page for Mobile monitoring gives an architectural view of your mobile app and the services it uses,",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.35136,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "sections": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " <em>mobile</em> app services To view your <em>mobile</em> app and its related services as an architectural map, go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select a <em>mobile</em> app) &gt; <em>Monitor</em> &gt; Service map. For more information, see the service maps documentation. If you need to use the deprecated <em>mobile</em> Map <em>page</em>, follow these steps"
      },
      "id": "6044141828ccbc0f862c60ae"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/geography-page-mobile-apps": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 349.2862,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP errors: <em>Network</em> failure analysis",
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and <em>network</em> failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.51376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    },
    {
      "sections": [
        "Map page for mobile apps (deprecated)",
        "Important",
        "View a map of your mobile app services"
      ],
      "title": "Map page for mobile apps (deprecated)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "a082467948ce481c9ecb544d26a802e8d5f3894b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated/",
      "published_at": "2021-06-25T23:38:02Z",
      "updated_at": "2021-05-16T00:48:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The mobile Maps UI will be deprecated on December 22, 2020. Service maps are available in New Relic One's left navigation for each mobile entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post. Maps help you find performance problems for a mobile app or its services. This gives you a clear picture of your app's relationships to other services and the influence of each service on the others. If one service fails, you can see at a glance which other services are affected. View a map of your mobile app services To view your mobile app and its related services as an architectural map, go to one.newrelic.com > Mobile > (select a mobile app) > Monitor > Service map. For more information, see the service maps documentation. If you need to use the deprecated mobile Map page, follow these steps: Go to one.newrelic.com > Mobile > (select an app) > Network > Map. To view HTTP request details for a service, select its name. To view details for an app monitored by APM that is related to the service, select the service's name below the associated hostname. To view throughput details as a chart, select the icon or the cpm bar below the service's name. To view detailed metrics for a service, mouse over the throughput chart. The Map page for Mobile monitoring gives an architectural view of your mobile app and the services it uses,",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.35135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "sections": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " <em>mobile</em> app services To view your <em>mobile</em> app and its related services as an architectural map, go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select a <em>mobile</em> app) &gt; <em>Monitor</em> &gt; Service map. For more information, see the service maps documentation. If you need to use the deprecated <em>mobile</em> Map <em>page</em>, follow these steps"
      },
      "id": "6044141828ccbc0f862c60ae"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis": [
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.51376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    },
    {
      "sections": [
        "Map page for mobile apps (deprecated)",
        "Important",
        "View a map of your mobile app services"
      ],
      "title": "Map page for mobile apps (deprecated)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "a082467948ce481c9ecb544d26a802e8d5f3894b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated/",
      "published_at": "2021-06-25T23:38:02Z",
      "updated_at": "2021-05-16T00:48:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The mobile Maps UI will be deprecated on December 22, 2020. Service maps are available in New Relic One's left navigation for each mobile entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post. Maps help you find performance problems for a mobile app or its services. This gives you a clear picture of your app's relationships to other services and the influence of each service on the others. If one service fails, you can see at a glance which other services are affected. View a map of your mobile app services To view your mobile app and its related services as an architectural map, go to one.newrelic.com > Mobile > (select a mobile app) > Monitor > Service map. For more information, see the service maps documentation. If you need to use the deprecated mobile Map page, follow these steps: Go to one.newrelic.com > Mobile > (select an app) > Network > Map. To view HTTP request details for a service, select its name. To view details for an app monitored by APM that is related to the service, select the service's name below the associated hostname. To view throughput details as a chart, select the icon or the cpm bar below the service's name. To view detailed metrics for a service, mouse over the throughput chart. The Map page for Mobile monitoring gives an architectural view of your mobile app and the services it uses,",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.35135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "sections": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " <em>mobile</em> app services To view your <em>mobile</em> app and its related services as an architectural map, go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select a <em>mobile</em> app) &gt; <em>Monitor</em> &gt; Service map. For more information, see the service maps documentation. If you need to use the deprecated <em>mobile</em> Map <em>page</em>, follow these steps"
      },
      "id": "6044141828ccbc0f862c60ae"
    },
    {
      "sections": [
        "Analyze network requests using MobileRequest event data",
        "Enable MobileRequest for earlier versions of iOS and Android",
        "Enable for Android",
        "Enable for iOS",
        "Query HTTP and network requests in Insights",
        "View HTTP and network requests in Mobile"
      ],
      "title": "Analyze network requests using MobileRequest event data",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "58f524c972e26114817018c004bd4d03aeda4fb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/analyze-network-requests-using-mobilerequest-event-data/",
      "published_at": "2021-06-26T14:36:46Z",
      "updated_at": "2021-03-16T09:36:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Monitoring HTTP and network requests gives you insight into how your app is performing and provides data that can help you improve your app. To find HTTP and network requests and errors, you can view them in the Mobile monitoring UI or query MobileRequest and MobileRequestError events in Insights. Enable MobileRequest for earlier versions of iOS and Android MobileRequest data is enabled by default for: Android version 5.15.2 or higher iOS version 6.0.0 or higher For earlier versions, starting with Android version 5.14.0 or iOS version 5.14.0, you must enable the feature. Upgrade to the latest Android or iOS version, or add the following feature flag to your app, before the New Relic start call: Enable for Android Place the feature flag before the start call in the onCreate method of the MainActivity class. NewRelic.enableFeature(FeatureFlag.NetworkRequests); NewRelic.withApplicationToken(\"NEW_RELIC_TOKEN\").start(this.getApplication()); Copy Enable for iOS Place the feature flag before the start call which should be the first line of didFinishLaunchingWithOptions method. Objective-C [NewRelic enableFeatures:NRFeatureFlag_NetworkRequestEvents] [NewRelic startWithApplicationToken:@\"NEW_RELIC_TOKEN\"] Copy Swift NewRelic.enableFeatures(NRMAFeatureFlags.NRFeatureFlag_NetworkRequestEvents) NewRelic.start(withApplicationToken:\"NEW_RELIC_TOKEN\") Copy Query HTTP and network requests in Insights To create custom dashboards for HTTP and network requests, run queries using the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View HTTP and network requests in Mobile To explore MobileRequest and MobileRequestError data in the UI, go to the following pages: Page What you can do here Mobile crash event trail The Mobile crash event trail shows you the events leading up to a crash of a mobile app, based on your subscription level's data retention policy. These events can help you diagnose the cause of the crash. HTTP requests The HTTP requests page includes charts for your top five domains by response time and average throughput. Network Errors The Network errors page helps you to better understand HTTP errors and network failures associated with your mobile app and to connect errors to services that are causing issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.8946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Analyze <em>network</em> requests using <em>MobileRequest</em> event data",
        "sections": "Analyze <em>network</em> requests using <em>MobileRequest</em> event data",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " events and attributes: <em>Mobile</em>RequestError events and attributes <em>Mobile</em>Request events and attributes View HTTP and <em>network</em> requests in <em>Mobile</em> To explore <em>Mobile</em>Request and <em>Mobile</em>RequestError data in the <em>UI</em>, go to the following <em>pages</em>: <em>Page</em> What you can do here <em>Mobile</em> crash event trail The <em>Mobile</em> crash"
      },
      "id": "603e8586e7b9d294c52a080a"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-requests-page": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 349.2862,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP errors: <em>Network</em> failure analysis",
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and <em>network</em> failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.51376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    },
    {
      "sections": [
        "Map page for mobile apps (deprecated)",
        "Important",
        "View a map of your mobile app services"
      ],
      "title": "Map page for mobile apps (deprecated)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "a082467948ce481c9ecb544d26a802e8d5f3894b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated/",
      "published_at": "2021-06-25T23:38:02Z",
      "updated_at": "2021-05-16T00:48:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The mobile Maps UI will be deprecated on December 22, 2020. Service maps are available in New Relic One's left navigation for each mobile entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post. Maps help you find performance problems for a mobile app or its services. This gives you a clear picture of your app's relationships to other services and the influence of each service on the others. If one service fails, you can see at a glance which other services are affected. View a map of your mobile app services To view your mobile app and its related services as an architectural map, go to one.newrelic.com > Mobile > (select a mobile app) > Monitor > Service map. For more information, see the service maps documentation. If you need to use the deprecated mobile Map page, follow these steps: Go to one.newrelic.com > Mobile > (select an app) > Network > Map. To view HTTP request details for a service, select its name. To view details for an app monitored by APM that is related to the service, select the service's name below the associated hostname. To view throughput details as a chart, select the icon or the cpm bar below the service's name. To view detailed metrics for a service, mouse over the throughput chart. The Map page for Mobile monitoring gives an architectural view of your mobile app and the services it uses,",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.35135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "sections": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " <em>mobile</em> app services To view your <em>mobile</em> app and its related services as an architectural map, go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select a <em>mobile</em> app) &gt; <em>Monitor</em> &gt; Service map. For more information, see the service maps documentation. If you need to use the deprecated <em>mobile</em> Map <em>page</em>, follow these steps"
      },
      "id": "6044141828ccbc0f862c60ae"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 349.28595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP errors: <em>Network</em> failure analysis",
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and <em>network</em> failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.51376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    },
    {
      "sections": [
        "Analyze network requests using MobileRequest event data",
        "Enable MobileRequest for earlier versions of iOS and Android",
        "Enable for Android",
        "Enable for iOS",
        "Query HTTP and network requests in Insights",
        "View HTTP and network requests in Mobile"
      ],
      "title": "Analyze network requests using MobileRequest event data",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "58f524c972e26114817018c004bd4d03aeda4fb6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/analyze-network-requests-using-mobilerequest-event-data/",
      "published_at": "2021-06-26T14:36:46Z",
      "updated_at": "2021-03-16T09:36:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Monitoring HTTP and network requests gives you insight into how your app is performing and provides data that can help you improve your app. To find HTTP and network requests and errors, you can view them in the Mobile monitoring UI or query MobileRequest and MobileRequestError events in Insights. Enable MobileRequest for earlier versions of iOS and Android MobileRequest data is enabled by default for: Android version 5.15.2 or higher iOS version 6.0.0 or higher For earlier versions, starting with Android version 5.14.0 or iOS version 5.14.0, you must enable the feature. Upgrade to the latest Android or iOS version, or add the following feature flag to your app, before the New Relic start call: Enable for Android Place the feature flag before the start call in the onCreate method of the MainActivity class. NewRelic.enableFeature(FeatureFlag.NetworkRequests); NewRelic.withApplicationToken(\"NEW_RELIC_TOKEN\").start(this.getApplication()); Copy Enable for iOS Place the feature flag before the start call which should be the first line of didFinishLaunchingWithOptions method. Objective-C [NewRelic enableFeatures:NRFeatureFlag_NetworkRequestEvents] [NewRelic startWithApplicationToken:@\"NEW_RELIC_TOKEN\"] Copy Swift NewRelic.enableFeatures(NRMAFeatureFlags.NRFeatureFlag_NetworkRequestEvents) NewRelic.start(withApplicationToken:\"NEW_RELIC_TOKEN\") Copy Query HTTP and network requests in Insights To create custom dashboards for HTTP and network requests, run queries using the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View HTTP and network requests in Mobile To explore MobileRequest and MobileRequestError data in the UI, go to the following pages: Page What you can do here Mobile crash event trail The Mobile crash event trail shows you the events leading up to a crash of a mobile app, based on your subscription level's data retention policy. These events can help you diagnose the cause of the crash. HTTP requests The HTTP requests page includes charts for your top five domains by response time and average throughput. Network Errors The Network errors page helps you to better understand HTTP errors and network failures associated with your mobile app and to connect errors to services that are causing issues.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 169.8946,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Analyze <em>network</em> requests using <em>MobileRequest</em> event data",
        "sections": "Analyze <em>network</em> requests using <em>MobileRequest</em> event data",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " events and attributes: <em>Mobile</em>RequestError events and attributes <em>Mobile</em>Request events and attributes View HTTP and <em>network</em> requests in <em>Mobile</em> To explore <em>Mobile</em>Request and <em>Mobile</em>RequestError data in the <em>UI</em>, go to the following <em>pages</em>: <em>Page</em> What you can do here <em>Mobile</em> crash event trail The <em>Mobile</em> crash"
      },
      "id": "603e8586e7b9d294c52a080a"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/mobile-http-error-profiles-find-error-causes": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 349.28595,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "HTTP errors: <em>Network</em> failure analysis",
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and <em>network</em> failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.51376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    },
    {
      "sections": [
        "Map page for mobile apps (deprecated)",
        "Important",
        "View a map of your mobile app services"
      ],
      "title": "Map page for mobile apps (deprecated)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "a082467948ce481c9ecb544d26a802e8d5f3894b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/map-page-mobile-apps-deprecated/",
      "published_at": "2021-06-25T23:38:02Z",
      "updated_at": "2021-05-16T00:48:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important The mobile Maps UI will be deprecated on December 22, 2020. Service maps are available in New Relic One's left navigation for each mobile entity, and they are a better way to visualize and customize representations of your architecture. For more information, see our Explorers Hub post. Maps help you find performance problems for a mobile app or its services. This gives you a clear picture of your app's relationships to other services and the influence of each service on the others. If one service fails, you can see at a glance which other services are affected. View a map of your mobile app services To view your mobile app and its related services as an architectural map, go to one.newrelic.com > Mobile > (select a mobile app) > Monitor > Service map. For more information, see the service maps documentation. If you need to use the deprecated mobile Map page, follow these steps: Go to one.newrelic.com > Mobile > (select an app) > Network > Map. To view HTTP request details for a service, select its name. To view details for an app monitored by APM that is related to the service, select the service's name below the associated hostname. To view throughput details as a chart, select the icon or the cpm bar below the service's name. To view detailed metrics for a service, mouse over the throughput chart. The Map page for Mobile monitoring gives an architectural view of your mobile app and the services it uses,",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.35135,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "sections": "Map <em>page</em> for <em>mobile</em> apps (deprecated)",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " <em>mobile</em> app services To view your <em>mobile</em> app and its related services as an architectural map, go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select a <em>mobile</em> app) &gt; <em>Monitor</em> &gt; Service map. For more information, see the service maps documentation. If you need to use the deprecated <em>mobile</em> Map <em>page</em>, follow these steps"
      },
      "id": "6044141828ccbc0f862c60ae"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/usage-pages/monthly-uniques-report": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 219.05156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and network failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Versions analysis",
        "Versions analysis details",
        "Viewing drill-down details",
        "How version numbers are obtained",
        "Android",
        "iOS",
        "For more help"
      ],
      "title": "Versions analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Usage pages"
      ],
      "external_id": "3906aba3231864c2adb43694636f085ae5332d0e",
      "image": "https://docs.newrelic.com/static/f359bb98f6fbf2a5c90dd604778a5dcd/c1b63/screen-versions_0.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/usage-pages/versions-analysis/",
      "published_at": "2021-06-25T23:38:02Z",
      "updated_at": "2021-05-16T04:04:01Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile includes a comparative analysis of adoption and performance between versions of your application, including top versions by: Interaction time Active sessions Error rate The Versions page also includes a table comparing each version by date created, average memory, average CPU, average sessions per minute, and average requests per minute (RPM) per active app. You can also drill down into additional details about a specific version. Versions analysis details one.newrelic.com > Mobile > (select an app) > Usage > Versions: The Versions analysis includes color-coded charts of mobile app usage, plus a table that summarizes mobile app versions and their averages for memory, CPU, active users, and network RPM (requests per minute). The Versions page provides a list of all versions of your app that have been detected, plus overview information on all versions active in the last seven days. To view the comparative analysis: Go to one.newrelic.com > Mobile > (select an app) > Usage > Versions. To select the time period, use the time picker below the New Relic menu bar. Optional: Select the Sort by options. To view details only for a specific version, select its name. The Versions page provides a list of all versions of your app that have been active in the selected time window. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Viewing drill-down details one.newrelic.com > Mobile > (select an app) > Usage > Versions > (selected version): Here is an example of details for a selected version. The details page provides further insight into how the selected version compares to a reference version (a recent or popular version), and the average of other versions of your app. Time series show the comparison across error rate, response time, active sessions, and memory usage. To exit the details page, select the Close (X) button. How version numbers are obtained The way that New Relic Mobile obtains the version number varies by platform: Android The Android agent obtains the version information from the android:versionName property in the manifest. iOS The iOS agent uses both CFBundleShortVersionString and CFBundleVersion properties to obtain the app version. The agent accesses those properties through iOS APIs. It does not obtain them by reading the info.plist file. For more help Additional documentation resources include: Devices page (performance details about the top devices using your mobile application, including comparisons by interaction time, HTTP request time, network failures, and active sessions) OS versions page (performance details about the top operating system versions using your mobile application)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 184.2872,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": " of <em>mobile</em> app <em>usage</em>, plus a table that summarizes <em>mobile</em> app versions and their averages for memory, CPU, active users, and network RPM (requests per minute). The Versions <em>page</em> provides a list of all versions of your app that have been detected, plus overview information on all versions active in the last"
      },
      "id": "603eaeeae7b9d262be2a080c"
    },
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.2248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    }
  ],
  "/docs/mobile-monitoring/mobile-monitoring-ui/usage-pages/versions-analysis": [
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 219.05156,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "View legacy HTTP errors <em>UI</em> <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors <em>page</em> helps you to better understand HTTP errors and network failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors <em>page</em> to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "Monthly uniques report",
        "Monthly uniques report details",
        "Device tracking",
        "For more help"
      ],
      "title": "Monthly uniques report",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Usage pages"
      ],
      "external_id": "8865375eef0e6bab4c0b40fa9edde33da93a752c",
      "image": "https://docs.newrelic.com/static/14ffff087d1c8f0d7c26b59739057f07/c1b63/screen-mobile-monthly-uniques.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/usage-pages/monthly-uniques-report/",
      "published_at": "2021-06-26T04:51:48Z",
      "updated_at": "2021-05-15T18:57:46Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile includes a monthly report with a bar chart tracking the number of devices running your app for each month over the last year. To view the report: Go to one.newrelic.com > Mobile > (select an app) > Usage > Monthly uniques. Monthly uniques report details To see the total number of unique devices for any month, mouse over the month's bar in the chart. The current month's device count is a month-to-date value and does not indicate the full month's usage. one.newrelic.com > Mobile > (select an app) > Usage > Monthly uniques: This report provides a bar chart tracking the number of devices running your app for each month over the last year. Use any of New Relic's standard user interface functions and page functions to drill down into detailed information. Unique users are used to calculate your monthly usage, which is used to calculate your subscription level. Device tracking New Relic Mobile does not use hardware identifiers for unique install tracking. On iOS we use the IdentifierForVendor property. (Versions 5.3.4 and lower used the SecureUDID library.) On Android we generate a unique GUID when the application is installed. For more help Additional documentation resources include the Devices page (performance details about the top devices using your mobile application, including comparisons by HTTP request time, active users, and network failures).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 184.0387,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "New Relic <em>Mobile</em> includes a monthly report with a bar chart tracking the number of devices running your app for each month over the last year. To view the report: Go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select an app) &gt; <em>Usage</em> &gt; Monthly uniques. Monthly uniques report details To see the total number"
      },
      "id": "6044141964441f5cb1378f32"
    },
    {
      "sections": [
        "Carriers page",
        "Viewing the Carriers page",
        "For more help"
      ],
      "title": "Carriers page",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "18de05b6ec2253f12b3e54f158c687eeb6ca87a1",
      "image": "https://docs.newrelic.com/static/d65def75dab0ea60d3a339ea8a3e96a5/c1b63/carriers.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/carriers-page/",
      "published_at": "2021-06-26T14:36:45Z",
      "updated_at": "2021-05-16T06:34:42Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The Carriers page for Mobile monitoring includes charts that show your users' wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific carriers. Viewing the Carriers page one.newrelic.com > Mobile > (select an app) > Network > Carriers: Use this page to view, sort, or drill down into detailed information about your users' mobile carriers by response time impact, network failures, and active sessions. To view your users' mobile carriers: Go to one.newrelic.com > Mobile > (select an app) > Network > Carriers. To change the information that appears (including response time, active devices, or network errors), select your choice from the Sort by menu. To adjust the amount of information that appears, select Hide < 1% throughput. To select the mobile app versions or time period, use the Versions menu and time picker below the New Relic menu bar. To view details for a specific carrier, select its name. Use any of our standard user interface functions and page functions to drill down into detailed information. For more help Additional documentation resources include: Errors for mobile apps (detailed charts and information about errors with mobile apps) Devices page (performance details about the top devices using your mobile application) Versions analysis (seven-day report with a color-coded chart for mobile app usage, plus a table that summarizes mobile versions, date created, and averages) Monthly uniques report (bar charts showing the number of devices running your mobile app over the past 12 months)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 118.2248,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Carriers <em>page</em>",
        "sections": "Carriers <em>page</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em> <em>UI</em>",
        "body": "The Carriers <em>page</em> for <em>Mobile</em> <em>monitoring</em> includes charts that show your users&#x27; wireless carriers and their response time impact, error rate, and active sessions for the selected time period. Wifi is included as a carrier. From here you can sort and drill down into detailed information about specific"
      },
      "id": "603ea36ae7b9d267502a0811"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile/get-started/introduction-mobile-monitoring": [
    {
      "sections": [
        "Security for mobile apps",
        "Data collection",
        "Secure data endpoints",
        "Unique identifiers",
        "No remote updates",
        "Data storage",
        "Instrumentation added to your code",
        "User's IP address"
      ],
      "title": "Security for mobile apps",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Get started"
      ],
      "external_id": "c1f31e708e4710eb4823467a43ab30af1f29243c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/get-started/security-mobile-apps/",
      "published_at": "2021-06-25T22:48:23Z",
      "updated_at": "2021-05-05T05:08:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To protect your mobile application's security and your users' data privacy, New Relic only records performance data, as described in this document. We do not collect any data used or stored by the monitored app. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Data collection When you install New Relic, our mobile monitoring capabilities become part of your iOS or Android app. These capabilities live within your application's \"sandbox,\" so they cannot access anything other than performance data from your mobile app. We do not collect performance data about the device itself, such as battery level. Our mobile SDK agent collects and sends specific data to the New Relic collector, including: Mobile data collected Comments Devices Length of application session Wireless carrier's name The device's model name and manufacturer, and its operating system version Certain package, class, method, and thread names A unique instance identifier Requests and responses URLs of HTTP requests, along with HTTP status code, response time, and size of the request and response body Operating system error code for network failures (HTTP requests that fail to complete) The first 2KB of the response body when the HTTP request receives a 4xx or 5xx response status code Android only: A stack trace when the HTTP request receives a 4xx or 5xx response status code The agent sends all data using HTTPS encryption and validates the collector's SSL certificate. This prevents common data sniffing and server spoofing attacks. The agent also removes the query string, fragment identifier, username, and password from each URL before sending the data. Secure data endpoints Our mobile SDK agent sends harvested data to the collectors for processing. You can redirect those data posts to proxy or delegate servers for secure data handling. Android: You can use APIs to specify the URI authority of harvest and crash collector data endpoints. For more information, see the Android agent configuration and feature flags documentation. iOS: For more information, see the iOS agent configuration and feature flags documentation. Unique identifiers Our mobile SDK agent assigns a unique identifier to each installed app instance in order to track discrete installs, identify recurring sessions, and correlate performance over time. Mobile agent Identifiers Android Our Android agent generates a cryptographically strong UUID and stores it in the app's SharedPreferences. For more information, see our Android compatibility and requirements documentation. iOS The security measures used for iOS depend on the agent version. In versions 5.3.5 or higher, the iOS agent uses the IdentifierForVendor property to provide a unique device ID. In versions 5.3.4 or lower, the iOS agent used the SecureUDID open source library. SecureUDID is used by many third party libraries and is an accepted industry standard that does not violate Apple App store guidelines. SecureUDID does not use device hardware identifiers such as IMEI. Note that our mobile SDK does not collect IDFA (Identity For Advertisers). For more information, see our iOS compatibility and requirements documentation. No remote updates New Relic does not have the ability to update mobile agents remotely. Using the agent will not introduce any code into your mobile app without your knowledge. Data storage Our mobile SDK agent stores configuration information using your app's normal preferences or settings API on the mobile device. This configuration includes your: Application token Application version number Android or iOS SDK agent version number Settings such as the maximum number of HTTP requests to track per minute Performance data is buffered in memory. It is never written to the device's storage. Server-side data storage for mobile apps is handled in the same way as all other applications monitored by New Relic. For more information, see our security documentation about hosting and data storage. In general, we retain performance data according to the more generous time period of either your web or your mobile subscription. We also retain aggregate records of the number of active instances of your application. Instrumentation added to your code Our mobile SDK agent injects code into certain method calls within your application in order to collect performance data. This can have the effect of adding stack frames to your application's call graph where our code executes. This allows us to time and monitor the inputs and outputs of various APIs. This added code has been reviewed and tested for security-related flaws, and it incorporates best practices related to secure coding. Because our code runs within your application's process, it is subject to the same rights and restrictions as your own code. In addition, our iOS agent registers an NSURLProtocol handler to track NSURLConnection-based networking activity. This instrumentation is compatible with other custom NSURLProtocol handlers your application may register. The handler is registered within a single application process, so it is unable to monitor networking requests originating from other applications or the underlying operating system. User's IP address Our mobile SDK agent captures the user's IP address to enrich data for additional user information. The IP address is used as a lookup value that maps to additional details and allows our customers to diagnose performance issues. IP address lookup values include: App name Country code Region Postal code Latitude Longitude Area code For more information about events and attributes for mobile monitoring, see our data dictionary. New Relic does not retain the user's IP address after the attributes have been mapped. The IP address value is cached in memory for up to six hours before being discarded. If you have questions or concerns about this use of IP addresses with regards to your own regulatory obligations for notice and consent, please contact your privacy or legal teams.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.807945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Security for <em>mobile</em> apps",
        "sections": "Security for <em>mobile</em> apps",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": " privacy documentation, or visit the <em>New</em> <em>Relic</em> security website. Data collection When you install <em>New</em> <em>Relic</em>, our <em>mobile</em> <em>monitoring</em> capabilities become part of your iOS or Android app. These capabilities live within your application&#x27;s &quot;sandbox,&quot; so they cannot access anything other than performance data"
      },
      "id": "603eb1c564441fa7e44e88a5"
    },
    {
      "sections": [
        "Mobile monitoring alert information",
        "Mobile alert conditions",
        "Execution time",
        "Errors",
        "Crash reporting",
        "Tip",
        "Custom",
        "View policies and conditions",
        "View events and activities",
        "View alert violations",
        "Important"
      ],
      "title": "Mobile monitoring alert information",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Get started"
      ],
      "external_id": "93dd2fd0c629d0653bcb69533dd62162814a5ebd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/get-started/mobile-monitoring-alert-information/",
      "published_at": "2021-06-25T22:43:44Z",
      "updated_at": "2021-03-13T02:32:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Well-defined alerts help notify individuals or teams about changes in their systems. You can use any of our Alerts and Applied Intelligence capabilities across all the entities you monitor with New Relic. For example, you can use New Relic Alerts to manage alert policies and conditions that focus on the metrics for mobile apps you monitor with New Relic. After you define alert conditions for your mobile apps, you can view that information in the Alerts UI or in other UI experiences, like the mobile monitoring UI. Mobile alert conditions Use any of the following conditions and thresholds when you set up alerts for your mobile apps: Execution time Execution time metrics include Database, Images, JSON, Network, and View loading. Define the thresholds for these metrics by selecting a time and duration. Errors Error metrics include Network error percentage and Status error percentage. Define the thresholds for these metrics by selecting a error percentage and duration. Crash reporting You may want to be notified when your app's crash rate goes above a certain threshold. Define the thresholds for these metrics by selecting an error percentage and duration. Tip Get notified about your exceeding app crash rate as soon as it happens by setting up notification channels, including PagerDuty and Slack. Custom Create your own custom metric to fit specific alert needs. Add a name for the customized metric, and define your own thresholds. View policies and conditions To view alert policy and condition information for a specific mobile app: Go to one.newrelic.com, click Mobile, and click Alert conditions. From the Alert conditions page, use the available tools to search, sort, view, or update the alert conditions and their associated policies. View events and activities To view summary information about events and other activity directly from the mobile monitoring UI: Go to one.newrelic.com and click Mobile. From the index, mouse over the entity's color-coded health status, select a link from the Mobile activity list, or select a mobile app to view additional details. For example, if a Critical alert violation occurs: The health status indicator turns red on the mobile index and on the selected app. The background color for various charts changes to pink. On your list of monitored mobile apps, the Application activity section shows Warning (yellow) and Critical (red) violations as applicable. To learn more about an alert violation, mouse over or select any pink area on a chart. View alert violations Important In July 2020, we transitioned alert violations for browser apps, mobile apps, and synthetic monitors to a new format in one.newrelic.com. For more information, see the Applied Intelligence and alerting docs and this Explorers Hub post. If an alert condition has thresholds set up for Warning (yellow) or Critical (red) violations, the color-coded health status for a product entity will change to indicate a violation. You can view the violations directly from the mobile app's page in New Relic: Go to one.newrelic.com and click Mobile. Select a mobile app, and then review its Open violations.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.9655,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Mobile</em> <em>monitoring</em> alert information",
        "sections": "<em>Mobile</em> <em>monitoring</em> alert information",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": " on the metrics for <em>mobile</em> apps you <em>monitor</em> with <em>New</em> <em>Relic</em>. After you define alert conditions for your <em>mobile</em> apps, you can view that information in the Alerts UI or in other UI experiences, like the <em>mobile</em> <em>monitoring</em> UI. <em>Mobile</em> alert conditions Use any of the following conditions and thresholds when"
      },
      "id": "6044144228ccbcd7422c608a"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.35518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": " <em>Relic</em> <em>Mobile</em>.) Go to one.newrelic.com and click <em>Mobile</em>. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app From the <em>Get</em> <em>Started</em> page, select tvOS as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, and select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em>"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile/get-started/mobile-monitoring-alert-information": [
    {
      "sections": [
        "Security for mobile apps",
        "Data collection",
        "Secure data endpoints",
        "Unique identifiers",
        "No remote updates",
        "Data storage",
        "Instrumentation added to your code",
        "User's IP address"
      ],
      "title": "Security for mobile apps",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Get started"
      ],
      "external_id": "c1f31e708e4710eb4823467a43ab30af1f29243c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/get-started/security-mobile-apps/",
      "published_at": "2021-06-25T22:48:23Z",
      "updated_at": "2021-05-05T05:08:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To protect your mobile application's security and your users' data privacy, New Relic only records performance data, as described in this document. We do not collect any data used or stored by the monitored app. For more information about New Relic's security measures, see our security and data privacy documentation, or visit the New Relic security website. Data collection When you install New Relic, our mobile monitoring capabilities become part of your iOS or Android app. These capabilities live within your application's \"sandbox,\" so they cannot access anything other than performance data from your mobile app. We do not collect performance data about the device itself, such as battery level. Our mobile SDK agent collects and sends specific data to the New Relic collector, including: Mobile data collected Comments Devices Length of application session Wireless carrier's name The device's model name and manufacturer, and its operating system version Certain package, class, method, and thread names A unique instance identifier Requests and responses URLs of HTTP requests, along with HTTP status code, response time, and size of the request and response body Operating system error code for network failures (HTTP requests that fail to complete) The first 2KB of the response body when the HTTP request receives a 4xx or 5xx response status code Android only: A stack trace when the HTTP request receives a 4xx or 5xx response status code The agent sends all data using HTTPS encryption and validates the collector's SSL certificate. This prevents common data sniffing and server spoofing attacks. The agent also removes the query string, fragment identifier, username, and password from each URL before sending the data. Secure data endpoints Our mobile SDK agent sends harvested data to the collectors for processing. You can redirect those data posts to proxy or delegate servers for secure data handling. Android: You can use APIs to specify the URI authority of harvest and crash collector data endpoints. For more information, see the Android agent configuration and feature flags documentation. iOS: For more information, see the iOS agent configuration and feature flags documentation. Unique identifiers Our mobile SDK agent assigns a unique identifier to each installed app instance in order to track discrete installs, identify recurring sessions, and correlate performance over time. Mobile agent Identifiers Android Our Android agent generates a cryptographically strong UUID and stores it in the app's SharedPreferences. For more information, see our Android compatibility and requirements documentation. iOS The security measures used for iOS depend on the agent version. In versions 5.3.5 or higher, the iOS agent uses the IdentifierForVendor property to provide a unique device ID. In versions 5.3.4 or lower, the iOS agent used the SecureUDID open source library. SecureUDID is used by many third party libraries and is an accepted industry standard that does not violate Apple App store guidelines. SecureUDID does not use device hardware identifiers such as IMEI. Note that our mobile SDK does not collect IDFA (Identity For Advertisers). For more information, see our iOS compatibility and requirements documentation. No remote updates New Relic does not have the ability to update mobile agents remotely. Using the agent will not introduce any code into your mobile app without your knowledge. Data storage Our mobile SDK agent stores configuration information using your app's normal preferences or settings API on the mobile device. This configuration includes your: Application token Application version number Android or iOS SDK agent version number Settings such as the maximum number of HTTP requests to track per minute Performance data is buffered in memory. It is never written to the device's storage. Server-side data storage for mobile apps is handled in the same way as all other applications monitored by New Relic. For more information, see our security documentation about hosting and data storage. In general, we retain performance data according to the more generous time period of either your web or your mobile subscription. We also retain aggregate records of the number of active instances of your application. Instrumentation added to your code Our mobile SDK agent injects code into certain method calls within your application in order to collect performance data. This can have the effect of adding stack frames to your application's call graph where our code executes. This allows us to time and monitor the inputs and outputs of various APIs. This added code has been reviewed and tested for security-related flaws, and it incorporates best practices related to secure coding. Because our code runs within your application's process, it is subject to the same rights and restrictions as your own code. In addition, our iOS agent registers an NSURLProtocol handler to track NSURLConnection-based networking activity. This instrumentation is compatible with other custom NSURLProtocol handlers your application may register. The handler is registered within a single application process, so it is unable to monitor networking requests originating from other applications or the underlying operating system. User's IP address Our mobile SDK agent captures the user's IP address to enrich data for additional user information. The IP address is used as a lookup value that maps to additional details and allows our customers to diagnose performance issues. IP address lookup values include: App name Country code Region Postal code Latitude Longitude Area code For more information about events and attributes for mobile monitoring, see our data dictionary. New Relic does not retain the user's IP address after the attributes have been mapped. The IP address value is cached in memory for up to six hours before being discarded. If you have questions or concerns about this use of IP addresses with regards to your own regulatory obligations for notice and consent, please contact your privacy or legal teams.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.807945,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Security for <em>mobile</em> apps",
        "sections": "Security for <em>mobile</em> apps",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": " privacy documentation, or visit the <em>New</em> <em>Relic</em> security website. Data collection When you install <em>New</em> <em>Relic</em>, our <em>mobile</em> <em>monitoring</em> capabilities become part of your iOS or Android app. These capabilities live within your application&#x27;s &quot;sandbox,&quot; so they cannot access anything other than performance data"
      },
      "id": "603eb1c564441fa7e44e88a5"
    },
    {
      "sections": [
        "Introduction to mobile monitoring",
        "Tip",
        "How we use mobile monitoring",
        "1. Alert notification shows new version crashes",
        "2. Crash analysis pinpoints exception, location, and more",
        "3. Problem solved, focus on improving app performance",
        "Improve frontend and backend performance",
        "Get started with mobile monitoring"
      ],
      "title": "Introduction to mobile monitoring",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Get started"
      ],
      "external_id": "4e60f9568c1ffaf583f47bebfe1cecf5bde82a5b",
      "image": "https://docs.newrelic.com/static/e08d11d3f4c214d806d0cd7479175699/e5166/crash-analysis-workflow.jpg",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/get-started/introduction-mobile-monitoring/",
      "published_at": "2021-06-25T23:19:15Z",
      "updated_at": "2021-03-16T09:41:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's mobile monitoring capabilities help you gain deeper visibility into how to analyze your Android and iOS application performance and troubleshoot crashes. You can also examine HTTP and other network performance for unexpected lag, which will in turn help you collaborate more efficiently with your backend teams. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. How we use mobile monitoring At New Relic, we have our own mobile developers who create iOS and Android apps so our customers can use New Relic from their mobile devices. During a feature deploy, we encountered a small bug that caused an edge case crash with our Android app. This happened after we had created, tested, and deployed the new feature. Because we work at New Relic, we also use New Relic One to analyze and troubleshoot our mobile apps. To give you an idea of how to explore the power of mobile monitoring, here's an example of how our own mobile engineers used it to track this small bug. A workflow to identify and resolve mobile app crashes using New Relic. 1. Alert notification shows new version crashes The night after a new release, our on-call developer received an alert notification on his mobile phone. The Alerts page indicated that some customers were seeing crashes on the new version of our Android app. Moving to his desktop browser, he checked the Summary page. The overview showed an increase in crashes for the newest version. By filtering for the latest version and setting the time picker to the past 24 hours, he could proceed with crash analysis. An example of using the mobile Summary page to filter to an Android version with crashes. 2. Crash analysis pinpoints exception, location, and more By clicking the Crashes chart title on the mobile Summary page, the Crash analysis page opened with the same 24-hour time frame and filter to this Android version. Here our developer could see a significant number of crashes for the selected version. This reinforced his suspicion there was bad code somewhere in the recent deployment. The developer clicked the link for the crash type to examine the exception, location, and error message. He also examined the stack trace, interaction trail, and event trail to quickly understand where users were impacted. An example of using the Crash analysis page to track down the cause for crashes for a new release by examining the exception, location, and error message. From here the developer saw the error. The new feature had a specific line of bad code that was crashing the app for customers who only used New Relic to monitor one app rather than multiple apps. The team released a hot fix in less than an hour, and the crash rate quickly de-escalated to 0.2%. 3. Problem solved, focus on improving app performance The problem was solved, but the team continues to use New Relic to make sure the most important workflows are running correctly and quickly. We also share HTTP and other network performance trends with our backend API developer teams. Improve frontend and backend performance More than a tool for crash analysis, our mobile monitoring capabilities can help you identify opportunities to speed app performance. For example, you can: Create dashboards to query, visualize, and share performance data. Identify handled exceptions to streamline workflows. See trends with sessions, devices, geographical locations, operating systems, carriers, requests and responses, etc. with crash profiles and HTTP profiles. Set up alert notifications for execution time, errors, etc. Define custom attributes and events to obtain additional, specific details about the mobile data that matters the most to your organization. And more! In addition to crash analysis, do more to fine-tune mobile app performance. Great mobile apps increasingly rely on backend systems to power their functionality, such as requesting product information, authenticating users, or streaming media content. But some backend issues can lead to upstream mobile app crashes, freezes, and broken functionality that impacts end users, including: Changed or non-versioned API endpoints Bad payloads API timeouts Slow or deprecated API endpoints You can use the network pages in our mobile monitoring UI to identify problems that surface through HTTP requests, errors, and other network issues. You can also query your data. Then create dashboards and share this information with backend API developer teams and others in your organization to help improve the overall end user experience with your mobile app. You can also improve your customers' overall digital experience: Get rapid visibility into how your end users experience your mobile apps and web browsers. Analyze actual or simulated end-user behavior to hone in on metrics like load time, availability, and errors, while staying grounded in the backend services that enable these digital experiences. Get started with mobile monitoring Before you install and configure New Relic's functionality for your mobile applications, follow these guidelines for compatibility and other requirements: Android compatibility and requirements iOS compatibility and requirements Then continue with the installation and configuration procedures for your Android, iOS, tvOS, or Cordova application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.19661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>mobile</em> <em>monitoring</em>",
        "sections": "<em>Get</em> <em>started</em> with <em>mobile</em> <em>monitoring</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> capabilities help you gain deeper visibility into how to analyze your Android and iOS application performance and troubleshoot crashes. You can also examine HTTP and other network performance for unexpected lag, which will in turn help you collaborate more efficiently"
      },
      "id": "603eb1c4e7b9d217802a07a7"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.35518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": " <em>Relic</em> <em>Mobile</em>.) Go to one.newrelic.com and click <em>Mobile</em>. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app From the <em>Get</em> <em>Started</em> page, select tvOS as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, and select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em>"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile/get-started/security-mobile-apps": [
    {
      "sections": [
        "Introduction to mobile monitoring",
        "Tip",
        "How we use mobile monitoring",
        "1. Alert notification shows new version crashes",
        "2. Crash analysis pinpoints exception, location, and more",
        "3. Problem solved, focus on improving app performance",
        "Improve frontend and backend performance",
        "Get started with mobile monitoring"
      ],
      "title": "Introduction to mobile monitoring",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Get started"
      ],
      "external_id": "4e60f9568c1ffaf583f47bebfe1cecf5bde82a5b",
      "image": "https://docs.newrelic.com/static/e08d11d3f4c214d806d0cd7479175699/e5166/crash-analysis-workflow.jpg",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/get-started/introduction-mobile-monitoring/",
      "published_at": "2021-06-25T23:19:15Z",
      "updated_at": "2021-03-16T09:41:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's mobile monitoring capabilities help you gain deeper visibility into how to analyze your Android and iOS application performance and troubleshoot crashes. You can also examine HTTP and other network performance for unexpected lag, which will in turn help you collaborate more efficiently with your backend teams. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. How we use mobile monitoring At New Relic, we have our own mobile developers who create iOS and Android apps so our customers can use New Relic from their mobile devices. During a feature deploy, we encountered a small bug that caused an edge case crash with our Android app. This happened after we had created, tested, and deployed the new feature. Because we work at New Relic, we also use New Relic One to analyze and troubleshoot our mobile apps. To give you an idea of how to explore the power of mobile monitoring, here's an example of how our own mobile engineers used it to track this small bug. A workflow to identify and resolve mobile app crashes using New Relic. 1. Alert notification shows new version crashes The night after a new release, our on-call developer received an alert notification on his mobile phone. The Alerts page indicated that some customers were seeing crashes on the new version of our Android app. Moving to his desktop browser, he checked the Summary page. The overview showed an increase in crashes for the newest version. By filtering for the latest version and setting the time picker to the past 24 hours, he could proceed with crash analysis. An example of using the mobile Summary page to filter to an Android version with crashes. 2. Crash analysis pinpoints exception, location, and more By clicking the Crashes chart title on the mobile Summary page, the Crash analysis page opened with the same 24-hour time frame and filter to this Android version. Here our developer could see a significant number of crashes for the selected version. This reinforced his suspicion there was bad code somewhere in the recent deployment. The developer clicked the link for the crash type to examine the exception, location, and error message. He also examined the stack trace, interaction trail, and event trail to quickly understand where users were impacted. An example of using the Crash analysis page to track down the cause for crashes for a new release by examining the exception, location, and error message. From here the developer saw the error. The new feature had a specific line of bad code that was crashing the app for customers who only used New Relic to monitor one app rather than multiple apps. The team released a hot fix in less than an hour, and the crash rate quickly de-escalated to 0.2%. 3. Problem solved, focus on improving app performance The problem was solved, but the team continues to use New Relic to make sure the most important workflows are running correctly and quickly. We also share HTTP and other network performance trends with our backend API developer teams. Improve frontend and backend performance More than a tool for crash analysis, our mobile monitoring capabilities can help you identify opportunities to speed app performance. For example, you can: Create dashboards to query, visualize, and share performance data. Identify handled exceptions to streamline workflows. See trends with sessions, devices, geographical locations, operating systems, carriers, requests and responses, etc. with crash profiles and HTTP profiles. Set up alert notifications for execution time, errors, etc. Define custom attributes and events to obtain additional, specific details about the mobile data that matters the most to your organization. And more! In addition to crash analysis, do more to fine-tune mobile app performance. Great mobile apps increasingly rely on backend systems to power their functionality, such as requesting product information, authenticating users, or streaming media content. But some backend issues can lead to upstream mobile app crashes, freezes, and broken functionality that impacts end users, including: Changed or non-versioned API endpoints Bad payloads API timeouts Slow or deprecated API endpoints You can use the network pages in our mobile monitoring UI to identify problems that surface through HTTP requests, errors, and other network issues. You can also query your data. Then create dashboards and share this information with backend API developer teams and others in your organization to help improve the overall end user experience with your mobile app. You can also improve your customers' overall digital experience: Get rapid visibility into how your end users experience your mobile apps and web browsers. Analyze actual or simulated end-user behavior to hone in on metrics like load time, availability, and errors, while staying grounded in the backend services that enable these digital experiences. Get started with mobile monitoring Before you install and configure New Relic's functionality for your mobile applications, follow these guidelines for compatibility and other requirements: Android compatibility and requirements iOS compatibility and requirements Then continue with the installation and configuration procedures for your Android, iOS, tvOS, or Cordova application.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.19661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>mobile</em> <em>monitoring</em>",
        "sections": "<em>Get</em> <em>started</em> with <em>mobile</em> <em>monitoring</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> capabilities help you gain deeper visibility into how to analyze your Android and iOS application performance and troubleshoot crashes. You can also examine HTTP and other network performance for unexpected lag, which will in turn help you collaborate more efficiently"
      },
      "id": "603eb1c4e7b9d217802a07a7"
    },
    {
      "sections": [
        "Mobile monitoring alert information",
        "Mobile alert conditions",
        "Execution time",
        "Errors",
        "Crash reporting",
        "Tip",
        "Custom",
        "View policies and conditions",
        "View events and activities",
        "View alert violations",
        "Important"
      ],
      "title": "Mobile monitoring alert information",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Get started"
      ],
      "external_id": "93dd2fd0c629d0653bcb69533dd62162814a5ebd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/get-started/mobile-monitoring-alert-information/",
      "published_at": "2021-06-25T22:43:44Z",
      "updated_at": "2021-03-13T02:32:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Well-defined alerts help notify individuals or teams about changes in their systems. You can use any of our Alerts and Applied Intelligence capabilities across all the entities you monitor with New Relic. For example, you can use New Relic Alerts to manage alert policies and conditions that focus on the metrics for mobile apps you monitor with New Relic. After you define alert conditions for your mobile apps, you can view that information in the Alerts UI or in other UI experiences, like the mobile monitoring UI. Mobile alert conditions Use any of the following conditions and thresholds when you set up alerts for your mobile apps: Execution time Execution time metrics include Database, Images, JSON, Network, and View loading. Define the thresholds for these metrics by selecting a time and duration. Errors Error metrics include Network error percentage and Status error percentage. Define the thresholds for these metrics by selecting a error percentage and duration. Crash reporting You may want to be notified when your app's crash rate goes above a certain threshold. Define the thresholds for these metrics by selecting an error percentage and duration. Tip Get notified about your exceeding app crash rate as soon as it happens by setting up notification channels, including PagerDuty and Slack. Custom Create your own custom metric to fit specific alert needs. Add a name for the customized metric, and define your own thresholds. View policies and conditions To view alert policy and condition information for a specific mobile app: Go to one.newrelic.com, click Mobile, and click Alert conditions. From the Alert conditions page, use the available tools to search, sort, view, or update the alert conditions and their associated policies. View events and activities To view summary information about events and other activity directly from the mobile monitoring UI: Go to one.newrelic.com and click Mobile. From the index, mouse over the entity's color-coded health status, select a link from the Mobile activity list, or select a mobile app to view additional details. For example, if a Critical alert violation occurs: The health status indicator turns red on the mobile index and on the selected app. The background color for various charts changes to pink. On your list of monitored mobile apps, the Application activity section shows Warning (yellow) and Critical (red) violations as applicable. To learn more about an alert violation, mouse over or select any pink area on a chart. View alert violations Important In July 2020, we transitioned alert violations for browser apps, mobile apps, and synthetic monitors to a new format in one.newrelic.com. For more information, see the Applied Intelligence and alerting docs and this Explorers Hub post. If an alert condition has thresholds set up for Warning (yellow) or Critical (red) violations, the color-coded health status for a product entity will change to indicate a violation. You can view the violations directly from the mobile app's page in New Relic: Go to one.newrelic.com and click Mobile. Select a mobile app, and then review its Open violations.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.96549,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Mobile</em> <em>monitoring</em> alert information",
        "sections": "<em>Mobile</em> <em>monitoring</em> alert information",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": " on the metrics for <em>mobile</em> apps you <em>monitor</em> with <em>New</em> <em>Relic</em>. After you define alert conditions for your <em>mobile</em> apps, you can view that information in the Alerts UI or in other UI experiences, like the <em>mobile</em> <em>monitoring</em> UI. <em>Mobile</em> alert conditions Use any of the following conditions and thresholds when"
      },
      "id": "6044144228ccbcd7422c608a"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.35518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": " <em>Relic</em> <em>Mobile</em>.) Go to one.newrelic.com and click <em>Mobile</em>. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app From the <em>Get</em> <em>Started</em> page, select tvOS as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, and select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em>"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile/maintenance/add-custom-data-new-relic-mobile": [
    {
      "sections": [
        "Customize mobile app settings",
        "Important",
        "Change name of monitored app",
        "Caution",
        "Agent configuration"
      ],
      "title": "Customize mobile app settings",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Maintenance"
      ],
      "external_id": "8719a1897be60f1d77831f1df82c464884cafadc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/maintenance/customizing-your-mobile-app-settings/",
      "published_at": "2021-06-25T23:08:37Z",
      "updated_at": "2021-03-16T09:42:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the New Relic mobile monitoring UI, under Settings, there are options for changing your New Relic-monitored mobile app, editing alert conditions, and editing other settings. To get to mobile monitoring settings: Go to one.newrelic.com, click Mobile, and select a monitored app. Look at the UI pages under the Settings heading. Important Access to this feature depends on user permissions. Available settings include: If you want to... Select this Change your mobile app's name Application Change the Caution and Critical alert conditions for HTTP status code error rates, network failure error rates, or response time Alert conditions Turn on or turn off alert notifications for your mobile app Alert conditions Install our mobile monitoring Installation Upgrade our Mobile SDK in your mobile app Upgrade View your mobile app's authentication token Application or Installation Change another mobile app's settings Select your choice from the dropdown next to the currently selected mobile app's name Change name of monitored app You can change your app's name in the UI anytime, and our mobile monitoring will continue to collect, aggregate, and report data to your app based on the underlying application token used when configuring your mobile app. This means you don't need to change any code in your application. Caution Data reported from your mobile app is tied to a named app based on the application token. All apps with a single application token will report into the same app in our mobile monitoring UI, regardless of the app's name when installed on a mobile device. To rename your mobile app: Go to one.newrelic.com, click Mobile, and select a monitored app. Select Application. Type a new name and select Save settings. Agent configuration You can also configure the agent via API calls: Add custom data to mobile monitoring Android configuration and feature flags iOS configuration and feature flags",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.76198,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Customize <em>mobile</em> app settings",
        "sections": "Customize <em>mobile</em> app settings",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "In the <em>New</em> <em>Relic</em> <em>mobile</em> <em>monitoring</em> UI, under Settings, there are options for changing your <em>New</em> <em>Relic</em>-monitored <em>mobile</em> app, editing alert conditions, and editing other settings. To get to <em>mobile</em> <em>monitoring</em> settings: Go to one.newrelic.com, click <em>Mobile</em>, and select a monitored app. Look at the UI"
      },
      "id": "603ebe82196a67b7eca83d94"
    },
    {
      "sections": [
        "Application token for New Relic mobile monitoring",
        "Tip"
      ],
      "title": "Application token for New Relic mobile monitoring",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Maintenance"
      ],
      "external_id": "4321d8be4040736dd9ca00e165cf6e0df8d2db5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/maintenance/viewing-your-application-token/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-16T09:42:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's mobile monitoring automatically assigns a unique, 40-character hexadecimal string to each mobile app you monitor, for both the US and EU datacenter. This application token is similar to a New Relic license key and is required to authenticate your app's data. To view your application token: Go to one.newrelic.com, click Mobile, and select a monitored app. Select Application or Installation. Tip Data reported from your mobile app is tied to a named app based on the application token. All apps with a single application token will report to the same place in our mobile monitoring UI, regardless of the app's name when installed on a mobile device. We recommend using a different application token for each platform to separate iOS and Android versions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.97867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Application token for <em>New</em> <em>Relic</em> <em>mobile</em> <em>monitoring</em>",
        "sections": "Application token for <em>New</em> <em>Relic</em> <em>mobile</em> <em>monitoring</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> automatically assigns a unique, 40-character hexadecimal string to each <em>mobile</em> app you <em>monitor</em>, for both the US and EU datacenter. This application token is similar to a <em>New</em> <em>Relic</em> license key and is required to authenticate your app&#x27;s data. To view your application"
      },
      "id": "603ebe1964441fd8864e88aa"
    },
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.61434,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors page helps you to better understand HTTP errors and network failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile/maintenance/customizing-your-mobile-app-settings": [
    {
      "sections": [
        "Application token for New Relic mobile monitoring",
        "Tip"
      ],
      "title": "Application token for New Relic mobile monitoring",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Maintenance"
      ],
      "external_id": "4321d8be4040736dd9ca00e165cf6e0df8d2db5c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/maintenance/viewing-your-application-token/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-16T09:42:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's mobile monitoring automatically assigns a unique, 40-character hexadecimal string to each mobile app you monitor, for both the US and EU datacenter. This application token is similar to a New Relic license key and is required to authenticate your app's data. To view your application token: Go to one.newrelic.com, click Mobile, and select a monitored app. Select Application or Installation. Tip Data reported from your mobile app is tied to a named app based on the application token. All apps with a single application token will report to the same place in our mobile monitoring UI, regardless of the app's name when installed on a mobile device. We recommend using a different application token for each platform to separate iOS and Android versions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 134.97867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Application token for <em>New</em> <em>Relic</em> <em>mobile</em> <em>monitoring</em>",
        "sections": "Application token for <em>New</em> <em>Relic</em> <em>mobile</em> <em>monitoring</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> automatically assigns a unique, 40-character hexadecimal string to each <em>mobile</em> app you <em>monitor</em>, for both the US and EU datacenter. This application token is similar to a <em>New</em> <em>Relic</em> license key and is required to authenticate your app&#x27;s data. To view your application"
      },
      "id": "603ebe1964441fd8864e88aa"
    },
    {
      "sections": [
        "Add custom data to mobile monitoring",
        "Choose a custom data type",
        "Add session-level custom attributes",
        "Record breadcrumbs",
        "Create custom interactions",
        "Record custom events"
      ],
      "title": "Add custom data to mobile monitoring",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Maintenance"
      ],
      "external_id": "81d73d6610c6cc08cc21a5dbbb1ee1e507f6db16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/maintenance/add-custom-data-new-relic-mobile/",
      "published_at": "2021-06-25T22:49:08Z",
      "updated_at": "2021-03-11T11:17:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic mobile monitoring includes a number of ways to customize and extend the data your mobile app reports. We refer to this type of implementation as \"custom instrumentation.\" This document explains how to get additional data into New Relic, and how to view that new data in the UI. Choose a custom data type You can use these options to create your own data types for custom instrumentation for your mobile apps. Using these four options, you can get a wide range of data based on your needs for your apps. Custom data options Description Session-level custom attributes In creating your own attributes, consisting of a key-value pair, you can add custom data for use in tracking session data. Custom breadcrumbs Useful for troubleshooting crash causes, custom breadcrumb events track the user's code-level path through the app by seeing which breadcrumb API calls were reached and reporting app status details from those moments. Custom interactions Custom interactions give you tracing power so you can debug method timings and improve network call efficiency. A common use of interactions is to understand the underlying activity associated with loading a particular app screen. Custom events You can instrument custom events to collect data about user activity as a user navigates through your app. That user activity will in turn trigger other data collection: a collection of breadcrumbs, auto-instrumented HTTP requests and errors, auto-instrumented interactions, and custom interactions. Add session-level custom attributes Custom attributes annotate (or \"tag\") your mobile monitoring data. A custom attribute consists of a key-value pair. For example, you might create the key userEmail with values such as alice@bigcorp.test and bob@example.com. The agent automatically attaches custom attributes to default mobile monitoring data, and to any breadcrumbs or custom events you create. You can use custom attributes to capture usage data that's relevant to your business. Common examples include account names or IDs, user emails, and subscription levels. You can then filter and facet in the Crash analysis page and via NRQL query. Setting custom attributes will add the key-value pair information at the session level. All default mobile monitoring events inherit these session-level custom attributes. As a best practice, use custom attributes to track a single value for a key that can be true across a session (for example, a user's subscription level, or whether SAML was used to log in). To track the change of a value over the course of a session, like a change in connection type, you would instead record a breadcrumb and its own custom attributes. To track a series of discrete user actions that occur across the course of a session, use custom events. To add custom attributes, see: Android: Use setAttribute() and incrementAttribute(). iOS: Use setAttribute() and incrementAttribute(). Record breadcrumbs Breadcrumbs track the state of your app as it runs, then report a snapshot of that state if your app crashes. This allows you to debug your mobile app crashes more easily. Custom interactions only inherit custom attributes created at the session level. Breadcrumbs will inherit those same session-level custom attributes, but optionally you can also report additional custom attributes specific to each recordBreadcrumb() API call. You can use breadcrumbs in several ways: You could record a breadcrumb event when your app receives an HTTP response, and also record the values in that response as custom attributes (for example, the response might tell the app what screen to display next or recording unique timestamps for each change in the course of a session). If the app crashes or throws errors, you will be able to see invalid data from the HTTP response. You could track the success of each step of your user login process, with perhaps a status attribute recording a success or failure key for each step. This would let you debug which step is causing issues. Once you have released a version of your app that creates MobileBreadcrumb custom events, you can see them in the crash event trail whenever they appear in the app's code path as part of a crashed session. You can also query them using NRQL and query either all breadcrumbs or just breadcrumbs from crashed sessions. This lets you see the frequency of app paths that include that particular breadcrumb. To add custom breadcrumbs, see: Android: Use recordBreadcrumb(). iOS: Use recordBreadcrumb(). Create custom interactions Our mobile monitoring agent begins instrumenting an interaction when it detects a screen load or partial screen load (such as fragments for Android or view controllers for iOS). New Relic automatically traces slow interactions, providing a complete, in-depth picture of a single slow interaction, including the methods that were called, what network requests were made, and the CPU and memory usage once that interaction started. Our mobile monitoring automatically selects data-rich traces. The specific criteria the agent looks for are interactions whose instrumented methods account for at least 30% of the overall interaction time. In addition to the auto-instrumentation, you can start a custom interaction to force the agent to start recording a trace beginning at that point in your app code and continuing across the subsequent methods and network calls. Custom interaction traces provide deep information. However, they increase the overhead of the agent compared to other custom data collection methods because of the large amount of data collected for the entire duration of an interaction. When associated with a crash, custom interactions show up in the crash event trail. You can also query them with NRQL for flexible analysis. Interactions are powerful for tracing but are less flexible in other ways than other custom data types: While custom breadcrumbs and custom events let you optimize your custom attributes to specific events, interactions can only inherit session-level attributes. You can also manually end a custom interaction. However, ensure that the interaction includes enough method activity to be recorded. If the agent does not detect any traced activity for 0.5 seconds, the agent stops the interaction tracing because it is assumed no interesting data remains. In addition, the agent can only trace one interaction at a time, so if a new interaction is triggered the current trace will automatically be stopped in preference for the new trace. To add custom interaction traces, see: Android: Use startInteraction() and endInteraction(). iOS: Create and complete interactions. You can also configure interaction tracing globally: Android: Disable entirely with withInteractionTracing(), or disable only auto-instrumented traces with withDefaultInteractions(). iOS: Disable entirely with NRFeatureFlag_InteractionTracing(), or disable only auto-instrumented traces with NRFeatureFlag_DefaultInteractions(). Record custom events Custom events are a powerful tool for reporting arbitrary user activity to New Relic. When associated with a crash, custom events show up in the crash event trail. You can also query them with NRQL for flexible analysis. Unlike custom interactions, custom events allow you to add custom attributes to a particular event within the user session. For example, you could record a custom event each time a user taps a button or accesses a certain feature, and then use NRQL to track how often that feature was used. Beyond a simple count, you can FACET on default mobile app attributes such as location, device, or carrier to analyze usage. Adding session-level custom attributes would let you further examine usage based on the criteria important to you, such as user subscription level or other user characteristics. Adding additional attributes for that custom event would allow you to track user behavior more closely: What data did they enter or what option did they select, for example. To add custom events, see: Android: Use recordCustomEvent(). iOS: Use recordCustomEvent().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.86969,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add custom data to <em>mobile</em> <em>monitoring</em>",
        "sections": "Add custom data to <em>mobile</em> <em>monitoring</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>New</em> <em>Relic</em> <em>mobile</em> <em>monitoring</em> includes a number of ways to customize and extend the data your <em>mobile</em> app reports. We refer to this type of implementation as &quot;custom instrumentation.&quot; This document explains how to get additional data into <em>New</em> <em>Relic</em>, and how to view that <em>new</em> data in the UI. Choose"
      },
      "id": "60450e5028ccbc3cfd2c60d2"
    },
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.61427,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors page helps you to better understand HTTP errors and network failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile/maintenance/viewing-your-application-token": [
    {
      "sections": [
        "Customize mobile app settings",
        "Important",
        "Change name of monitored app",
        "Caution",
        "Agent configuration"
      ],
      "title": "Customize mobile app settings",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Maintenance"
      ],
      "external_id": "8719a1897be60f1d77831f1df82c464884cafadc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/maintenance/customizing-your-mobile-app-settings/",
      "published_at": "2021-06-25T23:08:37Z",
      "updated_at": "2021-03-16T09:42:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the New Relic mobile monitoring UI, under Settings, there are options for changing your New Relic-monitored mobile app, editing alert conditions, and editing other settings. To get to mobile monitoring settings: Go to one.newrelic.com, click Mobile, and select a monitored app. Look at the UI pages under the Settings heading. Important Access to this feature depends on user permissions. Available settings include: If you want to... Select this Change your mobile app's name Application Change the Caution and Critical alert conditions for HTTP status code error rates, network failure error rates, or response time Alert conditions Turn on or turn off alert notifications for your mobile app Alert conditions Install our mobile monitoring Installation Upgrade our Mobile SDK in your mobile app Upgrade View your mobile app's authentication token Application or Installation Change another mobile app's settings Select your choice from the dropdown next to the currently selected mobile app's name Change name of monitored app You can change your app's name in the UI anytime, and our mobile monitoring will continue to collect, aggregate, and report data to your app based on the underlying application token used when configuring your mobile app. This means you don't need to change any code in your application. Caution Data reported from your mobile app is tied to a named app based on the application token. All apps with a single application token will report into the same app in our mobile monitoring UI, regardless of the app's name when installed on a mobile device. To rename your mobile app: Go to one.newrelic.com, click Mobile, and select a monitored app. Select Application. Type a new name and select Save settings. Agent configuration You can also configure the agent via API calls: Add custom data to mobile monitoring Android configuration and feature flags iOS configuration and feature flags",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.76198,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Customize <em>mobile</em> app settings",
        "sections": "Customize <em>mobile</em> app settings",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "In the <em>New</em> <em>Relic</em> <em>mobile</em> <em>monitoring</em> UI, under Settings, there are options for changing your <em>New</em> <em>Relic</em>-monitored <em>mobile</em> app, editing alert conditions, and editing other settings. To get to <em>mobile</em> <em>monitoring</em> settings: Go to one.newrelic.com, click <em>Mobile</em>, and select a monitored app. Look at the UI"
      },
      "id": "603ebe82196a67b7eca83d94"
    },
    {
      "sections": [
        "Add custom data to mobile monitoring",
        "Choose a custom data type",
        "Add session-level custom attributes",
        "Record breadcrumbs",
        "Create custom interactions",
        "Record custom events"
      ],
      "title": "Add custom data to mobile monitoring",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile",
        "Maintenance"
      ],
      "external_id": "81d73d6610c6cc08cc21a5dbbb1ee1e507f6db16",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile/maintenance/add-custom-data-new-relic-mobile/",
      "published_at": "2021-06-25T22:49:08Z",
      "updated_at": "2021-03-11T11:17:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic mobile monitoring includes a number of ways to customize and extend the data your mobile app reports. We refer to this type of implementation as \"custom instrumentation.\" This document explains how to get additional data into New Relic, and how to view that new data in the UI. Choose a custom data type You can use these options to create your own data types for custom instrumentation for your mobile apps. Using these four options, you can get a wide range of data based on your needs for your apps. Custom data options Description Session-level custom attributes In creating your own attributes, consisting of a key-value pair, you can add custom data for use in tracking session data. Custom breadcrumbs Useful for troubleshooting crash causes, custom breadcrumb events track the user's code-level path through the app by seeing which breadcrumb API calls were reached and reporting app status details from those moments. Custom interactions Custom interactions give you tracing power so you can debug method timings and improve network call efficiency. A common use of interactions is to understand the underlying activity associated with loading a particular app screen. Custom events You can instrument custom events to collect data about user activity as a user navigates through your app. That user activity will in turn trigger other data collection: a collection of breadcrumbs, auto-instrumented HTTP requests and errors, auto-instrumented interactions, and custom interactions. Add session-level custom attributes Custom attributes annotate (or \"tag\") your mobile monitoring data. A custom attribute consists of a key-value pair. For example, you might create the key userEmail with values such as alice@bigcorp.test and bob@example.com. The agent automatically attaches custom attributes to default mobile monitoring data, and to any breadcrumbs or custom events you create. You can use custom attributes to capture usage data that's relevant to your business. Common examples include account names or IDs, user emails, and subscription levels. You can then filter and facet in the Crash analysis page and via NRQL query. Setting custom attributes will add the key-value pair information at the session level. All default mobile monitoring events inherit these session-level custom attributes. As a best practice, use custom attributes to track a single value for a key that can be true across a session (for example, a user's subscription level, or whether SAML was used to log in). To track the change of a value over the course of a session, like a change in connection type, you would instead record a breadcrumb and its own custom attributes. To track a series of discrete user actions that occur across the course of a session, use custom events. To add custom attributes, see: Android: Use setAttribute() and incrementAttribute(). iOS: Use setAttribute() and incrementAttribute(). Record breadcrumbs Breadcrumbs track the state of your app as it runs, then report a snapshot of that state if your app crashes. This allows you to debug your mobile app crashes more easily. Custom interactions only inherit custom attributes created at the session level. Breadcrumbs will inherit those same session-level custom attributes, but optionally you can also report additional custom attributes specific to each recordBreadcrumb() API call. You can use breadcrumbs in several ways: You could record a breadcrumb event when your app receives an HTTP response, and also record the values in that response as custom attributes (for example, the response might tell the app what screen to display next or recording unique timestamps for each change in the course of a session). If the app crashes or throws errors, you will be able to see invalid data from the HTTP response. You could track the success of each step of your user login process, with perhaps a status attribute recording a success or failure key for each step. This would let you debug which step is causing issues. Once you have released a version of your app that creates MobileBreadcrumb custom events, you can see them in the crash event trail whenever they appear in the app's code path as part of a crashed session. You can also query them using NRQL and query either all breadcrumbs or just breadcrumbs from crashed sessions. This lets you see the frequency of app paths that include that particular breadcrumb. To add custom breadcrumbs, see: Android: Use recordBreadcrumb(). iOS: Use recordBreadcrumb(). Create custom interactions Our mobile monitoring agent begins instrumenting an interaction when it detects a screen load or partial screen load (such as fragments for Android or view controllers for iOS). New Relic automatically traces slow interactions, providing a complete, in-depth picture of a single slow interaction, including the methods that were called, what network requests were made, and the CPU and memory usage once that interaction started. Our mobile monitoring automatically selects data-rich traces. The specific criteria the agent looks for are interactions whose instrumented methods account for at least 30% of the overall interaction time. In addition to the auto-instrumentation, you can start a custom interaction to force the agent to start recording a trace beginning at that point in your app code and continuing across the subsequent methods and network calls. Custom interaction traces provide deep information. However, they increase the overhead of the agent compared to other custom data collection methods because of the large amount of data collected for the entire duration of an interaction. When associated with a crash, custom interactions show up in the crash event trail. You can also query them with NRQL for flexible analysis. Interactions are powerful for tracing but are less flexible in other ways than other custom data types: While custom breadcrumbs and custom events let you optimize your custom attributes to specific events, interactions can only inherit session-level attributes. You can also manually end a custom interaction. However, ensure that the interaction includes enough method activity to be recorded. If the agent does not detect any traced activity for 0.5 seconds, the agent stops the interaction tracing because it is assumed no interesting data remains. In addition, the agent can only trace one interaction at a time, so if a new interaction is triggered the current trace will automatically be stopped in preference for the new trace. To add custom interaction traces, see: Android: Use startInteraction() and endInteraction(). iOS: Create and complete interactions. You can also configure interaction tracing globally: Android: Disable entirely with withInteractionTracing(), or disable only auto-instrumented traces with withDefaultInteractions(). iOS: Disable entirely with NRFeatureFlag_InteractionTracing(), or disable only auto-instrumented traces with NRFeatureFlag_DefaultInteractions(). Record custom events Custom events are a powerful tool for reporting arbitrary user activity to New Relic. When associated with a crash, custom events show up in the crash event trail. You can also query them with NRQL for flexible analysis. Unlike custom interactions, custom events allow you to add custom attributes to a particular event within the user session. For example, you could record a custom event each time a user taps a button or accesses a certain feature, and then use NRQL to track how often that feature was used. Beyond a simple count, you can FACET on default mobile app attributes such as location, device, or carrier to analyze usage. Adding session-level custom attributes would let you further examine usage based on the criteria important to you, such as user subscription level or other user characteristics. Adding additional attributes for that custom event would allow you to track user behavior more closely: What data did they enter or what option did they select, for example. To add custom events, see: Android: Use recordCustomEvent(). iOS: Use recordCustomEvent().",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.86969,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add custom data to <em>mobile</em> <em>monitoring</em>",
        "sections": "Add custom data to <em>mobile</em> <em>monitoring</em>",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>New</em> <em>Relic</em> <em>mobile</em> <em>monitoring</em> includes a number of ways to customize and extend the data your <em>mobile</em> app reports. We refer to this type of implementation as &quot;custom instrumentation.&quot; This document explains how to get additional data into <em>New</em> <em>Relic</em>, and how to view that <em>new</em> data in the UI. Choose"
      },
      "id": "60450e5028ccbc3cfd2c60d2"
    },
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.61427,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors page helps you to better understand HTTP errors and network failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/crashnow-android-sdk-api": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15533,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/currentsessionid-android-sdk-api": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15533,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/end-interaction": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/increment-attribute": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15532,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/index": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 740.9022,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "New Relic Mobile <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the New Relic <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 717.5658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>Android</em> <em>SDK</em> <em>API</em>",
        "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "noticeHttpTransaction (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record HTTP transaction"
      ],
      "title": "noticeHttpTransaction (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "3232e4a19b883d229a9611a2a5cc7b4a002c9f84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-http-transaction/",
      "published_at": "2021-06-26T04:51:48Z",
      "updated_at": "2021-03-11T12:59:15Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeHttpTransaction(string $url, string $httpMethod, int $statusCode, long $startTime, long $endTime, long $bytesSent, long $bytesReceived [, string $responseBody]) Copy Tracks networks requests. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests and network failures. You can use noticeHttpTransaction to record HTTP transactions, with an option to also send a response body. If a network request fails, you can record details about the failure with noticeNetworkFailure(). For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $statusCode int Required. The statusCode of the HTTP response, such as 200 for OK. $startTime int Required. The start time of the request in milliseconds since the epoch. $endTime int Required. The end time of the request in milliseconds since the epoch. $bytesSent int Required. The number of bytes sent in the request. $bytesReceived int Required. The number of bytes received in the response. $responseBody string Optional. The response body of the HTTP response. The response body will be truncated and included in an HTTP Error metric if the HTTP transaction is an error. Examples Record HTTP transaction An example of tracking an HTTP transaction: public class CustomHttpMetricsLogger implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); //collect request start time long t1 = System.nanoTime(); //get the size of the request body long requestSize = null == request.body() ? 0 : request.body().contentLength(); //proceed with the request Response response = chain.proceed(request); //capture the time when response returns long t2 = System.nanoTime(); long responseSize = null == response.body() ? 0 : response.body().contentLength(); //tell new relic to notice this request NewRelic.noticeHttpTransaction(request.urlString(), request.method(), response.code(), t1, t2, requestSize, responseSize); //return response for processing return response; } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 686.9451,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeHttpTransaction (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeHttpTransaction (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>Android</em> <em>SDK</em> <em>API</em>",
        "body": " info on using the New Relic <em>Android</em> <em>SDK</em> <em>API</em>, see the usage guide. Parameters Parameter Description $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $statusCode int Required. The statusCode of the HTTP response, such as 200 for OK"
      },
      "id": "6044e8b6e7b9d26e235799e9"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-http-transaction": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15527,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15527,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    },
    {
      "sections": [
        "noticeHttpTransaction (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record HTTP transaction"
      ],
      "title": "noticeHttpTransaction (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "3232e4a19b883d229a9611a2a5cc7b4a002c9f84",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-http-transaction/",
      "published_at": "2021-06-26T04:51:48Z",
      "updated_at": "2021-03-11T12:59:15Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeHttpTransaction(string $url, string $httpMethod, int $statusCode, long $startTime, long $endTime, long $bytesSent, long $bytesReceived [, string $responseBody]) Copy Tracks networks requests. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests and network failures. You can use noticeHttpTransaction to record HTTP transactions, with an option to also send a response body. If a network request fails, you can record details about the failure with noticeNetworkFailure(). For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $statusCode int Required. The statusCode of the HTTP response, such as 200 for OK. $startTime int Required. The start time of the request in milliseconds since the epoch. $endTime int Required. The end time of the request in milliseconds since the epoch. $bytesSent int Required. The number of bytes sent in the request. $bytesReceived int Required. The number of bytes received in the response. $responseBody string Optional. The response body of the HTTP response. The response body will be truncated and included in an HTTP Error metric if the HTTP transaction is an error. Examples Record HTTP transaction An example of tracking an HTTP transaction: public class CustomHttpMetricsLogger implements Interceptor { @Override public Response intercept(Chain chain) throws IOException { Request request = chain.request(); //collect request start time long t1 = System.nanoTime(); //get the size of the request body long requestSize = null == request.body() ? 0 : request.body().contentLength(); //proceed with the request Response response = chain.proceed(request); //capture the time when response returns long t2 = System.nanoTime(); long responseSize = null == response.body() ? 0 : response.body().contentLength(); //tell new relic to notice this request NewRelic.noticeHttpTransaction(request.urlString(), request.method(), response.code(), t1, t2, requestSize, responseSize); //return response for processing return response; } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 156.6759,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeHttpTransaction (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeHttpTransaction (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " info on using the <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em>, see the usage guide. Parameters Parameter Description $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $statusCode int Required. The statusCode of the HTTP response, such as 200 for OK"
      },
      "id": "6044e8b6e7b9d26e235799e9"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/recordbreadcrumb": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/recordcustomevent-android-sdk-api": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15526,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/recordhandledexception-android-sdk-api": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15524,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/recordmetric-android-sdk-api": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15524,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/remove-all-attributes": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/remove-attribute": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15523,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13234,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/set-attribute": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15521,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/set-interaction-name": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15521,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/set-max-event-buffer-time": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.1552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/set-max-event-pool-size": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.1552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/set-user-id": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.1552,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/start-interaction": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15518,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07823,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/with-application-build": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/with-application-version": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/with-interaction-tracing": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 183.15515,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>Android</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an <em>SDK</em> <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "noticeNetworkFailure (Android SDK API)",
        "Syntax",
        "Requirements",
        "Description",
        "Parameters",
        "Examples",
        "Record network failure"
      ],
      "title": "noticeNetworkFailure (Android SDK API)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Android SDK API"
      ],
      "external_id": "eee872a3e0e4d6f512b27b29f3dd956aaad80d1a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/android-sdk-api/notice-network-failure/",
      "published_at": "2021-06-25T23:38:58Z",
      "updated_at": "2021-03-11T13:00:31Z",
      "document_type": "api_doc",
      "popularity": 1,
      "body": "Syntax NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The New Relic Android SDK API provides several methods to track network requests. If a network request fails, you can record details about the failure with noticeNetworkFailure. In most cases, place this call inside exception handlers, such as catch blocks. For general info on using the New Relic Android SDK API, see the usage guide. Parameters Parameter Description NewRelic.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR $networkFailure) Copy $url string Required. The URL of the request. $httpMethod string Required. The HTTP method used, such as GET or POST. $startTime long Required. The start time of the request in milliseconds since the epoch. $endTime long Required. The end time of the request in milliseconds since the epoch. $exception string Either this or $failure parameter is required. This is the exception that occurred. New Relic Mobile can automatically translate many common exceptions into network failure types. $failure enum Either this or $exception parameter is required. The type of network failure that occurred. If an exception cannot be resolved to a network failure automatically, this method can be used to categorize the failure accurately. The values are defined by the NetworkFailure enum. Valid values include Unknown, BadURL, TimedOut, CannotConnectToHost, DNSLookupFailed, BadServerResponse, and SecureConnectionFailed. Examples Record network failure Here’s an example of an error listener that uses an error as part of the noticed network failure to New Relic: new Response.ErrorListener() { @Override public void onErrorResponse(Error error) { NewRelic.noticeNetworkFailure(badUrl, \"GET\", System.nanoTime(), System.nanoTime(), NetworkFailure.exceptionToNetworkFailure(error)); } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 160.07822,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "sections": "noticeNetworkFailure (<em>Android</em> <em>SDK</em> <em>API</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Syntax <em>NewRelic</em>.noticeNetworkFailure(string $url, string $httpMethod, long $startTime, long $endTime, exception $exception OR enum $networkFailure) Copy Records network failures. Requirements Compatible with all agent versions. Description The <em>New</em> <em>Relic</em> <em>Android</em> <em>SDK</em> <em>API</em> provides several methods"
      },
      "id": "6044e87d28ccbcb27a2c60d5"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.13232,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. <em>Android</em> <em>SDK</em> <em>API</em> Use the <em>Android</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view"
      },
      "id": "6043a48f196a6784e6960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-agent-configuration-feature-flags": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.04175,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> SDK <em>API</em> <em>guide</em>",
        "sections": "<em>Android</em> SDK <em>API</em> <em>guide</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an SDK <em>API</em> to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.23294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>New</em> <em>Relic</em> Gradle Plugin configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " the <em>Android</em> agent SDK for <em>New</em> <em>Relic</em>. To install the latest <em>Android</em> version for your <em>mobile</em> app: Go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select an app) &gt; Settings &gt; Installation. <em>Android</em> 4.x: Multidex support <em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> for <em>Android</em> versions prior to <em>Android</em> 5.0 (<em>API</em> level 21) use"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "No data appears (Android)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Android)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Troubleshoot"
      ],
      "external_id": "cab2851a6f3c8bfddb1ed445f8722b3dddff7442",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/troubleshoot/no-data-appears-android/",
      "published_at": "2021-06-25T23:13:27Z",
      "updated_at": "2021-03-16T09:51:07Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing New Relic Mobile for Android and waiting at least 5 minutes, no data appears in New Relic UI. Solution If no data appears after you wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve your issue, try the following: Make sure your system meets the compatibility and requirements. Make sure that you are calling the New Relic Mobile for Android agent on the first line of onCreate() in the MainActivity class and that you are running the agent on the main thread. New Relic Mobile for Android does not support starting the agent in another class. Check whether your Android app exceeds the 64k multidex limit. Increase the logging level and examine your logs for errors: Increase the New Relic logging level to AUDIT using withLogLevel: NewRelic.withApplicationToken(\"YOUR_APP_TOKEN\") .withLogLevel(AgentLog.AUDIT) .start(this.getApplication()); Copy Generate a few minutes of activity in your app. Examine your device log and your application build logs for issues. Confirm the device can reach the New Relic Mobile endpoint at mobile-collector.newrelic.com. If you need additional help, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.51973,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Android</em>)",
        "sections": "No data appears (<em>Android</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Problem After installing <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em> and waiting at least 5 minutes, no data appears in <em>New</em> <em>Relic</em> UI. Solution If no data appears after you wait at least five minutes, use <em>New</em> <em>Relic</em> Diagnostics to automatically detect common problems and suggest troubleshooting. If that does"
      },
      "id": "603e8eb6196a67b64ea83d81"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide": [
    {
      "sections": [
        "Android agent configuration and feature flags",
        "Change configuration settings",
        "Analytics settings",
        "withAnalyticsEvents",
        "FeatureFlag.AnalyticsEvents",
        "Application settings",
        "withApplicationVersion",
        "withApplicationBuild",
        "Crash and error reporting settings",
        "withCrashReportingEnabledFeatureFlag.CrashReportingEnabled",
        "FeatureFlag.HandledExceptions",
        "Distributed tracing",
        "FeatureFlag.DistributedTracing",
        "Interaction settings",
        "withInteractionTracingFeatureFlag.InteractionTracing",
        "withDefaultInteractionsFeatureFlag.DefaultInteractions",
        "Networking settings",
        "FeatureFlag.NetworkRequests",
        "FeatureFlag.NetworkErrorRequests",
        "withHttpResponseBodyCaptureEnabledFeatureFlag.HttpResponseBodyCaptureEnabled",
        "Logging settings",
        "withLoggingEnabled",
        "withLogLevel",
        "Data endpoint settings",
        "usingCollectorAddress",
        "usingCrashCollectorAddress"
      ],
      "title": "Android agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "68c34002aa50d0a945d604f984bd3a64257b4f6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T23:42:35Z",
      "updated_at": "2021-04-12T16:20:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's Android agent provides configuration settings to change the default behavior of the agent. For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Change configuration settings All settings, including the call to invoke the agent, are called in the onCreate method of the MainActivity class. To change settings, call the setting in one of two ways (if the setting supports it): Change the setting on its own line for each specific condition: NewRelic. disableFeature(FeatureFlag.DefaultInteractions) ; NewRelic. enableFeature(FeatureFlag.CrashReporting) ; NewRelic.withApplicationToken(<NEW_RELIC_TOKEN>).start(this.getApplication()); Copy OR Change the setting as part of the agent start call using the .with method: NewRelic.withApplicationToken(<NEW_RELIC_TOKEN>) .withDefaultInteractions(false) .withCrashReportingEnabled(true) .start(this.getApplication()); Copy Analytics settings withAnalyticsEvents Enable or disable collection of event data. These events are reported to Insights and used in the Crash analysis page. Type Boolean Default true FeatureFlag.AnalyticsEvents Enable or disable the reporting of event data. Event collection will still occur; the events will just not be sent to our collector. You might decide to use this instead of withAnalyticsEvents if you wanted to disable collection but still be able to see what the agent was collecting. Type Boolean Default true Application settings withApplicationVersion Set custom application version strings. Type String Default Defaults to version number set in AndroidManifest.xml withApplicationBuild Set custom application build strings. Type String Default Defaults to build ID set in AndroidManifest.xml Crash and error reporting settings withCrashReportingEnabled FeatureFlag.CrashReportingEnabled Enable or disable crash reporting. Type Boolean Default true FeatureFlag.HandledExceptions Enable or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing FeatureFlag.DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interaction settings withInteractionTracing FeatureFlag.InteractionTracing Enable or disable interaction tracing. Trace instrumentation still occurs, but no traces are harvested. This will disable default and custom interactions. Available for Android agent version 5.4.0 or higher. Type Boolean Default true withDefaultInteractions FeatureFlag.DefaultInteractions Enable or disable default interactions. Trace instrumentation still occurs, but no traces are harvested. This will enable or disable default interactions only while custom interactions remain enabled. Type Boolean Default true Networking settings FeatureFlag.NetworkRequests Enable or disable reporting successful HTTP requests to the MobileRequest event type in Insights. Available for Android agent version 5.14.0 or higher. Type Boolean Default true Enabled by default as of agent version 5.15.2 FeatureFlag.NetworkErrorRequests Enable or disable reporting network and Http request errors to MobileRequestError event type in Insights. Available for Android agent version 5.11.0 or higher. Type Boolean Default true withHttpResponseBodyCaptureEnabled FeatureFlag.HttpResponseBodyCaptureEnabled Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true Logging settings withLoggingEnabled Enable or disable agent logging. Type Boolean Default true withLogLevel Specifies the log level. Options include: ERROR (least verbose) WARNING INFO (default) VERBOSE DEBUG AUDIT (most verbose) Type String Default AgentLog.INFO To increase your logging level in the app, add .withLogLevel to your NewRelic.withApplicationToken() method call. For example: NewRelic.withApplicationToken(\"YOUR_APP_TOKEN\") .withLogLevel(AgentLog.DEBUG) .start(this.getApplication()); Copy Data endpoint settings usingCollectorAddress Specifies the URI authority component of the harvest data upload endpoint. Type Boolean Default mobile-collector.newrelic.com To replace data endpoint the agent will use when reporting data harvests, add .usingCollectorAddress() to your NewRelic.withApplicationToken() method call. For example: NewRelic.withApplicationToken(\"YOUR_APP_TOKEN\") .usingCollectorAddress(\"harvest-upload-delegate.domain.com\") .start(this.getApplication()); Copy This endpoint is also used for handled exception uploads. usingCrashCollectorAddress Specifies the authority component of the crash data upload URI. Type String Default mobile-crash.newrelic.com To replace data endpoint the agent will use when reporting crashes, add .usingCrashCollectorAddress() to your NewRelic.withApplicationToken() method call. For example: NewRelic.withApplicationToken(\"YOUR_APP_TOKEN\") .usingCrashCollectorAddress(\"crash-upload-delegate.domain.com\") .start(this.getApplication()); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.39255,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> agent configuration and feature flags",
        "sections": "<em>Android</em> agent configuration and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides configuration settings to change the default behavior of the agent. For an explanation of <em>Mobile</em> custom data types, see Add custom data to <em>New</em> <em>Relic</em> <em>Mobile</em>. Change configuration settings All settings, including the call to invoke the agent, are called"
      },
      "id": "603ed80e28ccbc0cfceba773"
    },
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.23294,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>New</em> <em>Relic</em> Gradle Plugin configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " the <em>Android</em> agent SDK for <em>New</em> <em>Relic</em>. To install the latest <em>Android</em> version for your <em>mobile</em> app: Go to one.newrelic.com &gt; <em>Mobile</em> &gt; (select an app) &gt; Settings &gt; Installation. <em>Android</em> 4.x: Multidex support <em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> for <em>Android</em> versions prior to <em>Android</em> 5.0 (<em>API</em> level 21) use"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "No data appears (Android)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Android)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Troubleshoot"
      ],
      "external_id": "cab2851a6f3c8bfddb1ed445f8722b3dddff7442",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/troubleshoot/no-data-appears-android/",
      "published_at": "2021-06-25T23:13:27Z",
      "updated_at": "2021-03-16T09:51:07Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing New Relic Mobile for Android and waiting at least 5 minutes, no data appears in New Relic UI. Solution If no data appears after you wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve your issue, try the following: Make sure your system meets the compatibility and requirements. Make sure that you are calling the New Relic Mobile for Android agent on the first line of onCreate() in the MainActivity class and that you are running the agent on the main thread. New Relic Mobile for Android does not support starting the agent in another class. Check whether your Android app exceeds the 64k multidex limit. Increase the logging level and examine your logs for errors: Increase the New Relic logging level to AUDIT using withLogLevel: NewRelic.withApplicationToken(\"YOUR_APP_TOKEN\") .withLogLevel(AgentLog.AUDIT) .start(this.getApplication()); Copy Generate a few minutes of activity in your app. Examine your device log and your application build logs for issues. Confirm the device can reach the New Relic Mobile endpoint at mobile-collector.newrelic.com. If you need additional help, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.51973,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Android</em>)",
        "sections": "No data appears (<em>Android</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Problem After installing <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em> and waiting at least 5 minutes, no data appears in <em>New</em> <em>Relic</em> UI. Solution If no data appears after you wait at least five minutes, use <em>New</em> <em>Relic</em> Diagnostics to automatically detect common problems and suggest troubleshooting. If that does"
      },
      "id": "603e8eb6196a67b64ea83d81"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android": [
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.64328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>New</em> <em>Relic</em> Gradle Plugin configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " <em>Relic</em> automatically generates an application token. This is a 40-character hexadecimal string for authenticating each <em>mobile</em> app you <em>monitor</em> in <em>New</em> <em>Relic</em>. Go to one.newrelic.com &gt; <em>Mobile</em>. If applicable: From the <em>Mobile</em> apps index, select Add a <em>new</em> app. From the <em>Get</em> <em>started</em> page, select <em>Android</em>"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "New Relic for Android compatibility and requirements",
        "Foreground monitoring",
        "Android compatibility",
        "Important",
        "Agent and Gradle compatibility",
        "Kotlin and Kotlin DSL",
        "Kotlin DSL support by Android agent version",
        "Kotlin DSL support by AGP version",
        "Unit testing not supported"
      ],
      "title": "New Relic for Android compatibility and requirements",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "fdae9b0d2971ed33098e8c7cf6152654e45cca69",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/new-relic-android-compatibility-requirements/",
      "published_at": "2021-06-25T23:42:35Z",
      "updated_at": "2021-03-18T14:22:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile is compliant with standard application stores, including Google Play Store, Amazon Appstore, and others. Before you install and configure New Relic Mobile functionality with your Android applications, follow these guidelines for compatibility and other requirements. Foreground monitoring New Relic Mobile for Android only monitors your app while it is in the foreground. The agent does not monitor background services while the app is closed. For more information, see our Mobile data privacy and security documentation. Android compatibility Make sure your Android app meets these requirements for New Relic Mobile. Component Application requirements Operating system Android 2.3 or higher API/SDK HttpURLConnection, OkHttp2 (except versions 2.0 and 2.4), OkHttp (versions 2.8, 3.5+, 4.0+), OkIO (version 1.11), AndroidHttpClient, Volley (version 1.0.0), and Apache HTTP Client networking APIs Build with Android SDK Tools version 24 or higher and the following as appropriate: Android Studio (Android Gradle plugin) 3.4 Gradle 5.1.1 Proguard 6.0 DexGuard 7.2.04 Important As of March 2021, our Android agent will discontinue support for Android Gradle Plugin version 2. For more information, see our Explorers Hub post. Upgrade to the most recent version before installing New Relic Mobile. Languages Java 1.7 or higher Devices Any Android compatible device (smartphones, tablets, etc.) File sizes New Relic Mobile adds less than 500KB to your release APK. Architectures ARM, Intel Atom Signature validation The agent cannot instrument JARs that use signature validation during signing. JARs with manifests containing SHA1-Digest or SHA-256-Digest attributes will not be modified. Agent and Gradle compatibility The following are compatible versions of the New Relic Android agent, Gradle, and the Android Gradle plugin. Important As of January 2021, our Android agent will discontinue support for Android Gradle Plugin version 2. For more information, see our Explorers Hub post. Android Gradle plugin New Relic Android agent compatibility 2.3 5.25 - 5.26 are not supported 3.0 - 3.3 Any version below 6.0.0 3.4 - 3.5 Any version 3.6 5.25 and higher 4.+ 5.26 and higher Kotlin and Kotlin DSL You can also use Kotlin projects with Gradle and New Relic's Android agent. Kotlin DSL support by Android agent version With the exception of incompatibilities noted with Android Gradle, New Relic's Android agent is compatible with versions 1.3 - 1.4 of the Kotlin Gradle Plugin. Kotlin DSL version New Relic Android agent compatibility 1.2 Unsupported 1.3 5.24 and lower: Requires Kotlin Gradle Plugin version 1.3.10 or higher 5.25: Requires Kotlin Gradle Plugin version 1.3.10 or higher 5.26: Unsupported in Android agent versions 5.26.0 through 5.28.0 1.4 5.24 and lower: Requires Kotlin Gradle Plugin version 1.3.10 or higher 5.25: Supported 5.26: Unsupported in Android agent versions 5.26.0 through 5.28.0 Kotlin DSL support by AGP version Kotlin DSL support was officially added to Android Gradle Plugin in version 4.1, but many developers are already using it in place of Groovy. Kotlin DSL version Android Gradle Plugin and Android Gradle compatibility 1.3 3.4 (AGP), 5.1.1 Gradle): Requires Kotlin Gradle Plugin version 1.3.10 or higher 3.5 (AGP), 5.4.1 Gradle): Requires Kotlin Gradle Plugin version 1.3.10 or higher 3.6 (AGP), 5.6.4 Gradle): Requires Kotlin Gradle Plugin version 1.3.40 or higher 4.0 (AGP), 6.1.1 Gradle): Requires Kotlin Gradle Plugin version 1.3.40 or higher 4.1 (AGP), 6.5 Gradle): Requires Kotlin Gradle Plugin version 1.3.40 or higher 1.4 3.4 (AGP), 5.1.1 Gradle): Supported 3.5 (AGP), 5.4.1 Gradle): Supported 3.6 (AGP), 5.6.4 Gradle): Supported 4.0 (AGP), 6.1.1 Gradle): Supported 4.1 (AGP), 6.5 Gradle): Supported Unit testing not supported Our New Relic mobile agents are designed and tested to work in a normal app lifecycle. We do not support running any testing environment on applications with the agent. Testing can cause conflicts and unpredictable behavior.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.33965,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> for <em>Android</em> compatibility and requirements",
        "sections": "<em>New</em> <em>Relic</em> for <em>Android</em> compatibility and requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " <em>monitoring</em> <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em> only monitors your app while it is in the foreground. The agent does not <em>monitor</em> background services while the app is closed. For more information, see our <em>Mobile</em> data privacy and security documentation. <em>Android</em> compatibility Make sure your <em>Android</em> app meets"
      },
      "id": "604418abe7b9d2d1015799cc"
    },
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.52627,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> SDK API guide",
        "sections": "<em>Android</em> SDK API guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " will not see the application link in your <em>Android</em> app on <em>New</em> <em>Relic</em>&#x27;s Map page for <em>mobile</em> apps or on the HTTP requests page. You can use a public method in the <em>New</em> <em>Relic</em> <em>Android</em> SDK to <em>get</em> the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already"
      },
      "id": "603ea2bc64441f11ee4e889b"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/get-started/new-relic-android-compatibility-requirements": [
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.64328,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>New</em> <em>Relic</em> Gradle Plugin configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " <em>Relic</em> automatically generates an application token. This is a 40-character hexadecimal string for authenticating each <em>mobile</em> app you <em>monitor</em> in <em>New</em> <em>Relic</em>. Go to one.newrelic.com &gt; <em>Mobile</em>. If applicable: From the <em>Mobile</em> apps index, select Add a <em>new</em> app. From the <em>Get</em> <em>started</em> page, select <em>Android</em>"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for Android",
        "Install the Android agent",
        "Extend your instrumentation"
      ],
      "title": "Introduction to New Relic Mobile for Android",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Get started"
      ],
      "external_id": "ae1aceb4e03cd9acadc71fa9fedf674a3f8cc3cb",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/get-started/introduction-new-relic-mobile-android/",
      "published_at": "2021-06-27T01:52:24Z",
      "updated_at": "2021-03-10T01:51:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for Android monitors your mobile app, giving you a comprehensive view of your app's performance. It works for Android apps written using Java or Kotlin. Install the Android agent Before you install New Relic Mobile for Android, make sure your app follows the compatibility requirements. As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. Follow the Android installation and configuration procedures for your environment as applicable. If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. Android SDK API Use the Android SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 122.51699,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "sections": "Introduction to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " requirements. As part of the installation process, <em>New</em> <em>Relic</em> <em>Mobile</em> automatically generates an application token. This is a 40-character hexadecimal string for authenticating each <em>mobile</em> app that you <em>monitor</em> in <em>New</em> <em>Relic</em> <em>Mobile</em>. Follow the <em>Android</em> installation and configuration procedures for your"
      },
      "id": "6043a48f196a6784e6960f6d"
    },
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.52626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> SDK API guide",
        "sections": "<em>Android</em> SDK API guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": " will not see the application link in your <em>Android</em> app on <em>New</em> <em>Relic</em>&#x27;s Map page for <em>mobile</em> apps or on the HTTP requests page. You can use a public method in the <em>New</em> <em>Relic</em> <em>Android</em> SDK to <em>get</em> the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already"
      },
      "id": "603ea2bc64441f11ee4e889b"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/get-started/new-relic-mobile-and-dt": [
    {
      "sections": [
        "How New Relic distributed tracing works",
        "Tip",
        "Trace sampling",
        "Head-based sampling (standard distributed tracing)",
        "Language agents: adaptive sampling",
        "Language agents: limits and sampling",
        "Trace rate limiting",
        "Lambda trace sampling",
        "Tail-based sampling (Infinite Tracing)",
        "Architecture",
        "Tail-based sampling algorithms",
        "No sampling",
        "Browser and Mobile trace reporting",
        "Trace API",
        "How trace data is structured",
        "How trace data is stored",
        "How trace context is passed between applications",
        "Important",
        "Scenario 1: Trace touching three agent types",
        "Scenario 2: Trace with W3C New Relic and middleware",
        "Scenario 3: Trace with any W3C-compliant agent and a New Relic agent."
      ],
      "title": "How New Relic distributed tracing works",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Get started"
      ],
      "external_id": "4dbe0119017f78ad4db2a2b8a9ca2d287222753a",
      "image": "https://docs.newrelic.com/static/406c9f3af4012dab16df681c8feab256/c1b63/new-relic-distributed-tracing-trace-structure.png",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/concepts/how-new-relic-distributed-tracing-works/",
      "published_at": "2021-06-25T20:20:18Z",
      "updated_at": "2021-06-25T20:20:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some technical details about how New Relic distributed tracing works: How trace sampling works How we structure trace data How we store trace data How trace context is passed between applications Tip For instructions about setting up distributed tracing, see Overview: Enable distributed tracing. Trace sampling How your traces are sampled will depend on your setup and the New Relic tracing tool you're using. For example, you may be using a third-party telemetry service (like OpenTelemetry) to implement sampling of traces before your data gets to us or, if you're using Infinite Tracing, you'd probably send us all your trace data and use our sampling. We have a few sampling strategies available: Head-based sampling (standard distributed tracing) Tail-based sampling (Infinite Tracing) No sampling Head-based sampling (standard distributed tracing) With the exception of our Infinite Tracing feature, most of our tracing tools use a head-based sampling approach. This applies filters to individual spans before all spans in a trace arrive, which means decisions about whether to accept spans is made at the beginning (the \"head\") of the filtering process. We use this sampling strategy to capture a representative sample of activity while avoiding storage and performance issues. Here are some details about how head-based sampling is implemented in our standard distributed tracing tools: Language agents: adaptive sampling Our APM language agents use adaptive sampling to capture a representative sample of system activity. The following is an explanation of how adaptive sampling works. For the first service in a distributed trace, 10 requests are chosen to be sampled. The throughput to that service is used to adjust how frequently requests are sampled. This is explained in more detail below. The first service we monitor in a distributed trace is called the trace origin. The trace origin chooses requests at random to be traced. That decision propagates to the downstream services touched by that request. When the request has completed, all of the spans touched by that request that we've detected are made available in the UI as a complete trace (though agent limits may result in fragmented traces). APM agents have a limit on the number of transactions collected per minute (this can vary, depending on agent) and a limit on the number of spans collected per minute (1000 per agent instance). To adhere to these limits, the default number of traces at the trace origin is 10 traces per minute. An APM agent spreads out the collection of these 10 traces over a minute in order to get a representative sample over time. The exact sampling rate depends on the number of transactions in the previous minute. The rate responds to changes in transaction throughput, going up or down. For example, if the previous minute had 100 transactions, the agent would anticipate a similar number of transactions and select 1 out of every 10 transactions to be traced. Language agents: limits and sampling An APM language agent instance using head-based sampling has a limit of 1000 spans per minute. The agent attempts to keep all spans that are marked to be sampled as part of a distributed trace. In many distributed systems, the average microservice may generate 10 to 20 spans per request. In those cases, the agent span limit can accommodate all spans chosen, and that service will have full detail in a trace. However, some requests to services will generate many spans, and the agent span limit will be reached. As a result, some traces will not have full detail for that service. One solution to this would be to custom instrument an agent to report less activity and therefore report fewer spans. To read about how browser monitoring of trace data may vary from our language agents, see Browser traces. Trace rate limiting If the above sampling methods still result in too much trace data, we may limit incoming data by sampling traces after they're received. By making this decision at the trace level, it avoids fragmenting traces (accepting only part of a trace). This process works similarly to adaptive sampling. The total spans received in a minute are totaled. If too many spans are received, fewer spans may be accepted in the following minute, in order to achieve a floating-average throughput rate. Lambda trace sampling Our AWS Lambda monitoring uses its own sampling process. Tail-based sampling (Infinite Tracing) Our Infinite Tracing feature uses a tail-based sampling approach. \"Tail-based sampling\" means that trace-retention decisions are done at the tail end of processing after all the spans in a trace have arrived. With Infinite Tracing, you can send us 100% of your trace data from your application or third-party telemetry service, and Infinite Tracing will figure out which trace data is most important. And you can configure the sampling to ensure the traces important to you are retained. Architecture For Infinite Tracing, agents or integrations send 100% of all instrumented spans to a trace observer. The trace observer is a distributed tracing service residing in a cluster of services on AWS called New Relic Edge. Tip Only your spans go to the trace observer—all other data such as metrics, custom events, and transaction traces are sent the normal route to New Relic and are subject to local sampling. You configure a unique trace observer endpoint for the AWS region you want to send data to. You can request multiple endpoints, one per AWS region. The endpoint represents a trace observer for a particular workload. For example, all spans from a single trace (request) must go to that endpoint. Here are two architectural diagrams: one showing how data flows if you use APM agents and another if you use New Relic integrations like OpenTelemetry exporters: The trace observer holds traces open while spans for that trace arrive. Once the first span in a trace arrives, a session is kept open for 10 seconds. Each time a new span for that trace arrives, the expiration time is reset to 10 seconds. Traces that haven't seen a span arrive within the last 10 seconds will automatically expire. Tail-based sampling algorithms By default, each trace observer offers traces to three samplers: one looking for duration outliers, one looking for traces with errors, and one trying to randomly sample across all trace types. Each sampler keeps a target percentage of traces that match their criteria. Here are details about each sampler: Sampler Matching criteria Target percent Duration Traces with an outlier duration, using two algorithms: Gaussian (Assumes a normal distribution and a threshold at the 99th percentile) Eccentricity (Assumes no distribution and a threshold based on cluster) 100% Error Traces having at least one span with an error 100% Random All traces 1% (This is configurable. See Infinite Tracing: Random trace filter) If the matching criteria matches the trace, each sampler looks at the trace’s shape. A trace’s shape is the unique combination of the root span’s entity name and span name. This is a simple way to separate traces using the entry point of the request. Once the shape is determined, the sampler makes a decision to keep or reject the trace based on its target sampling percent. If it’s 100%, the trace is automatically kept. If it’s anything less, the probability the sampler keeps a given trace is determined by the target percent. For example, the default target percent is 1 for random traces, so 1% of those traces are kept. If you prefer, you can change the random filter percentage. Because the trace observer uses percentages of throughput, the number of traces selected will vary with that throughput. No sampling Some of our tools don't use sampling. Sampling details for these tools: Browser and Mobile trace reporting Browser monitoring distributed tracing and Mobile monitoring report all spans. Our APM language agents are often used in conjunction with browser and mobile monitoring, and our language agents use sampling. This means that there will likely be many more browser and mobile spans than back-end spans, which can result in browser and mobile app spans disconnected from back-end spans. For tips on querying for traces that contain front and back-end spans, see Find browser span data. Trace API If you don't have Infinite Tracing enabled, our Trace API does no sampling (unless the default data limits are exceeded). It's expected that you set up the Trace API to send us the traces you think are important. How trace data is structured Understanding the structure of a distributed trace can help you: Understand how traces are displayed in our UI Help you query trace data A distributed trace has a tree-like structure, with \"child\" spans that refer to one \"parent\" span. This diagram shows some important span relationships in a trace: This diagram shows how spans in a distributed trace relate to each other. This diagram shows several important concepts: Trace root. The first service or process in a trace is referred to as the root service or process. Process boundaries. A process represents the execution of a logical piece of code. Examples of a process include a backend service or Lambda function. Spans within a process are categorized as one of the following: Entry span: the first span in a process. Exit span: a span is a considered an exit span if it a) is the parent of an entry span, or b) has http. or db. attributes and therefore represents an external call. In-process span: a span that represents an internal method call or function and that is not an exit or entry span. Client spans. A client span represents a call to another entity or external dependency. Currently, there are two client span types: Datastore. If a client span has any attributes prefixed with db. (like db.statement), it's categorized as a datastore span. External. If a client span has any attributes prefixed with http. (like http.url) or has a child span in another process, it's categorized as an external span. This is a general category for any external calls that are not datastore queries. Trace duration. A trace's total duration is determined by the length of time from the start of the earliest span to the completion of the last span. You can query span relationship data with the NerdGraph GraphiQL explorer at api.newrelic.com/graphiql. How trace data is stored Understanding how we store trace data can help you query your trace data. We save trace data as: Span: A span represents operations that are part of a distributed trace. The operations that a span can represent include browser-side interactions, datastore queries, calls to other services, method-level timing, and Lambda functions. One example: in an HTTP service, a span is created at the start of an HTTP request and completed when the HTTP server returns a response. Span attributes contain important information about that operation (such as duration, host data, etc.), including trace-relationship details (such as traceId, guid). For span-related data, see span attributes. Transaction: If an entity in a trace is monitored by an agent, a request to that entity generates a single Transaction event. Transactions allow trace data to be tied to other New Relic features. For transaction-related data, see transaction attributes. Contextual metadata. We store metadata that shows calculations about a trace and the relationships between its spans. To query this data, use the NerdGraph GraphiQL explorer. How trace context is passed between applications We support the W3C Trace Context standard, which makes it easier to trace transactions across networks and services. When you enable distributed tracing, New Relic agents add HTTP headers to a service's outbound requests. HTTP headers act like passports on an international trip: They identify your software traces and carry important information as they travel through various networks, processes, and security systems. The headers also contain information that helps us link the spans together later: metadata like the trace ID, span ID, the New Relic account ID, and sampling information. See the table below for more details on the header: Item Description accountId This is your New Relic account ID. However, only those on your account and New Relic Admins can associate this Id with your account information in any way. appId This is the application ID of the application generating the trace header. Much like accountId, this identifier is not going to provide any information unless you're a user on the account. guid With Distributed Tracing, each segment of work in a trace is represented by a span, and each span has a guid attribute. The guid of the last span within the process is sent with the outgoing request so that the first segment of work in the receiving service can add this guid as the parentId attribute which connects data within the trace. Parent type The source of the trace header, as in Mobile, Browser, Ruby app, etc. This becomes the parent.type attribute on the Transaction triggered by the request this header is attached to. Priority A randomly generated priority ranking value that helps determine which data is sampled when sampling limits are reached. This is a float value set by the first New Relic agent that’s part of the request so all data in the trace will have the same priority value. Sampled A boolean value that tells the agent if traced data should be collected for the request. This is also added as an attribute on any span and transaction data collected. If you want to read more about this sampling process, this guide goes into more detail. Timestamp Unix timestamp in milliseconds when the payload was created. traceId The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. This also is added as an attribute on the span and transaction data. transactionId The unique identifier for the transaction event. Trusted acount key This is a key that helps identify any other accounts associated with your account. So if you have multiple sub-accounts that the trace crosses, we can confirm that any data included in the trace is coming from a trusted source, and tells us what users should have access to the data. Version and data key This identifies major/minor versions, so if an agent receives a trace header from a version with breaking changes from the one it is on, it can reject that header and report the rejection and reason. This header information is passed along each span of a trace, unless the progress is stopped by something like middleware or agents that don't recognize the header format (see Figure 1). Figure 1 To address the problem of header propagation, we support the W3C Trace Context specification that requires two standardized headers. Our latest W3C New Relic agents send and receive these two required headers, and by default, they also send and receive the header of the prior New Relic agent: W3C (traceparent): The primary header that identifies the entire trace (trace ID) and the calling service (span id). W3C (tracestate): A required header that carries vendor-specific information and tracks where a trace has been. New Relic (newrelic): The original, proprietary header that is still sent to maintain backward compatibility with prior New Relic agents. This combination of three headers allows traces to be propagated across services instrumented with these types of agents: W3C New Relic agents Non-W3C New Relic agents W3C Trace Context-compatible agents Important If your requests only touch W3C Trace Context-compatible agents, you can opt to turn off the New Relic header. See the agent configuration documentation for details about turning off the newrelic header. The scenarios below show various types of successful header propagation. Scenario 1: Trace touching three agent types This shows the flow of headers when a request touches three different agent types: Scenario 2: Trace with W3C New Relic and middleware This shows the combination of headers sent by a W3C New Relic agent to some middleware. Scenario 3: Trace with any W3C-compliant agent and a New Relic agent. This shows the two required W3C headers from another vendor accepted by a W3C New Relic agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 187.0964,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "How <em>New</em> <em>Relic</em> <em>distributed</em> <em>tracing</em> works",
        "sections": "How <em>New</em> <em>Relic</em> <em>distributed</em> <em>tracing</em> works",
        "tags": "<em>Distributed</em> <em>tracing</em>",
        "body": "Here are some technical details about how <em>New</em> <em>Relic</em> <em>distributed</em> <em>tracing</em> works: How <em>trace</em> sampling works How we structure <em>trace</em> data How we store <em>trace</em> data How <em>trace</em> context is passed between applications Tip For instructions about setting up <em>distributed</em> <em>tracing</em>, see Overview: Enable <em>distributed</em>"
      },
      "id": "6072a66664441f14089d856c"
    },
    {
      "image": "",
      "url": "https://docs.newrelic.com/attribute-dictionary/",
      "sections": [
        "New Relic data dictionary",
        "AjaxRequest",
        "AwsLambdaInvocation",
        "AwsLambdaInvocationError",
        "BrowserInteraction",
        "BrowserTiming",
        "ContainerSample",
        "DistributedTraceSummary",
        "InfrastructureEvent",
        "JavaScriptError",
        "Metric",
        "Mobile",
        "MobileCrash",
        "MobileHandledException",
        "MobileRequest",
        "MobileRequestError",
        "MobileSession",
        "NetworkSample",
        "NrAuditEvent",
        "NrConsumption",
        "NrDailyUsage",
        "NrIntegrationError",
        "NrMTDConsumption",
        "NrUsage",
        "PageAction",
        "PageView",
        "PageViewTiming",
        "ProcessSample",
        "Span",
        "StorageSample",
        "SyntheticCheck",
        "SyntheticRequest",
        "SyntheticsPrivateLocationStatus",
        "SyntheticsPrivateMinion",
        "SystemSample",
        "Transaction",
        "TransactionError",
        "WorkloadStatus"
      ],
      "published_at": "2021-06-27T01:47:24Z",
      "title": "New Relic data dictionary",
      "updated_at": "2021-06-26T01:57:44Z",
      "type": "docs",
      "external_id": "cbca3a897621bcbb31159067d6d4ec27c5178fe4",
      "document_type": "views_page_content",
      "popularity": 1,
      "body": "Displaying 0 of 37 results Clear AjaxRequest Data source : Browser agent An AjaxRequest event is created automatically when an Ajax request occurs during a BrowserInteraction event. The event attributes track geographic and browser info. Attribute name Definition Events appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileRequest MobileHandledException MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming groupedPageURL The grouped URL of the view that made the AJAX request. For example: myapp.com/acct/*/dash. AjaxRequest BrowserTiming groupedRequestUrl The grouped URL of the AJAX request. For example: myapp.com/acct/*/ajax. AjaxRequest Span hostname The fully qualified domain name (FQDN) of the request URL. AjaxRequest httpMethod enum The HTTP method of the AJAX request. Example: POST. AjaxRequest httpResponseCode enum The HTTP response code. Example: 200. AjaxRequest jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. (This attribute doesn't exist for initial page load events.) AjaxRequest BrowserInteraction BrowserTiming pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError port enum The request port. AjaxRequest Span priority Likelihood this event will be saved. AjaxRequest regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming requestBodySize bytes (B) The payload size of the request body, in bytes. AjaxRequest requestUrl The URL of the AJAX request. For example: myapp.com/acct/1/ajax. AjaxRequest responseBodySize bytes (B) The payload size of the response body, in bytes. AjaxRequest session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span timeSinceBrowserInteractionStart seconds (s) The time in seconds between the start of the BrowserInteraction and the start of the request. AjaxRequest BrowserTiming timeToLastCallbackEnd seconds (s) The duration, in seconds, from the start of the request (timestamp) to the end of the last callback. This is not just an additive function; the callback time can overlap with the wait time. AjaxRequest BrowserTiming timeToLoadEventStart seconds (s) The time, in seconds, from the start of the AJAX request to the start of its load event. This value represents the duration of the AJAX request with single page app (SPA) monitoring. For more information, see the Mozilla developer documentation about XMLHttpRequest load events. AjaxRequest timeToSettle seconds (s) The time, in seconds, from the start of the request to when all resulting callbacks (including callbacks of subsequent AJAX requests) are complete. AjaxRequest BrowserTiming timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming AwsLambdaInvocation Data source : AWS Lambda This event is reported by New Relic monitoring for AWS Lambda. This event captures overall function timing and associated metadata. A single AwsLambdaInvocation event is generated for each invocation. Attribute name Definition Events aws.lambda.arn The Amazon Resource Name (ARN) of the instrumented Lambda function. AwsLambdaInvocationError AwsLambdaInvocation aws.lambda.coldStart A Boolean indicating if the AWS Lambda invocation is a cold start. AwsLambdaInvocationError AwsLambdaInvocation aws.lambda.eventSource.arn The Amazon Resource Name (ARN) of the entity that invoked the instrumented Lambda function. AwsLambdaInvocationError AwsLambdaInvocation aws.requestId ID AWS identifier of the invocation. AwsLambdaInvocationError AwsLambdaInvocation databaseCallCount count The number of database calls made by this transaction. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError databaseDuration seconds (s) The database response time in seconds. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError duration seconds (s) The total invocation time for the transaction, in seconds. (Data source: AWS Lambda) AwsLambdaInvocationError AwsLambdaInvocation externalCallCount count The number of external calls made by this transaction. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError externalDuration seconds (s) The total response time of all external (out-of-process) services, in seconds. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError newRelic.ingestPoint Where the data point entered the platform (such as browser.spans, or api.traces). AwsLambdaInvocationError AwsLambdaInvocation Span parent.account ID If a distributed tracing payload is received, this is the account identifier for the transaction's upstream caller. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError parent.app ID If a distributed tracing payload is received, this is the application identifier. APM agents retrieve this value in the connect response under the key primary_application_id. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError parent.transportType When a distributed tracing payload is received, the method of transport for the payload. Example values: Unknown, HTTP, HTTPS, Kafka, JMS, IronMQ, AMQP, Queue, or Other. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError parent.type If a distributed trace payload was received, the parent's data source type. Example values: App, Browser, Mobile. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.accept The types as read from the HTTP Accept request header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.contentLength bytes (B) Incoming request size in bytes as read from the Content-Length HTTP request header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.contentType Incoming request content-type as read from the HTTP request header Content-Type. Example value: application/octet-stream. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.host The name from the HTTP host request header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.referer The incoming request referer as read from the Referer request header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.userAgent The contents of the User-Agent HTTP header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.method The HTTP request method used. Example values: POST, GET. AwsLambdaInvocationError AwsLambdaInvocation Span Transaction TransactionError response.headers.contentLength bytes (B) The outgoing response size in bytes as read from the Content-Length response header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError response.headers.contentType For an HTTP response, the data type of the returned response. Example values: text/html, application/json. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError response.status bytes (B) The response code for an HTTP request AwsLambdaInvocation totalTime seconds (s) The sum of all async components' duration, in seconds. An async component is a method or function where there is no instrumented encapsulating method or function. AwsLambdaInvocation Transaction traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocationError AwsLambdaInvocation MobileRequest MobileRequestError Span type The New Relic event type. Example values: Transaction, Span. AwsLambdaInvocationError AwsLambdaInvocation AwsLambdaInvocationError Data source : AWS Lambda This event is reported by New Relic monitoring for AWS Lambda. It's generated when an error occurs during a Lambda function invocation. Attribute name Definition Events aws.lambda.arn The Amazon Resource Name (ARN) of the instrumented Lambda function. AwsLambdaInvocationError AwsLambdaInvocation aws.lambda.coldStart A Boolean indicating if the AWS Lambda invocation is a cold start. AwsLambdaInvocationError AwsLambdaInvocation aws.lambda.eventSource.arn The Amazon Resource Name (ARN) of the entity that invoked the instrumented Lambda function. AwsLambdaInvocationError AwsLambdaInvocation aws.requestId ID AWS identifier of the invocation. AwsLambdaInvocationError AwsLambdaInvocation databaseCallCount count The number of database calls made by this transaction. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError databaseDuration seconds (s) The database response time in seconds. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError duration seconds (s) The total invocation time for the transaction, in seconds. (Data source: AWS Lambda) AwsLambdaInvocationError AwsLambdaInvocation error.class The class name or type for the error. This will be server and platform specific. AwsLambdaInvocationError TransactionError error.message The error message for the transaction. This will be server and platform specific. AwsLambdaInvocationError TransactionError externalCallCount count The number of external calls made by this transaction. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError externalDuration seconds (s) The total response time of all external (out-of-process) services, in seconds. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError newRelic.ingestPoint Where the data point entered the platform (such as browser.spans, or api.traces). AwsLambdaInvocationError AwsLambdaInvocation Span parent.account ID If a distributed tracing payload is received, this is the account identifier for the transaction's upstream caller. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError parent.app ID If a distributed tracing payload is received, this is the application identifier. APM agents retrieve this value in the connect response under the key primary_application_id. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError parent.transportType When a distributed tracing payload is received, the method of transport for the payload. Example values: Unknown, HTTP, HTTPS, Kafka, JMS, IronMQ, AMQP, Queue, or Other. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError parent.type If a distributed trace payload was received, the parent's data source type. Example values: App, Browser, Mobile. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.accept The types as read from the HTTP Accept request header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.contentLength bytes (B) Incoming request size in bytes as read from the Content-Length HTTP request header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.contentType Incoming request content-type as read from the HTTP request header Content-Type. Example value: application/octet-stream. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.host The name from the HTTP host request header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.referer The incoming request referer as read from the Referer request header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.headers.userAgent The contents of the User-Agent HTTP header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError request.method The HTTP request method used. Example values: POST, GET. AwsLambdaInvocationError AwsLambdaInvocation Span Transaction TransactionError response.headers.contentLength bytes (B) The outgoing response size in bytes as read from the Content-Length response header. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError response.headers.contentType For an HTTP response, the data type of the returned response. Example values: text/html, application/json. AwsLambdaInvocationError AwsLambdaInvocation Transaction TransactionError stackTrace The error stack trace. The format will be different depending on the agent language. AwsLambdaInvocationError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocationError AwsLambdaInvocation MobileRequest MobileRequestError Span transactionName Name of the transaction in which the error occurred. Example value: Controller/customers/show. Value may be 'Unknown' if an error occurs outside of a transaction. AwsLambdaInvocationError TransactionError type The New Relic event type. Example values: Transaction, Span. AwsLambdaInvocationError AwsLambdaInvocation BrowserInteraction Data source : Browser agent A BrowserInteraction represents a unit of work in a browser session, triggered by a user interacting with the webpage. It captures information about the session, AJAX calls and custom JavaScript timing that occurred as a result of the interaction. Initial load and route changes are captured as special types of Browser interactions, and are used for SPA monitoring. Attribute name Definition Events actionText The text of the HTML element that was clicked when a browser interaction started. BrowserInteraction ajaxCount count A count of all XHRs included in the timing of a SPA interaction. BrowserInteraction appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileRequest MobileHandledException MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming backendTransactionName The name of the backend transaction that served the initial page load. BrowserInteraction browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming category The type of interaction; either initial page load, route change, or custom. BrowserInteraction city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView domain The domain portion of the request URL. BrowserInteraction JavaScriptError PageView PageViewTiming duration seconds (s) The total time elapsed of the interaction event BrowserInteraction eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming firstContentfulPaint firstContentfulPaint is the point when the browser renders the first bit of content from the DOM, which may be text, an image, SVG, or a <canvas> element. Google's User-centric Performance Metrics contains detailed information about its Paint Timing API and firstContentfulPaint. See Compatibility and requirements for New Relic Browser for additional information about firstContentfulPaint browser compatibility. BrowserInteraction PageView firstPaint firstPaint marks the point when the browser renders anything that is visually different from what was on the screen prior to navigation. This includes non-default background paint and the enclosing box of an iframe. Google's User-centric Performance Metrics contains detailed information about its Paint Timing API and firstPaint. See Compatibility and requirements for New Relic Browser for additional information about firstPaint browser compatibility. BrowserInteraction PageView jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. (This attribute doesn't exist for initial page load events.) AjaxRequest BrowserInteraction BrowserTiming monitorAccountId The Synthetics account from which you are running the monitor. BrowserInteraction JavaScriptError monitorId ID A unique number identifying a particular monitor. BrowserInteraction JavaScriptError SyntheticCheck monitorJobId ID The ID of a single Synthetics monitor run, which began at a specific time and originated from a specific location. BrowserInteraction JavaScriptError parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError previousGroupedUrl The grouped version of the URL in the browser at the start of the interaction. BrowserInteraction previousRouteName The route name of the page at the start of the interaction. This is the last value passed by setCurrentRouteName before the start of the interaction. BrowserInteraction previousURL The ungrouped URL in the browser at the start of the interaction. BrowserInteraction regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span targetGroupedUrl The grouped version of the URL in the browser at the end of the interaction. BrowserInteraction targetRouteName The route name for the page at the end of the interaction. The last value passed by setCurrentRouteName before the end of the interaction. BrowserInteraction targetUrl The ungrouped URL in the browser at the end of the interaction. BrowserInteraction timeToConnectEnd seconds (s) The time, in seconds, from the start of the interaction to the connectEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToConnectStart seconds (s) The time, in seconds, from the start of the interaction to the connectStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomComplete seconds (s) The time, in seconds, from the start of the interaction to the domComplete, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomContentLoadedEventEnd seconds (s) The time, in seconds, from the start of the interaction to the domContentLoadedEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomContentLoadedEventStart seconds (s) The time, in seconds, from the start of the interaction to the domContentLoadedEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomInteractive seconds (s) The time, in seconds, from the start of the interaction to the domInteractive, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomLoading seconds (s) The time, in seconds, from the start of the interaction to the domLoading, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomainLookupEnd seconds (s) The time, in seconds, from the start of the interaction to the domainLookupEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToDomainLookupStart seconds (s) The time, in seconds, from the start of the interaction to the domainLookupStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToFetchStart seconds (s) The time, in seconds, from the start of the interaction to the fetchStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToLoadEventEnd seconds (s) The time, in seconds, from the start of the interaction to the loadEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToLoadEventStart seconds (s) The time, in seconds, from the start of the interaction to the loadEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information, see our documentation about instrumentation for the Navigation Timing API. BrowserInteraction timeToRedirectEnd seconds (s) The time, in seconds, from the start of the interaction to the redirectEnd, as defined by the Navigation Timing API. This attribute exists only for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToRedirectStart seconds (s) The time, in seconds, from the start of the interaction to the redirectStart, as defined by the Navigation Timing API. This attribute exists only for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToRequestStart seconds (s) The time, in seconds, from the start of the interaction to the requestStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToResponseEnd seconds (s) The time, in seconds, from the start of the interaction to the responseEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToResponseStart seconds (s) The time, in seconds, from the start of the interaction to the responseStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToSecureConnectionStart seconds (s) The time, in seconds, from the start of the interaction to the secureConnectionStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToUnloadEventEnd seconds (s) The time, in seconds, from the start of the interaction to the unloadEventEnd, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timeToUnloadEventStart seconds (s) The time, in seconds, from the start of the interaction to the unloadEventStart, as defined by the Navigation Timing API. This attribute exists for initial page load events, not route changes. For more information about the Navigation Timing API, see Instrumentation for Browser monitoring. BrowserInteraction timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span trigger The cause of the route change or page load. The default values are click, submit, popstate, or initial page load. For a custom event created with the API, the default value for trigger will be api. This value can also be set via the API. BrowserInteraction userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming BrowserTiming Data source : Browser agent BrowserTiming is a custom event that captures SPA timing data for browser interactions started using the custom createTracer SPA API method. BrowserTiming contains many of the same attributes used by other events, especially AjaxRequest. Attribute name Definition Events appId ID The ID of your application, as recorded by New Relic. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileRequest MobileHandledException MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserInteractionName The name of the interaction. This is either the targetGroupedUrl or the custom name set via the API. AjaxRequest BrowserInteraction BrowserTiming browserTimingName The name of the event. This is taken from the name argument of createTracer. BrowserTiming city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView eventId ID A value that you can link to multiple BrowserInteraction events so you can view the interactions that occurred surrounding a specific event. For example, you can see the browser interactions that occurred prior to a JS error. AjaxRequest BrowserInteraction BrowserTiming groupedPageURL The grouped URL of the view that made the AJAX request. For example: myapp.com/acct/*/dash. AjaxRequest BrowserTiming jsDuration seconds (s) The total duration, in seconds, spent on JavaScript execution. (This attribute doesn't exist for initial page load events.) AjaxRequest BrowserInteraction BrowserTiming pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span timeSinceBrowserInteractionStart seconds (s) The time in seconds between the start of the BrowserInteraction and the start of the request. AjaxRequest BrowserTiming timeToLastCallbackEnd seconds (s) The duration, in seconds, from the start of the request (timestamp) to the end of the last callback. This is not just an additive function; the callback time can overlap with the wait time. AjaxRequest BrowserTiming timeToSettle seconds (s) The time, in seconds, from the start of the request to when all resulting callbacks (including callbacks of subsequent AJAX requests) are complete. AjaxRequest BrowserTiming timeToTracedCallbackStart seconds (s) The time in seconds from the start of the custom tracer until the start of the traced callback. This attribute is unique to the BrowserTiming event. BrowserTiming timestamp The time (date, hour, minute, second) at which the interaction occurred. AjaxRequest BrowserInteraction BrowserTiming PageAction PageView PageViewTiming Span tracedCallbackDuration seconds (s) The duration in seconds of the traced callback. This attribute is unique to the BrowserTiming event. BrowserTiming userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming ContainerSample Data source : Infrastructure This event is reported by the New Relic Infrastructure agent. It collects data from all the Docker containers on the host (which may or may not be running). It includes the container's ID, name, image, image name, and metrics about CPU, memory and networking. We take a snapshot of this data every 15 seconds for each container and package it into this event, which is then sent to New Relic. This data appears on the Containers UI page. Attribute name Definition Events StorageDataAvailableBytes bytes (B) Data space available in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataTotalBytes bytes (B) Total Data space in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataUsagePercent percentage (%) Percent of Data space used in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageDataUsedBytes bytes (B) Data space used by the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataAvailableBytes bytes (B) Metadata space available in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataTotalBytes bytes (B) Total Metadata space in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataUsagePercent percentage (%) Percent of Metadata space used in the Storage Driver. Only Device Mapper driver is supported. ContainerSample StorageMetadataUsedBytes bytes (B) Metadata space used by the Storage Driver. Only Device Mapper driver is supported. ContainerSample commandLine The command line used in the container. ContainerSample containerId ID The unique Docker container ID. ContainerSample cpuKernelPercent percentage (%) CPU time percentage used in kernel space. ContainerSample cpuLimitCores count Number of cores available for the container. ContainerSample cpuPercent percentage (%) CPU usage percentage used. ContainerSample cpuShares count Number of CPU shares assigned to the container. ContainerSample cpuThrottlePeriods count Total number of periods throttled. ContainerSample cpuThrottleTimeMs milliseconds (ms) Total throttling time in milliseconds. ContainerSample cpuUsedCores percentage (%) CPU usage per core. ContainerSample cpuUsedCoresPercent percentage (%) CPU usage percentage per core. ContainerSample cpuUserPercent percentage (%) CPU time percentage used in user space. ContainerSample criticalViolationCount count The number of times that alert conditions violated critical thresholds, causing critical violations and opening incidents. If this attribute does not exist on the sample, it has zero violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample image ID The Docker image ID for the image the container is based on. ContainerSample imageName The Docker image name for the container. ContainerSample label_KEY Docker labels associated with this container (where KEY represents a custom label's key value). ContainerSample memoryCacheBytes count The amount of memory used by the container that can be associated precisely with a block on a block device. ContainerSample memoryKernelUsageBytes bytes (B) The amount of current kernel memory allocation. ContainerSample memoryResidentSizeBytes bytes (B) The amount of memory that doesn't correspond to anything on disk: stacks, heaps, and anonymous memory maps. ContainerSample memorySizeLimitBytes bytes (B) The total amount of memory the container is allowed to use. ContainerSample memorySoftLimitBytes bytes (B) The soft limit of memory usage equivalent to the memory reservation of the container. ContainerSample memorySwapLimitBytes bytes (B) The total amount of memory the container is using, including swap. ContainerSample memorySwapLimitUsagePercent percentage (%) This metric is calculated as the percentage of memorySwapUsageBytes over memorySwapLimitBytes, if the limit exists. ContainerSample memorySwapOnlyUsageBytes bytes (B) The amount of swap memory the container is using. This memory doesn't include non-swap memory. ContainerSample memorySwapUsageBytes bytes (B) The amount of memory swap the container is using, including swap. ContainerSample memoryUsageBytes bytes (B) This metric doesn't account for swap usage. ContainerSample memoryUsageLimitPercent percentage (%) This metric is calculated as the memoryUsageBytes percentage over memorySizeLimitBytes, if the limit exists. ContainerSample name The Docker container name. ContainerSample networkRxBytes bytes (B) Total number of received bytes. ContainerSample networkRxBytesPerSecond rate Number of received bytes per second. ContainerSample networkRxDropped count Total number of received packets dropped. ContainerSample networkRxDroppedPerSecond rate Number of received packets dropped per second. ContainerSample networkRxError count Total number of received packets with error. ContainerSample networkRxErrorsPerSecond rate Number of received packets with error per second. ContainerSample networkRxPackets count Total number of received packets. ContainerSample networkRxPacketsPerSecond rate Number of received packets with error per second. ContainerSample networkTxBytesPerSecond rate Number of transmitted bytes per second. ContainerSample networkTxDropped count Total number of transmitted packets dropped. ContainerSample networkTxDroppedPerSecond rate Number of transmitted packets dropped per second. ContainerSample networkTxErrors count Total number of transmitted packets with error. ContainerSample networkTxErrorsPerSecond rate Number of transmitted packets with error per second. ContainerSample networkTxPackets count Total number of transmitted packets. ContainerSample networkTxPacketsPerSecond rate Number of transmitted packets per second. ContainerSample networksTxBytes count Total number of bytes transmitted. ContainerSample restartCount count The number of times the container was restarted. ContainerSample state It can be: created, restarting, running, removing, paused, exited, or dead. ContainerSample status Holds the current container state. ContainerSample warningViolationCount count The number of times that alert conditions violated warning thresholds, causing warning violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample DistributedTraceSummary Data source : Distributed Tracing This event contains summary data about a distributed trace and provides an aggregated view of distributed tracing data. DistributedTraceSummary events are generated by New Relic and are triggered by distributed tracing data from agents or the Trace API. Attribute name Definition Events accountIds A comma delimited list of newrelic accountIds that took part in this trace. DistributedTraceSummary backend.duration.ms milliseconds (ms) The total elapsed time in milliseconds of all backend services in this trace. DistributedTraceSummary backend.timestamp milliseconds (ms) The timestamp of the first span in this trace from a backend entity. In distributed tracing, any events that are not from client-side applications contributed to the backend duration. DistributedTraceSummary duration.ms The duration of the entire distributed trace, including both backend and client-side entities. the earliest span to the latest. DistributedTraceSummary entityCount count The number of unique entities that took part in this trace. DistributedTraceSummary entityGuids A comma delimited list of entity GUIDs for entities that participated in this trace. These GUIDs are assigned by New Relic for the New Relic-monitored entity (host, application, etc.). Each GUID is stored as a Base64 encoded value. DistributedTraceSummary errorCount count The number of events in this distributed trace that were identified as errors. DistributedTraceSummary newRelic.traceFilter.type The name of the trace filter used by the Infinite Tracing trace observer to select this trace. DistributedTraceSummary Span root.entity.accountId The New Relic account ID that the root entity of this trace reports data to. DistributedTraceSummary root.entity.guid The entity GUID associated with the root entity of this trace. DistributedTraceSummary root.entity.name The name of the root entity of this trace. DistributedTraceSummary root.span.duration.ms milliseconds (ms) The elapsed time in milliseconds of the root span of this trace. The root of a distributed trace is the first span, and will have a null value for parent.id. DistributedTraceSummary root.span.id The unique identifier of the root span of this trace. The root of a distributed trace is the first span, and it has a null value for parent.id. DistributedTraceSummary root.span.name The name of the root span of this trace. DistributedTraceSummary root.span.timestamp milliseconds (ms) The timestamp of the root span of this trace. The root of a distributed trace is the first span, and will have a null value for parent.id. DistributedTraceSummary spanCount count The number of events in this distributed trace. Events in a distributed trace can have several event types, including Span, Transaction, and TransactionError. DistributedTraceSummary timestamp milliseconds (ms) The timestamp of the root span in this distributed trace. DistributedTraceSummary trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError InfrastructureEvent Data sources : InfrastructureCloudTrail InfrastructureEvent describes changes (deltas) that occur in a system's live state. When an inventory or system state is added, removed, or changed, Infrastructure will produce an InfrastructureEvent that logs that activity. Attribute name Definition Events category A New Relic category used to organize events in the UI. For example: automation, notification, and service. InfrastructureEvent changeType A simple classification of the type of change made to the entity: added, modified, or removed. InfrastructureEvent changedPath The fully specified name of the item that changed. This is constructed by taking the source and adding one or more additional path elements that uniquely identify the item that changed. InfrastructureEvent deltaId Delta refers to a recorded change in the system. The deltaId is a number used by New Relic to organize incoming inventory change data. InfrastructureEvent eventId The unique ID of the event, generated by New Relic. InfrastructureEvent format The type of infrastructure event. Each format type includes attributes that may be used to render the event in the UI. InfrastructureEvent newStatus The new agent status: disconnected or connected. InfrastructureEvent newValue If a change is made to the entity, this attribute contains the new value of the inventory that was changed. This will have no value if no change has been made. The value will display approximately 4K bytes of data. InfrastructureEvent oldValue If a change is made to the entity, this attribute contains the old value of the inventory that was changed. This will be blank if no change has been made. InfrastructureEvent provider For integrations that use generic event types (like the DatastoreSample event), the provider value specifies the source of the data (the service, or a sub-category of data from that service). Some Insights events are generic and are used by several integrations. For example, the DatastoreSample event is used by several integrations, including the AWS DynamoDB integration and the AWS RDS integration. In these cases, the provider attribute value represents the source of that attribute. This will usually be the service that data comes from or, for integrations that use several provider values, a certain sub-category of data from that service. When a provider value is present for a generic event, that event will have additional integration-specific attributes attached to it. Here’s an example of an Insights NRQL query that returns the attributes present for a DatastoreSample event reported by the AWS RDS integration: SELECT * from DatastoreSample where provider = 'RdsDbCluster' InfrastructureEvent source The fully specified origin of this inventory item. This is typically in the form category/plugin, where plugin is the generic word used for the tool that gathered this data. InfrastructureEvent summary A summary of the change that happened. Uses a human-friendly string, such as Agent disconnected. InfrastructureEvent violationUpdateType The type of change to the violation: For example: open or closed. InfrastructureEvent JavaScriptError Data source : Browser agent As JavaScript errors are triggered, we capture details as events. The JavaScriptError event contains information to help you segment errors to understand how they impact performance. Attribute name Definition Events appId ID The identification number for the reporting browser agent. JavaScriptError appName The name of the application that handled the request as shown in New Relic Browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileRequest MobileHandledException MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnLatitude The latitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's latitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnLongitude The longitude of the geographic center of the postal code where the Autonomous System Network is registered. This is not the end user's longitude. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming asnOrganization The organization that owns the Autonomous System Number. Often an ISP, sometimes a private company or institution. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming browserInteractionId ID A unique value generated for each browser interaction captured by the New Relic agent. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError browserStackHash ID An unique identifier generated for a stack trace. The browserStackHash for a stack trace is different across different browsers. An identical stack trace will generate the same identifier. JavaScriptError city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the browser initiated the page load. For a list of country codes, see ISO 3166-1 alpha-2. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming deviceType The type of device that loaded the page: mobile, tablet, or desktop. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageView domain The domain portion of the request URL. BrowserInteraction JavaScriptError PageView PageViewTiming entityGuid The unique identifier of the monitor referenced in New Relic One. JavaScriptError SyntheticCheck SyntheticRequest errorClass The error type of the JavaScript Error object. Examples: ReferenceError, SyntaxError, and UncaughtException. JavaScriptError errorMessage The error message that was delivered. JavaScriptError firstErrorInSession A value to indicate whether or not this was the first JS error in the session. Example: true. JavaScriptError monitorAccountId The Synthetics account from which you are running the monitor. BrowserInteraction JavaScriptError monitorId ID A unique number identifying a particular monitor. BrowserInteraction JavaScriptError SyntheticCheck monitorJobId ID The ID of a single Synthetics monitor run, which began at a specific time and originated from a specific location. BrowserInteraction JavaScriptError pageUrl The URL of the page that was loaded for the PageView. For example: http://www.newrelic.com. This URL does not include query parameters. AjaxRequest BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span parentEventId ID A unique value generated for each interaction with the page. You can use this value to group interactions together. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError regionCode The specific administrative division within a country where the PageView event occurred. In the United States, regions correspond to state codes, such as WA or NY. Outside the United States, a country's regions correspond to numerical codes. In the United States, regions correspond to state codes ; for example, WA or NY. Outside the United States, a country's regions correspond to numerical codes . AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming releaseIds ID The releases in which the app was updated. Example: {\\\"jQuery\\\":\\\"v3.1.1\\\",\\\"multiverse\\\":\\\"96e9ac7\\\"}. JavaScriptError requestUri The URI of the requested resource. JavaScriptError session A unique identifier for a single session. The session cookie expires when the user closes the browser (for example, they fully exit Chrome.) A new session identifier will be assigned when the user opens up a new instance of the browser. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Span stackHash ID A unique identifier generated by the Browser agent for a stack trace. The stackHash for a stack trace is the same across different browsers. An identical stack trace will generate the same identifier. JavaScriptError stackTrace A collection of the active stack frames when the error occurred. JavaScriptError stackTraceGzip A compressed version of the stackTrace attribute. JavaScriptError timestamp The time that the error occurred, in Unix time. JavaScriptError transactionName The full metric name of the transaction in which the error occurred, or Unknown if the error occurs outside of a transaction. JavaScriptError userAgentName The browser’s name, such as Chrome and Firefox, obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentOS The browser’s reported operating system, such as Windows or Linux, that it is running on. This is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming userAgentVersion The browser’s reported software version, which is obtained from the User-Agent header of an HTTP request. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError PageAction PageView PageViewTiming Metric Data source : Metrics Represents a metric data point (e.g., a measurement over a range of time, or a sample at a specific point in time) with multiple attributes attached, which allow for in-depth analysis and querying. This metric data comes from our Metric API, our Telemetry SDKs, and some of our open-source exporters/integrations. Attribute name Definition Events endTimestamp milliseconds (ms) The end of the time range associated with the metric, in Unix time, in milliseconds. This is calculated by adding the metric interval to the timestamp of the metric (timestamp + interval.ms). Metric interval.ms milliseconds (ms) The length of the time window. Metric metricName Name of the metric. Metric newrelic.source The source of this data. For example: metricAPI. Metric timestamp milliseconds (ms) The start time for the metric in Unix time, in milliseconds. Metric Mobile Data source : Mobile A Mobile event is created when a crash occurs, when an interaction ends or has run for 1 second, or if a session completes after the app is closed, backgrounded, or has run for 10 minutes. Mobile events were once the only event type and were generated for every event, but now there are several specialized event types. Recommendation: Upgrade to the most recent New Relic Mobile agent version to take full advantage of the new event types. Attribute name Definition Events category The type of data, either session or interaction. Mobile MobileSession interactionDuration For interaction category events only. This is the total time for the interaction to render on the device. In addition to render time, this usually includes all external calls associated with the interaction. Currently, this attribute is measured in seconds for Android devices and in milliseconds for iOS devices. Mobile name For interaction category events only. This is the label of the interaction associated with the event. It is by default assigned by New Relic. For example: ApplicationsListFragment or Display iOS_Example.MasterViewController. Mobile reportedTimestampMs For interaction category events only. The UTC based timestamp for when the event was sent to New Relic. This is different from the attribute ‘timestamp’, which is when the event began. Mobile MobileCrash Data source : Mobile The MobileCrash event is created when an app crashes. MobileCrash includes attributes such as crash line number, class, and crash message. Attribute name Definition Events appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appToken The mobile application license token. MobileCrash appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession architecture The processor architecture of the device. For example: armv7 or arm64. MobileCrash asnOwner The telecom owner of the ASN. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession bundleId ID The unique string used to identify the application. MobileCrash MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession crashException The exception associated with the crash, if one is present. For example: java.lang.NullPointerException. MobileCrash crashFingerprint ID The New Relic-generated fingerprint used to uniquely identify the crash and other crashes identical to this one. MobileCrash crashLocationFile The file in which the crash occurred. MobileCrash crashMessage The message associated with the crash, if one is present. MobileCrash deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceName The device's name. MobileCrash deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession diskAvailable bytes (B) Space available on the device, in bytes. MobileCrash interactionHistory The client interactions with the application that led to the crash. MobileCrash isFirstOccurrence A boolean value indicating whether or not this was the first occurrence of the crash. MobileCrash lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession modelNumber The model of the device. This is the same as the session-level deviceModel attribute. MobileCrash networkStatus The type of network that the device was on at the time of crash, such as wifi or LTE. MobileCrash newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession occurrenceId ID The ID for this instance of the crash. MobileCrash orientation The orientation of the device, such as landscape or portrait. MobileCrash osBuild For Android only. The specific build of the Android OS. MobileCrash MobileHandledException osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession parentProcess The parent process that launched the crashing process. MobileCrash parentProcessId ID The parent identification number (PID) of the parent process. MobileCrash platform The platform type of the New Relic Mobile agent, such as native or Cordova. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession processId ID The PID of the previously running process on the device. MobileCrash processName The name of the previously running process. MobileCrash processPath The path to the binary. MobileCrash reportedTimestampMs The UTC timestamp for when the event was received by New Relic. (This is different from timestamp, which is when the MobileSession event began that crashed.) MobileCrash runTime For Android only. The Android Runtime version where the exception/crash was generated. MobileCrash MobileHandledException sessionCrashed A boolean value indicating whether or not that session crashed. MobileCrash MobileSession sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession symbolicated A boolean value indicating whether or not the crash was properly symbolicated. MobileCrash timeSinceLastInteraction milliseconds (ms) The time, in milliseconds, since the interaction before a crash event. MobileCrash userImageUuids ID The array of build UUIDs for applications and libraries. MobileCrash uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession MobileHandledException Data source : Mobile MobileHandledException is sent when an exception is caught and is used for non-fatal exceptions reported to New Relic using the recordHandledException API for Android or iOS. Attribute name Definition Events appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileRequest MobileHandledException MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileRequest MobileHandledException MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileRequest MobileHandledException MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileRequest MobileHandledException MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession exceptionAppBuildUuid ID The build uuid of the application binary in which the exception was caught. MobileHandledException exceptionCause The unsymbolicated, platform-specific cause of the exception. MobileHandledException exceptionLocation New Relic defined location of an exception. Contains a combination of exception file name, class, line number, and method. MobileHandledException exceptionLocationClass The class that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationFile The class that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationLibraryOffset For XCFramework agent only. The library offset of the library that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionLocationLine Comes from the exception: The line number where the exception was generated. Only present if symbolication succeeded. MobileHandledException exceptionLocationMethod The method that generated the exception. Only present if symbolication succeeded. MobileHandledException exceptionMessage The unsymbolicated message from the exception. It can be user-generated or a generic system message. For Android, this is the Throwable message. MobileHandledException exceptionName The unsymbolicated exception type. MobileHandledException fingerprint ID The New Relic-generated identifier used to group like exceptions. MobileHandledException handledExceptionUuid ID The unique ID of the exception event. MobileHandledException lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession libraryName For XCFramework agent only. The library name where the exception was generated. MobileHandledException libraryStartAddr For XCFramework agent only. The library start address where the exception was generated. MobileHandledException memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession occurrenceTimestamp Agent-reported epoch timestamp of the handled exception. MobileHandledException osBuild For Android only. The specific build of the Android OS. MobileCrash MobileHandledException osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession platform The platform type of the New Relic Mobile agent, such as native or Cordova. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileRequest MobileHandledException MobileRequestError MobileSession runTime For Android only. The Android Runtime version where the exception/crash was generated. MobileCrash MobileHandledException sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession timestamp Epoch timestamp of the handled exception. This exception timestamp represents the time New Relic created the event, if it's older than two days or some other unexpected time. MobileHandledException uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession MobileRequest Data source : Mobile A MobileRequest event is created when an HTTP request successfully completes, resulting in a response code below 400. Attribute name Definition Events appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileRequest MobileHandledException MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession bytesReceived bytes (B) Optional: If the application received a response from the requestUrl, the size of that response in bytes. MobileRequest MobileRequestError bytesSent bytes (B) Optional: If the application sent a request to the requestUrl, the size of that request in bytes. MobileRequest MobileRequestError carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession connectionType The type of connection which the device was using, such as 2G or 3G. MobileRequest MobileRequestError countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileRequest MobileHandledException MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileRequest MobileHandledException MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceSize The display size of the device: Small, normal, large, xlarge. MobileRequest MobileRequestError deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileRequest MobileHandledException MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession duration seconds (s) Optional: The time to complete the request, measured in fractional seconds. MobileRequest MobileRequestError guid ID The unique identifier for the segment. This is equivalent to spanID in OpenTracing semantics. MobileRequest MobileRequestError Span lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession platform The platform type of the New Relic Mobile agent, such as native or Cordova. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileRequest MobileHandledException MobileRequestError MobileSession requestDomain The domain that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestFingerprint ID The New Relic-generated identifier used to group like request events. MobileRequest requestMethod The REST method (GET, PUT, POST, etc.) that the application attempted when the event occurred. MobileRequest MobileRequestError requestPath The path that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUrl The URL that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUuid ID A unique identifer for the request event. MobileRequest MobileRequestError responseTime seconds (s) The time between the request and the response in fractional seconds. MobileRequest MobileRequestError sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession statusCode Optional: The HTTP status code for the HTTP event. MobileRequest MobileRequestError timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocationError AwsLambdaInvocation MobileRequest MobileRequestError Span uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession MobileRequestError Data source : Mobile A MobileRequestError is used for HTTP errors or network failures. HTTP errors are HTTP requests that have a status code greater than 400. A network failure is a HTTP request that results in no response. The event is sent when the HTTP request completes. Attribute name Definition Events appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileRequest MobileHandledException MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession bytesReceived bytes (B) Optional: If the application received a response from the requestUrl, the size of that response in bytes. MobileRequest MobileRequestError bytesSent bytes (B) Optional: If the application sent a request to the requestUrl, the size of that request in bytes. MobileRequest MobileRequestError carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession connectionType The type of connection which the device was using, such as 2G or 3G. MobileRequest MobileRequestError countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileRequest MobileHandledException MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileRequest MobileHandledException MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceSize The display size of the device: Small, normal, large, xlarge. MobileRequest MobileRequestError deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileRequest MobileHandledException MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession duration seconds (s) Optional: The time to complete the request, measured in fractional seconds. MobileRequest MobileRequestError errorType Either HTTPError or NetworkFailure, depending on whether the error is a result of a failed request to a host or a failure on the cellular network. MobileRequestError guid ID The unique identifier for the segment. This is equivalent to spanID in OpenTracing semantics. MobileRequest MobileRequestError Span lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession networkError The error message associated with the iOS NSURL Error code. See networkErrorCode for more information. MobileRequestError networkErrorCode If the error is a network error, this is the iOS network error code. For Android applications, this is the mapped value. MobileRequestError newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession platform The platform type of the New Relic Mobile agent, such as native or Cordova. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileRequest MobileHandledException MobileRequestError MobileSession requestDomain The domain that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestErrorFingerprint ID The New Relic-generated identifier used to group like request error events. MobileRequestError requestMethod The REST method (GET, PUT, POST, etc.) that the application attempted when the event occurred. MobileRequest MobileRequestError requestPath The path that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUrl The URL that the application attempted to access when the event occurred. MobileRequest MobileRequestError requestUuid ID A unique identifer for the request event. MobileRequest MobileRequestError responseBody Optional: The response that is sent from the requestDomain for the HTTP error, up to 4096 bytes. MobileRequestError responseTime seconds (s) The time between the request and the response in fractional seconds. MobileRequest MobileRequestError sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession statusCode Optional: The HTTP status code for the HTTP event. MobileRequest MobileRequestError timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession trace.id ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. DistributedTraceSummary MobileRequest MobileRequestError Span Transaction TransactionError traceId ID The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. Included when distributed tracing is enabled. AwsLambdaInvocationError AwsLambdaInvocation MobileRequest MobileRequestError Span uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession MobileSession Data source : Mobile A MobileSession event is sent when an app is closed, backgrounded, or when 10 minutes of active use has elapsed. This is the source of the general session data used by the other New Relic Mobile events. MobileSession captures attributes such as device type, device OS, and geographical information. Attribute name Definition Events appBuild Indicates the technical build number of the app binary. As a developer, you can use this attribute to identify specific builds of your app. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appId ID A unique identifier for a monitored app, based on the app token. For example: 35091. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appName The name of the monitored app. For example: My Mobile App - iOS. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersion The version number of the monitored app. For example: 2.2.9. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession appVersionId ID An identifier for the specific version of the app. For example: 1713477. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession asn Autonomous System Number: a unique number identifying a group of IP networks that serves the content to the end user. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileRequest MobileHandledException MobileRequestError MobileSession PageAction PageView PageViewTiming Span asnOwner The telecom owner of the ASN. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession bundleId ID The unique string used to identify the application. MobileCrash MobileSession carrier The network over which the app transferred data, such as Wi-Fi, Verizon, or Sprint. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession category The type of data, either session or interaction. Mobile MobileSession city The city in which the event occurred, such as Portland or Seattle. AjaxRequest BrowserInteraction BrowserTiming JavaScriptError MobileHandledException MobileSession PageAction PageView PageViewTiming countryCode The country from which the device ran the application. For a list of country codes, see ISO 3166-1 alpha-2. MobileRequest MobileHandledException MobileRequestError MobileSession device The specific type of the device: iPhone 8, iPad Pro, etc. Duplicate of deviceType. MobileRequest MobileHandledException MobileRequestError MobileSession deviceGroup The category of the device, such as iPhone or Tablet. MobileRequest MobileRequestError MobileSession deviceManufacturer The manufacturer of the device, such as Motorola or HTC. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceModel The model number of the device, such as XT1039 or SM-G900F. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession deviceType The specific type of device: iPhone 8, iPad Pro, etc. Duplicate of device. MobileRequest MobileHandledException MobileRequestError MobileSession deviceUuid ID A unique identifier assigned at the time of app installation by New Relic. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of uuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession install Indicates true only if the current session is the first session after app install. MobileSession lastInteraction The last interaction before a crash or harvest event, if one is present. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession memUsageMb megabytes (MB) The total amount of memory, in MB, used by the application. Updated every 60 seconds. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession newRelicAgent The New Relic agent running on the application. For example: the iOSAgent or the androidAgent. MobileSession newRelicVersion The version number of the agent running on the application. For example: 4.232.0. Duplicate of newRelicAgentVersion. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osMajorVersion The simplified version number of the app's host operating system, such as iOS 11, as compared to iOS 11.0.4. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osName The name of the app's host operating system, for example, iOS or Android. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession osVersion The exact version number of the app's host operating system, such as iOS 11.0.4, as compared to iOS 11. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession platform The platform type of the New Relic Mobile agent, such as native or Cordova. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession regionCode The specific region within a country where the monitored app is located. In the United States, regions are states. The regionCode is based on IP address and may not always match your region. MobileRequest MobileHandledException MobileRequestError MobileSession sessionCrashed A boolean value indicating whether or not that session crashed. MobileCrash MobileSession sessionDuration seconds (s) The length of time for which the user used the application in seconds. If the session crashes, sessionDuration is not captured (although other events and attributes are still recorded). For sessions longer than 10 minutes, events in the Interaction and Custom event categories are sent to Insights while the session is ongoing, and therefore do not have sessionDuration attributes. Events recorded near the end of the session will include the duration, as will the Session event category. MobileSession sessionId ID A unique identifier for a single user session. A new sessionId is created each time the app is brought into the foreground. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession timeSinceLoad seconds (s) The time, in seconds, from the beginning of the mobile session to the time the event occurred. MobileSession timestamp The UTC epoch time at which an event began. MobileRequest MobileRequestError MobileSession upgradeFrom Indictates previous version number only if this is the first launch after app upgrade. MobileSession uuid ID A unique identifier assigned by New Relic for a specific app on a particular device. It is only reset if a user deletes and then reinstalls the app. For example: B8B0BC30-0235-11E4-9191-0800200C9A66. Dupliate of deviceUuid. MobileCrash MobileRequest MobileHandledException MobileRequestError MobileSession NetworkSample Data source : Infrastructure NetworkSample event captures the descriptive and state information for each network device associated with a server. It includes the device's interface and address information, as well as current usage data. New Relic samples this data every 10 seconds for each attached network interface and packages it into a NetworkSample event, then sends the raw data to New Relic's collectors every 60 seconds. Attribute name Definition Events agentName The name of the agent (Infrastructure). NetworkSample ProcessSample StorageSample SystemSample agentVersion The version of the New Relic Infrastructure agent. NetworkSample ProcessSample StorageSample SystemSample criticalViolationCount count The number of times that alert conditions violated critical thresholds, causing critical violations and opening incidents. If this attribute does not exist on the sample, it has zero violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample entityID ID New Relic's unique ID number for the entity that is reporting data. This is used by New Relic to distinguish between customers and their entities. NetworkSample ProcessSample StorageSample SystemSample fullHostname The fully qualified (DNS) hostname. NetworkSample ProcessSample StorageSample SystemSample hardwareAddress The unique hardware address of the interface. NetworkSample hostname The short version of the entity's name. NetworkSample ProcessSample StorageSample SystemSample interfaceName The interface name as reported by the operating system. NetworkSample ipV4Address The IP version 4 address. NetworkSample ipV6Address The IP version 6 address. NetworkSample kernelVersion The Linux kernel version, in string format. This attribute is available only for systems on a Linux platform. NetworkSample ProcessSample StorageSample SystemSample linuxDistribution The name of the Linux distribution the server is using. This attribute is available only for systems on a Linux platform. NetworkSample ProcessSample StorageSample SystemSample operatingSystem The operating system on which the agent is installed. NetworkSample ProcessSample StorageSample SystemSample receiveBytesPerSecond bytes (B) The number of bytes per second received during the sampling period. NetworkSample receiveDroppedPerSecond count The number of received packets per second dropped during the sampling period. NetworkSample receiveErrorsPerSecond count The number of receive errors per second on the interface during the sampling period. NetworkSample receivePacketsPerSecond count The number of packets per second (as defined by OS) received during the sampling period. NetworkSample state The state of the entity: either up or down. NetworkSample timestamp The time (date, hour, minute, second) at which the interaction occurred. NetworkSample ProcessSample StorageSample SystemSample transmitBytesPerSecond bytes (B) The number of bytes sent per second during the sampling period. NetworkSample transmitDroppedPerSecond count The number of dropped send packets per second during the sampling period. NetworkSample transmitErrorsPerSecond count The number of send errors per second on the interface during the sampling period. NetworkSample transmitPacketsPerSecond count The number of packets per second as defined by OS) sent during this sampling period. NetworkSample warningViolationCount count The number of times that alert conditions violated warning thresholds, causing warning violations. ContainerSample NetworkSample ProcessSample StorageSample SystemSample windowsFamily The Windows family indicates w",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.96544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> data dictionary",
        "sections": "<em>New</em> <em>Relic</em> data dictionary",
        "body": " boundaries. This ID allows the linking of spans in a <em>distributed</em> <em>trace</em>. Included when <em>distributed</em> <em>tracing</em> is enabled. AwsLambdaInvocationError AwsLambdaInvocation <em>Mobile</em>Request <em>Mobile</em>RequestError Span uuid ID A unique identifier assigned by <em>New</em> <em>Relic</em> for a specific app on a particular device"
      },
      "id": "603f53b164441f41894e8875"
    },
    {
      "sections": [
        "Legacy manual instrumentation",
        "Go",
        "Zip and upload recommendations",
        "Java",
        "Tip",
        ".NET Core",
        "Async handler function",
        "Inheriting from APIGatewayProxyFunction",
        "Important",
        "Using the SQS Wrapper",
        "Using the SNS Wrapper",
        "Node.js",
        "Python"
      ],
      "title": "Legacy manual instrumentation",
      "type": "docs",
      "tags": [
        "Serverless function monitoring",
        "AWS Lambda monitoring",
        "Enable Lambda monitoring"
      ],
      "external_id": "694e22b2ce401a96d200ab2e12a08850532b3e5a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/enable-lambda-monitoring/enable-serverless-monitoring-aws-lambda-legacy/",
      "published_at": "2021-06-26T00:51:08Z",
      "updated_at": "2021-06-26T00:51:07Z",
      "document_type": "page",
      "popularity": 1,
      "body": "On this page, you will learn how to manually instrument your lambda function. It is organized by runtime language. Go To instrument your Go-language Lambda: Download our Go agent package and place it in the same directory as your function. Install the agent: go get -u github.com/newrelic/go-agent/v3/newrelic. Install the nrlambda integration go get -u github.com/newrelic/go-agent/v3/integrations/nrlambda. In your Lambda code, import our components, create an application, and update how you start your Lambda. See our GitHub repo for an example of an instrumented Lambda. Optional: Add custom events that will be associated with your Lambda invocation by using the RecordCustomEvent API. For example: func handler(ctx context.Context) { if txn := newrelic.FromContext(ctx); nil != txn { txn.Application().RecordCustomEvent(\"MyEvent\", map[string]interface{}{ \"zip\": \"zap\", }) } fmt.Println(\"hello world!\") } Copy Build and zip your Lambda function and upload it to AWS. Zip and upload recommendations Here are suggestions for zipping and uploading the Lambda: Build the binary for execution on Linux. This produces a binary file called main. You can use: $ GOOS=linux go build -o main Copy Zip the binary into a deployment package using: $ zip deployment.zip main Copy Upload the zip file to AWS using either the AWS Lambda console or the AWS CLI. Name the handler main (to match the name given during the binary build). The following environment variables are not required for Lambda monitoring to function but they are required if you want your Lambda functions to be included in distributed traces. To enable distributed tracing, set these environment variables in the AWS console: NEW_RELIC_ACCOUNT_ID. Your account ID. NEW_RELIC_TRUSTED_ACCOUNT_KEY. This is also your account ID. If your account is a sub-account, this is the account ID for the root/parent account. Optional: To configure logging, see Go agent logging. Invoke the Lambda at least once. This creates a CloudWatch log group, which must be present for the next step to work. Our wrapper gathers data about the Lambda execution, generates a JSON message, and logs it to CloudWatch Logs. Next, you'll configure CloudWatch to send those logs to New Relic. Java Monitoring for AWS Lambda in Java doesn't use our APM Java agent. Instead, it uses these two OpenTracing dependencies: AWS Lambda OpenTracing Java SDK: OpenTracing instrumentation for AWS Lambda RequestHandler and RequestStreamHandler. Our AWS Lambda OpenTracing Tracer: An OpenTracing Tracer implementation designed to monitor AWS Lambda. It generates spans, error events, transaction events, error traces, and provides distributed tracing support. Tip Supported OpenTracing Versions OpenTracing 0.31.0: Lambda Tracer: com.newrelic.opentracing:newrelic-java-lambda:1.1.1 Lambda SDK: com.newrelic.opentracing:java-aws-lambda:1.0.0 OpenTracing 0.32.0, 0.33.0: Lambda Tracer: com.newrelic.opentracing:newrelic-java-lambda:2.1.1 Lambda SDK: com.newrelic.opentracing:java-aws-lambda:2.1.0 To instrument your Java Lambda: In your project’s build.gradle file, include our OpenTracing AWS Lambda Tracer and the AWS Lambda OpenTracing SDK dependencies: dependencies { compile(\"com.newrelic.opentracing:java-aws-lambda:2.1.0\") compile(\"com.newrelic.opentracing:newrelic-java-lambda:2.1.1\") compile(\"io.opentracing:opentracing-util:0.33.0\") } Copy Implement the AWS Lambda RequestHandler interface as shown in the Java Lambda example and override the doHandleRequest method. In the doHandleRequest method, call the LambdaTracing.instrument(...) API to create a root span to trace the lambda function's execution. This is also where you will define your business logic for the lambda function. Register a LambdaTracer.INSTANCE as the OpenTracing Global tracer, as shown in the Java Lambda example. Create a ZIP deployment package and upload it to AWS Lambda. Or deploy it via other means. In the AWS Lambda console, set the handler. For the example Java Lambda, the handler would be com.handler.example.MyLambdaHandler::handleRequest. Because handleRequest is assumed, you could also use com.handler.example.MyLambdaHandler. The following AWS console environment variables are required if you want your Lambda function to be included in distributed tracing. This is recommended. NEW_RELIC_ACCOUNT_ID. Your account ID. NEW_RELIC_PRIMARY_APPLICATION_ID. This is also your account ID. NEW_RELIC_TRUSTED_ACCOUNT_KEY. This is also your account ID. If your account is a sub-account, this must be the account ID for the root/parent account. Optional: In the Lambda console, enable debug logging by adding this environment variable: NEW_RELIC_DEBUG is true. Invoke the Lambda at least once. This creates a CloudWatch log group, which must be present for the next step to work. Our wrapper gathers data about the Lambda execution, generates a JSON message, and logs it to CloudWatch Logs. Next, you'll configure CloudWatch to send those logs to New Relic. Please see the AWS Lambda distributed tracing example for a complete project that illustrates common use cases such as: Distributed tracing between Lambda functions Manual span creation (aka custom instrumentation) Tracing external calls Adding custom attributes (aka Tags) to spans .NET Core Our monitoring of .NET Core-based AWS Lambda functions doesn't use our standard .NET Core APM agent. Instead, it uses a NuGet package. To instrument your .NET Core Lambda: In your Lambda Functions project, install the NewRelic.OpenTracing.AmazonLambda.Tracer NuGet package. Note: NewRelic.OpenTracing.AmazonLambda.Tracer depends on version 1.2.0+ of Amazon.Lambda.APIGatewayEvent NuGet package. If the environment already uses a lower version of Amazon.Lambda.APIGatewayEvent, the New Relic package may produce errors such as System.MissingMethodException . Import the NuGet package and OpenTracing utils: using OpenTracing.Util; using NewRelic.OpenTracing.AmazonLambda; Copy Instrument your function, as shown in this example: public class Function { static Function() { // Register The NewRelic Lambda Tracer Instance GlobalTracer.Register(NewRelic.OpenTracing.AmazonLambda.LambdaTracer.Instance); } public object FunctionWrapper(ILambdaContext context) { // Instantiate NewRelic TracingWrapper and pass your FunctionHandler as // an argument return new TracingRequestHandler().LambdaWrapper(FunctionHandler, context); } /// <summary> /// A simple function that takes a string and does a ToUpper /// </summary> /// <param name=\"input\"></param> /// <param name=\"context\"></param> /// <returns></returns> public object FunctionHandler(ILambdaContext context) { ... } } Copy Tip The arguments passed to FunctionWrapper must match the signature of FunctionHandler. If your handler function returns a Task, the Lambda wrapper will block on the return task until it completes, so that it can measure the duration and capture exceptions, if any are present. In addition, you may also inherit from the APIGatewayProxyFunction. For an example, see below: Async handler function public override Task<int> FunctionHandlerAsync(ILambdaContext lambdaContext) { // This call will block by calling task.Result Task<int> task = new TracingRequestHandler().LambdaWrapper( ActualFunctionHandlerAsync, lambdaContext); return task; } public Task<APIGatewayProxyResponse> ActualFunctionHandlerAsync(ILambdaContext lambdaContext) { // Function can make other async operations here ... } Copy Inheriting from APIGatewayProxyFunction public class LambdaFunction : APIGatewayProxyFunction { static LambdaFunction() { // Register The NewRelic Lambda Tracer Instance OpenTracing.Util.GlobalTracer.Register(NewRelic.OpenTracing.AmazonLambda.LambdaTracer.Instance); } public override Task<APIGatewayProxyResponse> FunctionHandlerAsync(APIGatewayProxyRequest request, ILambdaContext lambdaContext) { Task<APIGatewayProxyResponse> task = new TracingRequestHandler().LambdaWrapper(ActualFunctionHandlerAsync, request, lambdaContext); return task; } public Task<APIGatewayProxyResponse> ActualFunctionHandlerAsync(APIGatewayProxyRequest request, ILambdaContext lambdaContext) { return base.FunctionHandlerAsync(request, lambdaContext); } } Copy Optional for SQS and SNS: Starting in version 1.0 of our .NET Lambda Tracer, distributed tracing support has been added for SQS and SNS. To enable distributed tracing for SQS or SNS you will need to complete the items in this step as well as setup the environment variables in the step that follows this one. Important Enabling distributed tracing support for SQS and SNS will disable automatic instrumentation for both of SQS and SNS and require the use of these wrappers to instrument them. Set the NEW_RELIC_USE_DT_WRAPPER environment variable to true. To instrument SQS and SNS calls you will need to use the provided wrappers. Using the SQS Wrapper The SQS wrapper supports wrapping the following methods: Amazon.SQS.AmazonSQSClient.SendMessageAsync(...) Amazon.SQS.AmazonSQSClient.SendMessageBatchAsync(...) Examples // SQS Client AmazonSQSClient client = new AmazonSQSClient(\"AWS_SECRET_ACCESS_KEY\", AWS_REGION); // SendMessageRequest SendMessageRequest sendRequest = new SendMessageRequest(\"QUEUE_URI_STRING\", \"An SQS Message\"); Task<SendMessageResponse> responseOne = SQSWrapper.WrapRequest(client.SendMessageAsync, sendRequest); // String-based Task<SendMessageResponse> responseTwo = SQSWrapper.WrapRequest(client.SendMessageAsync, \"QUEUE_URI_STRING\", \"Another SQS Message\"); // SendMessageBatchRequest List<SendMessageBatchRequestEntry> batchEntries = new List<SendMessageBatchRequestEntry>(); batchEntries.Add(new SendMessageBatchRequestEntry(\"id1\", \"First SQS Message\")); batchEntries.Add(new SendMessageBatchRequestEntry(\"id2\", \"Second SQS Message\")); batchEntries.Add(new SendMessageBatchRequestEntry(\"id3\", \"Third SQS Message\")); SendMessageBatchRequest sendBatchRequest = new SendMessageBatchRequest(QUEUE_URI, batchEntries); Task<SendMessageBatchResponse> response = SQSWrapper.WrapRequest(client.SendMessageBatchAsync, sendBatchRequest); // SendMessageBatchRequestEntry List List<SendMessageBatchRequestEntry> moreBatchEntries = new List<SendMessageBatchRequestEntry>(); batchEntries.Add(new SendMessageBatchRequestEntry(\"id4\", \"Fourth SQS Message\")); batchEntries.Add(new SendMessageBatchRequestEntry(\"id5\", \"Fifth SQS Message\")); batchEntries.Add(new SendMessageBatchRequestEntry(\"id6\", \"Sixth SQS Message\")); Task<SendMessageBatchResponse> response = SQSWrapper.WrapRequest(client.SendMessageBatchAsync, moreBatchEntries); Copy Using the SNS Wrapper The SNS wrapper supports wrapping the following methods: Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceClient.PublishAsync(...) Examples // SNS Client AmazonSimpleNotificationServiceClient client = new Amazon.SimpleNotificationService.AmazonSimpleNotificationServiceClient(\"AWS_SECRET_ACCESS_KEY\", AWS_REGION); // PublishRequest - Phone Number PublishRequest phonePublishRequest = new PublishRequest(); phonePublishRequest.PhoneNumber = +1XXX5555100; phonePublishRequest.Message = \"An SNS Message for phones\"; Task<PublishResponse> phoneResponse = SNSWrapper.WrapRequest(client.PublishAsync, phonePublishRequest); // PublishRequest - ARN PublishRequest publishRequest = new PublishRequest(\"TOPIC_ARN\", \"An SNS Message\"); Task<PublishResponse> publishResponse = SNSWrapper.WrapRequest(client.PublishAsync, publishRequest); // String-based without subject Task<PublishResponse> ResponseOne = SNSWrapper.WrapRequest(client.PublishAsync, \"TOPIC_ARN\", \"Another SNS Message\"); // String-based with subject Task<PublishResponse> ResponseTwo = SNSWrapper.WrapRequest(client.PublishAsync, \"TOPIC_ARN\", \"Yet Another SNS Message\", \"A Subject\"); Copy The following environment variables are not required for Lambda monitoring to function but they are required if you want your Lambda functions to be included in distributed traces. To enable distributed tracing, set these environment variables in the AWS Lambda console: NEW_RELIC_ACCOUNT_ID: The account ID the Lambda is reporting to. NEW_RELIC_TRUSTED_ACCOUNT_KEY: This is also the account ID. If your account is a sub-account, this needs to be the account ID for the root/parent account. Ensure that the wrapper function (FunctionWrapper in above example) is set up as the function handler. Invoke the Lambda at least once. This creates a CloudWatch log group, which must be present for the next step to work. Our wrapper gathers data about the Lambda execution, generates a JSON message, and logs it to CloudWatch Logs. Next you'll configure CloudWatch to send those logs to New Relic. Node.js To instrument your Node.js Lambda: Download our Node.js agent package and place it in the same directory as your function, ensuring the agent is installed as a dependency in the node_modules directory. Use the Node Package Manager: npm install newrelic --save Copy Install our AWS SDK module alongside the Node.js agent: npm install @newrelic/aws-sdk --save Copy In your Lambda code, require the agent module and the AWS SDK at the top of the file, and wrap the handler function. For example: const newrelic = require('newrelic'); require('@newrelic/aws-sdk'); // Other module loads go under the two require statements above module.exports.handler = newrelic.setLambdaHandler((event, context, callback) => { // This is your handler function code console.log('Lambda executed'); callback(); }); Copy Optional: You can also add custom events to your Lambda using the recordCustomEvent API. For example: module.exports.handler = newrelic.setLambdaHandler((event, context, callback) => { newrelic.recordCustomEvent(‘MyEventType’, {foo: ‘bar’}); console.log('Lambda executed'); callback(); }); Copy Zip your Lambda function and the Node.js agent folder together. Requirements and recommendations: The New Relic files outside the New Relic agent folder don't need to be included. If your Lambda function file name is, for example, lambda_function.node, we recommend naming your zip file lambda_function.zip. Do not use a tarball. Your Lambda and its associated modules must all be in the zip file's root directory. This means that if you zip a folder that contains the files, it won't work. Upload the zipped file to your AWS Lambda account. In the AWS console, set these environment variables: NEW_RELIC_NO_CONFIG_FILE. Set to true if not using a configuration file. NEW_RELIC_APP_NAME: Your application name. NEW_RELIC_ACCOUNT_ID. Your account ID. NEW_RELIC_TRUSTED_ACCOUNT_KEY. This is also your account ID. If your account is a sub-account, this needs to be the account ID for the root/parent account. Optional: To run the agent in serverless mode outside of AWS in a local environment, set the environment variable NEW_RELIC_SERVERLESS_MODE_ENABLED to true. (When executing this in an AWS Lambda environment, the agent will automatically run in serverless mode. Do not use this variable if you're running in AWS.) Optional: To enable logging in serverless mode, set these environment variables: Set NEW_RELIC_LOG_ENABLED to true. Set NEW_RELIC_LOG to stdout for output to CloudWatch, or set to any writeable file location. The log level is set to info by default. See other log levels. Invoke the Lambda at least once. This creates a CloudWatch log group, which must be present for the next step to work. Our wrapper gathers data about the Lambda execution, generates a JSON message, and logs it to CloudWatch Logs. Next you'll configure CloudWatch to send those logs to New Relic. Python To instrument your Python Lambda: Download our Python agent package and place it in the same directory as your function. To do this, use pip: pip install -t . newrelic Copy Important If you use Homebrew, you may get this error: DistutilsOptionError: must supply either home or prefix/exec-prefix -- not both. For details, see the Homebrew GitHub post. In your Lambda code, import the Python agent module and decorate the handler function using the New Relic decorator. The New Relic package must be imported first in your code. Here's an example: import newrelic.agent newrelic.agent.initialize() @newrelic.agent.lambda_handler() def handler(event, context): ... Copy Optional: You can also add custom events to your Lambda using the record_custom_event API. Here's an example: @newrelic.agent.lambda_handler() def handler(event, context): newrelic.agent.record_custom_event('CustomEvent', {'foo': 'bar'}) … Copy Zip your lambda_function.py and newrelic/ folder together using these guidelines: The New Relic files outside the newrelic/ folder don't need to be included. If your Lambda function file name is, for example, lambda_function.py, name your zip file lambda_function.zip. Do not use a tarball. Your Lambda and its associated modules must all be in the zip file's root directory. This means that if you zip a folder that contains the files, it won't work. Upload the zipped file to your AWS Lambda account. In the AWS console, set this environment variable: NEW_RELIC_SERVERLESS_MODE_ENABLED. Set to true The following environment variables are not required for Lambda monitoring to function but they are required if you want your Lambda functions to be included in distributed traces. To enable distributed tracing, set these environment variables in the AWS console: NEW_RELIC_DISTRIBUTED_TRACING_ENABLED. Set to true. NEW_RELIC_ACCOUNT_ID. Your account ID. NEW_RELIC_TRUSTED_ACCOUNT_KEY. This is also your account ID. If your account is a sub-account, this needs to be the account ID for the root/parent account. Optional: To configure logging, use the NEW_RELIC_LOG and NEW_RELIC_LOG_LEVEL environment variables in the AWS Console. Invoke the Lambda at least once. This creates a CloudWatch log group, which must be present for the next step to work. The New Relic decorator gathers data about the Lambda execution, generates a JSON message, and logs it to CloudWatch Logs. Next, configure CloudWatch to send those logs to New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.14404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "Serverless function <em>monitoring</em>",
        "body": "&quot;); Copy The following environment variables are not required for Lambda <em>monitoring</em> to function but they are required if you want your Lambda functions to be included in <em>distributed</em> traces. To enable <em>distributed</em> <em>tracing</em>, set these environment variables in the AWS Lambda console: <em>NEW_RELIC</em>"
      },
      "id": "603ebbcb64441f800a4e8850"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/install-configure/android-agent-crash-reporting": [
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.02184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "If you use Gradle or <em>Android</em> Studio, follow these instructions to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> for the first time. If you have previously installed the <em>Android</em> agent SDK for <em>mobile</em> <em>monitoring</em>, follow the steps before upgrading to the latest version with Gradle and <em>Android</em> Studio. Tip"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's Android SDK",
        "Tip",
        "Upgrade from Android SDK versions 2 or 3",
        "Upgrade Android SDK version 1"
      ],
      "title": "Upgrade New Relic Mobile's Android SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "eca0e4db3d71cbe83bbb40fdc2e7d026d5e5ed4b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/upgrade-new-relic-mobiles-android-sdk/",
      "published_at": "2021-06-25T23:43:36Z",
      "updated_at": "2021-05-16T04:14:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of New Relic Mobile, see the Android agent release notes. Instructions to upgrade your Android app with the latest version of New Relic Mobile will vary, based on which version of the Android agent SDK you are currently using. Upgrade from Android SDK versions 2 or 3 If you have previously installed version 2 or 3 of the Android SDK for New Relic Mobile: Go to one.newrelic.com > Mobile > (select an app) > Settings > Upgrade. Upgrade Android SDK version 1 If you have previously installed version 1 of the Android SDK for New Relic Mobile, follow these steps before upgrading to version 2 or higher. Step Notes Open your AndroidManifest.xml file, and remove the NewRelicApplication class. When you first ran nrandroid-setup, the NewRelicApplication class was added to your AndroidManifest.xml file. This has been removed from the New Relic SDK and is no longer necessary. If you had an existing Application subclass and modified it to inherit from NewRelicApplication, update your subclass to inherit from Application instead. Stop using nrandroid-ant. New Relic Mobile no longer requires the custom Ant wrapper script for Android applications. Once you upgrade, simply use your standard build tools. If you modified an existing Maven configuration to invoke the New Relic Mobile build steps, remove those modifications, and use New Relic Mobile's revised build instructions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.1229,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of <em>New</em> <em>Relic</em> <em>Mobile</em>, see the <em>Android</em> agent release notes. Instructions to upgrade your <em>Android</em> app with the latest version of <em>New</em> <em>Relic</em> <em>Mobile</em> will vary, based on which version of the <em>Android</em> agent SDK you"
      },
      "id": "603eae0664441f985b4e8843"
    },
    {
      "sections": [
        "Configure the New Relic Gradle plugin",
        "App-level build.gradle example",
        "Enable map uploads for multiple variants",
        "Disable map uploads",
        "Disable instrumentation of debug variants"
      ],
      "title": "Configure the New Relic Gradle plugin",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "78de6c69c228047d2d56f8e10c0aad0382a30e7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/configure-new-relic-gradle-plugin/",
      "published_at": "2021-06-25T22:49:53Z",
      "updated_at": "2021-03-18T14:23:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Gradle plugin extension allows you to configure the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the New Relic plugin, then add any of the following configuration options: Config option Description variantMapsEnabled Generate unique build IDs for each app variant. Default: true uploadMapsForVariant Specify which variant build types should report ProGuard maps to New Relic. Default: Release excludeVariantInstrumentation Exclude specific variants from instrumentation during builds. Default: 'None' Here are some simple examples showing how to apply plugin configuration options to the agent: App-level build.gradle example To configure the plugin with default values: newrelic { // use a common buildId for all variants (default: true) variantMapsEnabled true // Tag and report Proguard maps for these build types (default: Release) uploadMapsForVariant(\"Release\") // instrument all variants excludeVariantInstrumentation(\"\") } Copy Enable map uploads for multiple variants Multiple build types can be specified, separated by commas: newrelic { // default build types uploadMapsForVariant(\"Release\", \"Debug\") } Copy Disable map uploads To disable map uploads entirely, use an empty string: newrelic { // disable map uploads uploadMapsForVariant(\"\") } Copy Disable instrumentation of debug variants Multiple build types can be specified, separated by commas: newrelic { // exclude debug build types and flavors excludeVariantInstrumentation(\"Debug\", \"QADebug\") } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.78334,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "sections": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "The <em>New</em> <em>Relic</em> Gradle plugin extension allows you to <em>configure</em> the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the <em>New</em> <em>Relic</em> plugin, then add any of the following configuration options: Config option Description"
      },
      "id": "603e7ad7196a67dde6a83df3"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/install-configure/configure-new-relic-gradle-plugin": [
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.02184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "If you use Gradle or <em>Android</em> Studio, follow these instructions to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> for the first time. If you have previously installed the <em>Android</em> agent SDK for <em>mobile</em> <em>monitoring</em>, follow the steps before upgrading to the latest version with Gradle and <em>Android</em> Studio. Tip"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's Android SDK",
        "Tip",
        "Upgrade from Android SDK versions 2 or 3",
        "Upgrade Android SDK version 1"
      ],
      "title": "Upgrade New Relic Mobile's Android SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "eca0e4db3d71cbe83bbb40fdc2e7d026d5e5ed4b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/upgrade-new-relic-mobiles-android-sdk/",
      "published_at": "2021-06-25T23:43:36Z",
      "updated_at": "2021-05-16T04:14:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of New Relic Mobile, see the Android agent release notes. Instructions to upgrade your Android app with the latest version of New Relic Mobile will vary, based on which version of the Android agent SDK you are currently using. Upgrade from Android SDK versions 2 or 3 If you have previously installed version 2 or 3 of the Android SDK for New Relic Mobile: Go to one.newrelic.com > Mobile > (select an app) > Settings > Upgrade. Upgrade Android SDK version 1 If you have previously installed version 1 of the Android SDK for New Relic Mobile, follow these steps before upgrading to version 2 or higher. Step Notes Open your AndroidManifest.xml file, and remove the NewRelicApplication class. When you first ran nrandroid-setup, the NewRelicApplication class was added to your AndroidManifest.xml file. This has been removed from the New Relic SDK and is no longer necessary. If you had an existing Application subclass and modified it to inherit from NewRelicApplication, update your subclass to inherit from Application instead. Stop using nrandroid-ant. New Relic Mobile no longer requires the custom Ant wrapper script for Android applications. Once you upgrade, simply use your standard build tools. If you modified an existing Maven configuration to invoke the New Relic Mobile build steps, remove those modifications, and use New Relic Mobile's revised build instructions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.12288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of <em>New</em> <em>Relic</em> <em>Mobile</em>, see the <em>Android</em> agent release notes. Instructions to upgrade your <em>Android</em> app with the latest version of <em>New</em> <em>Relic</em> <em>Mobile</em> will vary, based on which version of the <em>Android</em> agent SDK you"
      },
      "id": "603eae0664441f985b4e8843"
    },
    {
      "sections": [
        "Install the New Relic plugin for Android Instant Apps",
        "Terminology",
        "Install the plugin",
        "Minimal build.gradle example",
        "Instrumentation",
        "ProGuard and Dexguard support",
        "Important",
        "Troubleshoot auto-instrumentation"
      ],
      "title": "Install the New Relic plugin for Android Instant Apps",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "a9b40dd5eccb3d96a0cdc246eafe66b92fdeab6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-new-relic-plugin-android-instant-apps/",
      "published_at": "2021-06-25T23:12:32Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Android Instant Apps allow users to quickly use your applications without installation. With the Mobile Android agent version 5.17.0 and higher, you can use New Relic to detect and instrument all feature modules for an instant app. Use this documentation along with the standard New Relic procedures to install Android apps with Gradle and Android Studio. After following the standard installation procedures, follow these additional steps for Android instant apps. Terminology This procedure uses the following terms that are specific to the Android Instant Apps plugin: Module: Any packaged class and/or resource collection APK: A module that packages the apps resources and DEX’ed classes Feature module: A slimmed down module that contains only a subset of the total APK Install the plugin To install the New Relic plugin for Android Instant Apps: First follow the steps in the Install Android apps with Gradle and Android Studio documentation. Apply the agent plugin in every project Gradle build file. List the Android agent as a dependency. Start the agent from each Activity class in the feature that could be side-loaded through a Digital Asset Link intent, (for example, mobile.example.com/signin). Minimal build.gradle example apply plugin: ‘com.android.[application|library|feature|instantapp]' apply plugin: ‘newrelic’ dependencies { implementation \"com.newrelic.agent.android:android-agent:${project.agentVersion}\" } Copy Review the considerations for instrumentation. Instrumentation When instrumenting an instant app, be aware of the following considerations with APKs: Instant apps and APKs Comments Instrumentation Instrumentation of instant apps behaves the same as instrumentation with a normal APK. The agent will detect when an APK is an instant app. For feature APKs, the agent will inject a unique build ID that instant apps will use when reporting crashes. The side-loaded (main) activity of every feature must call NewRelic.start() when the activity is created (as per normal instructions). ProGuard and Dexguard support for feature and application APKs Place the newrelic.properties file in the root (main) directory of the project. ProGuard and Dexguard support The Android Studio Gradle plugin will obfuscate any build configuration where minifyEnabled is set to true. In these conditions, the New Relic agent will forward the ProGuard map generated for the build to crash collectors, tagged with a unique build ID generated by the agent. Obfuscation is best configured in the application or instant app project that includes other modules as dependencies. Modules may configure ProGuard as needed. Important When using ProGuard or DexGuard with Android apps, follow the procedures to complete the additional, required configuration steps. For more information, see the ProGuard and DexGuard configuration documentation. Troubleshoot auto-instrumentation If you are not whether the agent is auto-instrumenting an instant app project, try running these steps: Build app with debug (-d, --debug) option, and capture the build log. Search the log for evidence of instant apps by looking for either of these terms: This appears to be an Instant App Copy BuildId[1a2b34c5-def6-7890-g123-h4567890a] Copy The agent will add an attribute named 'instantApp' to the app's Insights session attributes if the app appears to be an instant app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.54092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "sections": "<em>Install</em> the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "<em>Android</em> Instant Apps allow users to quickly use your applications without installation. With the <em>Mobile</em> <em>Android</em> agent version 5.17.0 and higher, you can use <em>New</em> <em>Relic</em> to detect and instrument all feature modules for an instant app. Use this documentation along with the standard <em>New</em> <em>Relic</em> procedures"
      },
      "id": "603e87a764441fa6934e885e"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/install-configure/configure-proguard-or-dexguard-android-apps": [
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.02184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "If you use Gradle or <em>Android</em> Studio, follow these instructions to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> for the first time. If you have previously installed the <em>Android</em> agent SDK for <em>mobile</em> <em>monitoring</em>, follow the steps before upgrading to the latest version with Gradle and <em>Android</em> Studio. Tip"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's Android SDK",
        "Tip",
        "Upgrade from Android SDK versions 2 or 3",
        "Upgrade Android SDK version 1"
      ],
      "title": "Upgrade New Relic Mobile's Android SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "eca0e4db3d71cbe83bbb40fdc2e7d026d5e5ed4b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/upgrade-new-relic-mobiles-android-sdk/",
      "published_at": "2021-06-25T23:43:36Z",
      "updated_at": "2021-05-16T04:14:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of New Relic Mobile, see the Android agent release notes. Instructions to upgrade your Android app with the latest version of New Relic Mobile will vary, based on which version of the Android agent SDK you are currently using. Upgrade from Android SDK versions 2 or 3 If you have previously installed version 2 or 3 of the Android SDK for New Relic Mobile: Go to one.newrelic.com > Mobile > (select an app) > Settings > Upgrade. Upgrade Android SDK version 1 If you have previously installed version 1 of the Android SDK for New Relic Mobile, follow these steps before upgrading to version 2 or higher. Step Notes Open your AndroidManifest.xml file, and remove the NewRelicApplication class. When you first ran nrandroid-setup, the NewRelicApplication class was added to your AndroidManifest.xml file. This has been removed from the New Relic SDK and is no longer necessary. If you had an existing Application subclass and modified it to inherit from NewRelicApplication, update your subclass to inherit from Application instead. Stop using nrandroid-ant. New Relic Mobile no longer requires the custom Ant wrapper script for Android applications. Once you upgrade, simply use your standard build tools. If you modified an existing Maven configuration to invoke the New Relic Mobile build steps, remove those modifications, and use New Relic Mobile's revised build instructions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.12288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of <em>New</em> <em>Relic</em> <em>Mobile</em>, see the <em>Android</em> agent release notes. Instructions to upgrade your <em>Android</em> app with the latest version of <em>New</em> <em>Relic</em> <em>Mobile</em> will vary, based on which version of the <em>Android</em> agent SDK you"
      },
      "id": "603eae0664441f985b4e8843"
    },
    {
      "sections": [
        "Configure the New Relic Gradle plugin",
        "App-level build.gradle example",
        "Enable map uploads for multiple variants",
        "Disable map uploads",
        "Disable instrumentation of debug variants"
      ],
      "title": "Configure the New Relic Gradle plugin",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "78de6c69c228047d2d56f8e10c0aad0382a30e7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/configure-new-relic-gradle-plugin/",
      "published_at": "2021-06-25T22:49:53Z",
      "updated_at": "2021-03-18T14:23:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Gradle plugin extension allows you to configure the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the New Relic plugin, then add any of the following configuration options: Config option Description variantMapsEnabled Generate unique build IDs for each app variant. Default: true uploadMapsForVariant Specify which variant build types should report ProGuard maps to New Relic. Default: Release excludeVariantInstrumentation Exclude specific variants from instrumentation during builds. Default: 'None' Here are some simple examples showing how to apply plugin configuration options to the agent: App-level build.gradle example To configure the plugin with default values: newrelic { // use a common buildId for all variants (default: true) variantMapsEnabled true // Tag and report Proguard maps for these build types (default: Release) uploadMapsForVariant(\"Release\") // instrument all variants excludeVariantInstrumentation(\"\") } Copy Enable map uploads for multiple variants Multiple build types can be specified, separated by commas: newrelic { // default build types uploadMapsForVariant(\"Release\", \"Debug\") } Copy Disable map uploads To disable map uploads entirely, use an empty string: newrelic { // disable map uploads uploadMapsForVariant(\"\") } Copy Disable instrumentation of debug variants Multiple build types can be specified, separated by commas: newrelic { // exclude debug build types and flavors excludeVariantInstrumentation(\"Debug\", \"QADebug\") } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.78333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "sections": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "The <em>New</em> <em>Relic</em> Gradle plugin extension allows you to <em>configure</em> the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the <em>New</em> <em>Relic</em> plugin, then add any of the following configuration options: Config option Description"
      },
      "id": "603e7ad7196a67dde6a83df3"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio": [
    {
      "sections": [
        "Upgrade New Relic Mobile's Android SDK",
        "Tip",
        "Upgrade from Android SDK versions 2 or 3",
        "Upgrade Android SDK version 1"
      ],
      "title": "Upgrade New Relic Mobile's Android SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "eca0e4db3d71cbe83bbb40fdc2e7d026d5e5ed4b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/upgrade-new-relic-mobiles-android-sdk/",
      "published_at": "2021-06-25T23:43:36Z",
      "updated_at": "2021-05-16T04:14:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of New Relic Mobile, see the Android agent release notes. Instructions to upgrade your Android app with the latest version of New Relic Mobile will vary, based on which version of the Android agent SDK you are currently using. Upgrade from Android SDK versions 2 or 3 If you have previously installed version 2 or 3 of the Android SDK for New Relic Mobile: Go to one.newrelic.com > Mobile > (select an app) > Settings > Upgrade. Upgrade Android SDK version 1 If you have previously installed version 1 of the Android SDK for New Relic Mobile, follow these steps before upgrading to version 2 or higher. Step Notes Open your AndroidManifest.xml file, and remove the NewRelicApplication class. When you first ran nrandroid-setup, the NewRelicApplication class was added to your AndroidManifest.xml file. This has been removed from the New Relic SDK and is no longer necessary. If you had an existing Application subclass and modified it to inherit from NewRelicApplication, update your subclass to inherit from Application instead. Stop using nrandroid-ant. New Relic Mobile no longer requires the custom Ant wrapper script for Android applications. Once you upgrade, simply use your standard build tools. If you modified an existing Maven configuration to invoke the New Relic Mobile build steps, remove those modifications, and use New Relic Mobile's revised build instructions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.12288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of <em>New</em> <em>Relic</em> <em>Mobile</em>, see the <em>Android</em> agent release notes. Instructions to upgrade your <em>Android</em> app with the latest version of <em>New</em> <em>Relic</em> <em>Mobile</em> will vary, based on which version of the <em>Android</em> agent SDK you"
      },
      "id": "603eae0664441f985b4e8843"
    },
    {
      "sections": [
        "Configure the New Relic Gradle plugin",
        "App-level build.gradle example",
        "Enable map uploads for multiple variants",
        "Disable map uploads",
        "Disable instrumentation of debug variants"
      ],
      "title": "Configure the New Relic Gradle plugin",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "78de6c69c228047d2d56f8e10c0aad0382a30e7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/configure-new-relic-gradle-plugin/",
      "published_at": "2021-06-25T22:49:53Z",
      "updated_at": "2021-03-18T14:23:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Gradle plugin extension allows you to configure the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the New Relic plugin, then add any of the following configuration options: Config option Description variantMapsEnabled Generate unique build IDs for each app variant. Default: true uploadMapsForVariant Specify which variant build types should report ProGuard maps to New Relic. Default: Release excludeVariantInstrumentation Exclude specific variants from instrumentation during builds. Default: 'None' Here are some simple examples showing how to apply plugin configuration options to the agent: App-level build.gradle example To configure the plugin with default values: newrelic { // use a common buildId for all variants (default: true) variantMapsEnabled true // Tag and report Proguard maps for these build types (default: Release) uploadMapsForVariant(\"Release\") // instrument all variants excludeVariantInstrumentation(\"\") } Copy Enable map uploads for multiple variants Multiple build types can be specified, separated by commas: newrelic { // default build types uploadMapsForVariant(\"Release\", \"Debug\") } Copy Disable map uploads To disable map uploads entirely, use an empty string: newrelic { // disable map uploads uploadMapsForVariant(\"\") } Copy Disable instrumentation of debug variants Multiple build types can be specified, separated by commas: newrelic { // exclude debug build types and flavors excludeVariantInstrumentation(\"Debug\", \"QADebug\") } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.78333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "sections": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "The <em>New</em> <em>Relic</em> Gradle plugin extension allows you to <em>configure</em> the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the <em>New</em> <em>Relic</em> plugin, then add any of the following configuration options: Config option Description"
      },
      "id": "603e7ad7196a67dde6a83df3"
    },
    {
      "sections": [
        "Install the New Relic plugin for Android Instant Apps",
        "Terminology",
        "Install the plugin",
        "Minimal build.gradle example",
        "Instrumentation",
        "ProGuard and Dexguard support",
        "Important",
        "Troubleshoot auto-instrumentation"
      ],
      "title": "Install the New Relic plugin for Android Instant Apps",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "a9b40dd5eccb3d96a0cdc246eafe66b92fdeab6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-new-relic-plugin-android-instant-apps/",
      "published_at": "2021-06-25T23:12:32Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Android Instant Apps allow users to quickly use your applications without installation. With the Mobile Android agent version 5.17.0 and higher, you can use New Relic to detect and instrument all feature modules for an instant app. Use this documentation along with the standard New Relic procedures to install Android apps with Gradle and Android Studio. After following the standard installation procedures, follow these additional steps for Android instant apps. Terminology This procedure uses the following terms that are specific to the Android Instant Apps plugin: Module: Any packaged class and/or resource collection APK: A module that packages the apps resources and DEX’ed classes Feature module: A slimmed down module that contains only a subset of the total APK Install the plugin To install the New Relic plugin for Android Instant Apps: First follow the steps in the Install Android apps with Gradle and Android Studio documentation. Apply the agent plugin in every project Gradle build file. List the Android agent as a dependency. Start the agent from each Activity class in the feature that could be side-loaded through a Digital Asset Link intent, (for example, mobile.example.com/signin). Minimal build.gradle example apply plugin: ‘com.android.[application|library|feature|instantapp]' apply plugin: ‘newrelic’ dependencies { implementation \"com.newrelic.agent.android:android-agent:${project.agentVersion}\" } Copy Review the considerations for instrumentation. Instrumentation When instrumenting an instant app, be aware of the following considerations with APKs: Instant apps and APKs Comments Instrumentation Instrumentation of instant apps behaves the same as instrumentation with a normal APK. The agent will detect when an APK is an instant app. For feature APKs, the agent will inject a unique build ID that instant apps will use when reporting crashes. The side-loaded (main) activity of every feature must call NewRelic.start() when the activity is created (as per normal instructions). ProGuard and Dexguard support for feature and application APKs Place the newrelic.properties file in the root (main) directory of the project. ProGuard and Dexguard support The Android Studio Gradle plugin will obfuscate any build configuration where minifyEnabled is set to true. In these conditions, the New Relic agent will forward the ProGuard map generated for the build to crash collectors, tagged with a unique build ID generated by the agent. Obfuscation is best configured in the application or instant app project that includes other modules as dependencies. Modules may configure ProGuard as needed. Important When using ProGuard or DexGuard with Android apps, follow the procedures to complete the additional, required configuration steps. For more information, see the ProGuard and DexGuard configuration documentation. Troubleshoot auto-instrumentation If you are not whether the agent is auto-instrumenting an instant app project, try running these steps: Build app with debug (-d, --debug) option, and capture the build log. Search the log for evidence of instant apps by looking for either of these terms: This appears to be an Instant App Copy BuildId[1a2b34c5-def6-7890-g123-h4567890a] Copy The agent will add an attribute named 'instantApp' to the app's Insights session attributes if the app appears to be an instant app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.54092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "sections": "<em>Install</em> the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "<em>Android</em> Instant Apps allow users to quickly use your applications without installation. With the <em>Mobile</em> <em>Android</em> agent version 5.17.0 and higher, you can use <em>New</em> <em>Relic</em> to detect and instrument all feature modules for an instant app. Use this documentation along with the standard <em>New</em> <em>Relic</em> procedures"
      },
      "id": "603e87a764441fa6934e885e"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-new-relic-plugin-android-instant-apps": [
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.02184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "If you use Gradle or <em>Android</em> Studio, follow these instructions to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> for the first time. If you have previously installed the <em>Android</em> agent SDK for <em>mobile</em> <em>monitoring</em>, follow the steps before upgrading to the latest version with Gradle and <em>Android</em> Studio. Tip"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's Android SDK",
        "Tip",
        "Upgrade from Android SDK versions 2 or 3",
        "Upgrade Android SDK version 1"
      ],
      "title": "Upgrade New Relic Mobile's Android SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "eca0e4db3d71cbe83bbb40fdc2e7d026d5e5ed4b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/upgrade-new-relic-mobiles-android-sdk/",
      "published_at": "2021-06-25T23:43:36Z",
      "updated_at": "2021-05-16T04:14:09Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of New Relic Mobile, see the Android agent release notes. Instructions to upgrade your Android app with the latest version of New Relic Mobile will vary, based on which version of the Android agent SDK you are currently using. Upgrade from Android SDK versions 2 or 3 If you have previously installed version 2 or 3 of the Android SDK for New Relic Mobile: Go to one.newrelic.com > Mobile > (select an app) > Settings > Upgrade. Upgrade Android SDK version 1 If you have previously installed version 1 of the Android SDK for New Relic Mobile, follow these steps before upgrading to version 2 or higher. Step Notes Open your AndroidManifest.xml file, and remove the NewRelicApplication class. When you first ran nrandroid-setup, the NewRelicApplication class was added to your AndroidManifest.xml file. This has been removed from the New Relic SDK and is no longer necessary. If you had an existing Application subclass and modified it to inherit from NewRelicApplication, update your subclass to inherit from Application instead. Stop using nrandroid-ant. New Relic Mobile no longer requires the custom Ant wrapper script for Android applications. Once you upgrade, simply use your standard build tools. If you modified an existing Maven configuration to invoke the New Relic Mobile build steps, remove those modifications, and use New Relic Mobile's revised build instructions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.12288,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>Android</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Tip Owner, Admins, or add-on managers To ensure you have the most current version of <em>New</em> <em>Relic</em> <em>Mobile</em>, see the <em>Android</em> agent release notes. Instructions to upgrade your <em>Android</em> app with the latest version of <em>New</em> <em>Relic</em> <em>Mobile</em> will vary, based on which version of the <em>Android</em> agent SDK you"
      },
      "id": "603eae0664441f985b4e8843"
    },
    {
      "sections": [
        "Configure the New Relic Gradle plugin",
        "App-level build.gradle example",
        "Enable map uploads for multiple variants",
        "Disable map uploads",
        "Disable instrumentation of debug variants"
      ],
      "title": "Configure the New Relic Gradle plugin",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "78de6c69c228047d2d56f8e10c0aad0382a30e7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/configure-new-relic-gradle-plugin/",
      "published_at": "2021-06-25T22:49:53Z",
      "updated_at": "2021-03-18T14:23:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Gradle plugin extension allows you to configure the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the New Relic plugin, then add any of the following configuration options: Config option Description variantMapsEnabled Generate unique build IDs for each app variant. Default: true uploadMapsForVariant Specify which variant build types should report ProGuard maps to New Relic. Default: Release excludeVariantInstrumentation Exclude specific variants from instrumentation during builds. Default: 'None' Here are some simple examples showing how to apply plugin configuration options to the agent: App-level build.gradle example To configure the plugin with default values: newrelic { // use a common buildId for all variants (default: true) variantMapsEnabled true // Tag and report Proguard maps for these build types (default: Release) uploadMapsForVariant(\"Release\") // instrument all variants excludeVariantInstrumentation(\"\") } Copy Enable map uploads for multiple variants Multiple build types can be specified, separated by commas: newrelic { // default build types uploadMapsForVariant(\"Release\", \"Debug\") } Copy Disable map uploads To disable map uploads entirely, use an empty string: newrelic { // disable map uploads uploadMapsForVariant(\"\") } Copy Disable instrumentation of debug variants Multiple build types can be specified, separated by commas: newrelic { // exclude debug build types and flavors excludeVariantInstrumentation(\"Debug\", \"QADebug\") } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.78333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "sections": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "The <em>New</em> <em>Relic</em> Gradle plugin extension allows you to <em>configure</em> the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the <em>New</em> <em>Relic</em> plugin, then add any of the following configuration options: Config option Description"
      },
      "id": "603e7ad7196a67dde6a83df3"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/install-configure/upgrade-new-relic-mobiles-android-sdk": [
    {
      "sections": [
        "Install Android apps with Gradle and Android Studio",
        "Tip",
        "Install your Android app",
        "Configure with Gradle and Android Studio",
        "Project level build.gradle file:",
        "App level build.gradle file:",
        "Important",
        "Update your Android installation",
        "Android 4.x: Multidex support",
        "New Relic Gradle Plugin configuration"
      ],
      "title": "Install Android apps with Gradle and Android Studio",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "51fab3eba87ddee949cd4729de8b5f64534de9c7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-android-apps-gradle-android-studio/",
      "published_at": "2021-06-25T23:12:31Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you use Gradle or Android Studio, follow these instructions to install New Relic's mobile monitoring for the first time. If you have previously installed the Android agent SDK for mobile monitoring, follow the steps before upgrading to the latest version with Gradle and Android Studio. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your Android app As part of the installation process for mobile monitoring, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. Go to one.newrelic.com > Mobile. If applicable: From the Mobile apps index, select Add a new app. From the Get started page, select Android as the platform for mobile monitoring. Type a meaningful name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring with Gradle and Android Studio. OR: To complete the configuration process for a new mobile app later: Go to one.newrelic.com > Mobile, then select See instructions next to your mobile app name. To upgrade an existing Android installation: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Configure with Gradle and Android Studio These procedures to configure your Android app with Gradle and Android Studio also appear on the Get started page in New Relic. Merge New Relic's mobile monitoring code in the Gradle & Android Studio tab to your build.gradle file. Project level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. buildscript { repositories { mavenCentral() } dependencies { classpath \"com.newrelic.agent.android:agent-gradle-plugin:AGENT_VERSION\" } } Copy App level build.gradle file: In this example, AGENT_VERSION represents your agent version number. See the agent release notes, and use the latest version. repositories { mavenCentral() } apply plugin: 'android' apply plugin: 'newrelic' dependencies { compile 'com.newrelic.agent.android:android-agent:AGENT_VERSION' } Copy ProGuard or DexGuard: In your project’s root directory (projectname/app), add a newrelic.properties file with the following line: com.newrelic.application_token=GENERATED_TOKEN Copy Follow the additional, required configuration steps for using ProGuard or DexGuard with New Relic. Set app permissions: Ensure that your Android app requests INTERNET and ACCESS_NETWORK_STATE permissions by adding these lines to your AndroidManifest.xml file: <uses-permission android:name=\"android.permission.INTERNET\" /> <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> Copy To start New Relic's mobile monitoring agent: In your Default Activity (as defined in your Manifest), import the NewRelic class: import com.newrelic.agent.android.NewRelic; Copy Important We do not support starting the mobile monitoring agent in other classes, as that can cause unexpected or unstable behavior. To initialize mobile monitoring: In the onCreate() method, add this call: NewRelic.withApplicationToken(\"GENERATED_TOKEN\").start(this.getApplication()); Copy Optional: Change the logging level. To build and run your application: Clean your project, then run your app in an emulator or device to generate traffic. Wait a few minutes, then view data for your Android app from the New Relic Mobile Overview page: Go to one.newrelic.com > Mobile > (select an app). If you have problems with your Android installation, or if you do not see data in the New Relic Mobile UI for your Android app, follow the troubleshooting procedures. Update your Android installation To keep your Android agent up to date, follow the procedures to upgrade the Android agent SDK for New Relic. To install the latest Android version for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Settings > Installation. Android 4.x: Multidex support New Relic's mobile monitoring for Android versions prior to Android 5.0 (API level 21) use the Dalvik runtime to execute app code. By default, Dalvik limits apps to a single classes.dex bytecode file per APK. In order to get around this limitation, you must enable multidex support. Then you can use the multidex support library, which becomes part of the primary DEX file of your app and then manages access to the additional DEX files and the code they contain. When building each DEX file for a multidex app, the build tools perform complex decision making to determine which classes are needed in the primary DEX file so that your app can start successfully. If any class required during startup is not provided in the primary DEX file, then your app crashes with the error java.lang.NoClassDefFoundError. If you see the java.lang.NoClassDefFoundError error, then you must manually specify these additional classes as required in the primary DEX file: Create a proguard.multidex.config file within the /app folder of your project. Update mypackage to reflect your package name. #################### # keep class names # #################### #Keep New Relic in the main dex -keep class com.newrelic.** { *; } -keep class com.mypackage.activities.** { *; } Copy Merge the following code into the app-level build.gradle file: android { defaultConfig{ … multiDexKeepProguard file(\"proguard.multidex.config\") } } Copy For more information, see the Android Developers documentation on declaring classes required in the primary DEX file. New Relic Gradle Plugin configuration For details on how to configure the behavior of the mobile monitoring agent plugin during Gradle builds, see the New Relic Gradle plugin extension guide.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.02184,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "sections": "<em>Install</em> <em>Android</em> apps with Gradle and <em>Android</em> Studio",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "If you use Gradle or <em>Android</em> Studio, follow these instructions to <em>install</em> <em>New</em> <em>Relic</em>&#x27;s <em>mobile</em> <em>monitoring</em> for the first time. If you have previously installed the <em>Android</em> agent SDK for <em>mobile</em> <em>monitoring</em>, follow the steps before upgrading to the latest version with Gradle and <em>Android</em> Studio. Tip"
      },
      "id": "603ea70128ccbc59c2eba74e"
    },
    {
      "sections": [
        "Configure the New Relic Gradle plugin",
        "App-level build.gradle example",
        "Enable map uploads for multiple variants",
        "Disable map uploads",
        "Disable instrumentation of debug variants"
      ],
      "title": "Configure the New Relic Gradle plugin",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "78de6c69c228047d2d56f8e10c0aad0382a30e7e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/configure-new-relic-gradle-plugin/",
      "published_at": "2021-06-25T22:49:53Z",
      "updated_at": "2021-03-18T14:23:33Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Gradle plugin extension allows you to configure the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the New Relic plugin, then add any of the following configuration options: Config option Description variantMapsEnabled Generate unique build IDs for each app variant. Default: true uploadMapsForVariant Specify which variant build types should report ProGuard maps to New Relic. Default: Release excludeVariantInstrumentation Exclude specific variants from instrumentation during builds. Default: 'None' Here are some simple examples showing how to apply plugin configuration options to the agent: App-level build.gradle example To configure the plugin with default values: newrelic { // use a common buildId for all variants (default: true) variantMapsEnabled true // Tag and report Proguard maps for these build types (default: Release) uploadMapsForVariant(\"Release\") // instrument all variants excludeVariantInstrumentation(\"\") } Copy Enable map uploads for multiple variants Multiple build types can be specified, separated by commas: newrelic { // default build types uploadMapsForVariant(\"Release\", \"Debug\") } Copy Disable map uploads To disable map uploads entirely, use an empty string: newrelic { // disable map uploads uploadMapsForVariant(\"\") } Copy Disable instrumentation of debug variants Multiple build types can be specified, separated by commas: newrelic { // exclude debug build types and flavors excludeVariantInstrumentation(\"Debug\", \"QADebug\") } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.78333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "sections": "<em>Configure</em> the <em>New</em> <em>Relic</em> Gradle plugin",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "The <em>New</em> <em>Relic</em> Gradle plugin extension allows you to <em>configure</em> the behavior of plugin tasks executed during Gradle builds. Create a plugin extension in the build.gradle files that apply the <em>New</em> <em>Relic</em> plugin, then add any of the following configuration options: Config option Description"
      },
      "id": "603e7ad7196a67dde6a83df3"
    },
    {
      "sections": [
        "Install the New Relic plugin for Android Instant Apps",
        "Terminology",
        "Install the plugin",
        "Minimal build.gradle example",
        "Instrumentation",
        "ProGuard and Dexguard support",
        "Important",
        "Troubleshoot auto-instrumentation"
      ],
      "title": "Install the New Relic plugin for Android Instant Apps",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "a9b40dd5eccb3d96a0cdc246eafe66b92fdeab6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-new-relic-plugin-android-instant-apps/",
      "published_at": "2021-06-25T23:12:32Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Android Instant Apps allow users to quickly use your applications without installation. With the Mobile Android agent version 5.17.0 and higher, you can use New Relic to detect and instrument all feature modules for an instant app. Use this documentation along with the standard New Relic procedures to install Android apps with Gradle and Android Studio. After following the standard installation procedures, follow these additional steps for Android instant apps. Terminology This procedure uses the following terms that are specific to the Android Instant Apps plugin: Module: Any packaged class and/or resource collection APK: A module that packages the apps resources and DEX’ed classes Feature module: A slimmed down module that contains only a subset of the total APK Install the plugin To install the New Relic plugin for Android Instant Apps: First follow the steps in the Install Android apps with Gradle and Android Studio documentation. Apply the agent plugin in every project Gradle build file. List the Android agent as a dependency. Start the agent from each Activity class in the feature that could be side-loaded through a Digital Asset Link intent, (for example, mobile.example.com/signin). Minimal build.gradle example apply plugin: ‘com.android.[application|library|feature|instantapp]' apply plugin: ‘newrelic’ dependencies { implementation \"com.newrelic.agent.android:android-agent:${project.agentVersion}\" } Copy Review the considerations for instrumentation. Instrumentation When instrumenting an instant app, be aware of the following considerations with APKs: Instant apps and APKs Comments Instrumentation Instrumentation of instant apps behaves the same as instrumentation with a normal APK. The agent will detect when an APK is an instant app. For feature APKs, the agent will inject a unique build ID that instant apps will use when reporting crashes. The side-loaded (main) activity of every feature must call NewRelic.start() when the activity is created (as per normal instructions). ProGuard and Dexguard support for feature and application APKs Place the newrelic.properties file in the root (main) directory of the project. ProGuard and Dexguard support The Android Studio Gradle plugin will obfuscate any build configuration where minifyEnabled is set to true. In these conditions, the New Relic agent will forward the ProGuard map generated for the build to crash collectors, tagged with a unique build ID generated by the agent. Obfuscation is best configured in the application or instant app project that includes other modules as dependencies. Modules may configure ProGuard as needed. Important When using ProGuard or DexGuard with Android apps, follow the procedures to complete the additional, required configuration steps. For more information, see the ProGuard and DexGuard configuration documentation. Troubleshoot auto-instrumentation If you are not whether the agent is auto-instrumenting an instant app project, try running these steps: Build app with debug (-d, --debug) option, and capture the build log. Search the log for evidence of instant apps by looking for either of these terms: This appears to be an Instant App Copy BuildId[1a2b34c5-def6-7890-g123-h4567890a] Copy The agent will add an attribute named 'instantApp' to the app's Insights session attributes if the app appears to be an instant app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.54092,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "sections": "<em>Install</em> the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "<em>Android</em> Instant Apps allow users to quickly use your applications without installation. With the <em>Mobile</em> <em>Android</em> agent version 5.17.0 and higher, you can use <em>New</em> <em>Relic</em> to detect and instrument all feature modules for an instant app. Use this documentation along with the standard <em>New</em> <em>Relic</em> procedures"
      },
      "id": "603e87a764441fa6934e885e"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/legacy/install-android-apps-android-22-support": [
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.0867,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> SDK API guide",
        "sections": "<em>Android</em> SDK API guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an SDK API to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 131.31927,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "View <em>legacy</em> HTTP errors UI page",
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": " failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details <em>Mobile</em> <em>monitoring</em> will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from <em>Android</em>"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "No data appears (Android)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Android)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Troubleshoot"
      ],
      "external_id": "cab2851a6f3c8bfddb1ed445f8722b3dddff7442",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/troubleshoot/no-data-appears-android/",
      "published_at": "2021-06-25T23:13:27Z",
      "updated_at": "2021-03-16T09:51:07Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing New Relic Mobile for Android and waiting at least 5 minutes, no data appears in New Relic UI. Solution If no data appears after you wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve your issue, try the following: Make sure your system meets the compatibility and requirements. Make sure that you are calling the New Relic Mobile for Android agent on the first line of onCreate() in the MainActivity class and that you are running the agent on the main thread. New Relic Mobile for Android does not support starting the agent in another class. Check whether your Android app exceeds the 64k multidex limit. Increase the logging level and examine your logs for errors: Increase the New Relic logging level to AUDIT using withLogLevel: NewRelic.withApplicationToken(\"YOUR_APP_TOKEN\") .withLogLevel(AgentLog.AUDIT) .start(this.getApplication()); Copy Generate a few minutes of activity in your app. Examine your device log and your application build logs for issues. Confirm the device can reach the New Relic Mobile endpoint at mobile-collector.newrelic.com. If you need additional help, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 109.38542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Android</em>)",
        "sections": "No data appears (<em>Android</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Problem After installing <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em> and waiting at least 5 minutes, no data appears in <em>New</em> <em>Relic</em> UI. Solution If no data appears after you wait at least five minutes, use <em>New</em> <em>Relic</em> Diagnostics to automatically detect common problems and suggest troubleshooting. If that does"
      },
      "id": "603e8eb6196a67b64ea83d81"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/troubleshoot/android-app-exceeds-64k-multidex-limit": [
    {
      "sections": [
        "No data appears (Android)",
        "Problem",
        "Solution"
      ],
      "title": "No data appears (Android)",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Troubleshoot"
      ],
      "external_id": "cab2851a6f3c8bfddb1ed445f8722b3dddff7442",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/troubleshoot/no-data-appears-android/",
      "published_at": "2021-06-25T23:13:27Z",
      "updated_at": "2021-03-16T09:51:07Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem After installing New Relic Mobile for Android and waiting at least 5 minutes, no data appears in New Relic UI. Solution If no data appears after you wait at least five minutes, use New Relic Diagnostics to automatically detect common problems and suggest troubleshooting. If that does not solve your issue, try the following: Make sure your system meets the compatibility and requirements. Make sure that you are calling the New Relic Mobile for Android agent on the first line of onCreate() in the MainActivity class and that you are running the agent on the main thread. New Relic Mobile for Android does not support starting the agent in another class. Check whether your Android app exceeds the 64k multidex limit. Increase the logging level and examine your logs for errors: Increase the New Relic logging level to AUDIT using withLogLevel: NewRelic.withApplicationToken(\"YOUR_APP_TOKEN\") .withLogLevel(AgentLog.AUDIT) .start(this.getApplication()); Copy Generate a few minutes of activity in your app. Examine your device log and your application build logs for issues. Confirm the device can reach the New Relic Mobile endpoint at mobile-collector.newrelic.com. If you need additional help, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.86925,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "No data appears (<em>Android</em>)",
        "sections": "No data appears (<em>Android</em>)",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Problem After installing <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>Android</em> and waiting at least 5 minutes, no data appears in <em>New</em> <em>Relic</em> UI. Solution If no data appears after you wait at least five minutes, use <em>New</em> <em>Relic</em> Diagnostics to automatically detect common problems and suggest troubleshooting. If that does"
      },
      "id": "603e8eb6196a67b64ea83d81"
    },
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.5262,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> SDK API guide",
        "sections": "<em>Android</em> SDK API guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an SDK API to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "Install the New Relic plugin for Android Instant Apps",
        "Terminology",
        "Install the plugin",
        "Minimal build.gradle example",
        "Instrumentation",
        "ProGuard and Dexguard support",
        "Important",
        "Troubleshoot auto-instrumentation"
      ],
      "title": "Install the New Relic plugin for Android Instant Apps",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "a9b40dd5eccb3d96a0cdc246eafe66b92fdeab6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-new-relic-plugin-android-instant-apps/",
      "published_at": "2021-06-25T23:12:32Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Android Instant Apps allow users to quickly use your applications without installation. With the Mobile Android agent version 5.17.0 and higher, you can use New Relic to detect and instrument all feature modules for an instant app. Use this documentation along with the standard New Relic procedures to install Android apps with Gradle and Android Studio. After following the standard installation procedures, follow these additional steps for Android instant apps. Terminology This procedure uses the following terms that are specific to the Android Instant Apps plugin: Module: Any packaged class and/or resource collection APK: A module that packages the apps resources and DEX’ed classes Feature module: A slimmed down module that contains only a subset of the total APK Install the plugin To install the New Relic plugin for Android Instant Apps: First follow the steps in the Install Android apps with Gradle and Android Studio documentation. Apply the agent plugin in every project Gradle build file. List the Android agent as a dependency. Start the agent from each Activity class in the feature that could be side-loaded through a Digital Asset Link intent, (for example, mobile.example.com/signin). Minimal build.gradle example apply plugin: ‘com.android.[application|library|feature|instantapp]' apply plugin: ‘newrelic’ dependencies { implementation \"com.newrelic.agent.android:android-agent:${project.agentVersion}\" } Copy Review the considerations for instrumentation. Instrumentation When instrumenting an instant app, be aware of the following considerations with APKs: Instant apps and APKs Comments Instrumentation Instrumentation of instant apps behaves the same as instrumentation with a normal APK. The agent will detect when an APK is an instant app. For feature APKs, the agent will inject a unique build ID that instant apps will use when reporting crashes. The side-loaded (main) activity of every feature must call NewRelic.start() when the activity is created (as per normal instructions). ProGuard and Dexguard support for feature and application APKs Place the newrelic.properties file in the root (main) directory of the project. ProGuard and Dexguard support The Android Studio Gradle plugin will obfuscate any build configuration where minifyEnabled is set to true. In these conditions, the New Relic agent will forward the ProGuard map generated for the build to crash collectors, tagged with a unique build ID generated by the agent. Obfuscation is best configured in the application or instant app project that includes other modules as dependencies. Modules may configure ProGuard as needed. Important When using ProGuard or DexGuard with Android apps, follow the procedures to complete the additional, required configuration steps. For more information, see the ProGuard and DexGuard configuration documentation. Troubleshoot auto-instrumentation If you are not whether the agent is auto-instrumenting an instant app project, try running these steps: Build app with debug (-d, --debug) option, and capture the build log. Search the log for evidence of instant apps by looking for either of these terms: This appears to be an Instant App Copy BuildId[1a2b34c5-def6-7890-g123-h4567890a] Copy The agent will add an attribute named 'instantApp' to the app's Insights session attributes if the app appears to be an instant app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.856445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "sections": "Install the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "<em>Android</em> Instant Apps allow users to quickly use your applications without installation. With the <em>Mobile</em> <em>Android</em> agent version 5.17.0 and higher, you can use <em>New</em> <em>Relic</em> to detect and instrument all feature modules for an instant app. Use this documentation along with the standard <em>New</em> <em>Relic</em> procedures"
      },
      "id": "603e87a764441fa6934e885e"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-android/troubleshoot/no-data-appears-android": [
    {
      "sections": [
        "Android app exceeds 64k multidex limit",
        "Problem",
        "Build time error message example",
        "Run time crash message example",
        "Solution"
      ],
      "title": "Android app exceeds 64k multidex limit",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Troubleshoot"
      ],
      "external_id": "4b456c8143055292aa480cc213ffc82b72ddee70",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/troubleshoot/android-app-exceeds-64k-multidex-limit/",
      "published_at": "2021-06-25T23:44:36Z",
      "updated_at": "2021-03-13T01:00:54Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem Your Android app exceeds the 64k limit for the total number of methods that can be referenced within a single Dalvik Executable file (DEX), including methods for frameworks, libraries, and your own Android app code. You see error messages from New Relic Mobile such as these: Build time error message example > com.android.build.api.transform.TransformException: com.android.ide.common.process.ProcessException: java.util.concurrent.ExecutionException: com.android.dex.DexException: Too many classes in --main-dex-list, main dex capacity exceeded Copy Run time crash message example E/AndroidRuntime: FATAL EXCEPTION: main Process: com.example.mobile.debug, PID: 12345 java.lang.NoClassDefFoundError: com.example.foobar.myapp.MainActivity Copy These exception errors typically occur with Android devices prior to Android 5.0 (API level 21), which requires the multidex support library. Solution To fix build errors or runtime exceptions when using the latest Android build tool: Make sure you have the latest Android agent version for New Relic Mobile. Enable multidex. Enable Proguard or Dexguard to optimize classes and methods in your DEX. If you still have problems with keeping your Android app under the 64k limit, use a keepfile.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.45789,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> app exceeds 64k multidex limit",
        "sections": "<em>Android</em> app exceeds 64k multidex limit",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Problem Your <em>Android</em> app exceeds the 64k limit for the total number of methods that can be referenced within a single Dalvik Executable file (DEX), including methods for frameworks, libraries, and your own <em>Android</em> app code. You see error messages from <em>New</em> <em>Relic</em> <em>Mobile</em> such as these: Build time"
      },
      "id": "60441922196a6721e4960f26"
    },
    {
      "sections": [
        "Android SDK API guide",
        "Important",
        "Install the SDK",
        "Instrument your code",
        "Caution",
        "Automatically instrumented methods",
        "Category attribute example",
        "Use the API methods",
        "Manual cross application tracing",
        "Cross application tracing example"
      ],
      "title": "Android SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "API guides"
      ],
      "external_id": "9a99f7acf96c5dece74c728c21248eb322d58ddc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/api-guides/android-sdk-api-guide/",
      "published_at": "2021-06-25T23:11:12Z",
      "updated_at": "2021-06-03T12:07:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Starting with version 5.9.0 of the New Relic Android agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the NewRelic.setUserId method. New Relic Mobile's Android agent provides an SDK API to set up custom instrumentation for monitoring your application. The API gives you the ability to: Instrument your own code. Create, name, and end interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to New Relic Insights. Track networking from libraries not supported automatically. Install the SDK Before using the Android SDK API: Review the Android SDK API release notes to ensure you have your app instrumented with a current SDK for New Relic Mobile. Go to one.newrelic.com, click Add more data and then follow the steps for Android. For more information, see the detailed Android installation and configuration procedures. If you need to support Android 2.2, see the legacy Android agent SDK procedures. Instrument your code Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. If you have custom libraries or application code that you want to include in interaction traces: Use the following Java annotation: import com.newrelic.agent.android.instrumentation.Trace; Copy Add the @Trace annotation to the methods you want to instrument: @Trace public void myHeavyweightMethod() { … Copy To tell New Relic Mobile what kind of method is being traced, use the optional category attribute. Automatically instrumented methods Automatic instrumentation is one of the agent's more convenient features. However, if it interferes with the method being traced, add @SkipTrace to the method, and the agent will skip it during compile time instrumentation. Classes Methods Activity onCreate onCreateView AsyncTask execute executeOnExecutor BitmapFactory decodeFile decodeResourceStream decodeResource decodeByteArray decodeStream decodeFileDescriptor decodeResourceStream SQLiteDatabase query queryWithFactory rawQuery rawQueryWithFactory insert insertOrThrow insertWithOnConflict replace replaceOrThrow delete update updateWithOnConflict execSql GSON toJson fromJson JSONObject <init> toString JSONArray <init> toString Category attribute example The category can be a custom name, or it can be one of the predefined MetricCategory enums (listed below). Here is an example of instrumenting an image processing method using the predefined IMAGE category: @Trace(category = MetricCategory.IMAGE) public void processImageData() { … Copy Available MetricCategory enums include: MetricCategory Description VIEW_LOADING Creating sub views, controls, and other related tasks VIEW_LAYOUT Inflation of layouts, resolving components DATABASE SQLite and other file I/O IMAGE Image loading and processing JSON JSON parsing or creation NETWORK Web service integration methods, remote resource loading Use the API methods The following table lists all the New Relic Android SDK API calls, ordered by common use cases. If you want to... Do this Track app activity that may be helpful for troubleshooting crashes See recordBreadcrumb. Track a method as an interaction See startInteraction. Name or rename an interaction See setInteractionName. End an interaction See endInteraction. Disable or enable all interactions See withInteractionTracing. Set an app version associated with an interaction See withApplicationVersion. Set custom build ID See withApplicationBuild. Create custom metrics See recordMetric. Report custom attributes and events There are several ways to add custom attributes and events. For more about which would be the best method to use and why, see Add custom data. Create an attribute: setAttribute Increment an attribute count: incrementAttribute Remove an attribute: removeAttribute Remove all attributes: removeAllAttributes Record custom event: recordCustomEvent Record a breadcrumb event: recordBreadcrumb Set the maximum size of an event pool: setMaxEventPoolSize Set maximum time agent stores events in memory: setMaxEventBufferTime Return the current session's ID: currentSessionId Set custom user ID for associating sessions with events and attributes: setUserId Track custom network requests and failures Use these methods: Record HTTP transactions at varying levels of detail: See noticeHttpTransaction. Record network failures: See noticeNetworkFailure. Record a handled exception as an event, including context See recordHandledException(). Manual cross application tracing The noticeHttpTransaction code does not automatically append the appropriate header ID value needed to get cross application tracing to work. This is why you will not see the application link in your Android app on New Relic's Map page for mobile apps or on the HTTP requests page. You can use a public method in the New Relic Android SDK to get the appropriate ID to pass along with your HTTP request to your back-end application, as long as it is already instrumented by New Relic. The appropriate header ID will be passed from the back-end application in the response, providing everything needed for cross application tracing to function. Cross application tracing example This example adds the NewRelic-ID to the back-end HTTP request, with conn as the external HTTP connection. (Notice the additional import.) import com.newrelic.agent.android.NewRelic; import com.newrelic.agent.android.Agent; //required for getCrossProcessId() ... ... //new method for appending the crossProcessID necessary for CAT in New Relic public static void setCrossProcessHeader(HttpURLConnection conn) { String crossProcessId = Agent.getCrossProcessId(); // API call into the agent for the X-NewRelic-ID if (crossProcessId != null) { conn.setRequestProperty(\"X-NewRelic-ID\", crossProcessId); } } Copy After adding the appropriate header to the request to the back-end app, the response from the app needs to be parsed for the X-Newrelic-App-Data header, and then added to the noticeHttpTransaction call as a string. For example: //NewRelic.noticeHttpTransaction(url, httpMethod, statusCode, startTimeMs, endTimeMs, bytesSent, bytesReceived, responseBody, params, response); //Where xNewRelicAppDataHeader is the value of the X-NewRelic-App-Data header NewRelic.noticeHttpTransaction(\"http://api.newrelic.com\", \"GET\", 200, System.nanoTime(), System.nanoTime(),100 ,100, \"Test\", new HashMap<String, String>(), xNewRelicAppDataHeader); Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.52619,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Android</em> SDK API guide",
        "sections": "<em>Android</em> SDK API guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "Important Starting with version 5.9.0 of the <em>New</em> <em>Relic</em> <em>Android</em> agent, you can set a custom user identifier value to associate user sessions with analytics events and attributes. For more information, see the <em>NewRelic</em>.setUserId method. <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>Android</em> agent provides an SDK API to set up"
      },
      "id": "603ea2bc64441f11ee4e889b"
    },
    {
      "sections": [
        "Install the New Relic plugin for Android Instant Apps",
        "Terminology",
        "Install the plugin",
        "Minimal build.gradle example",
        "Instrumentation",
        "ProGuard and Dexguard support",
        "Important",
        "Troubleshoot auto-instrumentation"
      ],
      "title": "Install the New Relic plugin for Android Instant Apps",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile Android",
        "Install configure"
      ],
      "external_id": "a9b40dd5eccb3d96a0cdc246eafe66b92fdeab6b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-android/install-configure/install-new-relic-plugin-android-instant-apps/",
      "published_at": "2021-06-25T23:12:32Z",
      "updated_at": "2021-03-16T09:50:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Android Instant Apps allow users to quickly use your applications without installation. With the Mobile Android agent version 5.17.0 and higher, you can use New Relic to detect and instrument all feature modules for an instant app. Use this documentation along with the standard New Relic procedures to install Android apps with Gradle and Android Studio. After following the standard installation procedures, follow these additional steps for Android instant apps. Terminology This procedure uses the following terms that are specific to the Android Instant Apps plugin: Module: Any packaged class and/or resource collection APK: A module that packages the apps resources and DEX’ed classes Feature module: A slimmed down module that contains only a subset of the total APK Install the plugin To install the New Relic plugin for Android Instant Apps: First follow the steps in the Install Android apps with Gradle and Android Studio documentation. Apply the agent plugin in every project Gradle build file. List the Android agent as a dependency. Start the agent from each Activity class in the feature that could be side-loaded through a Digital Asset Link intent, (for example, mobile.example.com/signin). Minimal build.gradle example apply plugin: ‘com.android.[application|library|feature|instantapp]' apply plugin: ‘newrelic’ dependencies { implementation \"com.newrelic.agent.android:android-agent:${project.agentVersion}\" } Copy Review the considerations for instrumentation. Instrumentation When instrumenting an instant app, be aware of the following considerations with APKs: Instant apps and APKs Comments Instrumentation Instrumentation of instant apps behaves the same as instrumentation with a normal APK. The agent will detect when an APK is an instant app. For feature APKs, the agent will inject a unique build ID that instant apps will use when reporting crashes. The side-loaded (main) activity of every feature must call NewRelic.start() when the activity is created (as per normal instructions). ProGuard and Dexguard support for feature and application APKs Place the newrelic.properties file in the root (main) directory of the project. ProGuard and Dexguard support The Android Studio Gradle plugin will obfuscate any build configuration where minifyEnabled is set to true. In these conditions, the New Relic agent will forward the ProGuard map generated for the build to crash collectors, tagged with a unique build ID generated by the agent. Obfuscation is best configured in the application or instant app project that includes other modules as dependencies. Modules may configure ProGuard as needed. Important When using ProGuard or DexGuard with Android apps, follow the procedures to complete the additional, required configuration steps. For more information, see the ProGuard and DexGuard configuration documentation. Troubleshoot auto-instrumentation If you are not whether the agent is auto-instrumenting an instant app project, try running these steps: Build app with debug (-d, --debug) option, and capture the build log. Search the log for evidence of instant apps by looking for either of these terms: This appears to be an Instant App Copy BuildId[1a2b34c5-def6-7890-g123-h4567890a] Copy The agent will add an attribute named 'instantApp' to the app's Insights session attributes if the app appears to be an instant app.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 111.856445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "sections": "Install the <em>New</em> <em>Relic</em> plugin for <em>Android</em> Instant Apps",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>Android</em>",
        "body": "<em>Android</em> Instant Apps allow users to quickly use your applications without installation. With the <em>Mobile</em> <em>Android</em> agent version 5.17.0 and higher, you can use <em>New</em> <em>Relic</em> to detect and instrument all feature modules for an instant app. Use this documentation along with the standard <em>New</em> <em>Relic</em> procedures"
      },
      "id": "603e87a764441fa6934e885e"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-apps/mobile-app-features/authentication-partner-saml-sso-accounts": [
    {
      "sections": [
        "User settings and authentication",
        "User authentication",
        "User settings",
        "Sign in with additional username",
        "Switch between accounts",
        "Remove or re-add a user name"
      ],
      "title": "User settings and authentication",
      "type": "docs",
      "tags": [
        "Mobile apps",
        "New Relic Mobile apps",
        "Authentication and alerts"
      ],
      "external_id": "0b40ac4c2e769279d25d0ebb2ea77cebda8d8ea7",
      "image": "https://docs.newrelic.com/static/88ff328efc4a127601923bc728fea229/8c557/device-ipad-switch-user.png",
      "url": "https://docs.newrelic.com/docs/mobile-apps/new-relic-mobile-apps/authentication-alerts/user-settings-authentication/",
      "published_at": "2021-06-25T23:34:10Z",
      "updated_at": "2021-05-16T06:27:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This explains how to authenticate your New Relic mobile app account, and how to add users to or remove them from your mobile device. User authentication Depending on your New Relic account, additional installation or authentication steps may be required when you install the New Relic mobile app. New Relic account Additional requirements New users If you do not already have a New Relic account: From your desktop web browser, create a New Relic account. Install your application with the appropriate New Relic agent. As part of new account setup, you will receive an email with a password reset link. The password reset link expires after 20 minutes for mobile apps. Existing New Relic users No additional requirements; your applications, hosts, installed plugins, and key transactions automatically appear after you sign in. Users with New Relic partner accounts Depending on the partner, you may need to complete a different authentication process. Azure Store users: Due to the deep integration between Azure Storefront and New Relic, Azure Storefront users cannot access their accounts on the New Relic Android or iOS apps. Users with SAML-SSO enabled accounts When you sign in to the New Relic mobile app, your session automatically redirects to your web browser. From there you can sign in to your New Relic SAML-SSO account. If you see any errors when using SAML-SSO accounts on your mobile device, verify that you are able to sign in to one.newrelic.com with a desktop web browser. If no, contact your administrator. If yes, get support at support.newrelic.com. User settings After you sign in, all New Relic accounts and applications associated with the user appear automatically. Sign in with additional username Follow the procedure for your mobile device. Mobile device To sign in to the app with an additional user name: Android To switch users: Log out from the Android device: Main menu > (selected username) > Logout > Confirm. Log in with a new account. iPhone From the app menu, select your account name, then select the Users menu. From the Users menu, select the plus icon. Sign in with the additional username. iPad To access the Users menu: Select the user icon or slide right. From the Users menu, select the plus icon. Sign in with the additional username. Switch between accounts To switch between accounts associated with your username: From the Users menu, select the user name. Select the account name. Remove or re-add a user name To remove a specific username from this device: From the Users menu, select Logout. To remove a user from this device, select the user's red minus icon. Select the user's Log out icon. To add a user again, sign in with that username again. Select the user icon or slide right to show the New Relic iPad app's Users menu.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 238.33495,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "User settings <em>and</em> <em>authentication</em>",
        "sections": "User settings <em>and</em> <em>authentication</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>apps</em>",
        "body": "This explains how to authenticate your <em>New</em> <em>Relic</em> <em>mobile</em> <em>app</em> account, and how to add users to or remove them from your <em>mobile</em> device. User <em>authentication</em> Depending on your <em>New</em> <em>Relic</em> account, additional installation or <em>authentication</em> steps may be required when you install the <em>New</em> <em>Relic</em> <em>mobile</em> <em>app</em>"
      },
      "id": "604415a728ccbc8fb52c6068"
    },
    {
      "sections": [
        "Troubleshoot SSO accounts using mobile devices",
        "No user name or password",
        "Errors after signing in",
        "Reauthentication problems"
      ],
      "title": "Troubleshoot SSO accounts using mobile devices",
      "type": "docs",
      "tags": [
        "Mobile apps",
        "New Relic Mobile apps",
        "Authentication and alerts"
      ],
      "external_id": "9ebb373182ce5fea83ba5a6baa03b2c7bccf0174",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-apps/new-relic-mobile-apps/authentication-alerts/troubleshoot-sso-accounts-using-mobile-devices/",
      "published_at": "2021-06-25T23:34:09Z",
      "updated_at": "2021-05-16T06:23:51Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Typically when you sign in to the New Relic mobile app, your session redirects automatically to your web browser. From there you can sign in to your New Relic account. Here are troubleshooting tips if you have problems using the New Relic mobile app with your SAML-SSO enabled account. No user name or password You may not have a user name or password for New Relic because some SAML providers will overwrite your password, or because your administrator has not sent you this information. In these situations: From the mobile app's Log in, select the I don't have a password link. Use your mobile device to open your email account. From your email account, retrieve the New Relic authentication email within 20 minutes. Select the Authenticate button or the link below it in the email. Errors after signing in If you see any errors after successfully signing in to your SSO provider with your mobile device, verify that you are able to sign in to one.newrelic.com with a desktop web browser. If no, contact your administrator. If yes, get support at support.newrelic.com. Reauthentication problems If you are using reauthentication on a SAML-SSO account, you must log in to your default account. (All other accounts will be grayed out.) If you attempt to switch to a grayed-out account, an error message will appear, explaining this is currently not supported.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 238.33289,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Troubleshoot SSO accounts using <em>mobile</em> devices",
        "sections": "Troubleshoot SSO accounts using <em>mobile</em> devices",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>apps</em>",
        "body": "Typically when you sign in to the <em>New</em> <em>Relic</em> <em>mobile</em> <em>app</em>, your session redirects automatically to your web browser. From there you can sign in to your <em>New</em> <em>Relic</em> account. Here are troubleshooting tips if you have problems using the <em>New</em> <em>Relic</em> <em>mobile</em> <em>app</em> with your SAML-SSO enabled account. No user name"
      },
      "id": "604415e0196a67fc3f960f42"
    },
    {
      "sections": [
        "Alerting with New Relic mobile apps",
        "Tip",
        "Requirements",
        "Turn notifications on or off",
        "View alert incident details",
        "Troubleshoot alert settings",
        "Check notification settings for your mobile device.",
        "Delete the Android or iOS device from your New Relic account.",
        "Uninstall the New Relic mobile app.",
        "Reinstall the New Relic mobile app."
      ],
      "title": "Alerting with New Relic mobile apps",
      "type": "docs",
      "tags": [
        "Mobile apps",
        "New Relic Mobile apps",
        "Authentication and alerts"
      ],
      "external_id": "d55850dc642cc8ade20310e1d4654db61af1e809",
      "image": "https://docs.newrelic.com/static/f942198cbd9a41b7355ef7f01fa6cc66/e5166/alerts-incident-detail-nexus.jpg",
      "url": "https://docs.newrelic.com/docs/mobile-apps/new-relic-mobile-apps/authentication-alerts/alerting-new-relic-mobile-apps/",
      "published_at": "2021-06-25T23:33:10Z",
      "updated_at": "2021-04-06T08:55:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Account administrators can set up configuration to receive push notifications on Android and iOS devices from New Relic Alerts. You can receive alerts from any policy by attaching a user channel to the policy. Requirements This feature is available only to users on the original user model, not to users on the New Relic One user model. As a workaround, you can use the email notification channel. Turn notifications on or off When you log in to your New Relic account from an Android or iOS app, your device is automatically associated with your user channel. Be sure to add the associated user channel to the alert policy. View alert incident details The notification automatically appears on your device's lock screen. To start the New Relic app: Android devices: Tap the notification from the notification drawer. OR iOS devices: Swipe the screen. From the New Relic app's Alerts menu, select any alert to view error details for the associated application. Optional: Select Acknowledge. Optional: To view additional details, select Overview, Violations, or Event log. The main menu's Alerts list shows alerts in the following order, sorted by time: Active incidents Resolved incidents from today Resolved incidents and events from the past week, organized by day Troubleshoot alert settings If alerts are not working on your mobile device: Verify that you meet the requirements. Verify that alerts are enabled. Check your mobile device's notification settings, to ensure New Relic is permitted to send alerts. If the notification settings for your mobile device are correct, but you still do not receive notifications, delete the device from your account, then uninstall and reinstall the New Relic application. Check notification settings for your mobile device. Follow the procedure for your mobile device. Device To check notification settings: Android From your Android device's Settings, select Sound and notification. Check the settings for sound volume. Optional: Enable Also vibrate for calls. Check the settings for Interruptions. Check the settings for Notification. Check the settings for App notifications: Select the New Relic app, then check the settings for Block and Priority. iOS Ensure Do Not Disturb is off: From the iOS Settings app, select Do Not Disturb, and check that the Manual switch is off. Ensure the New Relic app is allowed to send notifications: From the iOS Settings app, select Notifications, and locate the New Relic app from the app list. Ensure that the Allow Notifications switch is on. Ensure that the alert style is set to Banners or Alerts. Optional: To enable audio alerts, set Sounds to on. Delete the Android or iOS device from your New Relic account. To delete the mobile device from your New Relic account, use the public graphql api api.newrelic.com/graphiql in a web browser: Query current devices by selecting actor -> mobilePushNotification -> devices and selecting appVersion, deviceId, and deviceName. Run this query to get the list of devices. Mutate to remove a device by selecting mutation -> mobilePushNotificationRemoveDevice, and passing in the deviceId from the list above. Or you can remove the device from the in-app Settings option from the menu -> Settings Look under Push notification devices, and remove from there. On iOS, slide from right to left to Delete a device, on Android, tap Delete Continue with the steps to reinstall the New Relic app from your device. Uninstall the New Relic mobile app. Follow the procedure to uninstall the New Relic app from your device, then reinstall it. Device To uninstall the New Relic app: Android From your Android device's Settings, select Apps, then select the New Relic app. Select Uninstall. Continue with the steps to reinstall the New Relic app. iOS From your iOS home screen, tap and hold the New Relic icon until it shakes. To delete the app, select the X icon. Continue with the steps to reinstall the New Relic app. Reinstall the New Relic mobile app. To reinstall the New Relic mobile app: From your Android device, select Google Play Store. OR From your iOS device's home screen, select App Store. Search for New Relic. Download the app. When the download finishes, sign in to your New Relic mobile app with your New Relic account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 219.31197,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Alerting</em> with <em>New</em> <em>Relic</em> <em>mobile</em> <em>apps</em>",
        "sections": "<em>Alerting</em> with <em>New</em> <em>Relic</em> <em>mobile</em> <em>apps</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>apps</em>",
        "body": ": From the iOS Settings <em>app</em>, select Notifications, and locate the <em>New</em> <em>Relic</em> <em>app</em> from the <em>app</em> list. Ensure that the Allow Notifications switch is on. Ensure that the <em>alert</em> style is set to Banners or <em>Alerts</em>. Optional: To enable audio <em>alerts</em>, set Sounds to on. Delete the Android or iOS device from your"
      },
      "id": "603e9efd64441f19a14e88ab"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-cordova-phonegap/get-started/introduction-new-relic-cordova": [
    {
      "sections": [
        "How New Relic distributed tracing works",
        "Tip",
        "Trace sampling",
        "Head-based sampling (standard distributed tracing)",
        "Language agents: adaptive sampling",
        "Language agents: limits and sampling",
        "Trace rate limiting",
        "Lambda trace sampling",
        "Tail-based sampling (Infinite Tracing)",
        "Architecture",
        "Tail-based sampling algorithms",
        "No sampling",
        "Browser and Mobile trace reporting",
        "Trace API",
        "How trace data is structured",
        "How trace data is stored",
        "How trace context is passed between applications",
        "Important",
        "Scenario 1: Trace touching three agent types",
        "Scenario 2: Trace with W3C New Relic and middleware",
        "Scenario 3: Trace with any W3C-compliant agent and a New Relic agent."
      ],
      "title": "How New Relic distributed tracing works",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Distributed tracing",
        "Get started"
      ],
      "external_id": "4dbe0119017f78ad4db2a2b8a9ca2d287222753a",
      "image": "https://docs.newrelic.com/static/406c9f3af4012dab16df681c8feab256/c1b63/new-relic-distributed-tracing-trace-structure.png",
      "url": "https://docs.newrelic.com/docs/distributed-tracing/concepts/how-new-relic-distributed-tracing-works/",
      "published_at": "2021-06-25T20:20:18Z",
      "updated_at": "2021-06-25T20:20:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here are some technical details about how New Relic distributed tracing works: How trace sampling works How we structure trace data How we store trace data How trace context is passed between applications Tip For instructions about setting up distributed tracing, see Overview: Enable distributed tracing. Trace sampling How your traces are sampled will depend on your setup and the New Relic tracing tool you're using. For example, you may be using a third-party telemetry service (like OpenTelemetry) to implement sampling of traces before your data gets to us or, if you're using Infinite Tracing, you'd probably send us all your trace data and use our sampling. We have a few sampling strategies available: Head-based sampling (standard distributed tracing) Tail-based sampling (Infinite Tracing) No sampling Head-based sampling (standard distributed tracing) With the exception of our Infinite Tracing feature, most of our tracing tools use a head-based sampling approach. This applies filters to individual spans before all spans in a trace arrive, which means decisions about whether to accept spans is made at the beginning (the \"head\") of the filtering process. We use this sampling strategy to capture a representative sample of activity while avoiding storage and performance issues. Here are some details about how head-based sampling is implemented in our standard distributed tracing tools: Language agents: adaptive sampling Our APM language agents use adaptive sampling to capture a representative sample of system activity. The following is an explanation of how adaptive sampling works. For the first service in a distributed trace, 10 requests are chosen to be sampled. The throughput to that service is used to adjust how frequently requests are sampled. This is explained in more detail below. The first service we monitor in a distributed trace is called the trace origin. The trace origin chooses requests at random to be traced. That decision propagates to the downstream services touched by that request. When the request has completed, all of the spans touched by that request that we've detected are made available in the UI as a complete trace (though agent limits may result in fragmented traces). APM agents have a limit on the number of transactions collected per minute (this can vary, depending on agent) and a limit on the number of spans collected per minute (1000 per agent instance). To adhere to these limits, the default number of traces at the trace origin is 10 traces per minute. An APM agent spreads out the collection of these 10 traces over a minute in order to get a representative sample over time. The exact sampling rate depends on the number of transactions in the previous minute. The rate responds to changes in transaction throughput, going up or down. For example, if the previous minute had 100 transactions, the agent would anticipate a similar number of transactions and select 1 out of every 10 transactions to be traced. Language agents: limits and sampling An APM language agent instance using head-based sampling has a limit of 1000 spans per minute. The agent attempts to keep all spans that are marked to be sampled as part of a distributed trace. In many distributed systems, the average microservice may generate 10 to 20 spans per request. In those cases, the agent span limit can accommodate all spans chosen, and that service will have full detail in a trace. However, some requests to services will generate many spans, and the agent span limit will be reached. As a result, some traces will not have full detail for that service. One solution to this would be to custom instrument an agent to report less activity and therefore report fewer spans. To read about how browser monitoring of trace data may vary from our language agents, see Browser traces. Trace rate limiting If the above sampling methods still result in too much trace data, we may limit incoming data by sampling traces after they're received. By making this decision at the trace level, it avoids fragmenting traces (accepting only part of a trace). This process works similarly to adaptive sampling. The total spans received in a minute are totaled. If too many spans are received, fewer spans may be accepted in the following minute, in order to achieve a floating-average throughput rate. Lambda trace sampling Our AWS Lambda monitoring uses its own sampling process. Tail-based sampling (Infinite Tracing) Our Infinite Tracing feature uses a tail-based sampling approach. \"Tail-based sampling\" means that trace-retention decisions are done at the tail end of processing after all the spans in a trace have arrived. With Infinite Tracing, you can send us 100% of your trace data from your application or third-party telemetry service, and Infinite Tracing will figure out which trace data is most important. And you can configure the sampling to ensure the traces important to you are retained. Architecture For Infinite Tracing, agents or integrations send 100% of all instrumented spans to a trace observer. The trace observer is a distributed tracing service residing in a cluster of services on AWS called New Relic Edge. Tip Only your spans go to the trace observer—all other data such as metrics, custom events, and transaction traces are sent the normal route to New Relic and are subject to local sampling. You configure a unique trace observer endpoint for the AWS region you want to send data to. You can request multiple endpoints, one per AWS region. The endpoint represents a trace observer for a particular workload. For example, all spans from a single trace (request) must go to that endpoint. Here are two architectural diagrams: one showing how data flows if you use APM agents and another if you use New Relic integrations like OpenTelemetry exporters: The trace observer holds traces open while spans for that trace arrive. Once the first span in a trace arrives, a session is kept open for 10 seconds. Each time a new span for that trace arrives, the expiration time is reset to 10 seconds. Traces that haven't seen a span arrive within the last 10 seconds will automatically expire. Tail-based sampling algorithms By default, each trace observer offers traces to three samplers: one looking for duration outliers, one looking for traces with errors, and one trying to randomly sample across all trace types. Each sampler keeps a target percentage of traces that match their criteria. Here are details about each sampler: Sampler Matching criteria Target percent Duration Traces with an outlier duration, using two algorithms: Gaussian (Assumes a normal distribution and a threshold at the 99th percentile) Eccentricity (Assumes no distribution and a threshold based on cluster) 100% Error Traces having at least one span with an error 100% Random All traces 1% (This is configurable. See Infinite Tracing: Random trace filter) If the matching criteria matches the trace, each sampler looks at the trace’s shape. A trace’s shape is the unique combination of the root span’s entity name and span name. This is a simple way to separate traces using the entry point of the request. Once the shape is determined, the sampler makes a decision to keep or reject the trace based on its target sampling percent. If it’s 100%, the trace is automatically kept. If it’s anything less, the probability the sampler keeps a given trace is determined by the target percent. For example, the default target percent is 1 for random traces, so 1% of those traces are kept. If you prefer, you can change the random filter percentage. Because the trace observer uses percentages of throughput, the number of traces selected will vary with that throughput. No sampling Some of our tools don't use sampling. Sampling details for these tools: Browser and Mobile trace reporting Browser monitoring distributed tracing and Mobile monitoring report all spans. Our APM language agents are often used in conjunction with browser and mobile monitoring, and our language agents use sampling. This means that there will likely be many more browser and mobile spans than back-end spans, which can result in browser and mobile app spans disconnected from back-end spans. For tips on querying for traces that contain front and back-end spans, see Find browser span data. Trace API If you don't have Infinite Tracing enabled, our Trace API does no sampling (unless the default data limits are exceeded). It's expected that you set up the Trace API to send us the traces you think are important. How trace data is structured Understanding the structure of a distributed trace can help you: Understand how traces are displayed in our UI Help you query trace data A distributed trace has a tree-like structure, with \"child\" spans that refer to one \"parent\" span. This diagram shows some important span relationships in a trace: This diagram shows how spans in a distributed trace relate to each other. This diagram shows several important concepts: Trace root. The first service or process in a trace is referred to as the root service or process. Process boundaries. A process represents the execution of a logical piece of code. Examples of a process include a backend service or Lambda function. Spans within a process are categorized as one of the following: Entry span: the first span in a process. Exit span: a span is a considered an exit span if it a) is the parent of an entry span, or b) has http. or db. attributes and therefore represents an external call. In-process span: a span that represents an internal method call or function and that is not an exit or entry span. Client spans. A client span represents a call to another entity or external dependency. Currently, there are two client span types: Datastore. If a client span has any attributes prefixed with db. (like db.statement), it's categorized as a datastore span. External. If a client span has any attributes prefixed with http. (like http.url) or has a child span in another process, it's categorized as an external span. This is a general category for any external calls that are not datastore queries. Trace duration. A trace's total duration is determined by the length of time from the start of the earliest span to the completion of the last span. You can query span relationship data with the NerdGraph GraphiQL explorer at api.newrelic.com/graphiql. How trace data is stored Understanding how we store trace data can help you query your trace data. We save trace data as: Span: A span represents operations that are part of a distributed trace. The operations that a span can represent include browser-side interactions, datastore queries, calls to other services, method-level timing, and Lambda functions. One example: in an HTTP service, a span is created at the start of an HTTP request and completed when the HTTP server returns a response. Span attributes contain important information about that operation (such as duration, host data, etc.), including trace-relationship details (such as traceId, guid). For span-related data, see span attributes. Transaction: If an entity in a trace is monitored by an agent, a request to that entity generates a single Transaction event. Transactions allow trace data to be tied to other New Relic features. For transaction-related data, see transaction attributes. Contextual metadata. We store metadata that shows calculations about a trace and the relationships between its spans. To query this data, use the NerdGraph GraphiQL explorer. How trace context is passed between applications We support the W3C Trace Context standard, which makes it easier to trace transactions across networks and services. When you enable distributed tracing, New Relic agents add HTTP headers to a service's outbound requests. HTTP headers act like passports on an international trip: They identify your software traces and carry important information as they travel through various networks, processes, and security systems. The headers also contain information that helps us link the spans together later: metadata like the trace ID, span ID, the New Relic account ID, and sampling information. See the table below for more details on the header: Item Description accountId This is your New Relic account ID. However, only those on your account and New Relic Admins can associate this Id with your account information in any way. appId This is the application ID of the application generating the trace header. Much like accountId, this identifier is not going to provide any information unless you're a user on the account. guid With Distributed Tracing, each segment of work in a trace is represented by a span, and each span has a guid attribute. The guid of the last span within the process is sent with the outgoing request so that the first segment of work in the receiving service can add this guid as the parentId attribute which connects data within the trace. Parent type The source of the trace header, as in Mobile, Browser, Ruby app, etc. This becomes the parent.type attribute on the Transaction triggered by the request this header is attached to. Priority A randomly generated priority ranking value that helps determine which data is sampled when sampling limits are reached. This is a float value set by the first New Relic agent that’s part of the request so all data in the trace will have the same priority value. Sampled A boolean value that tells the agent if traced data should be collected for the request. This is also added as an attribute on any span and transaction data collected. If you want to read more about this sampling process, this guide goes into more detail. Timestamp Unix timestamp in milliseconds when the payload was created. traceId The unique ID (a randomly generated string) used to identify a single request as it crosses inter- and intra- process boundaries. This ID allows the linking of spans in a distributed trace. This also is added as an attribute on the span and transaction data. transactionId The unique identifier for the transaction event. Trusted acount key This is a key that helps identify any other accounts associated with your account. So if you have multiple sub-accounts that the trace crosses, we can confirm that any data included in the trace is coming from a trusted source, and tells us what users should have access to the data. Version and data key This identifies major/minor versions, so if an agent receives a trace header from a version with breaking changes from the one it is on, it can reject that header and report the rejection and reason. This header information is passed along each span of a trace, unless the progress is stopped by something like middleware or agents that don't recognize the header format (see Figure 1). Figure 1 To address the problem of header propagation, we support the W3C Trace Context specification that requires two standardized headers. Our latest W3C New Relic agents send and receive these two required headers, and by default, they also send and receive the header of the prior New Relic agent: W3C (traceparent): The primary header that identifies the entire trace (trace ID) and the calling service (span id). W3C (tracestate): A required header that carries vendor-specific information and tracks where a trace has been. New Relic (newrelic): The original, proprietary header that is still sent to maintain backward compatibility with prior New Relic agents. This combination of three headers allows traces to be propagated across services instrumented with these types of agents: W3C New Relic agents Non-W3C New Relic agents W3C Trace Context-compatible agents Important If your requests only touch W3C Trace Context-compatible agents, you can opt to turn off the New Relic header. See the agent configuration documentation for details about turning off the newrelic header. The scenarios below show various types of successful header propagation. Scenario 1: Trace touching three agent types This shows the flow of headers when a request touches three different agent types: Scenario 2: Trace with W3C New Relic and middleware This shows the combination of headers sent by a W3C New Relic agent to some middleware. Scenario 3: Trace with any W3C-compliant agent and a New Relic agent. This shows the two required W3C headers from another vendor accepted by a W3C New Relic agent.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.15905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "How <em>New</em> <em>Relic</em> distributed tracing works",
        "sections": "How <em>New</em> <em>Relic</em> distributed tracing works",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Here are some technical details about how <em>New</em> <em>Relic</em> distributed tracing works: How trace sampling works How we structure trace data How we store trace data How trace context is passed between applications Tip For instructions about setting up distributed tracing, see Overview: Enable distributed"
      },
      "id": "6072a66664441f14089d856c"
    },
    {
      "sections": [
        "HTTP errors: Network failure analysis",
        "Find and use the HTTP errors page",
        "Group, sort, and filter errors and failures",
        "HTTP error profiles",
        "View more details about a specific error",
        "View and share error data with query builder",
        "View legacy HTTP errors UI page",
        "View the Errors page",
        "Error trace details",
        "View error data in query builder",
        "Unknown errors or URL errors"
      ],
      "title": "HTTP errors: Network failure analysis",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "Mobile monitoring UI",
        "Network pages"
      ],
      "external_id": "04631e122b061663c6fd261b605202654aadcf96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/mobile-monitoring-ui/network-pages/http-errors-network-failure-analysis/",
      "published_at": "2021-06-26T14:38:25Z",
      "updated_at": "2021-06-26T14:38:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Mobile monitoring's HTTP errors page helps you to better understand HTTP errors and network failures associated with your mobile app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager See a list of errors and failures so you can coordinate mobile app teams with backend teams and share the data they need to fix issues. QA engineer Make sure that a new version of your app does not cause a spike in errors compared to a previous version. DevOps engineer See a list of domains and URLs associated with HTTP errors and network failures, so you can focus on the ones that are causing errors and filter out status codes that are too noisy for your alerts. Mobile developer Find out if there are frontend or backend problems affecting your mobile app (even without an error alert going off) so that you can address them in a new version. Support engineer View the errors and session attributes (geography, connection type, device, app version) associated with an error so that you can help customers with their issues. Find and use the HTTP errors page There are two ways to get to the HTTP errors page: Go to one.newrelic.com > Mobile > (select an app) > Network > Network errors. From a mobile app's Overview page in Mobile monitoring, select the HTTP errors/network failures chart title link. From the HTTP errors page, investigate HTTP request and network failures: Use any standard page functions to look for trends in Errors and failures charts. Target specific types of errors and failures by grouping, sorting, and filtering the data. Find anomalies in your request errors with HTTP error profiles. Select an error or failure to view details for it. You can also define NRQL alerts that are focused on error types for your critical services or query your app data. Group, sort, and filter errors and failures If you want to do this... Do this... Change how the page groups and sorts errors and network failures Make selections from the Group by and Sort by dropdowns. By default, the Network errors page is grouped by request domain and sorted by errors and failures. Filter for specific errors and network failures Select an error or failure from the Errors and failures list and/or select multiple filters from the Filter dropdown. See which filters you applied or remove filters The filters you select display next to the filter dropdown. To clear filters, select the X next to the filter you want to clear. Change the time window Select a new time period from the Time picker dropdown. View information for one specific app version Select the version that you want to see charts and lists for in the Versions dropdown. HTTP error profiles Error profiles provide visual details about significant differences in the frequency of different values for HTTP error events. For each attribute, the error profile includes: A pie chart showing how the error's attribute is distributed for values that deviate the most A table comparing the error attribute's distribution to that of other errors This helps you take more of the guesswork out of resolving your mobile application's HTTP errors. You can more easily determine if you safely ignore the error, or if you should attempt to resolve the error with a new deployment, code change, customer communication or other actions. View more details about a specific error To view details about an error or failure, select the Request URL link to be directed to the Error summary page. From the Error summary page, you can view the version information, request attributes, and Response body, as well as get a breakdown of error types for the request URL. View and share error data with query builder To explore the data behind any of the charts or lists on the HTTP errors/requests page: Select for any chart. Select View query and then View in Insights. This will open the query builder. From the query builder, you can add the error data to a dashboard and share it via a permalink. To dig deeper into the error data, query your data for the following events and attributes: MobileRequestError events and attributes MobileRequest events and attributes View legacy HTTP errors UI page Accounts that do not have an Enterprise-level subscription see a different HTTP Errors UI page: The Errors page includes details about HTTP errors (403, 404, 422, 500, 502, etc.) and network failures for your hosts; for example: Secure connection failed Timed out Cannot find host Not connected to Internet Cannot connect to host View the Errors page To view HTTP errors or network failures for your mobile app: Go to one.newrelic.com > Mobile > (select an app) > Network > Errors. To change the view to errors or failures, select the Sort by option. To hide low-usage hosts, select the Hide < 1% throughput option. To limit information to a specific version of your app, or to change the time period, select your choice from the Versions menu or the time picker below the menu bar. To view details for a specific host, HTTP status error, or network failure, select its name. Use any of our standard user interface functions to drill down into detailed information. Error trace details Mobile monitoring will capture the response details from HTTP requests that return a 400 or 500 level status code. In addition, error messages generated from Android apps will include a stack trace. To view details about an error trace on the Errors page, select its request URL link. From here you can: View the response body. Share the error details with others by email. File a ticket about it through a ticketing system integrated with New Relic. Delete or hide the error. The errors chart also appears on the selected mobile app's Overview page. If the chart shows errors, you can select its HTTP errors/network failures title or select anywhere on the Overview page's chart to go directly to this Errors page. View error data in query builder To dig deeper into your request data, use the query builder to query and chart the MobileRequest events and attributes. Unknown errors or URL errors The Mobile agents maintain a list of exception types. In some cases, custom exceptions thrown by applications fall outside of this list. When this happens, Unknown may appear in the Mobile Errors page. If you find Unknown in your list of errors and need assistance in researching which exception types are being missed, get support at support.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.61274,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Mobile</em> <em>monitoring</em>",
        "body": "<em>Mobile</em> <em>monitoring</em>&#x27;s HTTP errors page helps you to better understand HTTP errors and network failures associated with your <em>mobile</em> app, to connect errors to services that are causing issues, and to share actionable data with your team: Team member View the data on the HTTP errors page to... Manager"
      },
      "id": "603e8eb428ccbcd174eba791"
    },
    {
      "sections": [
        "New Relic API keys",
        "Manage API keys in UI",
        "Overview of API keys",
        "Important",
        "User key",
        "Create a user key",
        "Edit a user key",
        "Delete a user key",
        "Tip",
        "License key",
        "Create a license key",
        "Edit a license key",
        "Delete a license API key",
        "Browser key",
        "Create a browser key",
        "Edit a browser key",
        "Delete a browser key",
        "REST API key",
        "Activate or change REST API key",
        "View REST API keys",
        "Delete REST API key",
        "Insights insert key",
        "Generate an Insights insert key",
        "Edit or delete an Insights insert key",
        "Insights query key",
        "Generate an Insights query key",
        "Edit or delete an Insights query key",
        "Admin key"
      ],
      "title": "New Relic API keys",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "b373cd68cf21daeb5d912ffb4b1ae3f14f500fcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/",
      "published_at": "2021-06-25T20:18:04Z",
      "updated_at": "2021-06-20T20:48:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has several different APIs that each require their own type of API key to use. This resource describes our API keys, what they're used for, and how to access them. Manage API keys in UI Here's a direct link to the API keys UI page. To find this from the New Relic UI: From the account dropdown, select Account settings. Select API keys. Overview of API keys The table below summarizes our available API keys and their uses. Important Some keys are able to be used by more than one API. If you're using a specific API, see the docs for that API to understand which keys are required and recommended. Key type What it's for Where to access User key (Also known as a \"personal API key\") Used for NerdGraph (our GraphQL API) and for accessing REST API endpoints (dependent on user permissions). API keys UI License key Allows ingestion of data from APM agents, the infrastructure agent, and some other data-ingest APIs. API keys UI Insights insert key (Also known as a \"Insert key\") Allows ingestion of events via HTTPS request from our metric, log, trace, and event APIs and the tools that use those APIs. Go to the API keys UI and click Insights insert key. Browser key Allows ingestion of browser monitoring data. API keys UI Mobile key (aka \"mobile app token\") Allows mobile monitoring data to be sent to New Relic. See Mobile app token. REST API key Note: we recommend using the user key instead because it has fewer limitations. The REST API key is for using our REST APIs for Alerts, APM, Browser, Infrastructure alerts, as well as Mobile REST APIs and the API Explorer. Go to the API keys UI and click REST API key. Admin API key Important As of December 4, 2020, all existing admin keys have been migrated to be user keys. For more information, see Admin key and User key below. API keys UI (will appear as user keys) Insights query key (aka \"Query key\") This key allows use of the Insights query API. Note: we now recommend using NerdGraph to query New Relic data. Go to the API keys UI and click Insights query key. User key New Relic user keys (previously referred to as \"personal API keys\") are required for NerdGraph (our GraphQL API), which allows you to query most New Relic data and do some types of configuration. User keys also let you use our REST API, with restrictions based on your permissions. The instructions below are for managing keys in the UI. For managing keys via API, see Manage keys with NerdGraph. Create a user key Go to the API keys UI and click Create key. In the Account dropdown, choose the account for which you want the key to be created. In the Key type dropdown, select User. In the Name field, enter a descriptive name for your key. In the Notes field, add relevant details about the key. Click Create. Edit a user key Go to the API keys UI. In the row of the user key you want to edit, click ... and select Edit. Make your changes and click Update key. Delete a user key Go to the API keys UI. In the row of the user key you want to delete, click ... and select Delete. Click Delete key to confirm your deletion. Tip In December 2020, user keys supplanted Admin API keys. For details, see Admin API key. License key New Relic license keys allow the ingestion of data from APM agents, the infrastructure agent, and some other data-ingest APIs. If you're using a specific API, see the docs for that API to understand which keys are required or recommended. The instructions below are for managing keys in the UI. For managing keys via API, see Manage keys with NerdGraph. Create a license key Go to the API keys UI and click Create key. In the Account dropdown, choose the account for which you want the key to be created. In the Key type dropdown, select License. In the Name field, enter a descriptive name for your key. In the Notes field, add relevant details about the key. Click Create. Edit a license key Go to the API keys UI. In the row of the license key you want to edit, click ... and select Edit. Make your changes and click Update key. Delete a license API key Go to the API keys UI. In the row of the license key you want to delete, click ... and select Delete. Click Delete key to confirm your deletion. Important You can't manage or delete an original license key that was created when your account was created. For that, contact New Relic support. Browser key The browser key allows the ingestion of data from New Relic browser monitoring. The instructions below are for managing keys in the UI. For managing keys via API, see Manage keys with NerdGraph. Create a browser key Go to the API keys UI and click Create key. In the Account dropdown, choose the account for which you want the key to be created. In the Key type dropdown, select Browser. In the Name field, enter a descriptive name for your key. In the Notes field, add relevant details about the key. Click Create. Edit a browser key Go to the API keys UI. In the row of the browser API key you want to edit, click ... and select Edit. Make your changes and click Update key. Delete a browser key Go to the API keys UI. In the row of the browser API key you want to delete, click ... and select Delete. Click Delete key to confirm your deletion. Important You can't manage or delete an original browser key that was created when your account was created. For that, contact New Relic support. REST API key Important We highly recommend using a user key instead, because that key has fewer restrictions. You can use a REST API key with our REST API and the API Explorer. For accounts that have sub-accounts, each sub-account must use its own REST API key. Requirements: Requires admin-level user permissions. If you don't have access to the REST API key or the REST API explorer, it might be due to lack of permissions. Talk to your New Relic account manager, or use a user key instead. Each New Relic account can have only one REST API key. Activate or change REST API key Go to the API keys UI and select REST API key. Click Regenerate REST API key. Click (Show key) to view your account's new REST API key. Copy your account's REST API key to use with New Relic's REST API. View REST API keys To view REST API keys: Go to the API keys UI and select REST API key. Click (Show key) to view your account's new REST API key. Delete REST API key To delete your account's REST API key: Before you delete an API key, make sure you have the correct account or sub-account. Go to the API keys UI and select REST API key. Select the delete icon for the REST API key. Confirm the deletion by typing DELETION IS FOREVER in the text field. Select Delete. Insights insert key The Insights insert key (aka the \"Insert key\") is required for the ingestion of data via our Event API, Log API, Metric API, and Trace API, or via tools that use those APIs. Tips on availability and access: Because these keys are associated with an account and not a specific user, anyone in the account with access to a key can use it. As a best practice for security purposes, we recommend you use different Insights insert keys for different applications or different data sources. Generate an Insights insert key Go to the API keys UI and select Insights insert keys. Next to the Insert keys heading, select the button. A cURL command containing your insert key will appear, as well as NRQL query field. Edit the NRQL query field. Add comments in the Notes field if desired. Click Save your notes. Edit or delete an Insights insert key Go to the API keys UI and select Insights insert keys. Under Insert Keys, find the key you want to modify. Select Edit or Delete. Insights query key The Insights query key is used for our Insights query API: we now recommend using NerdGraph for querying New Relic data. Generate an Insights query key You must have access to the UIs you plan to query and the correct permissions in order to register or modify this key. Important Insights query keys are generated per account; they're not associated with a specific user. This means that any user in an account with access to a query key can use it. To register this key: Go to the API keys UI and select Insights query keys. Next to the Query Keys heading, select the button. A cURL command containing your insert key will appear, as well as NRQL query field. Edit the NRQL query field. Add comments in the Notes field if desired. Click Save your notes. Edit or delete an Insights query key To edit or delete this key: Go to the API keys UI page and select Insights query keys. Under Query Keys, find the key you want to modify. Select Edit or Delete. Admin key Important As of December 4, 2020, all existing admin keys have been migrated to be user keys. You don’t need to do anything for existing admin keys to remain active. They will be automatically accessible via the API keys UI, labeled as user keys, and granted identical permissions. You can manage them as you would any user key via the same workflow. All migrated admin keys will have a note that says “Migrated from an admin user key” in the key table, so you’ll be able to find them easily.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 88.17621,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> API keys",
        "sections": "<em>New</em> <em>Relic</em> API keys",
        "tags": "<em>Get</em> <em>started</em>",
        "body": " of browser <em>monitoring</em> data. API keys UI <em>Mobile</em> key (aka &quot;<em>mobile</em> app token&quot;) Allows <em>mobile</em> <em>monitoring</em> data to be sent to <em>New</em> <em>Relic</em>. See <em>Mobile</em> app token. REST API key Note: we recommend using the user key instead because it has fewer limitations. The REST API key is for using our REST APIs for Alerts"
      },
      "id": "6043fa3464441f1358378f3b"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags": [
    {
      "sections": [
        "Upload dSYM files",
        "Important",
        "Identify missing dSYMs",
        "Upload dSYM files through the New Relic Mobile UI",
        "Tip",
        "Manually upload dSYM files",
        "Via Python script (agent versions 6.0.0 or higher)",
        "Via command line",
        "Troubleshooting",
        "Auto-upload failure",
        "Missing dSYMs"
      ],
      "title": "Upload dSYM files",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "3655f49cf0e1ae693de0f8ea45bf4e5e6437e399",
      "image": "https://docs.newrelic.com/static/61abd689153e075e96d57837f10e2224/c1b63/Mobile-Crash-dsym_file.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/upload-dsyms-bitcode-apps/",
      "published_at": "2021-06-25T22:49:54Z",
      "updated_at": "2021-05-16T00:56:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your app's dSYM files are stored in Xcode's dSYM archive path folder. This is the folder where New Relic Mobile gets the dSYM files that are used to symbolicate your crash reports. New Relic provides a post-build script as part of the New Relic Mobile's iOS agent's install process and the tvOS agent's install process. This script automatically uploads your app's dSYM files. Important This script uses Python 2. Starting October 2019 with macOS 10.15 (Catalina), Python won't be installed by default. If you're using the automatic script (recommended), you may need to manually install Python 2. If you're using Homebrew, see Python on Homebrew. New Relic automatically uploads dSYM files only for release builds. Non-release builds must upload their files either manually or through the New Relic Mobile UI. Bitcode-enabled apps have their dSYM files generated by Apple. You must download the dSYM files for Bitcode-enabled apps from Apple and upload them to New Relic. If you see unreadable machine code in the Crashes page, your dSYM files may not be uploaded correctly. In some cases, you may need to manually upload dSYM files. Identify missing dSYMs When a Bitcode-enabled app is uploaded to Apple for App Store review or ad-hoc distribution, dSYMs need to be manually downloaded from Apple and uploaded to New Relic to allow the mobile crash reports to be properly symbolicated. These dSYMs can be downloaded through the archives organizer in Xcode within several minutes of uploading the app. In this situation follow the procedures to find the archive and download dSYMs. If an app is missing a dSYM file, a few indicators are available in the New Relic Mobile UI: Banner notification: A banner warning appears on the Crash report page. The warning reads: We were unable to locate your dsym. Copy Upload prompt: from the Crash type summary page you will be automatically prompted to upload a dSYM file if it is missing. Machine code: The crash stack trace on the Crash report page displays machine code and not a human-readable error message. Upload dSYM files through the New Relic Mobile UI Crash analysis > Crash list > Crash type summary > Upload dSYM: You can quickly upload your dSYM files directly from the New Relic Mobile UI. You can easily upload your dSYM files directly form the New Relic Mobile UI. To upload your dSYM files: Go to one.newrelic.com and click Mobile. Then select your app from the list. View Crash analysis. Select a specific crash from the Crash types list. Click Upload dSYM. You can either drag and drop your dSYMs directly, or select the file form your computer. Tip The maximum file size is 600 MB. Manually upload dSYM files In some circumstances, New Relic's automatic upload of dSYM files may fail. If a dSYM upload is attempted and fails, it creates a build error with a detailed message. For example, if there's a network failure and the dSYM upload isn't completed, Xcode will report an error. For additional information about how New Relic handles dSYM uploads, see New Relic's Online Technical Community. If the automatic upload fails, you can manually upload your dSYM file. If you have multiple dSYM files, they can be within a single zip with a maximum file size of 600 MB. The YOUR_NEW_RELIC_APPLICATION_TOKEN value in the commands below is the same key used for +[NewRelic startWithApplicationToken:] (in Objective-C) or NewRelic.start(withApplicationToken:) (in Swift). To manually upload your dSYM files: Via Python script (agent versions 6.0.0 or higher) In iOS agent versions 6.0.0 or higher, the agent includes a Python script that automatically processes and uploads symbols. You can call this script from the command line: NewRelicAgent.framework/Resources/generateMap.py \"DSYM_ARCHIVE_PATH\" \"YOUR_NEW_RELIC_APPLICATION_TOKEN\" Copy Via command line To manually upload individual dSYM files from the command line: Zip up your dSYM file or files using the following command. Replace ~ /ZIPPED_DSYM_PATH with your new dSYM archive path and file name (for example, Users/my-name/desktop). Also replace ~ /dSYM_PATH with your existing dSYM file path. /usr/bin/zip --recurse-paths --quiet \"~/ZIPPED_DSYM_PATH\" \"~/dSYM_PATH\" Copy Upload the dSYM zip file using the following command: For a US account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.newrelic.com/symbol Copy For a EU account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.eu.newrelic.com/symbol Copy Troubleshooting Auto-upload failure If a dSYM auto-upload failed, the Report Navigator may have a fully formed cURL command. You can use this cURL command to reattempt an upload. Depending on the error, you may also need to follow some of the dSYM manual upload steps. Here is an example of a successful dSYM upload in the Report Navigator: Example: A successful dSYM upload in the Report Navigator. Missing dSYMs If dSYM files are missing, you may need to check Xcode build settings to ensure the file is being generated. Frameworks which are built locally have separate build settings and may need to be updated as well. Build settings: Debug Information Format : Dwarf with dSYM File Deployment Postprocessing: Yes Strip Linked Product: Yes Strip Debug Symbols During Copy : Yes Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.03757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Upload dSYM files through the <em>New</em> <em>Relic</em> <em>Mobile</em> UI",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Your app&#x27;s dSYM files are stored in Xcode&#x27;s dSYM archive path folder. This is the folder where <em>New</em> <em>Relic</em> <em>Mobile</em> gets the dSYM files that are used to symbolicate your crash reports. <em>New</em> <em>Relic</em> provides a post-build script as part of the <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent&#x27;s install process and the tv<em>OS</em>"
      },
      "id": "60441960e7b9d24f705799ca"
    },
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.31215,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's iOS SDK to v4",
        "Getting started",
        "Update the agent"
      ],
      "title": "Upgrade New Relic Mobile's iOS SDK to v4",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "fc588d45a0cb0a8ef32363a12e36f10cb4bd5a41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk-v4/",
      "published_at": "2021-06-25T22:55:31Z",
      "updated_at": "2021-05-16T00:56:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the fourth major version of the iOS agent, New Relic Mobile includes crash reporting. This new feature changes the standard installation procedures, including: A post build script is required to upload dSYMs so that crash reports can be properly interpreted. An additional framework (libc++.dylib) must be added to projects including New Relic. Getting started Before upgrading to agent version 4, you must identify which agent version your app currently includes by enabling logging in the New Relic agent. The version number appears in each New Relic log message. This example shows major version 4, build 73: 2014-10-01 14:04:26.554 MobileDemo [12345:6789012] NewRelic (4.73, 0x7fabc98760d0) : NRMAHarvester m:448 -NRMA ConfigureFromCollector:] ... Copy Update the agent After verifying and upgrading your agent version, follow standard iOS installation and configuration procedures, or go to one.newrelic.com and click Add more data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.0458,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " version 4, build 73: 2014-10-01 14:04:26.554 <em>Mobile</em>Demo [12345:6789012] <em>NewRelic</em> (4.73, 0x7fabc98760d0) : NRMAHarvester m:448 -NRMA ConfigureFromCollector:] ... Copy Update the agent After verifying and upgrading your agent version, follow standard <em>iOS</em> installation and <em>configuration</em> procedures, or go to one.newrelic.com and click Add more data."
      },
      "id": "603ed6e5196a67e9a7a83df9"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide": [
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.94662,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent configuration and feature flags",
        "sections": "<em>iOS</em> agent configuration and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> startWithApplicationToken:] Swift: <em>NewRelic</em>.start(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.13304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "tvOS <em>installation</em> and configuration",
        "sections": "tvOS <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " or other device. Within a few minutes you will begin to see data for your <em>iOS</em> app: Go to one.newrelic.com &gt; <em>Mobile</em> &gt; (selected app). If you don&#x27;t, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the <em>New</em> <em>Relic</em> agent provides an <em>API</em> to execute a demo"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    },
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.13304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project": [
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.8611,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "sections": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides <em>configuration</em> settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> startWithApplicationToken:] Swift: <em>NewRelic</em>.start(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "Upload dSYM files",
        "Important",
        "Identify missing dSYMs",
        "Upload dSYM files through the New Relic Mobile UI",
        "Tip",
        "Manually upload dSYM files",
        "Via Python script (agent versions 6.0.0 or higher)",
        "Via command line",
        "Troubleshooting",
        "Auto-upload failure",
        "Missing dSYMs"
      ],
      "title": "Upload dSYM files",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "3655f49cf0e1ae693de0f8ea45bf4e5e6437e399",
      "image": "https://docs.newrelic.com/static/61abd689153e075e96d57837f10e2224/c1b63/Mobile-Crash-dsym_file.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/upload-dsyms-bitcode-apps/",
      "published_at": "2021-06-25T22:49:54Z",
      "updated_at": "2021-05-16T00:56:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your app's dSYM files are stored in Xcode's dSYM archive path folder. This is the folder where New Relic Mobile gets the dSYM files that are used to symbolicate your crash reports. New Relic provides a post-build script as part of the New Relic Mobile's iOS agent's install process and the tvOS agent's install process. This script automatically uploads your app's dSYM files. Important This script uses Python 2. Starting October 2019 with macOS 10.15 (Catalina), Python won't be installed by default. If you're using the automatic script (recommended), you may need to manually install Python 2. If you're using Homebrew, see Python on Homebrew. New Relic automatically uploads dSYM files only for release builds. Non-release builds must upload their files either manually or through the New Relic Mobile UI. Bitcode-enabled apps have their dSYM files generated by Apple. You must download the dSYM files for Bitcode-enabled apps from Apple and upload them to New Relic. If you see unreadable machine code in the Crashes page, your dSYM files may not be uploaded correctly. In some cases, you may need to manually upload dSYM files. Identify missing dSYMs When a Bitcode-enabled app is uploaded to Apple for App Store review or ad-hoc distribution, dSYMs need to be manually downloaded from Apple and uploaded to New Relic to allow the mobile crash reports to be properly symbolicated. These dSYMs can be downloaded through the archives organizer in Xcode within several minutes of uploading the app. In this situation follow the procedures to find the archive and download dSYMs. If an app is missing a dSYM file, a few indicators are available in the New Relic Mobile UI: Banner notification: A banner warning appears on the Crash report page. The warning reads: We were unable to locate your dsym. Copy Upload prompt: from the Crash type summary page you will be automatically prompted to upload a dSYM file if it is missing. Machine code: The crash stack trace on the Crash report page displays machine code and not a human-readable error message. Upload dSYM files through the New Relic Mobile UI Crash analysis > Crash list > Crash type summary > Upload dSYM: You can quickly upload your dSYM files directly from the New Relic Mobile UI. You can easily upload your dSYM files directly form the New Relic Mobile UI. To upload your dSYM files: Go to one.newrelic.com and click Mobile. Then select your app from the list. View Crash analysis. Select a specific crash from the Crash types list. Click Upload dSYM. You can either drag and drop your dSYMs directly, or select the file form your computer. Tip The maximum file size is 600 MB. Manually upload dSYM files In some circumstances, New Relic's automatic upload of dSYM files may fail. If a dSYM upload is attempted and fails, it creates a build error with a detailed message. For example, if there's a network failure and the dSYM upload isn't completed, Xcode will report an error. For additional information about how New Relic handles dSYM uploads, see New Relic's Online Technical Community. If the automatic upload fails, you can manually upload your dSYM file. If you have multiple dSYM files, they can be within a single zip with a maximum file size of 600 MB. The YOUR_NEW_RELIC_APPLICATION_TOKEN value in the commands below is the same key used for +[NewRelic startWithApplicationToken:] (in Objective-C) or NewRelic.start(withApplicationToken:) (in Swift). To manually upload your dSYM files: Via Python script (agent versions 6.0.0 or higher) In iOS agent versions 6.0.0 or higher, the agent includes a Python script that automatically processes and uploads symbols. You can call this script from the command line: NewRelicAgent.framework/Resources/generateMap.py \"DSYM_ARCHIVE_PATH\" \"YOUR_NEW_RELIC_APPLICATION_TOKEN\" Copy Via command line To manually upload individual dSYM files from the command line: Zip up your dSYM file or files using the following command. Replace ~ /ZIPPED_DSYM_PATH with your new dSYM archive path and file name (for example, Users/my-name/desktop). Also replace ~ /dSYM_PATH with your existing dSYM file path. /usr/bin/zip --recurse-paths --quiet \"~/ZIPPED_DSYM_PATH\" \"~/dSYM_PATH\" Copy Upload the dSYM zip file using the following command: For a US account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.newrelic.com/symbol Copy For a EU account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.eu.newrelic.com/symbol Copy Troubleshooting Auto-upload failure If a dSYM auto-upload failed, the Report Navigator may have a fully formed cURL command. You can use this cURL command to reattempt an upload. Depending on the error, you may also need to follow some of the dSYM manual upload steps. Here is an example of a successful dSYM upload in the Report Navigator: Example: A successful dSYM upload in the Report Navigator. Missing dSYMs If dSYM files are missing, you may need to check Xcode build settings to ensure the file is being generated. Frameworks which are built locally have separate build settings and may need to be updated as well. Build settings: Debug Information Format : Dwarf with dSYM File Deployment Postprocessing: Yes Strip Linked Product: Yes Strip Debug Symbols During Copy : Yes Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.03757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Upload dSYM files through the <em>New</em> <em>Relic</em> <em>Mobile</em> UI",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Your app&#x27;s dSYM files are stored in Xcode&#x27;s dSYM archive path folder. This is the folder where <em>New</em> <em>Relic</em> <em>Mobile</em> gets the dSYM files that are used to symbolicate your crash reports. <em>New</em> <em>Relic</em> provides a post-build script as part of the <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent&#x27;s install process and the tv<em>OS</em>"
      },
      "id": "60441960e7b9d24f705799ca"
    },
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.31213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/configuration/enable-swift-interaction-traces": [
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.86108,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "sections": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides <em>configuration</em> settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> startWithApplicationToken:] Swift: <em>NewRelic</em>.start(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "Upload dSYM files",
        "Important",
        "Identify missing dSYMs",
        "Upload dSYM files through the New Relic Mobile UI",
        "Tip",
        "Manually upload dSYM files",
        "Via Python script (agent versions 6.0.0 or higher)",
        "Via command line",
        "Troubleshooting",
        "Auto-upload failure",
        "Missing dSYMs"
      ],
      "title": "Upload dSYM files",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "3655f49cf0e1ae693de0f8ea45bf4e5e6437e399",
      "image": "https://docs.newrelic.com/static/61abd689153e075e96d57837f10e2224/c1b63/Mobile-Crash-dsym_file.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/upload-dsyms-bitcode-apps/",
      "published_at": "2021-06-25T22:49:54Z",
      "updated_at": "2021-05-16T00:56:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your app's dSYM files are stored in Xcode's dSYM archive path folder. This is the folder where New Relic Mobile gets the dSYM files that are used to symbolicate your crash reports. New Relic provides a post-build script as part of the New Relic Mobile's iOS agent's install process and the tvOS agent's install process. This script automatically uploads your app's dSYM files. Important This script uses Python 2. Starting October 2019 with macOS 10.15 (Catalina), Python won't be installed by default. If you're using the automatic script (recommended), you may need to manually install Python 2. If you're using Homebrew, see Python on Homebrew. New Relic automatically uploads dSYM files only for release builds. Non-release builds must upload their files either manually or through the New Relic Mobile UI. Bitcode-enabled apps have their dSYM files generated by Apple. You must download the dSYM files for Bitcode-enabled apps from Apple and upload them to New Relic. If you see unreadable machine code in the Crashes page, your dSYM files may not be uploaded correctly. In some cases, you may need to manually upload dSYM files. Identify missing dSYMs When a Bitcode-enabled app is uploaded to Apple for App Store review or ad-hoc distribution, dSYMs need to be manually downloaded from Apple and uploaded to New Relic to allow the mobile crash reports to be properly symbolicated. These dSYMs can be downloaded through the archives organizer in Xcode within several minutes of uploading the app. In this situation follow the procedures to find the archive and download dSYMs. If an app is missing a dSYM file, a few indicators are available in the New Relic Mobile UI: Banner notification: A banner warning appears on the Crash report page. The warning reads: We were unable to locate your dsym. Copy Upload prompt: from the Crash type summary page you will be automatically prompted to upload a dSYM file if it is missing. Machine code: The crash stack trace on the Crash report page displays machine code and not a human-readable error message. Upload dSYM files through the New Relic Mobile UI Crash analysis > Crash list > Crash type summary > Upload dSYM: You can quickly upload your dSYM files directly from the New Relic Mobile UI. You can easily upload your dSYM files directly form the New Relic Mobile UI. To upload your dSYM files: Go to one.newrelic.com and click Mobile. Then select your app from the list. View Crash analysis. Select a specific crash from the Crash types list. Click Upload dSYM. You can either drag and drop your dSYMs directly, or select the file form your computer. Tip The maximum file size is 600 MB. Manually upload dSYM files In some circumstances, New Relic's automatic upload of dSYM files may fail. If a dSYM upload is attempted and fails, it creates a build error with a detailed message. For example, if there's a network failure and the dSYM upload isn't completed, Xcode will report an error. For additional information about how New Relic handles dSYM uploads, see New Relic's Online Technical Community. If the automatic upload fails, you can manually upload your dSYM file. If you have multiple dSYM files, they can be within a single zip with a maximum file size of 600 MB. The YOUR_NEW_RELIC_APPLICATION_TOKEN value in the commands below is the same key used for +[NewRelic startWithApplicationToken:] (in Objective-C) or NewRelic.start(withApplicationToken:) (in Swift). To manually upload your dSYM files: Via Python script (agent versions 6.0.0 or higher) In iOS agent versions 6.0.0 or higher, the agent includes a Python script that automatically processes and uploads symbols. You can call this script from the command line: NewRelicAgent.framework/Resources/generateMap.py \"DSYM_ARCHIVE_PATH\" \"YOUR_NEW_RELIC_APPLICATION_TOKEN\" Copy Via command line To manually upload individual dSYM files from the command line: Zip up your dSYM file or files using the following command. Replace ~ /ZIPPED_DSYM_PATH with your new dSYM archive path and file name (for example, Users/my-name/desktop). Also replace ~ /dSYM_PATH with your existing dSYM file path. /usr/bin/zip --recurse-paths --quiet \"~/ZIPPED_DSYM_PATH\" \"~/dSYM_PATH\" Copy Upload the dSYM zip file using the following command: For a US account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.newrelic.com/symbol Copy For a EU account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.eu.newrelic.com/symbol Copy Troubleshooting Auto-upload failure If a dSYM auto-upload failed, the Report Navigator may have a fully formed cURL command. You can use this cURL command to reattempt an upload. Depending on the error, you may also need to follow some of the dSYM manual upload steps. Here is an example of a successful dSYM upload in the Report Navigator: Example: A successful dSYM upload in the Report Navigator. Missing dSYMs If dSYM files are missing, you may need to check Xcode build settings to ensure the file is being generated. Frameworks which are built locally have separate build settings and may need to be updated as well. Build settings: Debug Information Format : Dwarf with dSYM File Deployment Postprocessing: Yes Strip Linked Product: Yes Strip Debug Symbols During Copy : Yes Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.03757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Upload dSYM files through the <em>New</em> <em>Relic</em> <em>Mobile</em> UI",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Your app&#x27;s dSYM files are stored in Xcode&#x27;s dSYM archive path folder. This is the folder where <em>New</em> <em>Relic</em> <em>Mobile</em> gets the dSYM files that are used to symbolicate your crash reports. <em>New</em> <em>Relic</em> provides a post-build script as part of the <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent&#x27;s install process and the tv<em>OS</em>"
      },
      "id": "60441960e7b9d24f705799ca"
    },
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.31213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/configuration/ios-tvos-crash-reporting": [
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.86108,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "sections": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides <em>configuration</em> settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> startWithApplicationToken:] Swift: <em>NewRelic</em>.start(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "Upload dSYM files",
        "Important",
        "Identify missing dSYMs",
        "Upload dSYM files through the New Relic Mobile UI",
        "Tip",
        "Manually upload dSYM files",
        "Via Python script (agent versions 6.0.0 or higher)",
        "Via command line",
        "Troubleshooting",
        "Auto-upload failure",
        "Missing dSYMs"
      ],
      "title": "Upload dSYM files",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "3655f49cf0e1ae693de0f8ea45bf4e5e6437e399",
      "image": "https://docs.newrelic.com/static/61abd689153e075e96d57837f10e2224/c1b63/Mobile-Crash-dsym_file.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/upload-dsyms-bitcode-apps/",
      "published_at": "2021-06-25T22:49:54Z",
      "updated_at": "2021-05-16T00:56:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your app's dSYM files are stored in Xcode's dSYM archive path folder. This is the folder where New Relic Mobile gets the dSYM files that are used to symbolicate your crash reports. New Relic provides a post-build script as part of the New Relic Mobile's iOS agent's install process and the tvOS agent's install process. This script automatically uploads your app's dSYM files. Important This script uses Python 2. Starting October 2019 with macOS 10.15 (Catalina), Python won't be installed by default. If you're using the automatic script (recommended), you may need to manually install Python 2. If you're using Homebrew, see Python on Homebrew. New Relic automatically uploads dSYM files only for release builds. Non-release builds must upload their files either manually or through the New Relic Mobile UI. Bitcode-enabled apps have their dSYM files generated by Apple. You must download the dSYM files for Bitcode-enabled apps from Apple and upload them to New Relic. If you see unreadable machine code in the Crashes page, your dSYM files may not be uploaded correctly. In some cases, you may need to manually upload dSYM files. Identify missing dSYMs When a Bitcode-enabled app is uploaded to Apple for App Store review or ad-hoc distribution, dSYMs need to be manually downloaded from Apple and uploaded to New Relic to allow the mobile crash reports to be properly symbolicated. These dSYMs can be downloaded through the archives organizer in Xcode within several minutes of uploading the app. In this situation follow the procedures to find the archive and download dSYMs. If an app is missing a dSYM file, a few indicators are available in the New Relic Mobile UI: Banner notification: A banner warning appears on the Crash report page. The warning reads: We were unable to locate your dsym. Copy Upload prompt: from the Crash type summary page you will be automatically prompted to upload a dSYM file if it is missing. Machine code: The crash stack trace on the Crash report page displays machine code and not a human-readable error message. Upload dSYM files through the New Relic Mobile UI Crash analysis > Crash list > Crash type summary > Upload dSYM: You can quickly upload your dSYM files directly from the New Relic Mobile UI. You can easily upload your dSYM files directly form the New Relic Mobile UI. To upload your dSYM files: Go to one.newrelic.com and click Mobile. Then select your app from the list. View Crash analysis. Select a specific crash from the Crash types list. Click Upload dSYM. You can either drag and drop your dSYMs directly, or select the file form your computer. Tip The maximum file size is 600 MB. Manually upload dSYM files In some circumstances, New Relic's automatic upload of dSYM files may fail. If a dSYM upload is attempted and fails, it creates a build error with a detailed message. For example, if there's a network failure and the dSYM upload isn't completed, Xcode will report an error. For additional information about how New Relic handles dSYM uploads, see New Relic's Online Technical Community. If the automatic upload fails, you can manually upload your dSYM file. If you have multiple dSYM files, they can be within a single zip with a maximum file size of 600 MB. The YOUR_NEW_RELIC_APPLICATION_TOKEN value in the commands below is the same key used for +[NewRelic startWithApplicationToken:] (in Objective-C) or NewRelic.start(withApplicationToken:) (in Swift). To manually upload your dSYM files: Via Python script (agent versions 6.0.0 or higher) In iOS agent versions 6.0.0 or higher, the agent includes a Python script that automatically processes and uploads symbols. You can call this script from the command line: NewRelicAgent.framework/Resources/generateMap.py \"DSYM_ARCHIVE_PATH\" \"YOUR_NEW_RELIC_APPLICATION_TOKEN\" Copy Via command line To manually upload individual dSYM files from the command line: Zip up your dSYM file or files using the following command. Replace ~ /ZIPPED_DSYM_PATH with your new dSYM archive path and file name (for example, Users/my-name/desktop). Also replace ~ /dSYM_PATH with your existing dSYM file path. /usr/bin/zip --recurse-paths --quiet \"~/ZIPPED_DSYM_PATH\" \"~/dSYM_PATH\" Copy Upload the dSYM zip file using the following command: For a US account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.newrelic.com/symbol Copy For a EU account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.eu.newrelic.com/symbol Copy Troubleshooting Auto-upload failure If a dSYM auto-upload failed, the Report Navigator may have a fully formed cURL command. You can use this cURL command to reattempt an upload. Depending on the error, you may also need to follow some of the dSYM manual upload steps. Here is an example of a successful dSYM upload in the Report Navigator: Example: A successful dSYM upload in the Report Navigator. Missing dSYMs If dSYM files are missing, you may need to check Xcode build settings to ensure the file is being generated. Frameworks which are built locally have separate build settings and may need to be updated as well. Build settings: Debug Information Format : Dwarf with dSYM File Deployment Postprocessing: Yes Strip Linked Product: Yes Strip Debug Symbols During Copy : Yes Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.03757,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Upload dSYM files through the <em>New</em> <em>Relic</em> <em>Mobile</em> UI",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Your app&#x27;s dSYM files are stored in Xcode&#x27;s dSYM archive path folder. This is the folder where <em>New</em> <em>Relic</em> <em>Mobile</em> gets the dSYM files that are used to symbolicate your crash reports. <em>New</em> <em>Relic</em> provides a post-build script as part of the <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent&#x27;s install process and the tv<em>OS</em>"
      },
      "id": "60441960e7b9d24f705799ca"
    },
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.31213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/configuration/retrieve-dsyms-bitcode-apps": [
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.86107,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "sections": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides <em>configuration</em> settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> startWithApplicationToken:] Swift: <em>NewRelic</em>.start(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "Upload dSYM files",
        "Important",
        "Identify missing dSYMs",
        "Upload dSYM files through the New Relic Mobile UI",
        "Tip",
        "Manually upload dSYM files",
        "Via Python script (agent versions 6.0.0 or higher)",
        "Via command line",
        "Troubleshooting",
        "Auto-upload failure",
        "Missing dSYMs"
      ],
      "title": "Upload dSYM files",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "3655f49cf0e1ae693de0f8ea45bf4e5e6437e399",
      "image": "https://docs.newrelic.com/static/61abd689153e075e96d57837f10e2224/c1b63/Mobile-Crash-dsym_file.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/upload-dsyms-bitcode-apps/",
      "published_at": "2021-06-25T22:49:54Z",
      "updated_at": "2021-05-16T00:56:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Your app's dSYM files are stored in Xcode's dSYM archive path folder. This is the folder where New Relic Mobile gets the dSYM files that are used to symbolicate your crash reports. New Relic provides a post-build script as part of the New Relic Mobile's iOS agent's install process and the tvOS agent's install process. This script automatically uploads your app's dSYM files. Important This script uses Python 2. Starting October 2019 with macOS 10.15 (Catalina), Python won't be installed by default. If you're using the automatic script (recommended), you may need to manually install Python 2. If you're using Homebrew, see Python on Homebrew. New Relic automatically uploads dSYM files only for release builds. Non-release builds must upload their files either manually or through the New Relic Mobile UI. Bitcode-enabled apps have their dSYM files generated by Apple. You must download the dSYM files for Bitcode-enabled apps from Apple and upload them to New Relic. If you see unreadable machine code in the Crashes page, your dSYM files may not be uploaded correctly. In some cases, you may need to manually upload dSYM files. Identify missing dSYMs When a Bitcode-enabled app is uploaded to Apple for App Store review or ad-hoc distribution, dSYMs need to be manually downloaded from Apple and uploaded to New Relic to allow the mobile crash reports to be properly symbolicated. These dSYMs can be downloaded through the archives organizer in Xcode within several minutes of uploading the app. In this situation follow the procedures to find the archive and download dSYMs. If an app is missing a dSYM file, a few indicators are available in the New Relic Mobile UI: Banner notification: A banner warning appears on the Crash report page. The warning reads: We were unable to locate your dsym. Copy Upload prompt: from the Crash type summary page you will be automatically prompted to upload a dSYM file if it is missing. Machine code: The crash stack trace on the Crash report page displays machine code and not a human-readable error message. Upload dSYM files through the New Relic Mobile UI Crash analysis > Crash list > Crash type summary > Upload dSYM: You can quickly upload your dSYM files directly from the New Relic Mobile UI. You can easily upload your dSYM files directly form the New Relic Mobile UI. To upload your dSYM files: Go to one.newrelic.com and click Mobile. Then select your app from the list. View Crash analysis. Select a specific crash from the Crash types list. Click Upload dSYM. You can either drag and drop your dSYMs directly, or select the file form your computer. Tip The maximum file size is 600 MB. Manually upload dSYM files In some circumstances, New Relic's automatic upload of dSYM files may fail. If a dSYM upload is attempted and fails, it creates a build error with a detailed message. For example, if there's a network failure and the dSYM upload isn't completed, Xcode will report an error. For additional information about how New Relic handles dSYM uploads, see New Relic's Online Technical Community. If the automatic upload fails, you can manually upload your dSYM file. If you have multiple dSYM files, they can be within a single zip with a maximum file size of 600 MB. The YOUR_NEW_RELIC_APPLICATION_TOKEN value in the commands below is the same key used for +[NewRelic startWithApplicationToken:] (in Objective-C) or NewRelic.start(withApplicationToken:) (in Swift). To manually upload your dSYM files: Via Python script (agent versions 6.0.0 or higher) In iOS agent versions 6.0.0 or higher, the agent includes a Python script that automatically processes and uploads symbols. You can call this script from the command line: NewRelicAgent.framework/Resources/generateMap.py \"DSYM_ARCHIVE_PATH\" \"YOUR_NEW_RELIC_APPLICATION_TOKEN\" Copy Via command line To manually upload individual dSYM files from the command line: Zip up your dSYM file or files using the following command. Replace ~ /ZIPPED_DSYM_PATH with your new dSYM archive path and file name (for example, Users/my-name/desktop). Also replace ~ /dSYM_PATH with your existing dSYM file path. /usr/bin/zip --recurse-paths --quiet \"~/ZIPPED_DSYM_PATH\" \"~/dSYM_PATH\" Copy Upload the dSYM zip file using the following command: For a US account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.newrelic.com/symbol Copy For a EU account: curl -F dsym=@\"~/DSYM_ZIP_PATH\" -H \"X-APP-LICENSE-KEY: YOUR_NEW_RELIC_APPLICATION_TOKEN\" https://mobile-symbol-upload.eu.newrelic.com/symbol Copy Troubleshooting Auto-upload failure If a dSYM auto-upload failed, the Report Navigator may have a fully formed cURL command. You can use this cURL command to reattempt an upload. Depending on the error, you may also need to follow some of the dSYM manual upload steps. Here is an example of a successful dSYM upload in the Report Navigator: Example: A successful dSYM upload in the Report Navigator. Missing dSYMs If dSYM files are missing, you may need to check Xcode build settings to ensure the file is being generated. Frameworks which are built locally have separate build settings and may need to be updated as well. Build settings: Debug Information Format : Dwarf with dSYM File Deployment Postprocessing: Yes Strip Linked Product: Yes Strip Debug Symbols During Copy : Yes Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.03755,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Upload dSYM files through the <em>New</em> <em>Relic</em> <em>Mobile</em> UI",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Your app&#x27;s dSYM files are stored in Xcode&#x27;s dSYM archive path folder. This is the folder where <em>New</em> <em>Relic</em> <em>Mobile</em> gets the dSYM files that are used to symbolicate your crash reports. <em>New</em> <em>Relic</em> provides a post-build script as part of the <em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent&#x27;s install process and the tv<em>OS</em>"
      },
      "id": "60441960e7b9d24f705799ca"
    },
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.31213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/configuration/upload-dsyms-bitcode-apps": [
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.86107,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "sections": "<em>iOS</em> agent <em>configuration</em> and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides <em>configuration</em> settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> startWithApplicationToken:] Swift: <em>NewRelic</em>.start(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.31213,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's iOS SDK to v4",
        "Getting started",
        "Update the agent"
      ],
      "title": "Upgrade New Relic Mobile's iOS SDK to v4",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "fc588d45a0cb0a8ef32363a12e36f10cb4bd5a41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk-v4/",
      "published_at": "2021-06-25T22:55:31Z",
      "updated_at": "2021-05-16T00:56:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the fourth major version of the iOS agent, New Relic Mobile includes crash reporting. This new feature changes the standard installation procedures, including: A post build script is required to upload dSYMs so that crash reports can be properly interpreted. An additional framework (libc++.dylib) must be added to projects including New Relic. Getting started Before upgrading to agent version 4, you must identify which agent version your app currently includes by enabling logging in the New Relic agent. The version number appears in each New Relic log message. This example shows major version 4, build 73: 2014-10-01 14:04:26.554 MobileDemo [12345:6789012] NewRelic (4.73, 0x7fabc98760d0) : NRMAHarvester m:448 -NRMA ConfigureFromCollector:] ... Copy Update the agent After verifying and upgrading your agent version, follow standard iOS installation and configuration procedures, or go to one.newrelic.com and click Add more data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.04579,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " version 4, build 73: 2014-10-01 14:04:26.554 <em>Mobile</em>Demo [12345:6789012] <em>NewRelic</em> (4.73, 0x7fabc98760d0) : NRMAHarvester m:448 -NRMA ConfigureFromCollector:] ... Copy Update the agent After verifying and upgrading your agent version, follow standard <em>iOS</em> installation and <em>configuration</em> procedures, or go to one.newrelic.com and click Add more data."
      },
      "id": "603ed6e5196a67e9a7a83df9"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios": [
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.48468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "tvOS <em>installation</em> and configuration",
        "sections": "tvOS <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>Relic</em> <em>Mobile</em>.) Go to one.newrelic.com and click <em>Mobile</em>. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app From the <em>Get</em> <em>Started</em> page, select tv<em>OS</em> as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, and select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em>"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    },
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.94658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent configuration and feature flags",
        "sections": "<em>iOS</em> agent configuration and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> <em>start</em>WithApplicationToken:] Swift: <em>NewRelic.start</em>(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "CocoaPods installation",
        "Tip",
        "Install your iOS application",
        "Configure using Objective-C",
        "Important",
        "Configure using Swift",
        "Change the logging level (optional)"
      ],
      "title": "CocoaPods installation",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "9a062745f628f66e34f865a47d58713f12e59ac9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/cocoapods-installation/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-16T09:54:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These procedures apply to iOS apps using Cocoapods. For other types, see iOS installation and configuration. Tip To use mobile monitoring and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Install your iOS application As part of the installation process, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. To install and configure your iOS application: Go to one.newrelic.com. If applicable: From the Mobile Apps list, select Add a new app. From the Get Started page, select iOS as the platform for mobile monitoring. Type a name for your mobile app, then select Continue. Continue with the steps to configure New Relic for mobile monitoring. Configure using Objective-C These procedures to configure your iOS app with CocoaPods and Objective-C also appear on the Get Started page in New Relic. In the Podfile for your project, add the following line: pod 'NewRelicAgent' Copy Close your project in Xcode, and update it by running this command from the Terminal in your project directory: pod install Copy Open your project in Xcode by running this command from the Terminal in your project directory: open App.xcworkspace Copy In your APP_NAME-Prefix.pch project file (generally found in the Supporting Files folder), include the New Relic header inside the #ifdef __OBJC__ #endif block: #import <NewRelic/NewRelic.h> Copy In your AppDelegate.m file, add this call as the first line of application:didFinishLaunchingWithOptions, replacing APP_TOKEN with your application token: [NewRelic startWithApplicationToken:@\"APP_TOKEN\"]; Copy Important The agent must be on the first line of didFinishLaunchingWithOptions and run on the main thread to ensure proper instrumentation. Starting the call later, on a background thread, or asynchronously can cause unexpected or unstable behavior. Add a build script to your target's Build Phases. Ensure the new build script is the very last build script. Then paste the following, replacing APP_TOKEN with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"APP_TOKEN\" Copy Clean and build your app, then run it in the simulator or other device. Configure using Swift These procedures to configure your iOS app with CocoaPods and Swift also appear on the Get Started page in New Relic. In the Podfile for your project, add the following line: pod 'NewRelicAgent' Copy Close your project in Xcode, and update it by running this command from the Terminal in your project directory: pod install Copy Open your project in Xcode by running this command from the Terminal in your project directory: open App.xcworkspace Copy Create a bridging header: Select File > New > File > Objective-C File. Name the file Placeholder.m, then select Next. Select Create, and confirm Xcode's prompt to generate the bridging header. In your APP_NAME-Bridging-Header.h, add the New Relic header: #import \"NewRelic/NewRelic.h\" Copy In your AppDelegate.swift file, add this call as the first line of application:didFinishLaunchingWithOptions, replacing APP_TOKEN with your application token: NewRelic.start(withApplicationToken:\"APP_TOKEN\") Copy Important To ensure proper instrumentation, you must call the agent on the first line of didFinishLaunchingWithOptions(), and run the agent on the main thread. Starting the call later, on a background thread, or asynchronously can cause unexpected or unstable behavior. Add a build script to your target's Build Phases. Ensure the new build script is the very last build script. Then paste the following, replacing APP_TOKEN with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"APP_TOKEN\" Copy Clean and build your app, then run it in the simulator or other device. Change the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling NewRelic.start(withApplicationToken): [NRLogger setLogLevels:NRLogLevelALL]; Copy For Swift apps: NRLogger.setLogLevels(NRLogLevelALL.rawValue) Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.95805,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "CocoaPods <em>installation</em>",
        "sections": "<em>Install</em> your <em>iOS</em> application",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " application: Go to one.newrelic.com. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app. From the <em>Get</em> <em>Started</em> page, select <em>iOS</em> as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, then select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em> for <em>mobile</em> <em>monitoring</em>"
      },
      "id": "603ea15d64441fef3d4e8867"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/get-started/new-relic-ios-compatibility-requirements": [
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 143.48468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "tvOS <em>installation</em> and configuration",
        "sections": "tvOS <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>Relic</em> <em>Mobile</em>.) Go to one.newrelic.com and click <em>Mobile</em>. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app From the <em>Get</em> <em>Started</em> page, select tv<em>OS</em> as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, and select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em>"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 138.07903,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " that you <em>monitor</em> in <em>New</em> <em>Relic</em> <em>Mobile</em>. There are two ways you can install <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>: <em>New</em> <em>Relic</em> recommends that you install and configure <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em> using the CocoaPods installation method. You can also manually install and configure <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em> by adding the <em>New</em>"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    },
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.94658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent configuration and feature flags",
        "sections": "<em>iOS</em> agent configuration and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> <em>start</em>WithApplicationToken:] Swift: <em>NewRelic.start</em>(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/installation/cocoapods-installation": [
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.86046,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's iOS SDK to v4",
        "Getting started",
        "Update the agent"
      ],
      "title": "Upgrade New Relic Mobile's iOS SDK to v4",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "fc588d45a0cb0a8ef32363a12e36f10cb4bd5a41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk-v4/",
      "published_at": "2021-06-25T22:55:31Z",
      "updated_at": "2021-05-16T00:56:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the fourth major version of the iOS agent, New Relic Mobile includes crash reporting. This new feature changes the standard installation procedures, including: A post build script is required to upload dSYMs so that crash reports can be properly interpreted. An additional framework (libc++.dylib) must be added to projects including New Relic. Getting started Before upgrading to agent version 4, you must identify which agent version your app currently includes by enabling logging in the New Relic agent. The version number appears in each New Relic log message. This example shows major version 4, build 73: 2014-10-01 14:04:26.554 MobileDemo [12345:6789012] NewRelic (4.73, 0x7fabc98760d0) : NRMAHarvester m:448 -NRMA ConfigureFromCollector:] ... Copy Update the agent After verifying and upgrading your agent version, follow standard iOS installation and configuration procedures, or go to one.newrelic.com and click Add more data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.0322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "With the fourth major version of the <em>iOS</em> agent, <em>New</em> <em>Relic</em> <em>Mobile</em> includes crash reporting. This <em>new</em> feature changes the standard <em>installation</em> procedures, including: A post build script is required to upload dSYMs so that crash reports can be properly interpreted. An additional framework (libc"
      },
      "id": "603ed6e5196a67e9a7a83df9"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's iOS SDK",
        "Replace your iOS framework"
      ],
      "title": "Upgrade New Relic Mobile's iOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "f51e93fbddfa6fd7b531f2b8dc071cfebb8c7fc9",
      "image": "https://docs.newrelic.com/static/ce6f593163d7f9a6c7a72509d4d947bd/8c557/screen-mobile-monitoring-upgrade-ios_0.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk/",
      "published_at": "2021-06-25T23:15:18Z",
      "updated_at": "2021-05-15T19:10:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your iOS applications. For information about the latest version, refer to the release notes. Replace your iOS framework Admins: You must replace the earlier version of your iOS agent framework before upgrading to a newer version of the iOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing iOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgent.framework. Right-click or control-click NewRelicAgent.framework, and select Show in Finder. Drag NewRelicAgent.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgent.framework in red. Right-click or control-click NewRelicAgent.framework, and select Delete to remove the obsolete reference from the project. Continue with the standard installation procedures for iOS app monitoring at one.newrelic.com > Mobile > (select an app) > Settings > Installation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.90411,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>NewRelic</em>Agent.framework, and select Show in Finder. Drag <em>NewRelic</em>Agent.framework to the trash. Verify that the Xcode project highlights the reference to <em>NewRelic</em>Agent.framework in red. Right-click or control-click <em>NewRelic</em>Agent.framework, and select Delete to remove the obsolete reference from the project. Continue with the standard <em>installation</em> procedures for <em>iOS</em> app <em>monitoring</em> at one.newrelic.com &gt; <em>Mobile</em> &gt; (select an app) &gt; Settings &gt; <em>Installation</em>."
      },
      "id": "603eab6a196a672442a83da7"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/installation/ios-manual-installation": [
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.86046,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's iOS SDK to v4",
        "Getting started",
        "Update the agent"
      ],
      "title": "Upgrade New Relic Mobile's iOS SDK to v4",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "fc588d45a0cb0a8ef32363a12e36f10cb4bd5a41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk-v4/",
      "published_at": "2021-06-25T22:55:31Z",
      "updated_at": "2021-05-16T00:56:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the fourth major version of the iOS agent, New Relic Mobile includes crash reporting. This new feature changes the standard installation procedures, including: A post build script is required to upload dSYMs so that crash reports can be properly interpreted. An additional framework (libc++.dylib) must be added to projects including New Relic. Getting started Before upgrading to agent version 4, you must identify which agent version your app currently includes by enabling logging in the New Relic agent. The version number appears in each New Relic log message. This example shows major version 4, build 73: 2014-10-01 14:04:26.554 MobileDemo [12345:6789012] NewRelic (4.73, 0x7fabc98760d0) : NRMAHarvester m:448 -NRMA ConfigureFromCollector:] ... Copy Update the agent After verifying and upgrading your agent version, follow standard iOS installation and configuration procedures, or go to one.newrelic.com and click Add more data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.0322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "With the fourth major version of the <em>iOS</em> agent, <em>New</em> <em>Relic</em> <em>Mobile</em> includes crash reporting. This <em>new</em> feature changes the standard <em>installation</em> procedures, including: A post build script is required to upload dSYMs so that crash reports can be properly interpreted. An additional framework (libc"
      },
      "id": "603ed6e5196a67e9a7a83df9"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's iOS SDK",
        "Replace your iOS framework"
      ],
      "title": "Upgrade New Relic Mobile's iOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "f51e93fbddfa6fd7b531f2b8dc071cfebb8c7fc9",
      "image": "https://docs.newrelic.com/static/ce6f593163d7f9a6c7a72509d4d947bd/8c557/screen-mobile-monitoring-upgrade-ios_0.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk/",
      "published_at": "2021-06-25T23:15:18Z",
      "updated_at": "2021-05-15T19:10:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your iOS applications. For information about the latest version, refer to the release notes. Replace your iOS framework Admins: You must replace the earlier version of your iOS agent framework before upgrading to a newer version of the iOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing iOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgent.framework. Right-click or control-click NewRelicAgent.framework, and select Show in Finder. Drag NewRelicAgent.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgent.framework in red. Right-click or control-click NewRelicAgent.framework, and select Delete to remove the obsolete reference from the project. Continue with the standard installation procedures for iOS app monitoring at one.newrelic.com > Mobile > (select an app) > Settings > Installation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.90411,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>NewRelic</em>Agent.framework, and select Show in Finder. Drag <em>NewRelic</em>Agent.framework to the trash. Verify that the Xcode project highlights the reference to <em>NewRelic</em>Agent.framework in red. Right-click or control-click <em>NewRelic</em>Agent.framework, and select Delete to remove the obsolete reference from the project. Continue with the standard <em>installation</em> procedures for <em>iOS</em> app <em>monitoring</em> at one.newrelic.com &gt; <em>Mobile</em> &gt; (select an app) &gt; Settings &gt; <em>Installation</em>."
      },
      "id": "603eab6a196a672442a83da7"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk-v4": [
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.86046,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's iOS SDK",
        "Replace your iOS framework"
      ],
      "title": "Upgrade New Relic Mobile's iOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "f51e93fbddfa6fd7b531f2b8dc071cfebb8c7fc9",
      "image": "https://docs.newrelic.com/static/ce6f593163d7f9a6c7a72509d4d947bd/8c557/screen-mobile-monitoring-upgrade-ios_0.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk/",
      "published_at": "2021-06-25T23:15:18Z",
      "updated_at": "2021-05-15T19:10:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your iOS applications. For information about the latest version, refer to the release notes. Replace your iOS framework Admins: You must replace the earlier version of your iOS agent framework before upgrading to a newer version of the iOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing iOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgent.framework. Right-click or control-click NewRelicAgent.framework, and select Show in Finder. Drag NewRelicAgent.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgent.framework in red. Right-click or control-click NewRelicAgent.framework, and select Delete to remove the obsolete reference from the project. Continue with the standard installation procedures for iOS app monitoring at one.newrelic.com > Mobile > (select an app) > Settings > Installation.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.90411,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>NewRelic</em>Agent.framework, and select Show in Finder. Drag <em>NewRelic</em>Agent.framework to the trash. Verify that the Xcode project highlights the reference to <em>NewRelic</em>Agent.framework in red. Right-click or control-click <em>NewRelic</em>Agent.framework, and select Delete to remove the obsolete reference from the project. Continue with the standard <em>installation</em> procedures for <em>iOS</em> app <em>monitoring</em> at one.newrelic.com &gt; <em>Mobile</em> &gt; (select an app) &gt; Settings &gt; <em>Installation</em>."
      },
      "id": "603eab6a196a672442a83da7"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.22716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "tvOS <em>installation</em> and configuration",
        "sections": "tvOS <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " or other device. Within a few minutes you will begin to see data for your <em>iOS</em> app: Go to one.newrelic.com &gt; <em>Mobile</em> &gt; (selected app). If you don&#x27;t, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the <em>New</em> <em>Relic</em> agent provides an API to execute a demo"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk": [
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 152.86046,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> tvOS SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your tv<em>OS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your tv<em>OS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "Upgrade New Relic Mobile's iOS SDK to v4",
        "Getting started",
        "Update the agent"
      ],
      "title": "Upgrade New Relic Mobile's iOS SDK to v4",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Installation"
      ],
      "external_id": "fc588d45a0cb0a8ef32363a12e36f10cb4bd5a41",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/installation/upgrade-new-relic-mobiles-ios-sdk-v4/",
      "published_at": "2021-06-25T22:55:31Z",
      "updated_at": "2021-05-16T00:56:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With the fourth major version of the iOS agent, New Relic Mobile includes crash reporting. This new feature changes the standard installation procedures, including: A post build script is required to upload dSYMs so that crash reports can be properly interpreted. An additional framework (libc++.dylib) must be added to projects including New Relic. Getting started Before upgrading to agent version 4, you must identify which agent version your app currently includes by enabling logging in the New Relic agent. The version number appears in each New Relic log message. This example shows major version 4, build 73: 2014-10-01 14:04:26.554 MobileDemo [12345:6789012] NewRelic (4.73, 0x7fabc98760d0) : NRMAHarvester m:448 -NRMA ConfigureFromCollector:] ... Copy Update the agent After verifying and upgrading your agent version, follow standard iOS installation and configuration procedures, or go to one.newrelic.com and click Add more data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.03218,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "sections": "Upgrade <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>iOS</em> SDK to v4",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "With the fourth major version of the <em>iOS</em> agent, <em>New</em> <em>Relic</em> <em>Mobile</em> includes crash reporting. This <em>new</em> feature changes the standard <em>installation</em> procedures, including: A post build script is required to upload dSYMs so that crash reports can be properly interpreted. An additional framework (libc"
      },
      "id": "603ed6e5196a67e9a7a83df9"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 148.22716,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "tvOS <em>installation</em> and configuration",
        "sections": "tvOS <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " or other device. Within a few minutes you will begin to see data for your <em>iOS</em> app: Go to one.newrelic.com &gt; <em>Mobile</em> &gt; (selected app). If you don&#x27;t, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the <em>New</em> <em>Relic</em> agent provides an API to execute a demo"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/crashnow-ios-sdk-api": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.2067,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/current-session-id": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.2067,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/increment-attribute": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20667,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/index": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1422.4397,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "New Relic Mobile <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1277.6323,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "New Relic Mobile <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for New Relic Mobile requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; New &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 1209.0546,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to New Relic Mobile for <em>iOS</em>",
        "sections": "<em>Introduction</em> to New Relic Mobile for <em>iOS</em>",
        "tags": "New Relic Mobile <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/record-breadcrumb": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/record-handled-exception": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/recordcustomevent-ios-sdk-api": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/recorderror-ios-sdk-api": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20663,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87405,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/recordmetric-ios-sdk-api": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.2066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/remove-all-attributes": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.2066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61517,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/remove-attribute": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61516,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/set-attribute": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20657,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61516,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/set-max-event-buffer-time": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20656,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61516,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/set-max-event-pool-size": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20654,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61516,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/ios-sdk-api/set-user-id": [
    {
      "sections": [
        "iOS SDK API guide",
        "Caution",
        "Install the SDK",
        "Automatically instrumented classes and methods",
        "Instrument your Objective-C code",
        "Important",
        "Create and complete interactions",
        "Rename a default interaction",
        "Set a custom application version",
        "Set a custom build identifier",
        "Create custom metrics",
        "Objective-C: Report custom attributes and events",
        "Objective-C: Track custom network requests",
        "Instrument your Swift code",
        "Create and complete Swift interactions",
        "Rename a default Swift interaction",
        "Set a custom application version with Swift",
        "Set a custom build identifier with Swift",
        "Create custom metrics with Swift",
        "Swift: Report custom attributes and events",
        "Swift: Track custom network requests"
      ],
      "title": "iOS SDK API guide",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "API guides"
      ],
      "external_id": "fe6ba3196a927fb8dee72f8bf777461c95f7505c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-sdk-api-guide/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Use the iOS SDK API for New Relic Mobile to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your mobile app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically. Set a custom identifier value with Objective-C or Swift to associate user sessions with analysis events and attributes (iOS SDK version 5.9.0 or higher). Caution Tracing is heavily optimized, but it does impose a performance overhead. Avoid instrumenting methods that are expected to be called hundreds of times. Install the SDK Ensure you have your app instrumented with the latest New Relic Mobile SDK by going to one.newrelic.com > Add more data and following the instructions for iOS. This document contains the iOS SDK instrumentation requirements for: Objective C Swift For details about the available methods for custom attributes and events you can send to to New Relic Insights, see the iOS SDK API reference. You can also configure feature flags for: Objective-C Swift Automatically instrumented classes and methods The following methods (for the listed classes and their sub-classes) are already instrumented by New Relic. You do not need to add custom instrumentation to trace them. Classes Methods automatically instrumented by New Relic UIViewController viewDidLoad: viewWillAppear: viewDidAppear: viewWillDisappear: viewDidDisappear: viewWillLayoutSubviews: viewDidLayoutSubviews: UIImage imageNamed: imageWithContentsOfFile: imageWithData: imageWithData:scale: initWithContentsOfFile: initWithData: initWithData:scale: NSJSONSerialization JSONObjectWithData:options:error: JSONObjectWithStream:options:error: dataWithJSONObject:options:error: writeJSONObject:toStream:options:error: NSManagedObjectContext executeFetchRequest:error: processPendingChanges New Relic Mobile aggregates performance for various methods into summary metrics that appear in New Relic Mobile's Interactions page. Summary categories include: View loading UI layout Database Images JSON Network Instrument your Objective-C code To have your own Objective-C code appear in interaction code breakdowns and timelines, add a _START call to the beginning of your method and a _STOP call to the end of it. Important Always include a _STOP for each _START, and only include one set of these commands in a given method. The trace system will automatically pick up the class and method name, and report performance metrics for your method to New Relic Mobile. - (void)myMethod { NR_TRACE_METHOD_START(0); // … existing code NR_TRACE_METHOD_STOP; } Copy If you are not using ARC, use this version of the _STOP macro to avoid memory leaks: NR_NONARC_TRACE_METHOD_STOP; Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the _START macro; for example: NR_TRACE_METHOD_START(NRTraceTypeDatabase); Copy Create and complete interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction with Objective-C, use these API calls: NSString* uniqueIdentifier = NR_START_NAMED_INTERACTION(@\"name\"); Copy This macro will automatically begin tracking the name interaction trace from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NR_INTERACTION_STOP(uniqueIdentifier); Copy This macro will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names with Objective-C, implement the - (NSString*) customNewRelicInteractionName instance method in your view controller, where the string returned becomes the interaction's name. Set a custom application version The New Relic iOS SDK allows you to set a custom application version string with Objective-C. Instead of using the string defined in CFBundleShortVersionString, call the +[NewRelic setApplicationVersion:] method and pass along the custom application version before calling +[NewRelic startWithApplicationToken:]; [NewRelic setApplicationVersion:(NSString*) appVersion]; Copy Set a custom build identifier As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode with Objective-C, call the +[NewRelic setApplicationBuild:] method, and pass along the custom build identifier. [NewRelic setApplicationBuild:(NSString*) buildNumber]; Copy Create custom metrics Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Objective-C: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Objective-C, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Objective-C: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: [NewRelic noticeNetworkRequestForURL:(NSURL*)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer responseHeaders:(NSDictionary *)headers statusCode:(NSInteger)httpStatusCode bytesSent:(NSUInteger)bytesSent bytesReceived:(NSUInteger)bytesReceived responseData:(NSData *)responseData andParams:(NSDictionary *)params]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: [NewRelic noticeNetworkFailureForURL:(NSURL *)url httpMethod:(NSString*)httpMethod withTimer:(NRTimer *)timer andFailureCode:(NSInteger)iOSFailureCode]; Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h. Instrument your Swift code To have your own Swift code appear in interaction code breakdowns and timelines: Add a startTracingMethod() call to the beginning of your method. Add a endTracingMethodWithTimer() call to the end of it. Always include an endTracingMethodWithTimer() call for each startTracingMethod() reference. Include only one set of these commands in a given method. func myMethod(){ let timer = NRTimer(); NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeNone) // … existing code NewRelic.endTracingMethodWithTimer(timer) } Copy If you want your method’s performance to be included in the summary data on the APM Overview page, pass one of the NRTraceType enum values into the startTracingMethod() macro; for example: NewRelic.startTracingMethod(#selector(MyClass.myMethod), object: self, timer: timer, category: NRTraceTypeDatabase) Copy Create and complete Swift interactions By default, an interaction starts when a view controller is pushed. To manually start an interaction, use these API calls: let uniqueIdentifier = NewRelic.startInteraction(withName: \"My Interaction\") Copy This call will automatically begin tracking an interaction trace named My Interaction from the current line. It will also complete any previously running interaction. It returns a unique identifier that can be used to complete that interaction by using this API call: NewRelic.stopCurrentInteraction(uniqueIdentifier) Copy This method will complete the interaction associated with the uniqueIdentifier if that interaction has not already completed automatically. You do not need to call this method. Rename a default Swift interaction By default, the iOS agent will start an interaction trace when a new view controller is displayed. The interactions are named using the format Display <ViewController>. To change these default names, implement the @objc func customNewRelicInteractionName() -> String method in your view controller, where the string returned becomes the interaction's name. Set a custom application version with Swift The New Relic iOS SDK allows you to set a custom application version string. Instead of using the string defined in CFBundleShortVersionString, call the NewRelic.setApplicationVersion() method, and pass along the custom application version before calling NewRelic.startWithApplicationToken();. NewRelic.setApplicationVersion(String appVersion) Copy Set a custom build identifier with Swift As of version 5.1.0 of the New Relic iOS SDK, an API method allows you to set a custom build identifier that is displayed next to the application version in New Relic Mobile's Crash details page. Instead of using the CFBundleVersion string defined in Xcode, call the NewRelic.setApplicationBuild() method, and pass along the custom build identifier. NewRelic.setApplicationBuild(buildNumber) Copy Create custom metrics with Swift Custom metrics can help track high level events specific to your application. With the recordMetric API, you can record arbitrary numerical data and named events with Objective-C and Swift. You can also use several API calls to record custom metrics that provide different levels of detail. Swift: Report custom attributes and events Use methods in the NewRelic object to report custom attributes and events. For details about the available methods for custom attributes and events with Swift, see the iOS SDK API reference. Methods that return BOOL results return YES if they succeed, or NO if the operation did not complete. These methods are available in versions 5.0.0 or higher of the New Relic iOS SDK. The SDK can store up to 128 user-defined custom attributes at a time. If you attempt to store more than 128 attributes, the SDK returns NO. Custom attributes names should use the simplest format needed, and New Relic recommends single word attributes, containing no spaces. Attribute phrases can be formatted in camel case, so My Custom Attribute is better specified as myCustomAttribute. As with custom metrics: Avoid using the characters / ] [ | * when naming things. Avoid multi-byte characters. Swift: Track custom network requests If you can express a transactional network request in terms similar to an HTTP request, you can track it in New Relic Mobile. Use URLs that are well-formed and do not include highly variable paths or hostnames. For requests that complete, use this method: NewRelic.noticeNetworkRequestForURL(url: NSURL!, httpMethod: String!, withTimer: NRTimer!, responseHeaders:[NSObject : AnyObject]!, statusCode: Int, bytesSent: UInt, bytesReceived: UInt, responseData: NSData!, andParams: [NSObject : AnyObject]!) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request headers A dictionary containing the HTTP response headers, if available httpStatusCode The response status code If the httpStatusCode is greater than or equal to 400, New Relic Mobile will record a server error and may capture the responseData body if provided. bytesSent The size of the request body bytesReceived The size of the responseBody responseData The response body data, captured if New Relic Mobile records Server error params params Additional parameters included in an HTTP error metric if the HTTP transaction is an error For requests that fail due to a socket or operating system error, use this method: NewRelic.noticeNetworkFailureForURL(url: NSURL!, httpMethod: NSString!, withTimer: NRTimer!, andFailureCode: Int) Copy Parameters include: Parameter Description url The URL of the request httpMethod The method type of the request; for example, POST, GET, etc. timer An NRTimer that timed the network request iOSFailureCode The failure code Failure codes are interpreted as NSURLError* code. To view a complete list of the codes that New Relic Mobile supports, see NRConstants.h.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 249.20654,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "sections": "<em>iOS</em> <em>SDK</em> <em>API</em> guide",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to add custom data. For example: Instrument your own code. Start and stop interaction traces from events in your <em>mobile</em> app. Record custom metrics. Send custom attributes and events to Insights. Track networking from libraries not supported automatically"
      },
      "id": "603eb3a2e7b9d264f02a07a8"
    },
    {
      "sections": [
        "Adding a prefix header to an iOS project"
      ],
      "title": "Adding a prefix header to an iOS project",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "11df0352a96527157fdd932f7a5bacf0beb8a0ae",
      "image": "https://docs.newrelic.com/static/89991d3f20208fe696e48b3143745df9/8c557/screen-ios-sdk-api-prefix-header.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/configuration/adding-prefix-header-ios-project/",
      "published_at": "2021-06-25T23:14:20Z",
      "updated_at": "2021-03-11T11:21:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The iOS SDK API for New Relic Mobile requires modification of your project's prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File > New > File... From iOS template options, select Other > PCH file. Name the file < target_name>-Prefix.pch, and then select Create. From your target’s Build settings, select All, and then add the following to the Prefix Header field: $(SRCROOT)/<target_name>-Prefix.pch Copy Here is an example of using Xcode to add a Prefix Header file to your iOS project for the New Relic Mobile iOS SDK API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.61516,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Adding a prefix header to an <em>iOS</em> project",
        "sections": "Adding a prefix header to an <em>iOS</em> project",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "The <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> requires modification of your project&#x27;s prefix header. If your project does not have one, follow these steps to add it. From your Xcode menu, select File &gt; <em>New</em> &gt; File... From <em>iOS</em> template options, select Other &gt; PCH file. Name the file &lt; target_name&gt;-Prefix.pch"
      },
      "id": "6044195fe7b9d2f201579a09"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 222.87404,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": ". <em>iOS</em> <em>SDK</em> <em>API</em> Use the <em>iOS</em> <em>SDK</em> <em>API</em> for <em>New</em> <em>Relic</em> <em>Mobile</em> to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in <em>New</em> <em>Relic</em> Insights. Handled exceptions Report exceptions so you can identify factors creating a poor <em>mobile</em> app experience"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/troubleshoot/no-data-appears-ios": [
    {
      "sections": [
        "iOS agent configuration and feature flags",
        "Tip",
        "Enable or disable feature flags",
        "Crash and error reporting feature flag",
        "NRFeatureFlag_CrashReporting",
        "NRFeatureFlag_HandledExceptionEvents",
        "Distributed tracing",
        "NRFeatureFlag_DistributedTracing",
        "Interactions feature flags",
        "NRFeatureFlag_DefaultInteractions",
        "NRFeatureFlag_InteractionTracing",
        "NRFeatureFlag_SwiftInteractionTracing",
        "Caution",
        "Networking feature flags",
        "NRFeatureFlag_ExperimentalNetworkingInstrumentation",
        "NRFeatureFlag_NSURLSessionInstrumentation",
        "NRFeatureFlag_NetworkRequestEvents",
        "NRFeatureFlag_RequestErrorEvents",
        "NRFeatureFlag_HttpResponseBodyCapture"
      ],
      "title": "iOS agent configuration and feature flags",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Configuration"
      ],
      "external_id": "8ced2dac1fbc45a65d6cdca6b27a4db001d6a4db",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/api-guides/ios-agent-configuration-feature-flags/",
      "published_at": "2021-06-25T22:42:55Z",
      "updated_at": "2021-06-03T12:15:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile's iOS agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[NewRelic startWithApplicationToken:] Swift: NewRelic.start(withApplicationToken:) Tip For an explanation of Mobile custom data types, see Add custom data to New Relic Mobile. Enable or disable feature flags To configure feature flags, use the following method defined in NewRelic.h: iOS language Procedure Objective-C In Objective-C, these features are bitmasked, so you can use a | to enable or disable multiple features at the same time. Enable a feature flag: +[NewRelic enableFeatures:(NRMAFeatureFlags)flags]; Copy Disable a feature flag: +[NewRelic disableFeatures:(NRMAFeatureFlags)flags]; Copy Here is an example where: Interaction tracing and experimental networking instrumentation are enabled. NSURLSession instrumentation and crash reporting are disabled. [NewRelic enableFeatures:NRFeatureFlag_SwiftInteractionTracing | NRFeatureFlag_ExperimentalNetworkingInstrumentation]; [NewRelic disableFeatures:NRFeatureFlag_NSURLSessionInstrumentation | NRFeatureFlag_CrashReporting]; [NewRelic startWithApplicationToken:...]; Copy Swift Enable a feature flag: NewRelic.enableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Disable a feature flag: NewRelic.disableFeatures(NRMAFeatureFlags.[NRMAFeatureFlag]) Copy Example to disable interaction tracing: NewRelic.disableFeatures(NRMAFeatureFlags.NRFeatureFlag_DefaultInteractions) Copy Crash and error reporting feature flag If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_CrashReporting Enable (default) or disable crash reporting, which appears on New Relic Mobile's Crash analysis page. Type Boolean Default true NRFeatureFlag_HandledExceptionEvents Globally enable (default) or disable recording handled exceptions events, which appear on the Handled exception page. Type Boolean Default true Distributed tracing NRFeatureFlag_DistributedTracing Enable or disable the adding of distributed tracing headers to network requests. Refer to How New Relic distributed tracing works for more information on distributed tracing in mobile apps. Type Boolean Default true Interactions feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_DefaultInteractions Enable (default) or disable interaction tracing only for default instrumented classes and methods. Custom interactions will be reported. The traces will appear on the Mobile Interactions page. Type Boolean Default true NRFeatureFlag_InteractionTracing Globally enable (default) or disable interaction traces, which appear on the Mobile Interactions page. Interaction tracing will be disabled after the agent has started. Interactions for any activity or methods executed prior to starting the agent may still appear on the Interactions page. Type Boolean Default true NRFeatureFlag_SwiftInteractionTracing Caution Before enabling this feature, see Enable Swift interaction traces. If proper steps are not taken, enabling this feature may cause instability. Enable or disable (default) interaction tracing for Swift code. The traces appear on the Mobile Interactions page. This feature will always be disabled if NRFeatureFlag_InteractionTracing is disabled. Type Boolean Default false Networking feature flags If used, be sure to call the feature flag before the New Relic iOS agent start call. NRFeatureFlag_ExperimentalNetworkingInstrumentation Caution Enabling this feature flag call may decrease the stability of applications. Avoid using unless instructed by New Relic. Enable or disable (default) experimental networking instrumentation. This forces all NSURLConnection network requests through the NRMAURProtocol. Type Boolean Default false NRFeatureFlag_NSURLSessionInstrumentation Enable (default) or disable networking instrumentation for NSURLSession. These URL traces are sent to the HTTP Requests page. Type Boolean Default true NRFeatureFlag_NetworkRequestEvents Enable or disable (default) networking instrumentation. This sends the HTTP response data as MobileRequest events. Available for iOS Agent version 5.14.0 and higher Type Boolean Default true - Enabled by default as of 6.0.0 NRFeatureFlag_RequestErrorEvents Enable (default) or disable HTTP request error event generation of instrumented network calls that result in an error or failure. These events are reported as MobileRequestError events. Available for iOS Agent version 5.11.0 and higher Type Boolean Default true NRFeatureFlag_HttpResponseBodyCapture Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events. Type Boolean Default true",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 135.94646,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>iOS</em> agent configuration and feature flags",
        "sections": "<em>iOS</em> agent configuration and feature flags",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "<em>New</em> <em>Relic</em> <em>Mobile</em>&#x27;s <em>iOS</em> agent provides configuration settings to change the default behavior of the agent. If used, implement these flags just before calling: Objective-C: +[<em>NewRelic</em> startWithApplicationToken:] Swift: <em>NewRelic</em>.start(withApplicationToken:) Tip For an explanation of <em>Mobile</em> custom data"
      },
      "id": "60441925196a67324d960f1b"
    },
    {
      "sections": [
        "Introduction to New Relic Mobile for iOS",
        "Compatibility and requirements",
        "Install the agent",
        "Extend your instrumentation",
        "Troubleshoot your installation"
      ],
      "title": "Introduction to New Relic Mobile for iOS",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "Get started"
      ],
      "external_id": "243234aeaa02a13856775f6f154cab24a1e5db26",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/get-started/introduction-new-relic-mobile-ios/",
      "published_at": "2021-06-27T01:53:19Z",
      "updated_at": "2021-03-10T02:05:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile for iOS monitors your mobile app, giving you a comprehensive view of your app's performance. It works for iOS apps written using Objective-C, Swift, or both languages. For a general overview of New Relic Mobile functionality, see Introduction to New Relic Mobile. Compatibility and requirements Before you install New Relic Mobile for iOS, review the compatibility and requirements. Install the agent As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app that you monitor in New Relic Mobile. There are two ways you can install New Relic Mobile for iOS: New Relic recommends that you install and configure New Relic Mobile for iOS using the CocoaPods installation method. You can also manually install and configure New Relic Mobile for iOS by adding the New Relic framework to your app. Extend your instrumentation After you install the agent, extend the agent's instrumentation by using the New Relic Mobile UI and following up on information in New Relic Insights. To access: In New Relic Mobile: In New Relic Insights: Custom data Create and record custom events, interaction traces, and attributes to add details to your existing data and traces. Then, view the custom events that you created in New Relic Insights. Network requests Enable the MobileRequest event feature so you can perform a full network analysis. To further investigate network request error rates and response times, query MobileRequest and MobileRequestError events. Crash analysis Review detailed information using groups and filters to analyze trends that lead to crashes. To view more information about crashes, create NRQL queries to review Insights charts related to crash data. iOS SDK API Use the iOS SDK API for New Relic Mobile to instrument parts of your code that are not instrumented by default. Then, view those custom events and attributes in New Relic Insights. Handled exceptions Report exceptions so you can identify factors creating a poor mobile app experience. To further improve performance, review MobileHandledException event records in New Relic Insights. Breadcrumbs Boost the level of detail in crash event trails by adding breadcrumbs. Then, query MobileBreadcrumbs events to see all breadcrumbs or just breadcrumbs related to crashes. Troubleshoot your installation If New Relic Mobile for iOS isn't reporting data, try these troubleshooting suggestions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 129.52069,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "sections": "<em>Introduction</em> to <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " that you <em>monitor</em> in <em>New</em> <em>Relic</em> <em>Mobile</em>. There are two ways you can install <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em>: <em>New</em> <em>Relic</em> recommends that you install and configure <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em> using the CocoaPods installation method. You can also manually install and configure <em>New</em> <em>Relic</em> <em>Mobile</em> for <em>iOS</em> by adding the <em>New</em>"
      },
      "id": "6043a48fe7b9d2ad8d5799db"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.13297,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "tvOS <em>installation</em> and configuration",
        "sections": "tvOS <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " or other device. Within a few minutes you will begin to see data for your <em>iOS</em> app: Go to one.newrelic.com &gt; <em>Mobile</em> &gt; (selected app). If you don&#x27;t, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the <em>New</em> <em>Relic</em> agent provides an API to execute a demo"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/tvos/cocoapods-tvos-installation-configuration": [
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 306.64273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>tvOS</em> SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>tvOS</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your <em>tvOS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your <em>tvOS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 304.41083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>tvOS</em> <em>installation</em> and configuration",
        "sections": "<em>tvOS</em> <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>Relic</em> <em>Mobile</em>.) Go to one.newrelic.com and click <em>Mobile</em>. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app From the Get Started page, select <em>tvOS</em> as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, and select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em>"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    },
    {
      "sections": [
        "New Relic for tvOS compatibility and requirements",
        "Foreground monitoring",
        "tvOS requirements"
      ],
      "title": "New Relic for tvOS compatibility and requirements",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "ceb80d833a4f472ce844f6aafecd0f50625b3911",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/new-relic-tvos-compatibility-requirements/",
      "published_at": "2021-06-26T14:42:42Z",
      "updated_at": "2021-03-11T11:19:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile is compliant with standard application stores, including Apple App Store, Google Play Store, Amazon Appstore, and others. Before you install and configure New Relic Mobile functionality with your mobile applications, make sure your tvOS app meets these requirements for New Relic Mobile. Foreground monitoring As a standard security measure for data collection, New Relic requires that your application server supports SHA-2 (256-bit). SHA-1 is not supported. For more information, see our Mobile data privacy and security documentation. tvOS requirements Make sure your tvOS app meets these requirements for New Relic Mobile. New Relic Mobile tvOS requirements Operating system tvOS 9 or higher API/SDK NSURLConnection, AFNetworking, and ASIHttpRequest networking APIs Languages Objective-C Swift: Works with both network traces and crash reporting, but no interaction traces by default. To enable this, see Enabling interaction tracing in Swift. Devices Any tvOS compatible device (Apple TV 4th generation or higher) File sizes New Relic Mobile adds about 270K to your tvOS release app. Architectures ARM 64-bit",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 275.5275,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> for <em>tvOS</em> compatibility and requirements",
        "sections": "<em>New</em> <em>Relic</em> for <em>tvOS</em> compatibility and requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>Mobile</em>. Foreground <em>monitoring</em> As a standard security measure for data collection, <em>New</em> <em>Relic</em> requires that your application server supports SHA-2 (256-bit). SHA-1 is not supported. For more information, see our <em>Mobile</em> data privacy and security documentation. <em>tvOS</em> requirements Make sure your <em>tvOS</em> app"
      },
      "id": "60441ac6196a67e457960f6d"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/tvos/new-relic-tvos-compatibility-requirements": [
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 306.64273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>tvOS</em> SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>tvOS</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your <em>tvOS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your <em>tvOS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 304.41083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>tvOS</em> <em>installation</em> and configuration",
        "sections": "<em>tvOS</em> <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>Relic</em> <em>Mobile</em>.) Go to one.newrelic.com and click <em>Mobile</em>. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app From the Get Started page, select <em>tvOS</em> as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, and select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em>"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    },
    {
      "sections": [
        "CocoaPods for tvOS installation and configuration",
        "Install your tvOS application",
        "Configure using Objective-C",
        "Configure using Swift",
        "Change the logging level (optional)"
      ],
      "title": "CocoaPods for tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "dd8c9ed16a980b08c67150dada56e129900202bd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/cocoapods-tvos-installation-configuration/",
      "published_at": "2021-06-26T14:42:42Z",
      "updated_at": "2021-03-11T11:18:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These procedures apply only to tvOS apps using Cocoapods. For all other types of tvOS apps, see tvOS installation and configuration. Install your tvOS application As part of the installation process, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. To install and configure your iOS application: Go to one.newrelic.com. If applicable: Select Add more data, select XCFramework. From the drawer, select the New Relic account you would like to add your tvOS application to, and select Continue. Type a name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring. Configure using Objective-C These procedures to configure your tvOS app with CocoaPods and Objective-C also appear on the Get Started page in New Relic. In the Podfile for your project, add the following line: pod 'NewRelicAgentTVOS' Copy Close your project in Xcode, and update it by running this command from the Terminal in your project directory: pod install Copy Open your project in Xcode by running this command from the Terminal in your project directory: open App.xcworkspace Copy In your [app_name]-Prefix.pch project file (generally found in the Supporting Files folder), include the New Relic header inside the #ifdef __OBJC__ #endif block: #import <NewRelic/NewRelic.h> Copy In your AppDelegate.m file, add this call as the first line of application:didFinishLaunchingWithOptions: [NewRelicAgent startWithApplicationToken:@\"<appToken>\"]; Copy Add a build script to your target's Build Phases and paste the following, replacing \"PUT_NEW_RELIC_APP_TOKEN_HERE\" with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/bash \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, then run it in the simulator or other device. Within a few minutes you will begin to see data for your app: Go to one.newrelic.com > Mobile > (select an app). Configure using Swift These procedures to configure your tvOS app with CocoaPods and Swift also appear on the Get Started page in New Relic Mobile. In the Podfile for your project, add the following line: pod 'NewRelicAgentTVOS' Copy Close your project in Xcode, and update it by running this command from the Terminal in your project directory: pod install Copy Open your project in Xcode by running this command from the Terminal in your project directory: open App.xcworkspace Copy Create a bridging header: Select File > New > File > Objective-C File. Name the file Placeholder.m, then select Next. Select Create, and confirm Xcode's prompt to generate the bridging header. In your [ app_name]-Bridging-Header.h, add the New Relic header: #import \"NewRelic/NewRelic.h\" Copy In your AppDelegate.swift file, add this call as the first line of application:didFinishLaunchingWithOptions: NewRelic.startWithApplicationToken(\"<appToken>\"); Copy Add a build script to your target's Build Phases and paste the following, replacing NEW_RELIC_APP_TOKEN with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/bash \"${SCRIPT}\" NEW_RELIC_APP_TOKEN Copy Clean and build your app, then run it in the simulator or other device. Change the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.93207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "CocoaPods for <em>tvOS</em> <em>installation</em> and configuration",
        "sections": "CocoaPods for <em>tvOS</em> <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " for authenticating each <em>mobile</em> app you <em>monitor</em> in <em>New</em> <em>Relic</em>. To install and configure your <em>iOS</em> application: Go to one.newrelic.com. If applicable: Select Add more data, select XCFramework. From the drawer, select the <em>New</em> <em>Relic</em> account you would like to add your <em>tvOS</em> application to, and select"
      },
      "id": "60441ac6196a6710e4960f57"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration": [
    {
      "sections": [
        "Upgrading New Relic Mobile's tvOS SDK",
        "Tip",
        "Contents",
        "Replacing your tvOS framework",
        "For more help"
      ],
      "title": "Upgrading New Relic Mobile's tvOS SDK",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "f5d6d3d356952d185b96aa409605b79e3ace8ec9",
      "image": "https://docs.newrelic.com/static/a3b6801675529d8f4eba123cf08e8f1f/c1b63/Mobile_tvOS_replace-framework_1.png",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk/",
      "published_at": "2021-06-26T14:43:44Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade New Relic Mobile functionality with your tvOS applications. For information about the latest version, refer to the release notes. Contents Replacing your tvOS framework Admins: You must replace the earlier version of your tvOS agent framework before upgrading to a newer version of the tvOS SDK for New Relic Mobile. Here is an example of the workflow to remove your existing tvOS agent framework so you can replace it with a newer version. From the Project Navigator (CMD 1) in Xcode, search for NewRelicAgentTVOS.framework. Right-click or control-click NewRelicAgentTVOS.framework, and select Show in Finder. Drag NewRelicAgentTVOS.framework to the trash. Verify that the Xcode project highlights the reference to NewRelicAgentTVOS.framework in red. Right-click or control-click NewRelicAgentTVOS.framework, and select Delete to remove the obsolete reference from the project. Follow standard installation procedures for tvOS app monitoring. For more help Additional documentation resources include: tvOS installation and configuration (standard installation and configuration procedures) CocoaPods installation and configuration (procedures specific to CocoaPods) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, or install New Relic Mobile updates)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 306.64273,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>tvOS</em> SDK",
        "sections": "Upgrading <em>New</em> <em>Relic</em> <em>Mobile&#x27;s</em> <em>tvOS</em> SDK",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": "Tip Owner or Admins You must be the account Admin to install, configure, and upgrade <em>New</em> <em>Relic</em> <em>Mobile</em> functionality with your <em>tvOS</em> applications. For information about the latest version, refer to the release notes. Contents Replacing your <em>tvOS</em> framework Admins: You must replace the earlier version"
      },
      "id": "604416cc64441f805c378ecf"
    },
    {
      "sections": [
        "New Relic for tvOS compatibility and requirements",
        "Foreground monitoring",
        "tvOS requirements"
      ],
      "title": "New Relic for tvOS compatibility and requirements",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "ceb80d833a4f472ce844f6aafecd0f50625b3911",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/new-relic-tvos-compatibility-requirements/",
      "published_at": "2021-06-26T14:42:42Z",
      "updated_at": "2021-03-11T11:19:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile is compliant with standard application stores, including Apple App Store, Google Play Store, Amazon Appstore, and others. Before you install and configure New Relic Mobile functionality with your mobile applications, make sure your tvOS app meets these requirements for New Relic Mobile. Foreground monitoring As a standard security measure for data collection, New Relic requires that your application server supports SHA-2 (256-bit). SHA-1 is not supported. For more information, see our Mobile data privacy and security documentation. tvOS requirements Make sure your tvOS app meets these requirements for New Relic Mobile. New Relic Mobile tvOS requirements Operating system tvOS 9 or higher API/SDK NSURLConnection, AFNetworking, and ASIHttpRequest networking APIs Languages Objective-C Swift: Works with both network traces and crash reporting, but no interaction traces by default. To enable this, see Enabling interaction tracing in Swift. Devices Any tvOS compatible device (Apple TV 4th generation or higher) File sizes New Relic Mobile adds about 270K to your tvOS release app. Architectures ARM 64-bit",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 275.5275,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> for <em>tvOS</em> compatibility and requirements",
        "sections": "<em>New</em> <em>Relic</em> for <em>tvOS</em> compatibility and requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>Mobile</em>. Foreground <em>monitoring</em> As a standard security measure for data collection, <em>New</em> <em>Relic</em> requires that your application server supports SHA-2 (256-bit). SHA-1 is not supported. For more information, see our <em>Mobile</em> data privacy and security documentation. <em>tvOS</em> requirements Make sure your <em>tvOS</em> app"
      },
      "id": "60441ac6196a67e457960f6d"
    },
    {
      "sections": [
        "CocoaPods for tvOS installation and configuration",
        "Install your tvOS application",
        "Configure using Objective-C",
        "Configure using Swift",
        "Change the logging level (optional)"
      ],
      "title": "CocoaPods for tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "dd8c9ed16a980b08c67150dada56e129900202bd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/cocoapods-tvos-installation-configuration/",
      "published_at": "2021-06-26T14:42:42Z",
      "updated_at": "2021-03-11T11:18:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These procedures apply only to tvOS apps using Cocoapods. For all other types of tvOS apps, see tvOS installation and configuration. Install your tvOS application As part of the installation process, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. To install and configure your iOS application: Go to one.newrelic.com. If applicable: Select Add more data, select XCFramework. From the drawer, select the New Relic account you would like to add your tvOS application to, and select Continue. Type a name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring. Configure using Objective-C These procedures to configure your tvOS app with CocoaPods and Objective-C also appear on the Get Started page in New Relic. In the Podfile for your project, add the following line: pod 'NewRelicAgentTVOS' Copy Close your project in Xcode, and update it by running this command from the Terminal in your project directory: pod install Copy Open your project in Xcode by running this command from the Terminal in your project directory: open App.xcworkspace Copy In your [app_name]-Prefix.pch project file (generally found in the Supporting Files folder), include the New Relic header inside the #ifdef __OBJC__ #endif block: #import <NewRelic/NewRelic.h> Copy In your AppDelegate.m file, add this call as the first line of application:didFinishLaunchingWithOptions: [NewRelicAgent startWithApplicationToken:@\"<appToken>\"]; Copy Add a build script to your target's Build Phases and paste the following, replacing \"PUT_NEW_RELIC_APP_TOKEN_HERE\" with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/bash \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, then run it in the simulator or other device. Within a few minutes you will begin to see data for your app: Go to one.newrelic.com > Mobile > (select an app). Configure using Swift These procedures to configure your tvOS app with CocoaPods and Swift also appear on the Get Started page in New Relic Mobile. In the Podfile for your project, add the following line: pod 'NewRelicAgentTVOS' Copy Close your project in Xcode, and update it by running this command from the Terminal in your project directory: pod install Copy Open your project in Xcode by running this command from the Terminal in your project directory: open App.xcworkspace Copy Create a bridging header: Select File > New > File > Objective-C File. Name the file Placeholder.m, then select Next. Select Create, and confirm Xcode's prompt to generate the bridging header. In your [ app_name]-Bridging-Header.h, add the New Relic header: #import \"NewRelic/NewRelic.h\" Copy In your AppDelegate.swift file, add this call as the first line of application:didFinishLaunchingWithOptions: NewRelic.startWithApplicationToken(\"<appToken>\"); Copy Add a build script to your target's Build Phases and paste the following, replacing NEW_RELIC_APP_TOKEN with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/bash \"${SCRIPT}\" NEW_RELIC_APP_TOKEN Copy Clean and build your app, then run it in the simulator or other device. Change the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.93207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "CocoaPods for <em>tvOS</em> <em>installation</em> and configuration",
        "sections": "CocoaPods for <em>tvOS</em> <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " for authenticating each <em>mobile</em> app you <em>monitor</em> in <em>New</em> <em>Relic</em>. To install and configure your <em>iOS</em> application: Go to one.newrelic.com. If applicable: Select Add more data, select XCFramework. From the drawer, select the <em>New</em> <em>Relic</em> account you would like to add your <em>tvOS</em> application to, and select"
      },
      "id": "60441ac6196a6710e4960f57"
    }
  ],
  "/docs/mobile-monitoring/new-relic-mobile-ios/tvos/upgrading-new-relic-mobiles-tvos-sdk": [
    {
      "sections": [
        "tvOS installation and configuration",
        "Tip",
        "Installing your tvOS application",
        "Configuring your tvOS application",
        "Executing a demo crash (optional)",
        "Changing the logging level (optional)",
        "For more help"
      ],
      "title": "tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "04798a275a7591bfbafb5437194cfbab4b33d8e3",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/tvos-installation-configuration/",
      "published_at": "2021-06-26T14:43:43Z",
      "updated_at": "2021-05-16T01:00:57Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Tip Owner or Admins Follow these instructions to install and configure New Relic Mobile functionality with your tvOS applications. Tip tvOS apps using Cocoapods have separate installation procedures. Installing your tvOS application As part of the installation process, New Relic Mobile automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic Mobile. For Admins with existing New Relic accounts, follow these steps to install and configure your application. (If you do not have a New Relic account, see New Relic Mobile.) Go to one.newrelic.com and click Mobile. If applicable: From the Mobile Apps list, select Add a new app From the Get Started page, select tvOS as the platform for mobile monitoring. Type a name for your mobile app, and select Continue. Continue with the steps to configure New Relic Mobile. To complete the configuration process for a new mobile app later: Go to one.newrelic.com and click Mobile, then select See Instructions next to your mobile app name. To upgrade an existing tvOS installation: Go to one.newrelic.com > Mobile > (selected app) > Settings > Installation. Configuring your tvOS application These procedures to configure your tvOS app also appear on the Get Started page in New Relic. Download and unzip the tvOS SDK for New Relic Mobile. To add the New Relic tvOS Mobile Framework to your Xcode project: Use Finder to drag the NewRelicAgentTVOS.framework folder into your Xcode project, and drop it onto your Project in the Project Navigator window. Follow the prompts to copy items into destination and to create folder references. Add the SystemConfiguration.framework, libc++.tbd, and libz.tbd libraries to your Linker settings. To start the agent: Import the New Relic Mobile Agent header at the top of your prefix.pch. Add + [ NewRelic startWithApplicationToken: < appToken>] to the top of -application:didFinishLaunchingWithOptions: in your AppDelegate.m using the unique application token that is automatically generated. Add a build script to your target's Build Phases and paste the following, replacing PUT_NEW_RELIC_APP_TOKEN_HERE with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/sh \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, and then run it in the simulator or other device. Within a few minutes you will begin to see data for your iOS app: Go to one.newrelic.com > Mobile > (selected app). If you don't, see No data appears. Executing a demo crash (optional) If you have trouble getting your app to crash, the New Relic agent provides an API to execute a demo crash. Recommendation: Add one of these lines of code to a button click event handler as applicable: [NewRelic crashNow]; Copy OR [NewRelic crashNow:@\"<reason>\"]; Copy Changing the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy For more help Additional documentation resources include: Mobile Apps index (standard menu functions available from your list of mobile applications in New Relic Mobile) Mobile Apps Overview page (a summary of your mobile app's performance) Customizing your mobile app settings (Settings tab options to view your mobile app's application token, rename it, change its alert thresholds, or install New Relic Mobile updates) Upgrading New Relic Mobile for tvOS apps (standard upgrade procedures) No data appears (basic troubleshooting steps)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 304.41083,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>tvOS</em> <em>installation</em> and configuration",
        "sections": "<em>tvOS</em> <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>Relic</em> <em>Mobile</em>.) Go to one.newrelic.com and click <em>Mobile</em>. If applicable: From the <em>Mobile</em> Apps list, select Add a <em>new</em> app From the Get Started page, select <em>tvOS</em> as the platform for <em>mobile</em> <em>monitoring</em>. Type a name for your <em>mobile</em> app, and select Continue. Continue with the steps to configure <em>New</em> <em>Relic</em>"
      },
      "id": "60441ac5e7b9d26bb55799b6"
    },
    {
      "sections": [
        "New Relic for tvOS compatibility and requirements",
        "Foreground monitoring",
        "tvOS requirements"
      ],
      "title": "New Relic for tvOS compatibility and requirements",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "ceb80d833a4f472ce844f6aafecd0f50625b3911",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/new-relic-tvos-compatibility-requirements/",
      "published_at": "2021-06-26T14:42:42Z",
      "updated_at": "2021-03-11T11:19:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Mobile is compliant with standard application stores, including Apple App Store, Google Play Store, Amazon Appstore, and others. Before you install and configure New Relic Mobile functionality with your mobile applications, make sure your tvOS app meets these requirements for New Relic Mobile. Foreground monitoring As a standard security measure for data collection, New Relic requires that your application server supports SHA-2 (256-bit). SHA-1 is not supported. For more information, see our Mobile data privacy and security documentation. tvOS requirements Make sure your tvOS app meets these requirements for New Relic Mobile. New Relic Mobile tvOS requirements Operating system tvOS 9 or higher API/SDK NSURLConnection, AFNetworking, and ASIHttpRequest networking APIs Languages Objective-C Swift: Works with both network traces and crash reporting, but no interaction traces by default. To enable this, see Enabling interaction tracing in Swift. Devices Any tvOS compatible device (Apple TV 4th generation or higher) File sizes New Relic Mobile adds about 270K to your tvOS release app. Architectures ARM 64-bit",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 275.5275,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> for <em>tvOS</em> compatibility and requirements",
        "sections": "<em>New</em> <em>Relic</em> for <em>tvOS</em> compatibility and requirements",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " <em>Mobile</em>. Foreground <em>monitoring</em> As a standard security measure for data collection, <em>New</em> <em>Relic</em> requires that your application server supports SHA-2 (256-bit). SHA-1 is not supported. For more information, see our <em>Mobile</em> data privacy and security documentation. <em>tvOS</em> requirements Make sure your <em>tvOS</em> app"
      },
      "id": "60441ac6196a67e457960f6d"
    },
    {
      "sections": [
        "CocoaPods for tvOS installation and configuration",
        "Install your tvOS application",
        "Configure using Objective-C",
        "Configure using Swift",
        "Change the logging level (optional)"
      ],
      "title": "CocoaPods for tvOS installation and configuration",
      "type": "docs",
      "tags": [
        "Mobile monitoring",
        "New Relic Mobile iOS",
        "tvOS"
      ],
      "external_id": "dd8c9ed16a980b08c67150dada56e129900202bd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/mobile-monitoring/new-relic-mobile-ios/tvos/cocoapods-tvos-installation-configuration/",
      "published_at": "2021-06-26T14:42:42Z",
      "updated_at": "2021-03-11T11:18:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "These procedures apply only to tvOS apps using Cocoapods. For all other types of tvOS apps, see tvOS installation and configuration. Install your tvOS application As part of the installation process, New Relic automatically generates an application token. This is a 40-character hexadecimal string for authenticating each mobile app you monitor in New Relic. To install and configure your iOS application: Go to one.newrelic.com. If applicable: Select Add more data, select XCFramework. From the drawer, select the New Relic account you would like to add your tvOS application to, and select Continue. Type a name for your mobile app, and select Continue. Continue with the steps to configure mobile monitoring. Configure using Objective-C These procedures to configure your tvOS app with CocoaPods and Objective-C also appear on the Get Started page in New Relic. In the Podfile for your project, add the following line: pod 'NewRelicAgentTVOS' Copy Close your project in Xcode, and update it by running this command from the Terminal in your project directory: pod install Copy Open your project in Xcode by running this command from the Terminal in your project directory: open App.xcworkspace Copy In your [app_name]-Prefix.pch project file (generally found in the Supporting Files folder), include the New Relic header inside the #ifdef __OBJC__ #endif block: #import <NewRelic/NewRelic.h> Copy In your AppDelegate.m file, add this call as the first line of application:didFinishLaunchingWithOptions: [NewRelicAgent startWithApplicationToken:@\"<appToken>\"]; Copy Add a build script to your target's Build Phases and paste the following, replacing \"PUT_NEW_RELIC_APP_TOKEN_HERE\" with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/bash \"${SCRIPT}\" \"PUT_NEW_RELIC_APP_TOKEN_HERE\" Copy Clean and build your app, then run it in the simulator or other device. Within a few minutes you will begin to see data for your app: Go to one.newrelic.com > Mobile > (select an app). Configure using Swift These procedures to configure your tvOS app with CocoaPods and Swift also appear on the Get Started page in New Relic Mobile. In the Podfile for your project, add the following line: pod 'NewRelicAgentTVOS' Copy Close your project in Xcode, and update it by running this command from the Terminal in your project directory: pod install Copy Open your project in Xcode by running this command from the Terminal in your project directory: open App.xcworkspace Copy Create a bridging header: Select File > New > File > Objective-C File. Name the file Placeholder.m, then select Next. Select Create, and confirm Xcode's prompt to generate the bridging header. In your [ app_name]-Bridging-Header.h, add the New Relic header: #import \"NewRelic/NewRelic.h\" Copy In your AppDelegate.swift file, add this call as the first line of application:didFinishLaunchingWithOptions: NewRelic.startWithApplicationToken(\"<appToken>\"); Copy Add a build script to your target's Build Phases and paste the following, replacing NEW_RELIC_APP_TOKEN with your application token: SCRIPT=`/usr/bin/find \"${SRCROOT}\" -name newrelic_postbuild.sh | head -n 1` /bin/bash \"${SCRIPT}\" NEW_RELIC_APP_TOKEN Copy Clean and build your app, then run it in the simulator or other device. Change the logging level (optional) Six log levels are available for mobile apps monitoring: none error warning info verbose ALL To increase your logging level in the app, add this method call before calling startWithApplicationToken: [NRLogger setLogLevels:NRLogLevelALL]; Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 271.93207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "CocoaPods for <em>tvOS</em> <em>installation</em> and configuration",
        "sections": "CocoaPods for <em>tvOS</em> <em>installation</em> and configuration",
        "tags": "<em>New</em> <em>Relic</em> <em>Mobile</em> <em>iOS</em>",
        "body": " for authenticating each <em>mobile</em> app you <em>monitor</em> in <em>New</em> <em>Relic</em>. To install and configure your <em>iOS</em> application: Go to one.newrelic.com. If applicable: Select Add more data, select XCFramework. From the drawer, select the <em>New</em> <em>Relic</em> account you would like to add your <em>tvOS</em> application to, and select"
      },
      "id": "60441ac6196a6710e4960f57"
    }
  ],
  "/docs/net-agent-install-resources": [
    {
      "sections": [
        "Install .NET agent for Windows Communication Foundation (WCF)",
        "Install for WCF applications",
        "Important",
        "ASP.NET pipeline events and WCF events",
        "Only WCF events"
      ],
      "title": "Install .NET agent for Windows Communication Foundation (WCF)",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "c39d558ff81b712496798549087933ccabcc2586",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-windows-communication-foundation-wcf/",
      "published_at": "2021-06-25T18:35:00Z",
      "updated_at": "2021-03-16T04:35:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document explains how to install the .NET agent and monitor WCF applications. Install for WCF applications To install the .NET agent on IIS-hosted WCF apps: Install the latest .NET agent. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app, or a Windows Forms app) take note of the instructions to enable the agent for your application. Ensure you give each WCF app a descriptive name. Enable or disable ASP.NET compatibility mode in your WCF application depending on which type of events you want monitored: ASP.NET pipeline events and WCF events When ASP.NET compatibility mode is enabled, the .NET agent instruments ASP.NET pipeline events as well as WCF events. In this mode, the agent provides you with a full view of your application stack. Only WCF events When ASP.NET compatibility mode is disabled, the .NET agent only instruments WCF events. Any activity that occurs as part of the ASP.NET pipeline will not be captured, such as agent API calls that are made outside of a WCF transaction. If your application is receiving traffic, data should appear within a few minutes. If it doesn't, see No data appears.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 116.04739,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> for Windows Communication Foundation (WCF)",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "This document explains how to install the .<em>NET</em> <em>agent</em> and monitor WCF applications. Install for WCF applications To install the .<em>NET</em> <em>agent</em> on IIS-hosted WCF apps: Install the latest .<em>NET</em> <em>agent</em>. Important For self-hosted WCF applications (hosted as a custom Windows Service, a console app"
      },
      "id": "603ea62e196a679eb4a83d8d"
    },
    {
      "sections": [
        "Install .NET agent on Docker container",
        "Tip",
        "Overview for install of .NET agent on Docker",
        "Install for Linux Docker containers",
        "Example Linux Dockerfile",
        "Example Linux Multi-stage Dockerfile",
        "Install for Windows Docker containers",
        "Important",
        "Example Windows Dockerfile for .NET Framework application",
        "Example Windows Dockerfile for .NET Core application"
      ],
      "title": "Install .NET agent on Docker container",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "d0515c81825c0b108418459b6c14a510b540c206",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/install-net-agent-docker-container/",
      "published_at": "2021-06-25T18:36:25Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides some samples for how you can configure a Dockerfile to install the New Relic .NET agent. Examples are included for both Windows and Linux containers. Installing the .NET agent in a Docker container can be performed using the same procedures as a standard .NET agent install for either Windows or Linux. It's just a matter of configuring your Dockerfile to perform the procedure. Tip To use .NET or any other agent, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Overview for install of .NET agent on Docker Requirements include: The agent must be installed on the containers you want to monitor. Install the agent with one of the standard install procedures. Enable the agent by setting the required environment variables as applicable. The .NET agent must be installed and enabled at runtime. Install for Linux Docker containers Example Linux Dockerfile FROM microsoft/dotnet:2.2-aspnetcore-runtime # Publish your application. COPY your app to be published /app # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Example Linux Multi-stage Dockerfile FROM microsoft/dotnet:2.2-sdk AS base # Build your application WORKDIR /src RUN dotnet new mvc -o YOUR_APP_NAME RUN dotnet build -c Release -o /app/ ./YOUR_APP_NAME FROM microsoft/dotnet:2.2-aspnetcore-runtime AS final # Install the agent RUN apt-get update && apt-get install -y wget ca-certificates gnupg \\ && echo 'deb http://apt.newrelic.com/debian/ newrelic non-free' | tee /etc/apt/sources.list.d/newrelic.list \\ && wget https://download.newrelic.com/548C16BF.gpg \\ && apt-key add 548C16BF.gpg \\ && apt-get update \\ && apt-get install -y newrelic-netcore20-agent # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 \\ CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A} \\ CORECLR_NEWRELIC_HOME=/usr/local/newrelic-netcore20-agent \\ CORECLR_PROFILER_PATH=/usr/local/newrelic-netcore20-agent/libNewRelicProfiler.so \\ NEW_RELIC_LICENSE_KEY=YOUR_LICENSE_KEY \\ NEW_RELIC_APP_NAME=YOUR_APP_NAME WORKDIR /app COPY --from=base /app . ENTRYPOINT [\"dotnet\", \"./YOUR_APP_NAME.dll\"] Copy Install for Windows Docker containers Important Windows Nano Server images are not supported. Example Windows Dockerfile for .NET Framework application FROM microsoft/aspnet # Publish your application. COPY your app to be published /inetpub/wwwroot # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN powershell.exe Start-Process -Wait -FilePath msiexec -ArgumentList /i,\\ \"C:\\NewRelicDotNetAgent_x64.msi\",\\ /qn,NR_LICENSE_KEY=YOUR_LICENSE_KEY # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME Copy Example Windows Dockerfile for .NET Core application FROM mcr.microsoft.com/windows/servercore:ltsc2019 # Publish your application. COPY your app to be published /app # Copy the New Relic .NET agent installer COPY ./NewRelicDotNetAgent_x64.msi / # Install the agent RUN Start-Process -Wait -FilePath msiexec -ArgumentList /i, \"C:\\NewRelicDotNetAgent_x64.msi\", /qn, NR_LICENSE_KEY=YOUR_LICENSE_KEY # Enable the agent ENV CORECLR_ENABLE_PROFILING=1 # Set your application name ENV NEW_RELIC_APP_NAME=YOUR_APP_NAME # windowsservercore images may not include the .NET Core SDK or runtime RUN dotnet sdk/runtime installer WORKDIR /app ENTRYPOINT [\"dotnet\", \".\\\\YOUR_APP_NAME.dll\"] Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 115.521454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "sections": "<em>Install</em> .<em>NET</em> <em>agent</em> on Docker container",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": " for either Windows or Linux. It&#x27;s just a matter of configuring your Dockerfile to perform the procedure. Tip To use .<em>NET</em> or any <em>other</em> <em>agent</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB"
      },
      "id": "603e85bde7b9d2b26c2a07fd"
    },
    {
      "sections": [
        "How to verify the checksum of .NET Agent downloads",
        "Windows",
        "CertUtil",
        "Powershell: Get-FileHash",
        "Linux",
        "sha256sum"
      ],
      "title": "How to verify the checksum of .NET Agent downloads",
      "type": "docs",
      "tags": [
        "Agents",
        "NET agent",
        "Other installation"
      ],
      "external_id": "95a198f26d732f7cc1940079bfe5a29eca22a425",
      "image": "",
      "url": "https://docs.newrelic.com/docs/agents/net-agent/other-installation/how-verify-checksum-net-agent-downloads/",
      "published_at": "2021-06-25T18:45:10Z",
      "updated_at": "2021-03-16T14:59:34Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read about how to confirm the checksum for New Relic's .NET agent installers. If you need the hashes for our current releases, download their SHA256 hashes from our download site. Windows On Windows, we recommended using either CertUtil or Get-FileHash to compute a file hash. CertUtil This utility is available as part of Certificate Services and can be used to compute the hash of a file. This utility can be run from the Command Prompt or Powershell. To compute the hash, run: CertUtil -hashfile YOUR_FILENAME SHA256 If successful, you'll get this response: SHA256 hash of YOUR_FILENAME: 5092fd52e40132a41ac06c320296cd9d63196d6de0fa6ce9b74fc4de1b3f9502 CertUtil: -hashfile command completed successfully. Copy Powershell: Get-FileHash The Get-FileHash cmdlet is included with Powershell version 5.1+ and can be used to compute the hash of a file. To compute the hash, run: Get-FileHash YOUR_FILENAME Algorithm SHA256 | Format-List If successful, you'll get this response: Algorithm : SHA256 Hash : 5092FD52E40132A41AC06C320296CD9D63196D6DE0FA6CE9B74FC4DE1B3F9502 Path : C:\\Path\\To\\YOUR_FILENAME Copy Linux On Linux, we recommend using sha256sum Copy to compute a file hash. sha256sum To compute the hash, run: sha256sum YOUR_FILENAME If successful, you'll get this response: 5092fd52e40132a41ac06c320296cd9d63196d6de0fa6ce9b74fc4de1b3f9502 YOUR_FILENAME Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.46384,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "How to verify the checksum of .<em>NET</em> <em>Agent</em> downloads",
        "sections": "How to verify the checksum of .<em>NET</em> <em>Agent</em> downloads",
        "tags": "<em>Other</em> <em>installation</em>",
        "body": "Read about how to confirm the checksum for New Relic&#x27;s .<em>NET</em> <em>agent</em> installers. If you need the hashes for our current releases, download their SHA256 hashes from our download site. Windows On Windows, we recommended using either CertUtil or Get-FileHash to compute a file hash. CertUtil This utility"
      },
      "id": "603e829964441fea3c4e88a9"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/build-new-relic-one/build-custom-new-relic-one-application": [
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Which relationships are created?",
        "Source: New Relic agent",
        "Source: Infrastructure",
        "Source: Synthetics monitor",
        "Source: Kubernetes",
        "External services",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-25T22:47:00Z",
      "updated_at": "2021-06-15T10:28:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. If you don’t see the edit relationships button, contact your account admin. Which relationships are created? These are the relationships created between entities: Source: New Relic agent Relationship source Relationship type Relationship target Why is the relationship created? Application instrumented with a New Relic agent CALLS Application instrumented with a New Relic agent Relationships between applications monitored by New Relic agents are reported using the DurationByCaller metric. The callee reports the metric. For example, the metric DurationByCaller/Mobile/100/1234/HTTP/all indicates that the caller is APPLICATION 1234 for account 100. Application instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent An application (caller) that calls a service (callee) monitored by New Relic creates a relationship that's reported by the caller using the ExternalApp metric. For example, the metric ExternalApp/dirac.vips.net/100#1234/all indicates that the callee is APPLICATION 1234 for account 100. The metric is reported if the callee successfully responds to the caller. Service instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent When a New Relic agent detects that a service (caller) calls another service (callee) instrumented by New Relic, the callee reports the metric ClientApplication. For example, the metric ClientApplication/100#1234/all indicates that the caller is APPLICATION 1234 for account 100. Service instrumented with a New Relic agent CALLS A datastore instance When an application calls a datastore instance it creates a relationship reported with the DatastoreInstance metric. For example, the metric Datastore/instance/MySQL/172.16.16.3/3306 indicates the datastore instance is vendor: MySQL, host: 172.16.16.3, port: 3306. This metric also supports the legacy datastore instance format Datastore/instance/MySQL/172.16.16.3:3306. Currently we cannot determine whether the datastore instance is instrumented by New Relic and has an entity associated to it. APM agent SERVES Browser agent This relationship is created when an APM agent injects the Browser agent into a page. Workload entity CONTAINS Any entity When a workload is created or updated, relationships for each of the entities that belong to the workload are created. Because some workloads are “dynamic” (defined by tags), relationships are re-created every 5 minutes. This way entities can join or leave the workload. Source: Infrastructure Relationship source Relationship type Relationship target Why is the relationship created? Infrastructure host HOSTS Application This relationship is created when an application is running in one or more hosts, and the infra agent is running in those hosts. Infrastructure host HOSTS Container This relationship is created when containers are running in one or more hosts, and the host is instrumented with the infra agent. Source: Synthetics monitor Relationship source Relationship type Relationship target Why is the relationship created? Synthetics Monitor CALLS Browser agent This relationship is created when a synthetics monitor checks a page instrumented with the Browser agent. Synthetics Monitor CALLS APM application Agent events that contain the attribute nr.syntheticsMonitorId have been described as synthetics monitors (the source) interacting with an APM application (the target). If the header exists and the APM application Id exists, a relationship is created between the monitor and the app. Source: Kubernetes Relationship source Relationship type Relationship target Why is the relationship created? Cluster CONTAINS Pod This relationship is created when a pod is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Deployment This relationship is created when a deployment is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS DaemonSet This relationship is created when a DaemonSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS StatefulSet This relationship is created when a StatefulSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Host This relationship is created when a host that's part of a cluster is instrumented with the New Relic Kubernetes integration. Deployment CONTAINS Pod This relationship is created when a deployment creates a pod in a cluster instrumented with the New Relic Kubernetes integration. DaemonSet CONTAINS Pod This relationship is created when a DaemonSet is created a pod in a cluster instrumented with the New Relic Kubernetes integration. StatefulSet CONTAINS Pod This relationship is created when a StatefulSet creates a pod in a cluster instrumented with the New Relic Kubernetes integration. Pod CONTAINS Container This relationship is created when a pod creates a container in a cluster instrumented with the New Relic Kubernetes integration. Host HOSTS Pod This relationship is created when a pod is running in a host that's part of a cluster instrumented with the New Relic Kubernetes integration. Container HOSTS Application This relationship is created when an application is running in docker, and the hosts where docker is running are instrumented by the the infra agent. External services Relationship source Relationship type Relationship target Why is the relationship created? External service CALLS External service When the relationship is created, the external service reports a span with its name on the service.name attribute and the name of the service that initiates the call in the parent.service.name attribute. Application IS External service A relationship between an application and an external service is created so that users can navigate between them using the related entities component. Browser application instrumented with a New Relic agent CALLS External service A Browser application reports an Ajax/HostTransaction metric when calling an external service (URL). Example metric: Ajax/HostTransaction/api.segment.io:443/CallbackTime' Cluster CONTAINS External service When the relationship is created, the external service reports a span with the attribute k8s.cluster.name, the name of the cluster. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Pod HOSTS External service When the relationship is created, the external service reports a span with the following attributes: service.name: The name of the service. k8s.cluster.name: The name of the cluster. k8s.pod.name: The name of the pod that’s running the service. k8s.namespace.name: The namespace where the pod was created. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 176.87816,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ", it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. <em>One</em> <em>use</em> case for passing this attribute is to associate ingested telemetry with an entity already created by <em>New</em> <em>Relic</em>. When the entity.guid attribute is sent, the value"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-26T14:46:45Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.1929,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter workloads to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Use workloads",
        "Create a workload",
        "Use tags to define the workload content",
        "How the dynamic query logic works",
        "Add dashboards to workloads",
        "Use the API"
      ],
      "title": "Use workloads",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Workloads"
      ],
      "external_id": "c39090bde9b797940e7f5ba0c9610ba39879677b",
      "image": "https://docs.newrelic.com/static/14c811e218cfc8793bb4d2bd4b2aad0b/c1b63/new-relic-workloads-add-dashboards.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/workloads/use-workloads/",
      "published_at": "2021-06-25T23:49:22Z",
      "updated_at": "2021-06-03T10:04:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view workloads, go to one.newrelic.com and find them on the Explorer. There are three main tabs (Health, Activity, and Owner) plus the header. The Health tab in a workload provides relevant status data that helps you operate the workload: It shows the global status of the workload, as well as the individual status of all the entities that make up the workload at each point in time. It looks like this: It comprises the following: The navigator view shows the entities that make up the workload, and provides controls to group and sort them. If you’ve used queries to dynamically select entities, the workload entities will change over time. The workload status informs about how your workload is performing, based on the individual alerting status of the entities in your workload. With health over time you’ll see whether and how the workload status has changed in the past three hours. If one or more entities are alerting, you’ll get a count of criticals and warnings and a summary of the open conditions, which will make it easier to identify and troubleshoot the most important issues. The Activity tab shows performance data related to the entities in the workload, along with the events that could explain any changes in those time series. It looks like this: Here's the most important sections: Linked dashboards. You can add links to dashboards from your workload, and create pre-filtered, workload-relevant links to dashboards. Golden metrics. These are charts with the most relevant metrics for each entity type, such as number of requests, response time, and error rate for an application. Explore the charts to detect correlations among different entities (for example, two applications) and different stack layers (for example, applications and hosts). The golden metrics that you see for each entity type on a workload can be customized either at the account or the workload level through the NerdGraph API. Events timeline. This includes the start and end time of incidents and anomalies that refer to the workload entities. It also shows other event types that can explain a change in the status or performance of the workload, such as deployments and configuration changes. The Owner tab gives you information about the team responsible for the workload. It looks like this: It contains: The team responsible for the workload. You can include more than one team. The workload description. Share the mission of the workload, and the business logic it represents: Is it a web application? An API? A backend process? Fill in any details that are relevant to your team, or to other teams in your organization. Contact information. From the drop-down menu, choose how your team prefers to be contacted. Links to the most relevant resources to operate the workload. Here you can add links to runbooks, code repositories, productivity tools, or anything else related to the workload that you need at hand. Finally, the header contains the filter bar and the edition controls: Filter bar. Use the advanced filtering options when you need to focus only on certain entities within the workload. Edit workload. Define the entities that are part of the workload, and the accounts they’ll be fetched from. Setup status. Configure how the global workload status will be determined, based on the workload entities health. Summary page. See all the tags that have been added to the workload, as well as metadata such as the workload's identifier (GUID) and account. Create a workload A workload should contain the entities you and your team want to see. Your choice of entities depends on your organization structure and goals. one.newrelic.com > Explorer > Workloads > Create a workload: When you create a workload, you choose the associated accounts and monitored entities. You can use New Relic One or the NerdGraph API to create a workload. Follow these steps to create a workload using the UI: Go to one.newrelic.com and click on the Explorer, and then click + Create a workload. Give the workload a name that will be meaningful for you and your team later. From the Select an account dropdown, select the workload account you'd like to use. Click Choose the scope accounts to check all of the accounts related to this workload. Find and choose the entities that make up the workload. When you have the results you're looking for, you can add specific entities or add the query to dynamically update the entities in the workload. You can search by entity type, tags, or attributes (like entity name, account ID, and AWS region). Click + Add this query to create a list of dynamically updated entities for your workload. We recommend this if you want your workload to update its entities as your system changes. Click + Add next to an entity to add it to your workload. This is a good choice if you know that the entities will stay useful even as your system changes. You can add a combination of queries and specific entities to the workload, which combine according to the query logic. Click Create a workload to save the workload. Once you've created the workload, you can edit it at any time If your workload contains one or more dashboards, you can set filters on those dashboard links. Below are more details about some aspects of how to define workloads: Use tags to define the workload content You can query and select workload entities using both tags and attributes. Therefore, to optimize your use of workloads, it helps to have a good entity-tagging strategy. We recommend reading the tagging documentation. How the dynamic query logic works You can add several individual entities and queries to define a workload. Queries can include multiple search terms. These are combined with an AND operator. Separate queries within a workload are combined with an OR operator. You can wrap strings between percent signs (%) to match exact substrings within a query. If you use substrings in entity names to categorize those entities (for example, <team>-<env>-<appName>), consider using tags complementarily, which are more powerful for filtering and grouping (for example, team:awesome, env:production). We recommend not to use percent signs (%) in dynamic queries that might return over 500 entities. This way, you get a more consistent experience in the user interface. Add dashboards to workloads If you have custom dashboards and you already know which data is relevant to your team for observing and operating their workloads, you can link those dashboards from your workload. You can also set filters on dashboards to scope them to a workload-specific context. When a user selects that dashboard from the workload, it opens with the filter already applied. one.newrelic.com > Apps > Workloads: You can add dashboards to a workload. To add dashboards to a workload: When creating or editing a workload, type Dashboard in the workload search bar to filter to dashboard entities. Add other search terms to filter to specific dashboards. Click Add. one.newrelic.com > Apps > Workloads: You can set filters on the dashboards you've linked to a workload. To filter a workload’s dashboard: From a workload’s Overview page, select a dashboard. Add search terms to filter the dashboard to a view that’s relevant for that workload. Select Save filter for this workload. Use the API You can query, create, and update workloads with our NerdGraph API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.18542,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> workloads",
        "sections": "<em>Use</em> workloads",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " on your organization structure and goals. <em>one</em>.newrelic.com &gt; Explorer &gt; Workloads &gt; Create a workload: When you create a workload, you choose the associated accounts and monitored entities. You can <em>use</em> <em>New</em> <em>Relic</em> <em>One</em> or the NerdGraph API to create a workload. Follow these steps to create a workload using"
      },
      "id": "603e81e8196a67c972a83db1"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/core-concepts/dashboards-api-migration-insights-api-nerdgraph": [
    {
      "sections": [
        "Add the NerdGraphQuery component to an application",
        "Important",
        "Before you begin",
        "Prepare the sample code",
        "Add the NerdGraphQuery component",
        "How to use NerdGraphQuery.query",
        "Review the results of the NerdGraph query",
        "Summary"
      ],
      "title": "Add the NerdGraphQuery component to an application",
      "type": "developer",
      "tags": [
        "nerdgraphquery component",
        "transaction overview app",
        "query account data",
        "drop-down menu",
        "NerdGraphQuery.query method"
      ],
      "external_id": "6bd6c8a72eab352a3e8f4332570e286c7831ba84",
      "image": "https://developer.newrelic.com/static/5dcf6e45874c1fa40bb6f21151af0c24/b01d9/no-name.png",
      "url": "https://developer.newrelic.com/build-apps/add-nerdgraphquery-guide/",
      "published_at": "2021-06-27T01:41:16Z",
      "updated_at": "2021-06-25T01:41:46Z",
      "document_type": "page",
      "popularity": 1,
      "info": "The NerdGraphQuery component allows you to query data from your account and add it to a dropdown menu in an application",
      "body": "This guide steps you through the process of adding the `NerdGraphQuery` component to a sample transaction overview application. This allows you to query data from your New Relic account and add it to a dropdown menu. NerdGraph is our GraphQL implementation. GraphQL has some key differences when compared to REST: The client, not the server, determines what data is returned. You can easily collect data from multiple sources. For example, in a single query, you can get account information, infrastructure data, and issue a NRQL request. Important Before completing this exercise, you can experiment with GraphQL queries in our NerdGraph API explorer. We also have a 14-minute video that covers the steps below. Before you begin To develop projects, you need our New Relic One CLI (command line interface). If you haven't already installed it, do the following: Install Node.js. Complete steps 1–4 of our CLI quick start, and be sure to make a copy of your account ID from step 1 because you’ll need it later. Important If you've already installed the New Relic One CLI, but you can't remember your account ID, start the CLI quick start again, and then click the Get your API key down arrow. The account ID is the number preceding your account name. For additional details, see Set up your development environment. Prepare the sample code To get started, complete these steps to update the application UUID (unique ID) and run the sample application locally: Step 1 of 8 If you haven't already done so, clone the example applications from our how-to GitHub repo. Here's an example using HTTPS: bash Copy $ git clone https://github.com/newrelic/nr1-how-to.git Step 2 of 8 Change to the directory use-nerdgraph-nerdlet: bash Copy $ cd nr1-how-to/use-nerdgraph/nerdlets/use-nerdgraph-nerdlet Step 3 of 8 In your preferred text editor, open index.js. Step 4 of 8 Replace <ADD YOUR ACCOUNT ID> with your account id: Important Your account ID is available in the CLI quick start (see Before you begin). this.accountId = <ADD YOUR ACCOUNT ID>; Copy Step 5 of 8 Change to the /nr1-howto/use-nerdgraph directory: bash Copy $ cd ../.. Step 6 of 8 If this is your first time executing this code run the below command to install all the required modules: bash Copy $ npm install Step 7 of 8 Execute these commands to update the UUID and serve the sample application: bash Copy $ nr1 update $ nr1 nerdpack:uuid -gf $ nr1 nerdpack:serve Step 8 of 8 Once the sample application is successfully served, go to the local New Relic One homepage (https://one.newrelic.com/?nerdpacks=local), click Apps, and then click Use NerdGraph. After launching the Use NerdGraph application, you see a dashboard that gives an overview of the transactions in your account: Add the NerdGraphQuery component Now you can create a dropdown menu for changing the account the application is viewing. The first step is to import the NerdGraphQuery component into the application's index.js file. Important If you need more details about our example below, see the APIs and components page on https://developer.newrelic.com Step 1 of 3 Add the NerdGraphQuery component into the first StackItem inside of the return in the index.js file: <NerdGraphQuery query={query} variables={variables}> {({ loading, error, data }) => { console.log({ loading, error, data }); if (loading) { return <Spinner />; } if (error) { return 'Error!'; } return null; }} </NerdGraphQuery>; Copy Step 2 of 3 The NerdGraphQuery component takes a query object that states the source you want to access and the data you want returned. Add the following code to your index.js file in the render method: Important In the browser console, you can see the data from your query returned in an object that follows the same structure of the object in the initial query. const query = ` query($id: Int!) { actor { account(id: $id) { name } } } `; Copy Step 3 of 3 To take the data returned by the NerdGraph query and display it in the application, replace the return null in the current NerdGraphQuery component with this return statement: return <HeadingText>{data.actor.account.name} Apps:</HeadingText>; Copy When you go back to the browser and view your application, you see a new headline showing the name of your account returned from NerdGraph: How to use NerdGraphQuery.query At this point, you have implemented the NerdGraphQuery component with the application's render method and displayed the return data within the transaction overview application. Here's what you need to do next: Query NerdGraph inside of the componentDidMount lifecycle method. Save the returned data for later use in the application. Step 1 of 2 This code takes the response from NerdGraph and makes sure the results are processed, stored into the application state, and logged to the browser console for viewing. Add this code into the index.js file just under the constructor: componentDidMount() { const accountId = this.state; const gql = `{ actor { accounts { id name } } }`; const accounts = NerdGraphQuery.query({query: gql}) //The NerdGraphQuery.query method called with the query object to get your account data is stored in the accounts variable. accounts.then(results => { console.log('Nerdgraph Response:', results); const accounts = results.data.actor.accounts.map(account => { return account; }); const account = accounts.length > 0 && accounts[0]; this.setState({ selectedAccount: account, accounts }); }).catch((error) => { console.log('Nerdgraph Error:', error); }) } Copy Step 2 of 2 After the data is stored into state, display a selection so users can change accounts and update the application. To do this, add this code to index.js for the second StackItem in the return statement: { accounts && ( <StackItem> <Select value={selectedAccount} onChange={(evt, value) => this.selectAccount(value)} > {accounts.map((a) => { return ( <SelectItem key={a.id} value={a}> {a.name} </SelectItem> ); })} </Select> </StackItem> ); } Copy Review the results of the NerdGraph query After you complete these steps, look at the application in your browser, and note the following: The dropdown menu now displays the data returned from the NerdGraphQuery.query and allows you to select an account. After you select a new account, the application shows data from the new selection. The final index.js file should have code similar to the code below. This completed sample is in your nerdlet final.js. import React from 'react'; import { PlatformStateContext, NerdGraphQuery, Spinner, HeadingText, Grid, GridItem, Stack, StackItem, Select, SelectItem, AreaChart, TableChart, PieChart } from 'nr1' import { timeRangeToNrql } from '@newrelic/nr1-community'; // https://docs.newrelic.com/docs/new-relic-programmable-platform-introduction export default class UseNerdgraphNerdletNerdlet extends React.Component { constructor(props){ super(props) this.state = { accountId: <YOUR ACCOUNT ID>, accounts: null, selectedAccount: null, } } componentDidMount() { const accountId = this.state; const gql = `{ actor { accounts { id name } } }`; const accounts = NerdGraphQuery.query({ query: gql }) accounts.then(results => { console.log('Nerdgraph Response:', results); const accounts = results.data.actor.accounts.map(account => { return account; }); const account = accounts.length > 0 && accounts[0]; this.setState({ selectedAccount: account, accounts }); }).catch((error) => { console.log('Nerdgraph Error:', error); }) } selectAccount(option) { this.setState({ accountId: option.id, selectedAccount: option }); } render() { const { accountId, accounts, selectedAccount } = this.state; console.log({ accountId, accounts, selectedAccount }); const query = ` query($id: Int!) { actor { account(id: $id) { name } } } `; const variables = { id: accountId, }; const avgResTime = `SELECT average(duration) FROM Transaction FACET appName TIMESERIES AUTO `; const trxOverview = `FROM Transaction SELECT count(*) as 'Transactions', apdex(duration) as 'apdex', percentile(duration, 99, 95) FACET appName `; const errCount = `FROM TransactionError SELECT count(*) as 'Transaction Errors' FACET error.message `; const responseCodes = `SELECT count(*) as 'Response Code' FROM Transaction FACET httpResponseCode `; return ( <Stack fullWidth horizontalType={Stack.HORIZONTAL_TYPE.FILL} gapType={Stack.GAP_TYPE.EXTRA_LOOSE} spacingType={[Stack.SPACING_TYPE.MEDIUM]} directionType={Stack.DIRECTION_TYPE.VERTICAL}> <StackItem> <NerdGraphQuery query={query} variables={variables}> {({loading, error, data}) => { if (loading) { return <Spinner />; } if (error) { return 'Error!'; } return <HeadingText>{data.actor.account.name} Apps:</HeadingText>; }} </NerdGraphQuery> </StackItem> {accounts && <StackItem> <Select value={selectedAccount} onChange={(evt, value) => this.selectAccount(value)}> {accounts.map(a => { return ( <SelectItem key={a.id} value={a}> {a.name} </SelectItem> ) })} </Select> </StackItem> } <StackItem> <hr /> <PlatformStateContext.Consumer> {(platformState) => { /* Taking a peek at the platformState */ const since = timeRangeToNrql(platformState); return ( <> <Grid className=\"primary-grid\" spacingType={[Grid.SPACING_TYPE.NONE, Grid.SPACING_TYPE.NONE]} > <GridItem className=\"primary-content-container\" columnSpan={6}> <main className=\"primary-content full-height\"> <HeadingText spacingType={[HeadingText.SPACING_TYPE.MEDIUM]} type={HeadingText.TYPE.HEADING_4}> Transaction Overview </HeadingText> <TableChart fullWidth accountId={accountId} query={trxOverview+since} /> </main> </GridItem> <GridItem className=\"primary-content-container\" columnSpan={6}> <main className=\"primary-content full-height\"> <HeadingText spacingType={[HeadingText.SPACING_TYPE.MEDIUM]} type={HeadingText.TYPE.HEADING_4}> Average Response Time </HeadingText> <AreaChart fullWidth accountId={accountId} query={avgResTime+since} /> </main> </GridItem> <GridItem className=\"primary-content-container\" columnSpan={6}> <main className=\"primary-content full-height\"> <HeadingText spacingType={[HeadingText.SPACING_TYPE.MEDIUM]} type={HeadingText.TYPE.HEADING_4}> Response Code </HeadingText> <PieChart fullWidth accountId={accountId} query={responseCodes+since} /> </main> </GridItem> <GridItem className=\"primary-content-container\" columnSpan={6}> <main className=\"primary-content full-height\"> <HeadingText spacingType={[HeadingText.SPACING_TYPE.MEDIUM]} type={HeadingText.TYPE.HEADING_4}> Transaction Errors </HeadingText> <PieChart fullWidth accountId={accountId} query={errCount+since} /> </main> </GridItem> </Grid> </> ); }} </PlatformStateContext.Consumer> </StackItem> </Stack> ) } } Copy Summary Now that you've completed all the steps in this example, you've successfully queried data from your account using the NerdGraphQuery component in two methods: Using the NerdGraphQuery component inside the application's render method and then passing the returned data into the children's components. Using the NerdGraphQuery.query method to query data before the application renders.",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 508.40103,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Add the <em>NerdGraphQuery</em> component <em>to</em> an application",
        "sections": "Add the <em>NerdGraphQuery</em> component <em>to</em> an application",
        "info": "The <em>NerdGraphQuery</em> component allows you <em>to</em> query data <em>from</em> your account and add it <em>to</em> a dropdown menu in an application",
        "tags": "<em>nerdgraphquery</em> component",
        "body": "This guide steps you through the process of adding the `<em>NerdGraph</em>Query` component to a sample transaction overview application. This allows you to query data <em>from</em> your New Relic account and add it to a dropdown menu. <em>NerdGraph</em> is our <em>Graph</em>QL implementation. <em>Graph</em>QL has some key differences when"
      },
      "id": "6091f9c8e7b9d291d95068db"
    },
    {
      "sections": [
        "New Relic API keys",
        "Manage API keys in UI",
        "Overview of API keys",
        "Important",
        "User key",
        "Create a user key",
        "Edit a user key",
        "Delete a user key",
        "Tip",
        "License key",
        "Create a license key",
        "Edit a license key",
        "Delete a license API key",
        "Browser key",
        "Create a browser key",
        "Edit a browser key",
        "Delete a browser key",
        "REST API key",
        "Activate or change REST API key",
        "View REST API keys",
        "Delete REST API key",
        "Insights insert key",
        "Generate an Insights insert key",
        "Edit or delete an Insights insert key",
        "Insights query key",
        "Generate an Insights query key",
        "Edit or delete an Insights query key",
        "Admin key"
      ],
      "title": "New Relic API keys",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "b373cd68cf21daeb5d912ffb4b1ae3f14f500fcc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/",
      "published_at": "2021-06-25T20:18:04Z",
      "updated_at": "2021-06-20T20:48:16Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic has several different APIs that each require their own type of API key to use. This resource describes our API keys, what they're used for, and how to access them. Manage API keys in UI Here's a direct link to the API keys UI page. To find this from the New Relic UI: From the account dropdown, select Account settings. Select API keys. Overview of API keys The table below summarizes our available API keys and their uses. Important Some keys are able to be used by more than one API. If you're using a specific API, see the docs for that API to understand which keys are required and recommended. Key type What it's for Where to access User key (Also known as a \"personal API key\") Used for NerdGraph (our GraphQL API) and for accessing REST API endpoints (dependent on user permissions). API keys UI License key Allows ingestion of data from APM agents, the infrastructure agent, and some other data-ingest APIs. API keys UI Insights insert key (Also known as a \"Insert key\") Allows ingestion of events via HTTPS request from our metric, log, trace, and event APIs and the tools that use those APIs. Go to the API keys UI and click Insights insert key. Browser key Allows ingestion of browser monitoring data. API keys UI Mobile key (aka \"mobile app token\") Allows mobile monitoring data to be sent to New Relic. See Mobile app token. REST API key Note: we recommend using the user key instead because it has fewer limitations. The REST API key is for using our REST APIs for Alerts, APM, Browser, Infrastructure alerts, as well as Mobile REST APIs and the API Explorer. Go to the API keys UI and click REST API key. Admin API key Important As of December 4, 2020, all existing admin keys have been migrated to be user keys. For more information, see Admin key and User key below. API keys UI (will appear as user keys) Insights query key (aka \"Query key\") This key allows use of the Insights query API. Note: we now recommend using NerdGraph to query New Relic data. Go to the API keys UI and click Insights query key. User key New Relic user keys (previously referred to as \"personal API keys\") are required for NerdGraph (our GraphQL API), which allows you to query most New Relic data and do some types of configuration. User keys also let you use our REST API, with restrictions based on your permissions. The instructions below are for managing keys in the UI. For managing keys via API, see Manage keys with NerdGraph. Create a user key Go to the API keys UI and click Create key. In the Account dropdown, choose the account for which you want the key to be created. In the Key type dropdown, select User. In the Name field, enter a descriptive name for your key. In the Notes field, add relevant details about the key. Click Create. Edit a user key Go to the API keys UI. In the row of the user key you want to edit, click ... and select Edit. Make your changes and click Update key. Delete a user key Go to the API keys UI. In the row of the user key you want to delete, click ... and select Delete. Click Delete key to confirm your deletion. Tip In December 2020, user keys supplanted Admin API keys. For details, see Admin API key. License key New Relic license keys allow the ingestion of data from APM agents, the infrastructure agent, and some other data-ingest APIs. If you're using a specific API, see the docs for that API to understand which keys are required or recommended. The instructions below are for managing keys in the UI. For managing keys via API, see Manage keys with NerdGraph. Create a license key Go to the API keys UI and click Create key. In the Account dropdown, choose the account for which you want the key to be created. In the Key type dropdown, select License. In the Name field, enter a descriptive name for your key. In the Notes field, add relevant details about the key. Click Create. Edit a license key Go to the API keys UI. In the row of the license key you want to edit, click ... and select Edit. Make your changes and click Update key. Delete a license API key Go to the API keys UI. In the row of the license key you want to delete, click ... and select Delete. Click Delete key to confirm your deletion. Important You can't manage or delete an original license key that was created when your account was created. For that, contact New Relic support. Browser key The browser key allows the ingestion of data from New Relic browser monitoring. The instructions below are for managing keys in the UI. For managing keys via API, see Manage keys with NerdGraph. Create a browser key Go to the API keys UI and click Create key. In the Account dropdown, choose the account for which you want the key to be created. In the Key type dropdown, select Browser. In the Name field, enter a descriptive name for your key. In the Notes field, add relevant details about the key. Click Create. Edit a browser key Go to the API keys UI. In the row of the browser API key you want to edit, click ... and select Edit. Make your changes and click Update key. Delete a browser key Go to the API keys UI. In the row of the browser API key you want to delete, click ... and select Delete. Click Delete key to confirm your deletion. Important You can't manage or delete an original browser key that was created when your account was created. For that, contact New Relic support. REST API key Important We highly recommend using a user key instead, because that key has fewer restrictions. You can use a REST API key with our REST API and the API Explorer. For accounts that have sub-accounts, each sub-account must use its own REST API key. Requirements: Requires admin-level user permissions. If you don't have access to the REST API key or the REST API explorer, it might be due to lack of permissions. Talk to your New Relic account manager, or use a user key instead. Each New Relic account can have only one REST API key. Activate or change REST API key Go to the API keys UI and select REST API key. Click Regenerate REST API key. Click (Show key) to view your account's new REST API key. Copy your account's REST API key to use with New Relic's REST API. View REST API keys To view REST API keys: Go to the API keys UI and select REST API key. Click (Show key) to view your account's new REST API key. Delete REST API key To delete your account's REST API key: Before you delete an API key, make sure you have the correct account or sub-account. Go to the API keys UI and select REST API key. Select the delete icon for the REST API key. Confirm the deletion by typing DELETION IS FOREVER in the text field. Select Delete. Insights insert key The Insights insert key (aka the \"Insert key\") is required for the ingestion of data via our Event API, Log API, Metric API, and Trace API, or via tools that use those APIs. Tips on availability and access: Because these keys are associated with an account and not a specific user, anyone in the account with access to a key can use it. As a best practice for security purposes, we recommend you use different Insights insert keys for different applications or different data sources. Generate an Insights insert key Go to the API keys UI and select Insights insert keys. Next to the Insert keys heading, select the button. A cURL command containing your insert key will appear, as well as NRQL query field. Edit the NRQL query field. Add comments in the Notes field if desired. Click Save your notes. Edit or delete an Insights insert key Go to the API keys UI and select Insights insert keys. Under Insert Keys, find the key you want to modify. Select Edit or Delete. Insights query key The Insights query key is used for our Insights query API: we now recommend using NerdGraph for querying New Relic data. Generate an Insights query key You must have access to the UIs you plan to query and the correct permissions in order to register or modify this key. Important Insights query keys are generated per account; they're not associated with a specific user. This means that any user in an account with access to a query key can use it. To register this key: Go to the API keys UI and select Insights query keys. Next to the Query Keys heading, select the button. A cURL command containing your insert key will appear, as well as NRQL query field. Edit the NRQL query field. Add comments in the Notes field if desired. Click Save your notes. Edit or delete an Insights query key To edit or delete this key: Go to the API keys UI page and select Insights query keys. Under Query Keys, find the key you want to modify. Select Edit or Delete. Admin key Important As of December 4, 2020, all existing admin keys have been migrated to be user keys. You don’t need to do anything for existing admin keys to remain active. They will be automatically accessible via the API keys UI, labeled as user keys, and granted identical permissions. You can manage them as you would any user key via the same workflow. All migrated admin keys will have a note that says “Migrated from an admin user key” in the key table, so you’ll be able to find them easily.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 430.48538,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "New Relic <em>API</em> keys",
        "sections": "<em>Insights</em> insert key",
        "tags": "Intro <em>to</em> <em>APIs</em>",
        "body": " and recommended. Key type What it&#x27;s for Where to access User key (Also known as a &quot;personal <em>API</em> key&quot;) Used for <em>NerdGraph</em> (our <em>Graph</em>QL <em>API</em>) and for accessing REST <em>API</em> endpoints (dependent on user permissions). <em>API</em> keys UI License key Allows ingestion of data <em>from</em> APM agents, the infrastructure agent"
      },
      "id": "6043fa3464441f1358378f3b"
    },
    {
      "sections": [
        "Introduction to New Relic APIs",
        "Tip",
        "NerdGraph (GraphQL)",
        "REST APIs by capability",
        "Alerts",
        "APM",
        "Browser monitoring",
        "Infrastructure monitoring",
        "Mobile monitoring",
        "Synthetic monitoring",
        "Telemetry APIs for core data types",
        "Account management, admin, and usage APIs",
        "Other APIs",
        "Insights",
        "Plugins",
        "See APIs in action"
      ],
      "title": "Introduction to New Relic APIs",
      "type": "docs",
      "tags": [
        "APIs",
        "Get started",
        "Intro to APIs"
      ],
      "external_id": "01e9799a214baad5de04de6146483f6dbbc198aa",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/intro-apis/introduction-new-relic-apis/",
      "published_at": "2021-06-25T20:18:04Z",
      "updated_at": "2021-06-02T16:33:26Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers a variety of APIs and SDKs you can use to: Retrieve data from New Relic. Send data to New Relic. Adjust settings. This document provides examples and reference information for our API endpoints. For developer-focused content on how to use and customize New Relic, see developer.newrelic.com. Tip To use APIs and SDKs, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. NerdGraph (GraphQL) NerdGraph is New Relic's GraphQL-format API, an efficient and flexible query language that lets you request exactly the data you need, without over-fetching or under-fetching. NerdGraph is the preferred API for querying New Relic data and making a range of feature configurations. To get started, see Introduction to NerdGraph. REST APIs by capability New Relic capabilities, like APM, infrastructure monitoring, or alerts, are often used together, and sometimes they overlap in functionality. This is why multiple APIs may be relevant to each area. Some API functionality will depend on your access to features and data. Tip To learn more about different API key types, see Understand New Relic API keys. Alerts Use the REST API for alerts and the API Explorer to: Create and manage policies, conditions, and notification channels. Create alert conditions based on NRQL queries. Create alert conditions based on data from other New Relic capabilities. APM API resources for application monitoring include: Resource Details REST API REST API features include: Retrieve APM data, including metrics, Apdex, error rates, and host data. Report deployments. Change the app name in the UI. Agent APIs Every APM language agent has an API that lets you customize the agent's default behavior, including reporting custom data. APM agent APIs include: C SDK API Go agent API Java agent API .NET agent API Node.js agent API PHP agent API Python agent API Ruby agent API Query API To query APM data, use the Query API. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Browser monitoring The Browser API resources include: Resource Details Browser agent API Use the Browser agent API for tasks such as: Report custom end user data to browser monitoring. Monitor asynchronous browser activity using SPA API calls. Insert custom data into New Relic dashboards . Manage source maps. REST API With the REST API you can: Retrieve page load timing data and throughput. Add or list apps monitored by browser monitoring. Manage alerts conditions for your browser data. Query API To retrieve browser monitoring data, use the Query API. Account management APIs For APIs related to accounts and subscription usage, see the account-related APIs. Infrastructure monitoring The Infrastructure API resources include: Resource Details Query API To retrieve infrastructure data, use the Query API. This API can also be used to retrieve subscription usage data. Infrastructure alert API To manage your infrastructure alerts, use the Infrastructure alert API. Integrations SDK To make your own custom integrations for reporting data to infrastructure monitoring, use the Integrations SDK. NerdGraph You can use NerdGraph (our GraphQL API) to query your cloud integration data and make changes to cloud integration settings. Mobile monitoring Mobile API resources include: Resource Details Mobile agent APIs Mobile APIs let you custom instrument your own code and send events to New Relic. See the platform-specific documentation: iOS Android Unity REST API Use the REST API for such tasks as: Retrieve a list of monitored apps. Get subscription usage data. Get metric names and data. Get crash count and crash rate data. Manage New Relic alerts conditions for your mobile apps. Query API To retrieve Mobile data from New Relic, use the Query API. Account management APIs For account-related APIs, see Account APIs. Synthetic monitoring Synthetics API resources include: Resource Details Synthetics REST API The Synthetics REST API functionality includes: Create and manage synthetics monitors. Manage synthetics alert notifications. Add labels to monitors, and retrieve monitors with specific labels. Query API To retrieve synthetics event data, use the Query API. Alerts API To create and manage alert conditions that target synthetics monitors, use the Alerts API. Telemetry APIs for core data types We offer several APIs that allow you to get our core data types (metrics, logs, traces, and events) into New Relic without the use of an installed agent. Data type Description Trace API Send distributed tracing data to New Relic. Event API Send event data to New Relic. Metric API Send metrics to New Relic from any source (including other telemetry monitoring services). Log API Send your log data to New Relic. Account management, admin, and usage APIs Like any other New Relic product or service, you want to be confident that your APIs protect you and your customers' data privacy. The following are API resources related to New Relic account administration and usage. For more information about API capabilities, see the specific New Relic API. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website. Resource Details REST API REST API features include: Find your API keys, account ID, and information needed to use the REST API. Return a list of account users (original user model only). Get SLA report data for browser and application monitoring. Subscription usage You can use the Query API to retrieve subscription usage data. This can be helpful to see how usage compares to your current subscription level, or for doing departmental chargebacks. Partner API To retrieve information about your New Relic partner account, sub-accounts, and users, use the Partner API. Other APIs Insights New Relic Insights was the name of our original product that governed custom event reporting and querying. The features associated with Insights have been rolled into our New Relic One platform (learn more), but there are still some APIs and original pricing plans that use the term \"Insights\" for these historical reasons. Insights-related APIs include: Resource Details Event API To report custom events, use the Event API. Query API To query your data using NRQL-format queries, you can use the Query API. Note that this API is deprecated and NerdGraph is preferred for querying your data. Dashboard API See the Insights Dashboard API. Plugins Use the REST API for New Relic plugins and the API Explorer to: Get a list of plugins, including their names, IDs, and GUIDs. List one or more plugin components, their output, and their metric timeslice data. Developers and New Relic partners can also use New Relic's Plugin API to write an agent in any language that can work directly with the API for plugins. This allows you to send your own metric data to our plugins and view data received from the API in New Relic. See APIs in action For more on how you as a developer can optimize your ability to solve problems using New Relic, go to developer.newrelic.com.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 363.066,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction <em>to</em> New Relic <em>APIs</em>",
        "sections": "<em>NerdGraph</em> (<em>GraphQL</em>)",
        "tags": "Intro <em>to</em> <em>APIs</em>",
        "body": "-related APIs include: Resource Details Event <em>API</em> To report custom events, use the Event <em>API</em>. Query <em>API</em> To query your data using NRQL-format queries, you can use the Query <em>API</em>. Note that this <em>API</em> is deprecated and <em>NerdGraph</em> is preferred for querying your data. <em>Dashboard</em> <em>API</em> See the <em>Insights</em> <em>Dashboard</em>"
      },
      "id": "609fa5cf196a67066022b194"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/core-concepts/new-relic-explorer-view-performance-across-apps-services-hosts": [
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Which relationships are created?",
        "Source: New Relic agent",
        "Source: Infrastructure",
        "Source: Synthetics monitor",
        "Source: Kubernetes",
        "External services",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-25T22:47:00Z",
      "updated_at": "2021-06-15T10:28:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. If you don’t see the edit relationships button, contact your account admin. Which relationships are created? These are the relationships created between entities: Source: New Relic agent Relationship source Relationship type Relationship target Why is the relationship created? Application instrumented with a New Relic agent CALLS Application instrumented with a New Relic agent Relationships between applications monitored by New Relic agents are reported using the DurationByCaller metric. The callee reports the metric. For example, the metric DurationByCaller/Mobile/100/1234/HTTP/all indicates that the caller is APPLICATION 1234 for account 100. Application instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent An application (caller) that calls a service (callee) monitored by New Relic creates a relationship that's reported by the caller using the ExternalApp metric. For example, the metric ExternalApp/dirac.vips.net/100#1234/all indicates that the callee is APPLICATION 1234 for account 100. The metric is reported if the callee successfully responds to the caller. Service instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent When a New Relic agent detects that a service (caller) calls another service (callee) instrumented by New Relic, the callee reports the metric ClientApplication. For example, the metric ClientApplication/100#1234/all indicates that the caller is APPLICATION 1234 for account 100. Service instrumented with a New Relic agent CALLS A datastore instance When an application calls a datastore instance it creates a relationship reported with the DatastoreInstance metric. For example, the metric Datastore/instance/MySQL/172.16.16.3/3306 indicates the datastore instance is vendor: MySQL, host: 172.16.16.3, port: 3306. This metric also supports the legacy datastore instance format Datastore/instance/MySQL/172.16.16.3:3306. Currently we cannot determine whether the datastore instance is instrumented by New Relic and has an entity associated to it. APM agent SERVES Browser agent This relationship is created when an APM agent injects the Browser agent into a page. Workload entity CONTAINS Any entity When a workload is created or updated, relationships for each of the entities that belong to the workload are created. Because some workloads are “dynamic” (defined by tags), relationships are re-created every 5 minutes. This way entities can join or leave the workload. Source: Infrastructure Relationship source Relationship type Relationship target Why is the relationship created? Infrastructure host HOSTS Application This relationship is created when an application is running in one or more hosts, and the infra agent is running in those hosts. Infrastructure host HOSTS Container This relationship is created when containers are running in one or more hosts, and the host is instrumented with the infra agent. Source: Synthetics monitor Relationship source Relationship type Relationship target Why is the relationship created? Synthetics Monitor CALLS Browser agent This relationship is created when a synthetics monitor checks a page instrumented with the Browser agent. Synthetics Monitor CALLS APM application Agent events that contain the attribute nr.syntheticsMonitorId have been described as synthetics monitors (the source) interacting with an APM application (the target). If the header exists and the APM application Id exists, a relationship is created between the monitor and the app. Source: Kubernetes Relationship source Relationship type Relationship target Why is the relationship created? Cluster CONTAINS Pod This relationship is created when a pod is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Deployment This relationship is created when a deployment is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS DaemonSet This relationship is created when a DaemonSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS StatefulSet This relationship is created when a StatefulSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Host This relationship is created when a host that's part of a cluster is instrumented with the New Relic Kubernetes integration. Deployment CONTAINS Pod This relationship is created when a deployment creates a pod in a cluster instrumented with the New Relic Kubernetes integration. DaemonSet CONTAINS Pod This relationship is created when a DaemonSet is created a pod in a cluster instrumented with the New Relic Kubernetes integration. StatefulSet CONTAINS Pod This relationship is created when a StatefulSet creates a pod in a cluster instrumented with the New Relic Kubernetes integration. Pod CONTAINS Container This relationship is created when a pod creates a container in a cluster instrumented with the New Relic Kubernetes integration. Host HOSTS Pod This relationship is created when a pod is running in a host that's part of a cluster instrumented with the New Relic Kubernetes integration. Container HOSTS Application This relationship is created when an application is running in docker, and the hosts where docker is running are instrumented by the the infra agent. External services Relationship source Relationship type Relationship target Why is the relationship created? External service CALLS External service When the relationship is created, the external service reports a span with its name on the service.name attribute and the name of the service that initiates the call in the parent.service.name attribute. Application IS External service A relationship between an application and an external service is created so that users can navigate between them using the related entities component. Browser application instrumented with a New Relic agent CALLS External service A Browser application reports an Ajax/HostTransaction metric when calling an external service (URL). Example metric: Ajax/HostTransaction/api.segment.io:443/CallbackTime' Cluster CONTAINS External service When the relationship is created, the external service reports a span with the attribute k8s.cluster.name, the name of the cluster. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Pod HOSTS External service When the relationship is created, the external service reports a span with the following attributes: service.name: The name of the service. k8s.cluster.name: The name of the cluster. k8s.pod.name: The name of the pod that’s running the service. k8s.namespace.name: The namespace where the pod was created. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 277.4047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": "<em>New</em> <em>Relic</em> monitoring is built around the <em>concept</em> of the entity. An entity is anything that reports data to <em>New</em> <em>Relic</em>. This document explains: What entities are How to find entity data How to modify existing entity types or create <em>new</em> ones How entities are related to <em>one</em> another How to organize them"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-26T14:46:45Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 252.80493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter workloads to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Transition to New Relic One from Insights",
        "Important",
        "Features",
        "Improved query abilities",
        "Improved visualizations",
        "Steps for a successful transition"
      ],
      "title": "Transition to New Relic One from Insights",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "4af99cd8030909a71d21a359a60af5ac93b93a66",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/transition-new-relic-one-insights/",
      "published_at": "2021-06-26T14:45:52Z",
      "updated_at": "2021-05-22T00:14:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of April 12, 2021, we're upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. Released in 2014, New Relic Insights was our original way to create custom queries, charts, and dashboards. With New Relic One, we have modernized the experience for you to access, analyze, and visualize your data. New Relic One offers an improved charts and dashboards experience, and it provides a platform where we can more rapidly bring new innovations to you. This transition guide can help you understand: What are some of the new and improved features you get with New Relic One charts, dashboards, and queries Why it's easy to transition to New Relic One What to know and considerations when you make the switch How to get the most out of using New Relic One Features You can scroll down to the transition details, but first here are some features we've added that show how New Relic One dashboards are a clear improvement over Insights dashboards. Improved query abilities With New Relic One, you get: Ability to query many accounts from the same widget: New Relic One lets you query across all your associated accounts in one place. Better querying and charting experiences: Query access is available globally, no matter where you are in New Relic One. This includes a \"basic\" query mode that doesn't require knowledge of NRQL. Improved query experience: You can query both the Metric data type and metric timeslice data. Easy customization: Every visualization now has the query accessible. You can augment any curated chart just by changing the NRQL query. Improved visualizations Not only can you select a wide range of visualization options, you can also add more to your dashboards: Better display options: Make your data easier to understand by using visualizations other than dense, line-heavy charts. New Relic One also offers a better TV mode. Facet linking: You can filter your dashboards by faceted attributes, making your dashboards more interactive and easy to use. There's also support for cases. Learn more. More charts or widgets in an area: Insights restricted you to a 3-across limit. Now you can display up to 12 across your dashboard, providing increased data density along with improved tooltips and tracking across charts. Easier creation of multi-page dashboards: Insights referred to these as data apps. Your Insights data apps are preserved as multi-page dashboards in New Relic One. Chart consistency and flexibility: Dashboards include facet color consistency across widgets and faster loading times for more performant dashboards. Also, you can add any chart type to a dashboard in New Relic One! The New Relic Insights UI has served our users well for many years, but it's time to give you an even better experience. Join us and make the switch to New Relic One! Steps for a successful transition The transition to New Relic One has two parts: the UI and mobile app experience (April 12, 2021) and the Dashboard API (July 2021). Insights functionality Transition to New Relic One UI We have already taken care of your transition from Insights to New Relic One for you! As of April 12, 2021, your old Insights web URLs redirect automatically to New Relic One. We recommend that you familiarize yourself with the new UI features available to you, as described in this transition guide. If you need to view any Insights charts embedded in other websites, go to one.newrelic.com > More > Manage Data. (These older embedded charts will continue to function as expected.) Mobile apps Your Insights mobile app is deprecated as of April 11, 2021. Go to the Google Play Store 2 or Apple App store. Delete your old Insights mobile app, and download the New Relic One mobile app. tvOS apps and large displays New Relic's tvOS app is still available. No action is needed by you at this time. Some New Relic customers with the original pricing model may have set up dashboards on wall screens for restricted users with kiosk mode. No action is required for you to continue to view these dashboards. APIs In July of 2021, the Insights Dashboard API will be deprecated and replaced with NerdGraph functionality. For more on this change, and tips on how to migrate, see NerdGraph API for dashboards. Partnership accounts This applies only if your account is one of the few using our partnership account structure to deliver New Relic services to your direct customers. In this situation, the Insights EOL will not affect your customers’ pricing. This is simply an EOL for the UI, not an EOL for the account type. Questions If you have questions about the transition, please comment in our Explorers Hub post. Or, if you work with an account team, they will be happy to help you.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 223.01955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transition to <em>New</em> <em>Relic</em> <em>One</em> from Insights",
        "sections": "Transition to <em>New</em> <em>Relic</em> <em>One</em> from Insights",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": "Important As of April 12, 2021, we&#x27;re upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in <em>New</em> <em>Relic</em> <em>One</em>. For more details about this migration and how you can easily plan for this transition, see"
      },
      "id": "6044171164441f454a378ee2"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/core-concepts/new-relic-lookout-monitor-your-estate-glance": [
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Which relationships are created?",
        "Source: New Relic agent",
        "Source: Infrastructure",
        "Source: Synthetics monitor",
        "Source: Kubernetes",
        "External services",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-25T22:47:00Z",
      "updated_at": "2021-06-15T10:28:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. If you don’t see the edit relationships button, contact your account admin. Which relationships are created? These are the relationships created between entities: Source: New Relic agent Relationship source Relationship type Relationship target Why is the relationship created? Application instrumented with a New Relic agent CALLS Application instrumented with a New Relic agent Relationships between applications monitored by New Relic agents are reported using the DurationByCaller metric. The callee reports the metric. For example, the metric DurationByCaller/Mobile/100/1234/HTTP/all indicates that the caller is APPLICATION 1234 for account 100. Application instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent An application (caller) that calls a service (callee) monitored by New Relic creates a relationship that's reported by the caller using the ExternalApp metric. For example, the metric ExternalApp/dirac.vips.net/100#1234/all indicates that the callee is APPLICATION 1234 for account 100. The metric is reported if the callee successfully responds to the caller. Service instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent When a New Relic agent detects that a service (caller) calls another service (callee) instrumented by New Relic, the callee reports the metric ClientApplication. For example, the metric ClientApplication/100#1234/all indicates that the caller is APPLICATION 1234 for account 100. Service instrumented with a New Relic agent CALLS A datastore instance When an application calls a datastore instance it creates a relationship reported with the DatastoreInstance metric. For example, the metric Datastore/instance/MySQL/172.16.16.3/3306 indicates the datastore instance is vendor: MySQL, host: 172.16.16.3, port: 3306. This metric also supports the legacy datastore instance format Datastore/instance/MySQL/172.16.16.3:3306. Currently we cannot determine whether the datastore instance is instrumented by New Relic and has an entity associated to it. APM agent SERVES Browser agent This relationship is created when an APM agent injects the Browser agent into a page. Workload entity CONTAINS Any entity When a workload is created or updated, relationships for each of the entities that belong to the workload are created. Because some workloads are “dynamic” (defined by tags), relationships are re-created every 5 minutes. This way entities can join or leave the workload. Source: Infrastructure Relationship source Relationship type Relationship target Why is the relationship created? Infrastructure host HOSTS Application This relationship is created when an application is running in one or more hosts, and the infra agent is running in those hosts. Infrastructure host HOSTS Container This relationship is created when containers are running in one or more hosts, and the host is instrumented with the infra agent. Source: Synthetics monitor Relationship source Relationship type Relationship target Why is the relationship created? Synthetics Monitor CALLS Browser agent This relationship is created when a synthetics monitor checks a page instrumented with the Browser agent. Synthetics Monitor CALLS APM application Agent events that contain the attribute nr.syntheticsMonitorId have been described as synthetics monitors (the source) interacting with an APM application (the target). If the header exists and the APM application Id exists, a relationship is created between the monitor and the app. Source: Kubernetes Relationship source Relationship type Relationship target Why is the relationship created? Cluster CONTAINS Pod This relationship is created when a pod is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Deployment This relationship is created when a deployment is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS DaemonSet This relationship is created when a DaemonSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS StatefulSet This relationship is created when a StatefulSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Host This relationship is created when a host that's part of a cluster is instrumented with the New Relic Kubernetes integration. Deployment CONTAINS Pod This relationship is created when a deployment creates a pod in a cluster instrumented with the New Relic Kubernetes integration. DaemonSet CONTAINS Pod This relationship is created when a DaemonSet is created a pod in a cluster instrumented with the New Relic Kubernetes integration. StatefulSet CONTAINS Pod This relationship is created when a StatefulSet creates a pod in a cluster instrumented with the New Relic Kubernetes integration. Pod CONTAINS Container This relationship is created when a pod creates a container in a cluster instrumented with the New Relic Kubernetes integration. Host HOSTS Pod This relationship is created when a pod is running in a host that's part of a cluster instrumented with the New Relic Kubernetes integration. Container HOSTS Application This relationship is created when an application is running in docker, and the hosts where docker is running are instrumented by the the infra agent. External services Relationship source Relationship type Relationship target Why is the relationship created? External service CALLS External service When the relationship is created, the external service reports a span with its name on the service.name attribute and the name of the service that initiates the call in the parent.service.name attribute. Application IS External service A relationship between an application and an external service is created so that users can navigate between them using the related entities component. Browser application instrumented with a New Relic agent CALLS External service A Browser application reports an Ajax/HostTransaction metric when calling an external service (URL). Example metric: Ajax/HostTransaction/api.segment.io:443/CallbackTime' Cluster CONTAINS External service When the relationship is created, the external service reports a span with the attribute k8s.cluster.name, the name of the cluster. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Pod HOSTS External service When the relationship is created, the external service reports a span with the following attributes: service.name: The name of the service. k8s.cluster.name: The name of the cluster. k8s.pod.name: The name of the pod that’s running the service. k8s.namespace.name: The namespace where the pod was created. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 277.4047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": "<em>New</em> <em>Relic</em> monitoring is built around the <em>concept</em> of the entity. An entity is anything that reports data to <em>New</em> <em>Relic</em>. This document explains: What entities are How to find entity data How to modify existing entity types or create <em>new</em> ones How entities are related to <em>one</em> another How to organize them"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-26T14:46:45Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 252.80493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter workloads to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Transition to New Relic One from Insights",
        "Important",
        "Features",
        "Improved query abilities",
        "Improved visualizations",
        "Steps for a successful transition"
      ],
      "title": "Transition to New Relic One from Insights",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "4af99cd8030909a71d21a359a60af5ac93b93a66",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/transition-new-relic-one-insights/",
      "published_at": "2021-06-26T14:45:52Z",
      "updated_at": "2021-05-22T00:14:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of April 12, 2021, we're upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. Released in 2014, New Relic Insights was our original way to create custom queries, charts, and dashboards. With New Relic One, we have modernized the experience for you to access, analyze, and visualize your data. New Relic One offers an improved charts and dashboards experience, and it provides a platform where we can more rapidly bring new innovations to you. This transition guide can help you understand: What are some of the new and improved features you get with New Relic One charts, dashboards, and queries Why it's easy to transition to New Relic One What to know and considerations when you make the switch How to get the most out of using New Relic One Features You can scroll down to the transition details, but first here are some features we've added that show how New Relic One dashboards are a clear improvement over Insights dashboards. Improved query abilities With New Relic One, you get: Ability to query many accounts from the same widget: New Relic One lets you query across all your associated accounts in one place. Better querying and charting experiences: Query access is available globally, no matter where you are in New Relic One. This includes a \"basic\" query mode that doesn't require knowledge of NRQL. Improved query experience: You can query both the Metric data type and metric timeslice data. Easy customization: Every visualization now has the query accessible. You can augment any curated chart just by changing the NRQL query. Improved visualizations Not only can you select a wide range of visualization options, you can also add more to your dashboards: Better display options: Make your data easier to understand by using visualizations other than dense, line-heavy charts. New Relic One also offers a better TV mode. Facet linking: You can filter your dashboards by faceted attributes, making your dashboards more interactive and easy to use. There's also support for cases. Learn more. More charts or widgets in an area: Insights restricted you to a 3-across limit. Now you can display up to 12 across your dashboard, providing increased data density along with improved tooltips and tracking across charts. Easier creation of multi-page dashboards: Insights referred to these as data apps. Your Insights data apps are preserved as multi-page dashboards in New Relic One. Chart consistency and flexibility: Dashboards include facet color consistency across widgets and faster loading times for more performant dashboards. Also, you can add any chart type to a dashboard in New Relic One! The New Relic Insights UI has served our users well for many years, but it's time to give you an even better experience. Join us and make the switch to New Relic One! Steps for a successful transition The transition to New Relic One has two parts: the UI and mobile app experience (April 12, 2021) and the Dashboard API (July 2021). Insights functionality Transition to New Relic One UI We have already taken care of your transition from Insights to New Relic One for you! As of April 12, 2021, your old Insights web URLs redirect automatically to New Relic One. We recommend that you familiarize yourself with the new UI features available to you, as described in this transition guide. If you need to view any Insights charts embedded in other websites, go to one.newrelic.com > More > Manage Data. (These older embedded charts will continue to function as expected.) Mobile apps Your Insights mobile app is deprecated as of April 11, 2021. Go to the Google Play Store 2 or Apple App store. Delete your old Insights mobile app, and download the New Relic One mobile app. tvOS apps and large displays New Relic's tvOS app is still available. No action is needed by you at this time. Some New Relic customers with the original pricing model may have set up dashboards on wall screens for restricted users with kiosk mode. No action is required for you to continue to view these dashboards. APIs In July of 2021, the Insights Dashboard API will be deprecated and replaced with NerdGraph functionality. For more on this change, and tips on how to migrate, see NerdGraph API for dashboards. Partnership accounts This applies only if your account is one of the few using our partnership account structure to deliver New Relic services to your direct customers. In this situation, the Insights EOL will not affect your customers’ pricing. This is simply an EOL for the UI, not an EOL for the account type. Questions If you have questions about the transition, please comment in our Explorers Hub post. Or, if you work with an account team, they will be happy to help you.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 223.01955,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transition to <em>New</em> <em>Relic</em> <em>One</em> from Insights",
        "sections": "Transition to <em>New</em> <em>Relic</em> <em>One</em> from Insights",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": "Important As of April 12, 2021, we&#x27;re upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in <em>New</em> <em>Relic</em> <em>One</em>. For more details about this migration and how you can easily plan for this transition, see"
      },
      "id": "6044171164441f454a378ee2"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/core-concepts/transition-new-relic-one-insights": [
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Which relationships are created?",
        "Source: New Relic agent",
        "Source: Infrastructure",
        "Source: Synthetics monitor",
        "Source: Kubernetes",
        "External services",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-25T22:47:00Z",
      "updated_at": "2021-06-15T10:28:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. If you don’t see the edit relationships button, contact your account admin. Which relationships are created? These are the relationships created between entities: Source: New Relic agent Relationship source Relationship type Relationship target Why is the relationship created? Application instrumented with a New Relic agent CALLS Application instrumented with a New Relic agent Relationships between applications monitored by New Relic agents are reported using the DurationByCaller metric. The callee reports the metric. For example, the metric DurationByCaller/Mobile/100/1234/HTTP/all indicates that the caller is APPLICATION 1234 for account 100. Application instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent An application (caller) that calls a service (callee) monitored by New Relic creates a relationship that's reported by the caller using the ExternalApp metric. For example, the metric ExternalApp/dirac.vips.net/100#1234/all indicates that the callee is APPLICATION 1234 for account 100. The metric is reported if the callee successfully responds to the caller. Service instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent When a New Relic agent detects that a service (caller) calls another service (callee) instrumented by New Relic, the callee reports the metric ClientApplication. For example, the metric ClientApplication/100#1234/all indicates that the caller is APPLICATION 1234 for account 100. Service instrumented with a New Relic agent CALLS A datastore instance When an application calls a datastore instance it creates a relationship reported with the DatastoreInstance metric. For example, the metric Datastore/instance/MySQL/172.16.16.3/3306 indicates the datastore instance is vendor: MySQL, host: 172.16.16.3, port: 3306. This metric also supports the legacy datastore instance format Datastore/instance/MySQL/172.16.16.3:3306. Currently we cannot determine whether the datastore instance is instrumented by New Relic and has an entity associated to it. APM agent SERVES Browser agent This relationship is created when an APM agent injects the Browser agent into a page. Workload entity CONTAINS Any entity When a workload is created or updated, relationships for each of the entities that belong to the workload are created. Because some workloads are “dynamic” (defined by tags), relationships are re-created every 5 minutes. This way entities can join or leave the workload. Source: Infrastructure Relationship source Relationship type Relationship target Why is the relationship created? Infrastructure host HOSTS Application This relationship is created when an application is running in one or more hosts, and the infra agent is running in those hosts. Infrastructure host HOSTS Container This relationship is created when containers are running in one or more hosts, and the host is instrumented with the infra agent. Source: Synthetics monitor Relationship source Relationship type Relationship target Why is the relationship created? Synthetics Monitor CALLS Browser agent This relationship is created when a synthetics monitor checks a page instrumented with the Browser agent. Synthetics Monitor CALLS APM application Agent events that contain the attribute nr.syntheticsMonitorId have been described as synthetics monitors (the source) interacting with an APM application (the target). If the header exists and the APM application Id exists, a relationship is created between the monitor and the app. Source: Kubernetes Relationship source Relationship type Relationship target Why is the relationship created? Cluster CONTAINS Pod This relationship is created when a pod is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Deployment This relationship is created when a deployment is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS DaemonSet This relationship is created when a DaemonSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS StatefulSet This relationship is created when a StatefulSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Host This relationship is created when a host that's part of a cluster is instrumented with the New Relic Kubernetes integration. Deployment CONTAINS Pod This relationship is created when a deployment creates a pod in a cluster instrumented with the New Relic Kubernetes integration. DaemonSet CONTAINS Pod This relationship is created when a DaemonSet is created a pod in a cluster instrumented with the New Relic Kubernetes integration. StatefulSet CONTAINS Pod This relationship is created when a StatefulSet creates a pod in a cluster instrumented with the New Relic Kubernetes integration. Pod CONTAINS Container This relationship is created when a pod creates a container in a cluster instrumented with the New Relic Kubernetes integration. Host HOSTS Pod This relationship is created when a pod is running in a host that's part of a cluster instrumented with the New Relic Kubernetes integration. Container HOSTS Application This relationship is created when an application is running in docker, and the hosts where docker is running are instrumented by the the infra agent. External services Relationship source Relationship type Relationship target Why is the relationship created? External service CALLS External service When the relationship is created, the external service reports a span with its name on the service.name attribute and the name of the service that initiates the call in the parent.service.name attribute. Application IS External service A relationship between an application and an external service is created so that users can navigate between them using the related entities component. Browser application instrumented with a New Relic agent CALLS External service A Browser application reports an Ajax/HostTransaction metric when calling an external service (URL). Example metric: Ajax/HostTransaction/api.segment.io:443/CallbackTime' Cluster CONTAINS External service When the relationship is created, the external service reports a span with the attribute k8s.cluster.name, the name of the cluster. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Pod HOSTS External service When the relationship is created, the external service reports a span with the following attributes: service.name: The name of the service. k8s.cluster.name: The name of the cluster. k8s.pod.name: The name of the pod that’s running the service. k8s.namespace.name: The namespace where the pod was created. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 277.40463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": "<em>New</em> <em>Relic</em> monitoring is built around the <em>concept</em> of the entity. An entity is anything that reports data to <em>New</em> <em>Relic</em>. This document explains: What entities are How to find entity data How to modify existing entity types or create <em>new</em> ones How entities are related to <em>one</em> another How to organize them"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-26T14:46:45Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 252.8049,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter workloads to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "New Relic Lookout: Monitor your estate at a glance",
        "Why it matters",
        "Requirements",
        "Get started with New Relic Lookout",
        "Circle visualization and table view",
        "Abnormal golden signals",
        "Instant search",
        "Change view",
        "Drill down into the details",
        "Performance tab",
        "Abnormal History tab",
        "Correlations tab",
        "Profile tab",
        "Traces tab",
        "Create a custom view",
        "Query: Compare the last 15 minutes to the same time 1 day ago",
        "Query: Compare a specific time range to the same range a month ago",
        "Example: Unusual increases in error count"
      ],
      "title": "New Relic Lookout: Monitor your estate at a glance",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "9193dcc8851c185ff5d96f6f93ab412bd1be69e9",
      "image": "https://docs.newrelic.com/static/178b37068bad2a68cff027c8bdcf663a/c1b63/lookout-intro.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/new-relic-lookout-monitor-your-estate-glance/",
      "published_at": "2021-06-26T14:45:52Z",
      "updated_at": "2021-05-05T01:24:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Lookout provides visibility into your entire estate. It doesn't require any configuration — you can query anything in your estate that matters to you right now and understand your system as a whole, or dive deep into causes and effects, so you can quickly get the data you need to take action. Know exactly where to focus your attention with New Relic Lookout. The brighter the color, the more severe the change, and the bigger the size, the bigger the scale. Then dig deeper with correlations and abnormal history to see how it impacts your whole system—no configuration needed. Why it matters New Relic Lookout helps software teams of any size discover potential issues before they have an impact. Fill gaps in monitoring with full coverage out-of-the-box, no configuration or setup required. Immediately see anything deviating from normal across your entire estate. Proactively spot emerging problems in a real-time visualization of all system components. Gain faster incidents resolution through automatically surfaced causes and effects. Analyze any data in New Relic database (NRDB), including third-party, open, and custom data. Launch into other areas of New Relic One for deeper understanding Requirements New Relic Lookout requires Pro or Enterprise edition. If you are on Standard edition, you can still use the New Relic Lookout view in the New Relic Explorer. If you want to see data spanning 13-months, correlations, profiles, traces, and other details, you must upgrade to a higher edition. Get started with New Relic Lookout To access New Relic Lookout, click the Apps button in New Relic One and locate the New Relic Lookout launcher. You can also access New Relic Lookout directly from the New Relic One header bar, via the More dropdown. Enablement of key service performance indicator data is required for New Relic Lookout to provide value from the data you already have. The default view provides insight into three key Service performance indicators broken down by application: throughput, response time, and errors. These metrics are analyzed to show how the data has behaved during the last five minutes compared to the prior hour. one.newrelic.com > Apps > New Relic Lookout: Anything that significantly deviates from the trend is automatically discovered by New Relic Lookout, which doesn't require any configuration. Circle visualization and table view Each application (or other facet) is represented by a circle. The size of the circles indicate the magnitude of the signal for that application and the color indicates whether the value has significantly decreased or increased in the last five minutes, based on the standard deviation of the prior hour (default evaluation and comparison time windows.) Please note that the type of signal is important when interpreting your results. When you first look at the legend below, you might be tempted to interpret yellow as good and dark purple as bad, but that is not always the case. Here are some examples: In the APM/Services golden signals, a dark yellow circle in Throughput might signify that something bad has occurred and led to a drop in traffic. At the same time, a dark purple circle might also be concerning due to unexpected load. Both are significant findings worth exploring. In Browser golden signals, a dark purple circle in Page Views might be great, as you are seeing more traffic to your site! With Errors golden signals (in all entity types), a large circle, even if gray (not deviating from normal volume), is worth exploring because a high count of errors in your system is important to investigate. The legend allows you to change the colors used to highlight deviating services To change the color palette, click the gear icon by the low-high color legend. This allows you to change the colors used to highlight deviating services. To get a table view of the same data, click the toggle on the right. You can also hover over each color to filter the view by degree lower or higher deviance. Abnormal golden signals On the right, New Relic Lookout displays the most significantly deviating applications (or other facet) in a side panel, weighted by both the magnitude of the performance indicators and the scale of their deviations. Details include the name of the key performance indicator, their magnitude during the recent time window, and the difference between the averages from one time compared to the other. Instant search Click the magnifying glass icon in the side panel to open a search box. Typing into the search box filters the circles, table, and abnormal signals to applications (or other facets) that contain the text. This is a good way to quickly zoom to various subsystems. New Relic Lookout doesn't rerun the analysis when using the instant search. Change view Click the Change View button on the right side panel. The panel that appears shows you all the entity-specific golden signals you can toggle between out of the box. By choosing the Browser Golden Signal or other views, you can change from the default view. Each new view will have the golden signals appropriate for that entity type. Drill down into the details To analyze an application or facet, click a circle, table row, or abnormal golden signal. The details panel shows the degree of deviation of the performance indicator, a link to the affected entity, and recent alert and deployment activity for that entity, when available. There’s also an indication of whether the selected evaluation time period would be abnormal or not in reference to other comparison time windows, such as the same time yesterday or the same time last week. This allows you to quickly see if the abnormal behavior is odd in general, or just based on the comparison time window. Performance tab The default tab shows charts for other key performance indicators for the selected application or facet. The charts compare the two time windows being analyzed. You can click their titles to rerun the analysis, focusing on the selected key performance indicator. When the target is a New Relic One application, we show the top transactions, error classes, external services, and database operations, alongside links to the relevant New Relic One features. Abnormal History tab This section analyzes past performance of the selected signal and calls out any time periods with notable abnormalities. Each card represents an abnormal time window and can be clicked for more details. The charts will display any relevant violations and deployments in New Relic. Correlations tab New Relic Lookout can find other signals that began behaving differently around the same time as the selected signal for that entity type. Clicking the name of the signal reruns the analysis, focusing on that key performance indicator. The chart titles link to New Relic One when there’s an associated entity in your account. Note that correlations currently do not analyze across accounts. The correlated signals displayed are for others in the account of the original application you are viewing. This helps focus the data on correlations that are more likely related to your issue. Profile tab Based on the same technology as New Relic’s error profiles, this tab compares the last five minutes to the prior hour by default (or whatever time windows you’ve selected with query editing) and surfaces any attributes that have significantly different distributions in the events being targeted by the selected signal. For example, if a custom attribute indicated that a recent throughput spike came from one user, that would surface highly in Profiles if most of the traffic usually comes from many users. Traces tab If the entity has distributed traces configured and available in the selected evaluated time window, the Traces section is enabled. Each card shows a summary of a trace and can be clicked for details. The Explore all traces links to the distributed traces application, filtered to the selected entity. Create a custom view To target signals and time windows beyond the default values, click the Change view button and select Custom view. To create your own view: Select the account or subaccount. Select the data type (metrics or events). Different functionality is available depending on the type. In View a chart with, select the metric or event you are interested in. Default is golden signals (throughput, response time, and errors). You can also build custom queries (filters) to target a signal that isn't on the list. In Facet by, select what the circles represent. Default is appName, but you can also choose host or any other facetable attribute available for the signal you’ve selected. If you plan to save/favorite this new view, provide a name in the Name your view box. Keep in mind that you can edit this view at any time using the pencil icon. The default time windows analyzed by New Relic Lookout are the last five minutes compared to the hour before. Use the time controls (View data from and Compare data to) to target other time windows. one.newrelic.com > Apps > New Relic Lookout: All event and metric data in the New Relic database can be queried using the Edit query feature. Click Analyze to begin analyzing the signal you’ve selected. You can also create your own query: Create your query. This query is comparing data from the past thirty minutes to data from the same range a day ago. Change from Basic to Advanced after clicking the Custom view button. Select the data type (metrics or events). Different functionality is available depending on the type. Enter your query using NRQL. Please note that not all NRQL features are available in the Lookout Advanced query feature. By default, the system will run this query using the last five minutes of data compared to the previous hour. Some examples of the syntax for changing the comparison and evaluation time windows are below. Click Analyze to begin analyzing the signal you’ve selected. Query: Compare the last 15 minutes to the same time 1 day ago Please note that the UNTIL NOW portion is required here unlike in standard NRQL. Without the UNTIL NOW added, the system will query a 5 minute slice of data starting 15 minutes ago SINCE 15 minutes AGO UNTIL NOW COMPARE WITH 1 day ago Copy Query: Compare a specific time range to the same range a month ago SINCE ‘2021-03-07 07:00-0500’ UNTIL ‘2021-03-08 07:00-0500’ COMPARE WITH 1 month ago Copy Or: SINCE ‘today at midnight’ UNTIL ‘now’ COMPARE WITH 1 MONTH AGO Copy Example: Unusual increases in error count The default view of New Relic Lookout shows application status across your estate, comparing the last five minutes to the hour before. Under regular operation, most large systems may have a handful of abnormalities, but usually most things will indicate normal behavior. Suddenly, several circles begin to change to red under the Errors section. This indicates that several applications are experiencing unusual increases in error count. It may be that one or two circles for important systems are red, and perhaps much larger than they usually appear. Clicking one of these can provide more information on what is happening. You might see that the error rate is substantially elevated, even thousands of percent higher than normal. To troubleshoot this issue, here's what you might discover in the New Relic Lookout tabs: Performance would show you data about other signals, illuminating the characteristics of the change in system dynamics. Correlations would surface other applications that are affected and how, as well as opportunities to pivot to other applications that may be closer to the underlying causes. Traces, in turn, would show distributed traces, which can provide specific examples of traffic running through those systems. Abnormal history would show other times in the past week with elevated errors, showing whether or not this problem happens regularly, such as every day at the same time or whenever there is a deployment. Profiles might show that all or most of the new errors share common properties, such as all being isolated to just one region/account/user. Combining the information from these sections, not only can you get a sense of what is going on, but also where to focus actions to resolve the problem.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.76338,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> Lookout: Monitor your estate at a glance",
        "sections": "<em>New</em> <em>Relic</em> Lookout: Monitor your estate at a glance",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " emerging problems in a real-time visualization of all system components. Gain faster incidents resolution through automatically surfaced causes and effects. Analyze any data in <em>New</em> <em>Relic</em> database (NRDB), including third-party, open, and custom data. Launch into other areas of <em>New</em> <em>Relic</em> <em>One</em> for deeper"
      },
      "id": "603e821e64441f5a444e8845"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data": [
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Which relationships are created?",
        "Source: New Relic agent",
        "Source: Infrastructure",
        "Source: Synthetics monitor",
        "Source: Kubernetes",
        "External services",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-25T22:47:00Z",
      "updated_at": "2021-06-15T10:28:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. If you don’t see the edit relationships button, contact your account admin. Which relationships are created? These are the relationships created between entities: Source: New Relic agent Relationship source Relationship type Relationship target Why is the relationship created? Application instrumented with a New Relic agent CALLS Application instrumented with a New Relic agent Relationships between applications monitored by New Relic agents are reported using the DurationByCaller metric. The callee reports the metric. For example, the metric DurationByCaller/Mobile/100/1234/HTTP/all indicates that the caller is APPLICATION 1234 for account 100. Application instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent An application (caller) that calls a service (callee) monitored by New Relic creates a relationship that's reported by the caller using the ExternalApp metric. For example, the metric ExternalApp/dirac.vips.net/100#1234/all indicates that the callee is APPLICATION 1234 for account 100. The metric is reported if the callee successfully responds to the caller. Service instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent When a New Relic agent detects that a service (caller) calls another service (callee) instrumented by New Relic, the callee reports the metric ClientApplication. For example, the metric ClientApplication/100#1234/all indicates that the caller is APPLICATION 1234 for account 100. Service instrumented with a New Relic agent CALLS A datastore instance When an application calls a datastore instance it creates a relationship reported with the DatastoreInstance metric. For example, the metric Datastore/instance/MySQL/172.16.16.3/3306 indicates the datastore instance is vendor: MySQL, host: 172.16.16.3, port: 3306. This metric also supports the legacy datastore instance format Datastore/instance/MySQL/172.16.16.3:3306. Currently we cannot determine whether the datastore instance is instrumented by New Relic and has an entity associated to it. APM agent SERVES Browser agent This relationship is created when an APM agent injects the Browser agent into a page. Workload entity CONTAINS Any entity When a workload is created or updated, relationships for each of the entities that belong to the workload are created. Because some workloads are “dynamic” (defined by tags), relationships are re-created every 5 minutes. This way entities can join or leave the workload. Source: Infrastructure Relationship source Relationship type Relationship target Why is the relationship created? Infrastructure host HOSTS Application This relationship is created when an application is running in one or more hosts, and the infra agent is running in those hosts. Infrastructure host HOSTS Container This relationship is created when containers are running in one or more hosts, and the host is instrumented with the infra agent. Source: Synthetics monitor Relationship source Relationship type Relationship target Why is the relationship created? Synthetics Monitor CALLS Browser agent This relationship is created when a synthetics monitor checks a page instrumented with the Browser agent. Synthetics Monitor CALLS APM application Agent events that contain the attribute nr.syntheticsMonitorId have been described as synthetics monitors (the source) interacting with an APM application (the target). If the header exists and the APM application Id exists, a relationship is created between the monitor and the app. Source: Kubernetes Relationship source Relationship type Relationship target Why is the relationship created? Cluster CONTAINS Pod This relationship is created when a pod is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Deployment This relationship is created when a deployment is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS DaemonSet This relationship is created when a DaemonSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS StatefulSet This relationship is created when a StatefulSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Host This relationship is created when a host that's part of a cluster is instrumented with the New Relic Kubernetes integration. Deployment CONTAINS Pod This relationship is created when a deployment creates a pod in a cluster instrumented with the New Relic Kubernetes integration. DaemonSet CONTAINS Pod This relationship is created when a DaemonSet is created a pod in a cluster instrumented with the New Relic Kubernetes integration. StatefulSet CONTAINS Pod This relationship is created when a StatefulSet creates a pod in a cluster instrumented with the New Relic Kubernetes integration. Pod CONTAINS Container This relationship is created when a pod creates a container in a cluster instrumented with the New Relic Kubernetes integration. Host HOSTS Pod This relationship is created when a pod is running in a host that's part of a cluster instrumented with the New Relic Kubernetes integration. Container HOSTS Application This relationship is created when an application is running in docker, and the hosts where docker is running are instrumented by the the infra agent. External services Relationship source Relationship type Relationship target Why is the relationship created? External service CALLS External service When the relationship is created, the external service reports a span with its name on the service.name attribute and the name of the service that initiates the call in the parent.service.name attribute. Application IS External service A relationship between an application and an external service is created so that users can navigate between them using the related entities component. Browser application instrumented with a New Relic agent CALLS External service A Browser application reports an Ajax/HostTransaction metric when calling an external service (URL). Example metric: Ajax/HostTransaction/api.segment.io:443/CallbackTime' Cluster CONTAINS External service When the relationship is created, the external service reports a span with the attribute k8s.cluster.name, the name of the cluster. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Pod HOSTS External service When the relationship is created, the external service reports a span with the following attributes: service.name: The name of the service. k8s.cluster.name: The name of the cluster. k8s.pod.name: The name of the pod that’s running the service. k8s.namespace.name: The namespace where the pod was created. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 277.40463,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": "<em>New</em> <em>Relic</em> monitoring is built around the <em>concept</em> of the entity. An entity is anything that reports data to <em>New</em> <em>Relic</em>. This document explains: What entities are How to find entity data How to modify existing entity types or create <em>new</em> ones How entities are related to <em>one</em> another How to organize them"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Transition to New Relic One from Insights",
        "Important",
        "Features",
        "Improved query abilities",
        "Improved visualizations",
        "Steps for a successful transition"
      ],
      "title": "Transition to New Relic One from Insights",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "4af99cd8030909a71d21a359a60af5ac93b93a66",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/transition-new-relic-one-insights/",
      "published_at": "2021-06-26T14:45:52Z",
      "updated_at": "2021-05-22T00:14:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of April 12, 2021, we're upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. Released in 2014, New Relic Insights was our original way to create custom queries, charts, and dashboards. With New Relic One, we have modernized the experience for you to access, analyze, and visualize your data. New Relic One offers an improved charts and dashboards experience, and it provides a platform where we can more rapidly bring new innovations to you. This transition guide can help you understand: What are some of the new and improved features you get with New Relic One charts, dashboards, and queries Why it's easy to transition to New Relic One What to know and considerations when you make the switch How to get the most out of using New Relic One Features You can scroll down to the transition details, but first here are some features we've added that show how New Relic One dashboards are a clear improvement over Insights dashboards. Improved query abilities With New Relic One, you get: Ability to query many accounts from the same widget: New Relic One lets you query across all your associated accounts in one place. Better querying and charting experiences: Query access is available globally, no matter where you are in New Relic One. This includes a \"basic\" query mode that doesn't require knowledge of NRQL. Improved query experience: You can query both the Metric data type and metric timeslice data. Easy customization: Every visualization now has the query accessible. You can augment any curated chart just by changing the NRQL query. Improved visualizations Not only can you select a wide range of visualization options, you can also add more to your dashboards: Better display options: Make your data easier to understand by using visualizations other than dense, line-heavy charts. New Relic One also offers a better TV mode. Facet linking: You can filter your dashboards by faceted attributes, making your dashboards more interactive and easy to use. There's also support for cases. Learn more. More charts or widgets in an area: Insights restricted you to a 3-across limit. Now you can display up to 12 across your dashboard, providing increased data density along with improved tooltips and tracking across charts. Easier creation of multi-page dashboards: Insights referred to these as data apps. Your Insights data apps are preserved as multi-page dashboards in New Relic One. Chart consistency and flexibility: Dashboards include facet color consistency across widgets and faster loading times for more performant dashboards. Also, you can add any chart type to a dashboard in New Relic One! The New Relic Insights UI has served our users well for many years, but it's time to give you an even better experience. Join us and make the switch to New Relic One! Steps for a successful transition The transition to New Relic One has two parts: the UI and mobile app experience (April 12, 2021) and the Dashboard API (July 2021). Insights functionality Transition to New Relic One UI We have already taken care of your transition from Insights to New Relic One for you! As of April 12, 2021, your old Insights web URLs redirect automatically to New Relic One. We recommend that you familiarize yourself with the new UI features available to you, as described in this transition guide. If you need to view any Insights charts embedded in other websites, go to one.newrelic.com > More > Manage Data. (These older embedded charts will continue to function as expected.) Mobile apps Your Insights mobile app is deprecated as of April 11, 2021. Go to the Google Play Store 2 or Apple App store. Delete your old Insights mobile app, and download the New Relic One mobile app. tvOS apps and large displays New Relic's tvOS app is still available. No action is needed by you at this time. Some New Relic customers with the original pricing model may have set up dashboards on wall screens for restricted users with kiosk mode. No action is required for you to continue to view these dashboards. APIs In July of 2021, the Insights Dashboard API will be deprecated and replaced with NerdGraph functionality. For more on this change, and tips on how to migrate, see NerdGraph API for dashboards. Partnership accounts This applies only if your account is one of the few using our partnership account structure to deliver New Relic services to your direct customers. In this situation, the Insights EOL will not affect your customers’ pricing. This is simply an EOL for the UI, not an EOL for the account type. Questions If you have questions about the transition, please comment in our Explorers Hub post. Or, if you work with an account team, they will be happy to help you.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 223.01953,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transition to <em>New</em> <em>Relic</em> <em>One</em> from Insights",
        "sections": "Transition to <em>New</em> <em>Relic</em> <em>One</em> from Insights",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": "Important As of April 12, 2021, we&#x27;re upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in <em>New</em> <em>Relic</em> <em>One</em>. For more details about this migration and how you can easily plan for this transition, see"
      },
      "id": "6044171164441f454a378ee2"
    },
    {
      "sections": [
        "New Relic Lookout: Monitor your estate at a glance",
        "Why it matters",
        "Requirements",
        "Get started with New Relic Lookout",
        "Circle visualization and table view",
        "Abnormal golden signals",
        "Instant search",
        "Change view",
        "Drill down into the details",
        "Performance tab",
        "Abnormal History tab",
        "Correlations tab",
        "Profile tab",
        "Traces tab",
        "Create a custom view",
        "Query: Compare the last 15 minutes to the same time 1 day ago",
        "Query: Compare a specific time range to the same range a month ago",
        "Example: Unusual increases in error count"
      ],
      "title": "New Relic Lookout: Monitor your estate at a glance",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "9193dcc8851c185ff5d96f6f93ab412bd1be69e9",
      "image": "https://docs.newrelic.com/static/178b37068bad2a68cff027c8bdcf663a/c1b63/lookout-intro.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/new-relic-lookout-monitor-your-estate-glance/",
      "published_at": "2021-06-26T14:45:52Z",
      "updated_at": "2021-05-05T01:24:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Lookout provides visibility into your entire estate. It doesn't require any configuration — you can query anything in your estate that matters to you right now and understand your system as a whole, or dive deep into causes and effects, so you can quickly get the data you need to take action. Know exactly where to focus your attention with New Relic Lookout. The brighter the color, the more severe the change, and the bigger the size, the bigger the scale. Then dig deeper with correlations and abnormal history to see how it impacts your whole system—no configuration needed. Why it matters New Relic Lookout helps software teams of any size discover potential issues before they have an impact. Fill gaps in monitoring with full coverage out-of-the-box, no configuration or setup required. Immediately see anything deviating from normal across your entire estate. Proactively spot emerging problems in a real-time visualization of all system components. Gain faster incidents resolution through automatically surfaced causes and effects. Analyze any data in New Relic database (NRDB), including third-party, open, and custom data. Launch into other areas of New Relic One for deeper understanding Requirements New Relic Lookout requires Pro or Enterprise edition. If you are on Standard edition, you can still use the New Relic Lookout view in the New Relic Explorer. If you want to see data spanning 13-months, correlations, profiles, traces, and other details, you must upgrade to a higher edition. Get started with New Relic Lookout To access New Relic Lookout, click the Apps button in New Relic One and locate the New Relic Lookout launcher. You can also access New Relic Lookout directly from the New Relic One header bar, via the More dropdown. Enablement of key service performance indicator data is required for New Relic Lookout to provide value from the data you already have. The default view provides insight into three key Service performance indicators broken down by application: throughput, response time, and errors. These metrics are analyzed to show how the data has behaved during the last five minutes compared to the prior hour. one.newrelic.com > Apps > New Relic Lookout: Anything that significantly deviates from the trend is automatically discovered by New Relic Lookout, which doesn't require any configuration. Circle visualization and table view Each application (or other facet) is represented by a circle. The size of the circles indicate the magnitude of the signal for that application and the color indicates whether the value has significantly decreased or increased in the last five minutes, based on the standard deviation of the prior hour (default evaluation and comparison time windows.) Please note that the type of signal is important when interpreting your results. When you first look at the legend below, you might be tempted to interpret yellow as good and dark purple as bad, but that is not always the case. Here are some examples: In the APM/Services golden signals, a dark yellow circle in Throughput might signify that something bad has occurred and led to a drop in traffic. At the same time, a dark purple circle might also be concerning due to unexpected load. Both are significant findings worth exploring. In Browser golden signals, a dark purple circle in Page Views might be great, as you are seeing more traffic to your site! With Errors golden signals (in all entity types), a large circle, even if gray (not deviating from normal volume), is worth exploring because a high count of errors in your system is important to investigate. The legend allows you to change the colors used to highlight deviating services To change the color palette, click the gear icon by the low-high color legend. This allows you to change the colors used to highlight deviating services. To get a table view of the same data, click the toggle on the right. You can also hover over each color to filter the view by degree lower or higher deviance. Abnormal golden signals On the right, New Relic Lookout displays the most significantly deviating applications (or other facet) in a side panel, weighted by both the magnitude of the performance indicators and the scale of their deviations. Details include the name of the key performance indicator, their magnitude during the recent time window, and the difference between the averages from one time compared to the other. Instant search Click the magnifying glass icon in the side panel to open a search box. Typing into the search box filters the circles, table, and abnormal signals to applications (or other facets) that contain the text. This is a good way to quickly zoom to various subsystems. New Relic Lookout doesn't rerun the analysis when using the instant search. Change view Click the Change View button on the right side panel. The panel that appears shows you all the entity-specific golden signals you can toggle between out of the box. By choosing the Browser Golden Signal or other views, you can change from the default view. Each new view will have the golden signals appropriate for that entity type. Drill down into the details To analyze an application or facet, click a circle, table row, or abnormal golden signal. The details panel shows the degree of deviation of the performance indicator, a link to the affected entity, and recent alert and deployment activity for that entity, when available. There’s also an indication of whether the selected evaluation time period would be abnormal or not in reference to other comparison time windows, such as the same time yesterday or the same time last week. This allows you to quickly see if the abnormal behavior is odd in general, or just based on the comparison time window. Performance tab The default tab shows charts for other key performance indicators for the selected application or facet. The charts compare the two time windows being analyzed. You can click their titles to rerun the analysis, focusing on the selected key performance indicator. When the target is a New Relic One application, we show the top transactions, error classes, external services, and database operations, alongside links to the relevant New Relic One features. Abnormal History tab This section analyzes past performance of the selected signal and calls out any time periods with notable abnormalities. Each card represents an abnormal time window and can be clicked for more details. The charts will display any relevant violations and deployments in New Relic. Correlations tab New Relic Lookout can find other signals that began behaving differently around the same time as the selected signal for that entity type. Clicking the name of the signal reruns the analysis, focusing on that key performance indicator. The chart titles link to New Relic One when there’s an associated entity in your account. Note that correlations currently do not analyze across accounts. The correlated signals displayed are for others in the account of the original application you are viewing. This helps focus the data on correlations that are more likely related to your issue. Profile tab Based on the same technology as New Relic’s error profiles, this tab compares the last five minutes to the prior hour by default (or whatever time windows you’ve selected with query editing) and surfaces any attributes that have significantly different distributions in the events being targeted by the selected signal. For example, if a custom attribute indicated that a recent throughput spike came from one user, that would surface highly in Profiles if most of the traffic usually comes from many users. Traces tab If the entity has distributed traces configured and available in the selected evaluated time window, the Traces section is enabled. Each card shows a summary of a trace and can be clicked for details. The Explore all traces links to the distributed traces application, filtered to the selected entity. Create a custom view To target signals and time windows beyond the default values, click the Change view button and select Custom view. To create your own view: Select the account or subaccount. Select the data type (metrics or events). Different functionality is available depending on the type. In View a chart with, select the metric or event you are interested in. Default is golden signals (throughput, response time, and errors). You can also build custom queries (filters) to target a signal that isn't on the list. In Facet by, select what the circles represent. Default is appName, but you can also choose host or any other facetable attribute available for the signal you’ve selected. If you plan to save/favorite this new view, provide a name in the Name your view box. Keep in mind that you can edit this view at any time using the pencil icon. The default time windows analyzed by New Relic Lookout are the last five minutes compared to the hour before. Use the time controls (View data from and Compare data to) to target other time windows. one.newrelic.com > Apps > New Relic Lookout: All event and metric data in the New Relic database can be queried using the Edit query feature. Click Analyze to begin analyzing the signal you’ve selected. You can also create your own query: Create your query. This query is comparing data from the past thirty minutes to data from the same range a day ago. Change from Basic to Advanced after clicking the Custom view button. Select the data type (metrics or events). Different functionality is available depending on the type. Enter your query using NRQL. Please note that not all NRQL features are available in the Lookout Advanced query feature. By default, the system will run this query using the last five minutes of data compared to the previous hour. Some examples of the syntax for changing the comparison and evaluation time windows are below. Click Analyze to begin analyzing the signal you’ve selected. Query: Compare the last 15 minutes to the same time 1 day ago Please note that the UNTIL NOW portion is required here unlike in standard NRQL. Without the UNTIL NOW added, the system will query a 5 minute slice of data starting 15 minutes ago SINCE 15 minutes AGO UNTIL NOW COMPARE WITH 1 day ago Copy Query: Compare a specific time range to the same range a month ago SINCE ‘2021-03-07 07:00-0500’ UNTIL ‘2021-03-08 07:00-0500’ COMPARE WITH 1 month ago Copy Or: SINCE ‘today at midnight’ UNTIL ‘now’ COMPARE WITH 1 MONTH AGO Copy Example: Unusual increases in error count The default view of New Relic Lookout shows application status across your estate, comparing the last five minutes to the hour before. Under regular operation, most large systems may have a handful of abnormalities, but usually most things will indicate normal behavior. Suddenly, several circles begin to change to red under the Errors section. This indicates that several applications are experiencing unusual increases in error count. It may be that one or two circles for important systems are red, and perhaps much larger than they usually appear. Clicking one of these can provide more information on what is happening. You might see that the error rate is substantially elevated, even thousands of percent higher than normal. To troubleshoot this issue, here's what you might discover in the New Relic Lookout tabs: Performance would show you data about other signals, illuminating the characteristics of the change in system dynamics. Correlations would surface other applications that are affected and how, as well as opportunities to pivot to other applications that may be closer to the underlying causes. Traces, in turn, would show distributed traces, which can provide specific examples of traffic running through those systems. Abnormal history would show other times in the past week with elevated errors, showing whether or not this problem happens regularly, such as every day at the same time or whenever there is a deployment. Profiles might show that all or most of the new errors share common properties, such as all being isolated to just one region/account/user. Combining the information from these sections, not only can you get a sense of what is going on, but also where to focus actions to resolve the problem.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.76338,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> Lookout: Monitor your estate at a glance",
        "sections": "<em>New</em> <em>Relic</em> Lookout: Monitor your estate at a glance",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " emerging problems in a real-time visualization of all system components. Gain faster incidents resolution through automatically surfaced causes and effects. Analyze any data in <em>New</em> <em>Relic</em> database (NRDB), including third-party, open, and custom data. Launch into other areas of <em>New</em> <em>Relic</em> <em>One</em> for deeper"
      },
      "id": "603e821e64441f5a444e8845"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic": [
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-26T14:46:45Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 252.80487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter workloads to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Transition to New Relic One from Insights",
        "Important",
        "Features",
        "Improved query abilities",
        "Improved visualizations",
        "Steps for a successful transition"
      ],
      "title": "Transition to New Relic One from Insights",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "4af99cd8030909a71d21a359a60af5ac93b93a66",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/transition-new-relic-one-insights/",
      "published_at": "2021-06-26T14:45:52Z",
      "updated_at": "2021-05-22T00:14:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important As of April 12, 2021, we're upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in New Relic One. For more details about this migration and how you can easily plan for this transition, see our Explorers Hub post. Released in 2014, New Relic Insights was our original way to create custom queries, charts, and dashboards. With New Relic One, we have modernized the experience for you to access, analyze, and visualize your data. New Relic One offers an improved charts and dashboards experience, and it provides a platform where we can more rapidly bring new innovations to you. This transition guide can help you understand: What are some of the new and improved features you get with New Relic One charts, dashboards, and queries Why it's easy to transition to New Relic One What to know and considerations when you make the switch How to get the most out of using New Relic One Features You can scroll down to the transition details, but first here are some features we've added that show how New Relic One dashboards are a clear improvement over Insights dashboards. Improved query abilities With New Relic One, you get: Ability to query many accounts from the same widget: New Relic One lets you query across all your associated accounts in one place. Better querying and charting experiences: Query access is available globally, no matter where you are in New Relic One. This includes a \"basic\" query mode that doesn't require knowledge of NRQL. Improved query experience: You can query both the Metric data type and metric timeslice data. Easy customization: Every visualization now has the query accessible. You can augment any curated chart just by changing the NRQL query. Improved visualizations Not only can you select a wide range of visualization options, you can also add more to your dashboards: Better display options: Make your data easier to understand by using visualizations other than dense, line-heavy charts. New Relic One also offers a better TV mode. Facet linking: You can filter your dashboards by faceted attributes, making your dashboards more interactive and easy to use. There's also support for cases. Learn more. More charts or widgets in an area: Insights restricted you to a 3-across limit. Now you can display up to 12 across your dashboard, providing increased data density along with improved tooltips and tracking across charts. Easier creation of multi-page dashboards: Insights referred to these as data apps. Your Insights data apps are preserved as multi-page dashboards in New Relic One. Chart consistency and flexibility: Dashboards include facet color consistency across widgets and faster loading times for more performant dashboards. Also, you can add any chart type to a dashboard in New Relic One! The New Relic Insights UI has served our users well for many years, but it's time to give you an even better experience. Join us and make the switch to New Relic One! Steps for a successful transition The transition to New Relic One has two parts: the UI and mobile app experience (April 12, 2021) and the Dashboard API (July 2021). Insights functionality Transition to New Relic One UI We have already taken care of your transition from Insights to New Relic One for you! As of April 12, 2021, your old Insights web URLs redirect automatically to New Relic One. We recommend that you familiarize yourself with the new UI features available to you, as described in this transition guide. If you need to view any Insights charts embedded in other websites, go to one.newrelic.com > More > Manage Data. (These older embedded charts will continue to function as expected.) Mobile apps Your Insights mobile app is deprecated as of April 11, 2021. Go to the Google Play Store 2 or Apple App store. Delete your old Insights mobile app, and download the New Relic One mobile app. tvOS apps and large displays New Relic's tvOS app is still available. No action is needed by you at this time. Some New Relic customers with the original pricing model may have set up dashboards on wall screens for restricted users with kiosk mode. No action is required for you to continue to view these dashboards. APIs In July of 2021, the Insights Dashboard API will be deprecated and replaced with NerdGraph functionality. For more on this change, and tips on how to migrate, see NerdGraph API for dashboards. Partnership accounts This applies only if your account is one of the few using our partnership account structure to deliver New Relic services to your direct customers. In this situation, the Insights EOL will not affect your customers’ pricing. This is simply an EOL for the UI, not an EOL for the account type. Questions If you have questions about the transition, please comment in our Explorers Hub post. Or, if you work with an account team, they will be happy to help you.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 223.01952,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Transition to <em>New</em> <em>Relic</em> <em>One</em> from Insights",
        "sections": "Transition to <em>New</em> <em>Relic</em> <em>One</em> from Insights",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": "Important As of April 12, 2021, we&#x27;re upgrading Insights to an improved web and mobile experience! All of your Insights URLs will be redirected automatically to the corresponding dashboards in <em>New</em> <em>Relic</em> <em>One</em>. For more details about this migration and how you can easily plan for this transition, see"
      },
      "id": "6044171164441f454a378ee2"
    },
    {
      "sections": [
        "New Relic Lookout: Monitor your estate at a glance",
        "Why it matters",
        "Requirements",
        "Get started with New Relic Lookout",
        "Circle visualization and table view",
        "Abnormal golden signals",
        "Instant search",
        "Change view",
        "Drill down into the details",
        "Performance tab",
        "Abnormal History tab",
        "Correlations tab",
        "Profile tab",
        "Traces tab",
        "Create a custom view",
        "Query: Compare the last 15 minutes to the same time 1 day ago",
        "Query: Compare a specific time range to the same range a month ago",
        "Example: Unusual increases in error count"
      ],
      "title": "New Relic Lookout: Monitor your estate at a glance",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "9193dcc8851c185ff5d96f6f93ab412bd1be69e9",
      "image": "https://docs.newrelic.com/static/178b37068bad2a68cff027c8bdcf663a/c1b63/lookout-intro.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/new-relic-lookout-monitor-your-estate-glance/",
      "published_at": "2021-06-26T14:45:52Z",
      "updated_at": "2021-05-05T01:24:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Lookout provides visibility into your entire estate. It doesn't require any configuration — you can query anything in your estate that matters to you right now and understand your system as a whole, or dive deep into causes and effects, so you can quickly get the data you need to take action. Know exactly where to focus your attention with New Relic Lookout. The brighter the color, the more severe the change, and the bigger the size, the bigger the scale. Then dig deeper with correlations and abnormal history to see how it impacts your whole system—no configuration needed. Why it matters New Relic Lookout helps software teams of any size discover potential issues before they have an impact. Fill gaps in monitoring with full coverage out-of-the-box, no configuration or setup required. Immediately see anything deviating from normal across your entire estate. Proactively spot emerging problems in a real-time visualization of all system components. Gain faster incidents resolution through automatically surfaced causes and effects. Analyze any data in New Relic database (NRDB), including third-party, open, and custom data. Launch into other areas of New Relic One for deeper understanding Requirements New Relic Lookout requires Pro or Enterprise edition. If you are on Standard edition, you can still use the New Relic Lookout view in the New Relic Explorer. If you want to see data spanning 13-months, correlations, profiles, traces, and other details, you must upgrade to a higher edition. Get started with New Relic Lookout To access New Relic Lookout, click the Apps button in New Relic One and locate the New Relic Lookout launcher. You can also access New Relic Lookout directly from the New Relic One header bar, via the More dropdown. Enablement of key service performance indicator data is required for New Relic Lookout to provide value from the data you already have. The default view provides insight into three key Service performance indicators broken down by application: throughput, response time, and errors. These metrics are analyzed to show how the data has behaved during the last five minutes compared to the prior hour. one.newrelic.com > Apps > New Relic Lookout: Anything that significantly deviates from the trend is automatically discovered by New Relic Lookout, which doesn't require any configuration. Circle visualization and table view Each application (or other facet) is represented by a circle. The size of the circles indicate the magnitude of the signal for that application and the color indicates whether the value has significantly decreased or increased in the last five minutes, based on the standard deviation of the prior hour (default evaluation and comparison time windows.) Please note that the type of signal is important when interpreting your results. When you first look at the legend below, you might be tempted to interpret yellow as good and dark purple as bad, but that is not always the case. Here are some examples: In the APM/Services golden signals, a dark yellow circle in Throughput might signify that something bad has occurred and led to a drop in traffic. At the same time, a dark purple circle might also be concerning due to unexpected load. Both are significant findings worth exploring. In Browser golden signals, a dark purple circle in Page Views might be great, as you are seeing more traffic to your site! With Errors golden signals (in all entity types), a large circle, even if gray (not deviating from normal volume), is worth exploring because a high count of errors in your system is important to investigate. The legend allows you to change the colors used to highlight deviating services To change the color palette, click the gear icon by the low-high color legend. This allows you to change the colors used to highlight deviating services. To get a table view of the same data, click the toggle on the right. You can also hover over each color to filter the view by degree lower or higher deviance. Abnormal golden signals On the right, New Relic Lookout displays the most significantly deviating applications (or other facet) in a side panel, weighted by both the magnitude of the performance indicators and the scale of their deviations. Details include the name of the key performance indicator, their magnitude during the recent time window, and the difference between the averages from one time compared to the other. Instant search Click the magnifying glass icon in the side panel to open a search box. Typing into the search box filters the circles, table, and abnormal signals to applications (or other facets) that contain the text. This is a good way to quickly zoom to various subsystems. New Relic Lookout doesn't rerun the analysis when using the instant search. Change view Click the Change View button on the right side panel. The panel that appears shows you all the entity-specific golden signals you can toggle between out of the box. By choosing the Browser Golden Signal or other views, you can change from the default view. Each new view will have the golden signals appropriate for that entity type. Drill down into the details To analyze an application or facet, click a circle, table row, or abnormal golden signal. The details panel shows the degree of deviation of the performance indicator, a link to the affected entity, and recent alert and deployment activity for that entity, when available. There’s also an indication of whether the selected evaluation time period would be abnormal or not in reference to other comparison time windows, such as the same time yesterday or the same time last week. This allows you to quickly see if the abnormal behavior is odd in general, or just based on the comparison time window. Performance tab The default tab shows charts for other key performance indicators for the selected application or facet. The charts compare the two time windows being analyzed. You can click their titles to rerun the analysis, focusing on the selected key performance indicator. When the target is a New Relic One application, we show the top transactions, error classes, external services, and database operations, alongside links to the relevant New Relic One features. Abnormal History tab This section analyzes past performance of the selected signal and calls out any time periods with notable abnormalities. Each card represents an abnormal time window and can be clicked for more details. The charts will display any relevant violations and deployments in New Relic. Correlations tab New Relic Lookout can find other signals that began behaving differently around the same time as the selected signal for that entity type. Clicking the name of the signal reruns the analysis, focusing on that key performance indicator. The chart titles link to New Relic One when there’s an associated entity in your account. Note that correlations currently do not analyze across accounts. The correlated signals displayed are for others in the account of the original application you are viewing. This helps focus the data on correlations that are more likely related to your issue. Profile tab Based on the same technology as New Relic’s error profiles, this tab compares the last five minutes to the prior hour by default (or whatever time windows you’ve selected with query editing) and surfaces any attributes that have significantly different distributions in the events being targeted by the selected signal. For example, if a custom attribute indicated that a recent throughput spike came from one user, that would surface highly in Profiles if most of the traffic usually comes from many users. Traces tab If the entity has distributed traces configured and available in the selected evaluated time window, the Traces section is enabled. Each card shows a summary of a trace and can be clicked for details. The Explore all traces links to the distributed traces application, filtered to the selected entity. Create a custom view To target signals and time windows beyond the default values, click the Change view button and select Custom view. To create your own view: Select the account or subaccount. Select the data type (metrics or events). Different functionality is available depending on the type. In View a chart with, select the metric or event you are interested in. Default is golden signals (throughput, response time, and errors). You can also build custom queries (filters) to target a signal that isn't on the list. In Facet by, select what the circles represent. Default is appName, but you can also choose host or any other facetable attribute available for the signal you’ve selected. If you plan to save/favorite this new view, provide a name in the Name your view box. Keep in mind that you can edit this view at any time using the pencil icon. The default time windows analyzed by New Relic Lookout are the last five minutes compared to the hour before. Use the time controls (View data from and Compare data to) to target other time windows. one.newrelic.com > Apps > New Relic Lookout: All event and metric data in the New Relic database can be queried using the Edit query feature. Click Analyze to begin analyzing the signal you’ve selected. You can also create your own query: Create your query. This query is comparing data from the past thirty minutes to data from the same range a day ago. Change from Basic to Advanced after clicking the Custom view button. Select the data type (metrics or events). Different functionality is available depending on the type. Enter your query using NRQL. Please note that not all NRQL features are available in the Lookout Advanced query feature. By default, the system will run this query using the last five minutes of data compared to the previous hour. Some examples of the syntax for changing the comparison and evaluation time windows are below. Click Analyze to begin analyzing the signal you’ve selected. Query: Compare the last 15 minutes to the same time 1 day ago Please note that the UNTIL NOW portion is required here unlike in standard NRQL. Without the UNTIL NOW added, the system will query a 5 minute slice of data starting 15 minutes ago SINCE 15 minutes AGO UNTIL NOW COMPARE WITH 1 day ago Copy Query: Compare a specific time range to the same range a month ago SINCE ‘2021-03-07 07:00-0500’ UNTIL ‘2021-03-08 07:00-0500’ COMPARE WITH 1 month ago Copy Or: SINCE ‘today at midnight’ UNTIL ‘now’ COMPARE WITH 1 MONTH AGO Copy Example: Unusual increases in error count The default view of New Relic Lookout shows application status across your estate, comparing the last five minutes to the hour before. Under regular operation, most large systems may have a handful of abnormalities, but usually most things will indicate normal behavior. Suddenly, several circles begin to change to red under the Errors section. This indicates that several applications are experiencing unusual increases in error count. It may be that one or two circles for important systems are red, and perhaps much larger than they usually appear. Clicking one of these can provide more information on what is happening. You might see that the error rate is substantially elevated, even thousands of percent higher than normal. To troubleshoot this issue, here's what you might discover in the New Relic Lookout tabs: Performance would show you data about other signals, illuminating the characteristics of the change in system dynamics. Correlations would surface other applications that are affected and how, as well as opportunities to pivot to other applications that may be closer to the underlying causes. Traces, in turn, would show distributed traces, which can provide specific examples of traffic running through those systems. Abnormal history would show other times in the past week with elevated errors, showing whether or not this problem happens regularly, such as every day at the same time or whenever there is a deployment. Profiles might show that all or most of the new errors share common properties, such as all being isolated to just one region/account/user. Combining the information from these sections, not only can you get a sense of what is going on, but also where to focus actions to resolve the problem.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 210.76337,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> Lookout: Monitor your estate at a glance",
        "sections": "<em>New</em> <em>Relic</em> Lookout: Monitor your estate at a glance",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " emerging problems in a real-time visualization of all system components. Gain faster incidents resolution through automatically surfaced causes and effects. Analyze any data in <em>New</em> <em>Relic</em> database (NRDB), including third-party, open, and custom data. Launch into other areas of <em>New</em> <em>Relic</em> <em>One</em> for deeper"
      },
      "id": "603e821e64441f5a444e8845"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/get-started/introduction-new-relic-one": [
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Which relationships are created?",
        "Source: New Relic agent",
        "Source: Infrastructure",
        "Source: Synthetics monitor",
        "Source: Kubernetes",
        "External services",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-25T22:47:00Z",
      "updated_at": "2021-06-15T10:28:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. If you don’t see the edit relationships button, contact your account admin. Which relationships are created? These are the relationships created between entities: Source: New Relic agent Relationship source Relationship type Relationship target Why is the relationship created? Application instrumented with a New Relic agent CALLS Application instrumented with a New Relic agent Relationships between applications monitored by New Relic agents are reported using the DurationByCaller metric. The callee reports the metric. For example, the metric DurationByCaller/Mobile/100/1234/HTTP/all indicates that the caller is APPLICATION 1234 for account 100. Application instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent An application (caller) that calls a service (callee) monitored by New Relic creates a relationship that's reported by the caller using the ExternalApp metric. For example, the metric ExternalApp/dirac.vips.net/100#1234/all indicates that the callee is APPLICATION 1234 for account 100. The metric is reported if the callee successfully responds to the caller. Service instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent When a New Relic agent detects that a service (caller) calls another service (callee) instrumented by New Relic, the callee reports the metric ClientApplication. For example, the metric ClientApplication/100#1234/all indicates that the caller is APPLICATION 1234 for account 100. Service instrumented with a New Relic agent CALLS A datastore instance When an application calls a datastore instance it creates a relationship reported with the DatastoreInstance metric. For example, the metric Datastore/instance/MySQL/172.16.16.3/3306 indicates the datastore instance is vendor: MySQL, host: 172.16.16.3, port: 3306. This metric also supports the legacy datastore instance format Datastore/instance/MySQL/172.16.16.3:3306. Currently we cannot determine whether the datastore instance is instrumented by New Relic and has an entity associated to it. APM agent SERVES Browser agent This relationship is created when an APM agent injects the Browser agent into a page. Workload entity CONTAINS Any entity When a workload is created or updated, relationships for each of the entities that belong to the workload are created. Because some workloads are “dynamic” (defined by tags), relationships are re-created every 5 minutes. This way entities can join or leave the workload. Source: Infrastructure Relationship source Relationship type Relationship target Why is the relationship created? Infrastructure host HOSTS Application This relationship is created when an application is running in one or more hosts, and the infra agent is running in those hosts. Infrastructure host HOSTS Container This relationship is created when containers are running in one or more hosts, and the host is instrumented with the infra agent. Source: Synthetics monitor Relationship source Relationship type Relationship target Why is the relationship created? Synthetics Monitor CALLS Browser agent This relationship is created when a synthetics monitor checks a page instrumented with the Browser agent. Synthetics Monitor CALLS APM application Agent events that contain the attribute nr.syntheticsMonitorId have been described as synthetics monitors (the source) interacting with an APM application (the target). If the header exists and the APM application Id exists, a relationship is created between the monitor and the app. Source: Kubernetes Relationship source Relationship type Relationship target Why is the relationship created? Cluster CONTAINS Pod This relationship is created when a pod is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Deployment This relationship is created when a deployment is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS DaemonSet This relationship is created when a DaemonSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS StatefulSet This relationship is created when a StatefulSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Host This relationship is created when a host that's part of a cluster is instrumented with the New Relic Kubernetes integration. Deployment CONTAINS Pod This relationship is created when a deployment creates a pod in a cluster instrumented with the New Relic Kubernetes integration. DaemonSet CONTAINS Pod This relationship is created when a DaemonSet is created a pod in a cluster instrumented with the New Relic Kubernetes integration. StatefulSet CONTAINS Pod This relationship is created when a StatefulSet creates a pod in a cluster instrumented with the New Relic Kubernetes integration. Pod CONTAINS Container This relationship is created when a pod creates a container in a cluster instrumented with the New Relic Kubernetes integration. Host HOSTS Pod This relationship is created when a pod is running in a host that's part of a cluster instrumented with the New Relic Kubernetes integration. Container HOSTS Application This relationship is created when an application is running in docker, and the hosts where docker is running are instrumented by the the infra agent. External services Relationship source Relationship type Relationship target Why is the relationship created? External service CALLS External service When the relationship is created, the external service reports a span with its name on the service.name attribute and the name of the service that initiates the call in the parent.service.name attribute. Application IS External service A relationship between an application and an external service is created so that users can navigate between them using the related entities component. Browser application instrumented with a New Relic agent CALLS External service A Browser application reports an Ajax/HostTransaction metric when calling an external service (URL). Example metric: Ajax/HostTransaction/api.segment.io:443/CallbackTime' Cluster CONTAINS External service When the relationship is created, the external service reports a span with the attribute k8s.cluster.name, the name of the cluster. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Pod HOSTS External service When the relationship is created, the external service reports a span with the following attributes: service.name: The name of the service. k8s.cluster.name: The name of the cluster. k8s.pod.name: The name of the pod that’s running the service. k8s.namespace.name: The namespace where the pod was created. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.54794,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an entity in <em>New</em> <em>Relic</em>?",
        "sections": "What is an entity in <em>New</em> <em>Relic</em>?",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ", it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. <em>One</em> <em>use</em> case for passing this attribute is to associate ingested telemetry with an entity already created by <em>New</em> <em>Relic</em>. When the entity.guid attribute is sent, the value"
      },
      "id": "603ec160e7b9d295f72a07fc"
    },
    {
      "sections": [
        "Use tags to help organize and find your data",
        "Tip",
        "Tag format and limits",
        "Best practices and tips",
        "Tips on keeping tags simple:",
        "Tips on using tags consistently:",
        "Tips on cross-team implementation:",
        "Tag examples",
        "Team-related tags",
        "Environment-related tags",
        "Criticality-related tags",
        "How tags are added",
        "Add tags via UI or API",
        "APM agent tags",
        "Infrastructure data tags",
        "Automate tags with our CLI",
        "Use tags to filter the UI",
        "Custom queries, charts, and alerts",
        "Query and alert on APM tags",
        "Throughput across shards",
        "Transactions per team",
        "Alert on error rate for teams",
        "Query and alert on attributes"
      ],
      "title": "Use tags to help organize and find your data",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "e2e2d53776b9109965df9de2a20660e9f60bd479",
      "image": "https://docs.newrelic.com/static/529f55ef72f3e366e6cb4a7be67229b6/c1b63/new-relic-tags-workloads_0.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/use-tags-help-organize-find-your-data/",
      "published_at": "2021-06-26T14:46:45Z",
      "updated_at": "2021-06-08T19:54:19Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the software industry, a tag typically refers to a piece of metadata added to a data set for the purpose of improving data organization and findability. At New Relic, our tags are key:value pairs (like team: operations) added to various sets of data, like monitored apps and hosts, agents, dashboards, and workloads. We make some important attributes available as tags (for example, app metadata like app name and language, and host metadata like host name and AWS region), and you can also add your own custom tags. You can use tags in the UI to filter down to relevant data, as shown here: Here you can see an accountId tag being used to filter workloads to a specific account. You can use tags to: Help organize data coming from a large number of sources and/or to a large number of New Relic accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see example use cases) Better organize and search dashboards and workloads Help you query and chart APM data Tags are useful for organizing data at a high level. If you wanted to add more fine-grained detail, like capturing user names or other high-cardinality values, custom attributes or custom events would be a better solution. Tip At New Relic, tags were previously called \"labels.\" You may sometimes see \"label\" used in our code; for example, some of our APM agent config files use a label config option for tags. Tag format and limits Format requirements and limits for tags: The UI has limits on the total number of tags it can display per entity: Limit of 100 for tags reported by default or added via agent/integration configuration. Limit of 100 for custom tags added via UI or API. The following are maximum character length for tags: Key: 128 characters Value: 256 characters When using our API to add tags, a dash (-) in a tag key is interpreted as a minus symbol. If your tag key has a dash, use back ticks around it (like `key-name`). Best practices and tips Before adding tags, we recommend first seeing how our default tags work for you. When you're ready to add your own tags, read the best practices below to get the most out of them. Tips on keeping tags simple: Start by adding only tags you know you’ll definitely use. Unused tags create noise and may add confusion. Try to use short tags. Shorter tags are easier to parse, and also the UI may sometimes truncate longer tags. (See character limits.) When possible, use keys and values that are human-readable (for example, region: EMEA is better than Param8323 : 1229072). Avoid including several values like regions: EMEA | US | LATAM in a single tag. We recommend using three different tags for that, like region: emea, region: us, and region: latam. If you want to match multiple tags, you can do that using the advanced options in the filter UI. Tips on using tags consistently: Try to be consistent with tag language across your teams and entities. Be consistent with naming. For example, avoid using both region: emea and reg: emea. Be consistent with format. For example, avoid using both camelCase and kebab-case. Be consistent with capitalization. For example, avoid using both env: staging and env: Staging (although tag searching is case-insensitive in the UI and API) Tips on cross-team implementation: One reason for using tags is to improve observability and cost allocation. For this reason, responsibility for tag implementation is often assigned to an observability team, SREs, a group of architects, or a cross-team task force. We recommend the people responsible for implementing tags meet and create an internal policy to describe how the tags are defined and which conventions are to be used. Keep this reference manual up-to-date. Automate the definition of tags when you deploy New Relic agents, at the cloud provider, or through New Relic automation tools, such as the API or Terraform. Create recurring reports that identify entities that are non-compliant with your tagging standards. Tag examples Here are some examples of common ways to use tags to organize data: Team-related tags Creating tags for team names can be helpful to understand which team, group, department, or region was responsible for a change that led to a performance issue. Team examples: team: backend team: frontend team: db Role examples: roles: architecture roles: devops roles: pm Region examples: region: emea region: america region: asia Environment-related tags You can create entities for the environment they belong to. Examples: env: production env: qa env: development env: staging Criticality-related tags You can create tags related to criticality levels, which lets you easier track the most critical issues. Examples: layer: level1 layer: level2 layer: level3 How tags are added Some important attributes, by default, are available for use as tags. For example, the account name, the account ID, and some basic host/server metadata are available as default tags. You can't remove these available-by-default tags. Here are some details about how tags are added for some specific data sources: Add tags via UI or API When you add tags via the UI or API, this occurs at the entity level. This means that, for example, if you have multiple APM agents monitoring a single entity and apply a tag via the UI, that tag is available for all data coming from that entity. To add or delete tags via the UI: Select a monitored entity, like a monitored app or host. Near the entity’s name at the top of the page, select the See metadata and manage tags menu. In the menu that pops up, add or delete a tag. To manage tags via API: see our NerdGraph tagging docs. For a guide to using our CLI to automate tagging, see our developer site. APM agent tags You can add tags via the UI and API or you can add tags using APM agent configuration. There are differences in how these apply tags: Via agent config: These tags are applied at the agent-level, not the entity/application level. This would be a good option if you have multiple agents monitoring different aspects of the same app (for example, a blue-green deployment model). Via the UI or API: These tags are applied at the entity/application level. Here are links to the agent configuration options: C SDK: not available Java Go .NET Node.js PHP Python Ruby For information on querying APM tags, see Query APM tags. Infrastructure data tags There are several ways tags are added to infrastructure entities and services: Use the UI or API to add tags at the entity level. Infrastructure agent: some attributes are available by default as tags. You can also add custom attributes, which are also available as tags in the UI. On-host integrations: some attributes are available by default as tags. You can also add tags by using integration-specific labels config options (for an example, see the labels config for the Apache integration). Cloud service integrations: by default we report tags and labels that are defined in the cloud service. To add tags, you'd add them on the cloud-service-side. Automate tags with our CLI For a guide to automating tags using our CLI tool, see our developer site. Use tags to filter the UI Use the filter field at the top of the New Relic Explorer to filter down to the entities you care about. You can use multiple filter conditions. To filter down to certain entities using tags: From one.newrelic.com, click Explorer. Click the Filter by... field to see a dropdown of available attributes and tags. You can filter by multiple elements and use advanced search options. To find an entity’s metadata and tags from the UI, here are two options: From a list of entities in the UI, at the far right, select an entity's icon. OR Select an entity. Near the top of the page, select the icon. To use the API to view tags, see our NerdGraph docs. Learn about how to use tags with dashboards and how to use tags with workloads. Custom queries, charts, and alerts Different features handle tags differently. Here are some details about how you can use NRQL to query tag data, or create NRQL condition alerts. Query and alert on APM tags You can query APM tags using NRQL. Minimum agent versions: C: not available Go: 2.3.0 Java: 4.9.0 .NET: 8.17 Node: v4.13.0 PHP: not available Python: v4.10.0.112 Ruby: 6.1.0.352 Here are some query examples: Throughput across shards Given a service that is distributed across nine shards, each shard assigned as an environment, we can plot the transaction throughput on all shards using a wildcard query like: SELECT rate(count(apm.service.transaction.duration), 1 minute) FROM Metric WHERE appName LIKE 'MyApp (%' AND transactionType = 'Other' FACET tags.Environment TIMESERIES Copy Transactions per team To see the number of transactions per service for a specific team, we might use a query like: FROM Transaction SELECT count(*) WHERE tags.Team = 'team-a' FACET tags.Project TIMESERIES Copy Alert on error rate for teams You can use a query for your services’ error rate for setting an alert without having to create a rule for each service. Here is the error rate for all services on a team called team-b. And this alert will automatically monitor any new app names added with the team tag. FROM Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Team = 'team-b' FACET appName Copy Related to this, you might create a general rule for a specific service deployed across several environments, so that we have an alarm for a single service monitoring each environment individually: From Metric SELECT count(apm.service.error.count) / count(apm.service.transaction.duration) WHERE tags.Project = 'MyProject' FACET tags.Environment Copy Query and alert on attributes As explained in Tag sources, some important attributes are used as tags. You can query all attributes and create custom charts using NRQL, and create NRQL alert conditions.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 165.44864,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> tags to help organize and find your data",
        "sections": "<em>Use</em> tags to help organize and find your data",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " you can see an accountId tag being used to filter workloads to a specific account. You can <em>use</em> tags to: Help organize data coming from a large number of sources and&#x2F;or to a large number of <em>New</em> <em>Relic</em> accounts Identity teams, roles, environment, or regions to know who’s responsible for what (see"
      },
      "id": "603ebd1228ccbc6278eba754"
    },
    {
      "sections": [
        "Use workloads",
        "Create a workload",
        "Use tags to define the workload content",
        "How the dynamic query logic works",
        "Add dashboards to workloads",
        "Use the API"
      ],
      "title": "Use workloads",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Workloads"
      ],
      "external_id": "c39090bde9b797940e7f5ba0c9610ba39879677b",
      "image": "https://docs.newrelic.com/static/14c811e218cfc8793bb4d2bd4b2aad0b/c1b63/new-relic-workloads-add-dashboards.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/workloads/use-workloads/",
      "published_at": "2021-06-25T23:49:22Z",
      "updated_at": "2021-06-03T10:04:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To view workloads, go to one.newrelic.com and find them on the Explorer. There are three main tabs (Health, Activity, and Owner) plus the header. The Health tab in a workload provides relevant status data that helps you operate the workload: It shows the global status of the workload, as well as the individual status of all the entities that make up the workload at each point in time. It looks like this: It comprises the following: The navigator view shows the entities that make up the workload, and provides controls to group and sort them. If you’ve used queries to dynamically select entities, the workload entities will change over time. The workload status informs about how your workload is performing, based on the individual alerting status of the entities in your workload. With health over time you’ll see whether and how the workload status has changed in the past three hours. If one or more entities are alerting, you’ll get a count of criticals and warnings and a summary of the open conditions, which will make it easier to identify and troubleshoot the most important issues. The Activity tab shows performance data related to the entities in the workload, along with the events that could explain any changes in those time series. It looks like this: Here's the most important sections: Linked dashboards. You can add links to dashboards from your workload, and create pre-filtered, workload-relevant links to dashboards. Golden metrics. These are charts with the most relevant metrics for each entity type, such as number of requests, response time, and error rate for an application. Explore the charts to detect correlations among different entities (for example, two applications) and different stack layers (for example, applications and hosts). The golden metrics that you see for each entity type on a workload can be customized either at the account or the workload level through the NerdGraph API. Events timeline. This includes the start and end time of incidents and anomalies that refer to the workload entities. It also shows other event types that can explain a change in the status or performance of the workload, such as deployments and configuration changes. The Owner tab gives you information about the team responsible for the workload. It looks like this: It contains: The team responsible for the workload. You can include more than one team. The workload description. Share the mission of the workload, and the business logic it represents: Is it a web application? An API? A backend process? Fill in any details that are relevant to your team, or to other teams in your organization. Contact information. From the drop-down menu, choose how your team prefers to be contacted. Links to the most relevant resources to operate the workload. Here you can add links to runbooks, code repositories, productivity tools, or anything else related to the workload that you need at hand. Finally, the header contains the filter bar and the edition controls: Filter bar. Use the advanced filtering options when you need to focus only on certain entities within the workload. Edit workload. Define the entities that are part of the workload, and the accounts they’ll be fetched from. Setup status. Configure how the global workload status will be determined, based on the workload entities health. Summary page. See all the tags that have been added to the workload, as well as metadata such as the workload's identifier (GUID) and account. Create a workload A workload should contain the entities you and your team want to see. Your choice of entities depends on your organization structure and goals. one.newrelic.com > Explorer > Workloads > Create a workload: When you create a workload, you choose the associated accounts and monitored entities. You can use New Relic One or the NerdGraph API to create a workload. Follow these steps to create a workload using the UI: Go to one.newrelic.com and click on the Explorer, and then click + Create a workload. Give the workload a name that will be meaningful for you and your team later. From the Select an account dropdown, select the workload account you'd like to use. Click Choose the scope accounts to check all of the accounts related to this workload. Find and choose the entities that make up the workload. When you have the results you're looking for, you can add specific entities or add the query to dynamically update the entities in the workload. You can search by entity type, tags, or attributes (like entity name, account ID, and AWS region). Click + Add this query to create a list of dynamically updated entities for your workload. We recommend this if you want your workload to update its entities as your system changes. Click + Add next to an entity to add it to your workload. This is a good choice if you know that the entities will stay useful even as your system changes. You can add a combination of queries and specific entities to the workload, which combine according to the query logic. Click Create a workload to save the workload. Once you've created the workload, you can edit it at any time If your workload contains one or more dashboards, you can set filters on those dashboard links. Below are more details about some aspects of how to define workloads: Use tags to define the workload content You can query and select workload entities using both tags and attributes. Therefore, to optimize your use of workloads, it helps to have a good entity-tagging strategy. We recommend reading the tagging documentation. How the dynamic query logic works You can add several individual entities and queries to define a workload. Queries can include multiple search terms. These are combined with an AND operator. Separate queries within a workload are combined with an OR operator. You can wrap strings between percent signs (%) to match exact substrings within a query. If you use substrings in entity names to categorize those entities (for example, <team>-<env>-<appName>), consider using tags complementarily, which are more powerful for filtering and grouping (for example, team:awesome, env:production). We recommend not to use percent signs (%) in dynamic queries that might return over 500 entities. This way, you get a more consistent experience in the user interface. Add dashboards to workloads If you have custom dashboards and you already know which data is relevant to your team for observing and operating their workloads, you can link those dashboards from your workload. You can also set filters on dashboards to scope them to a workload-specific context. When a user selects that dashboard from the workload, it opens with the filter already applied. one.newrelic.com > Apps > Workloads: You can add dashboards to a workload. To add dashboards to a workload: When creating or editing a workload, type Dashboard in the workload search bar to filter to dashboard entities. Add other search terms to filter to specific dashboards. Click Add. one.newrelic.com > Apps > Workloads: You can set filters on the dashboards you've linked to a workload. To filter a workload’s dashboard: From a workload’s Overview page, select a dashboard. Add search terms to filter the dashboard to a view that’s relevant for that workload. Select Save filter for this workload. Use the API You can query, create, and update workloads with our NerdGraph API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.22977,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Use</em> workloads",
        "sections": "<em>Use</em> workloads",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " on your organization structure and goals. <em>one</em>.newrelic.com &gt; Explorer &gt; Workloads &gt; Create a workload: When you create a workload, you choose the associated accounts and monitored entities. You can <em>use</em> <em>New</em> <em>Relic</em> <em>One</em> or the NerdGraph API to create a workload. Follow these steps to create a workload using"
      },
      "id": "603e81e8196a67c972a83db1"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/ui-data/basic-ui-features": [
    {
      "sections": [
        "New Relic feature end of life announcements July 2020",
        "Old Kubernetes integration agent versions",
        "Monitor listing page and Synthetic labels",
        "\"Rollup by\" in Synthetics",
        "Embedded charts",
        "Legacy distributed tracing UI",
        "Violations changes",
        "Connected agents page",
        "Inactive apps in New Relic One",
        "Synthetic monitor alert notifications and conditions"
      ],
      "title": "New Relic feature end of life announcements July 2020",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "1db1d6b3df6d5ac3b983f78f3264cab332cff05a",
      "image": "https://docs.newrelic.com/static/f2b139d12bd8cdc13a9907b7874a4452/0a867/nrone-embed-bb062520.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/new-relic-feature-end-life-announcements-july-2020/",
      "published_at": "2021-06-25T23:01:41Z",
      "updated_at": "2021-06-03T10:03:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to improve your New Relic experience we've made some big improvements to our platform. As a result, we'll be ending support for some old features over the next few weeks. Many have already been publicly announced as \"end-of-life.\" These changes represent our commitment to improve your interactions with our platform. Our mission is one observability platform that unites your telemetry data, connects your full stack, and helps you build more perfect software. To that end we're focusing on simplifying your experience for troubleshooting, alerting, and visualizing data. Here are more details on what's changed, with some helpful links and guides on how to take advantage of new capabilities to achieve the same goals. As always, we're here to help. Please connect with us in the Explorers Hub, or contact your account team with any questions. Old Kubernetes integration agent versions To improve our unified experience, starting from Wednesday, August 12, 2020, Kubernetes integrations that use v1.7 or older will be deprecated. The UI experience in the infrastructure.newrelic.com domain will no longer be available; it will only be available in New Relic One. If you are already using the latest Kubernetes agent version, no action is necessary. If you are using v1.7 or older, you must update your integration in order to continue viewing Kubernetes performance data. Follow the instructions in our documentation to upgrade to the latest version of the Kubernetes integration. Action items for a successful transition: Review the Kubernetes agent deprecation notice. Follow standard procedures to upgrade your Kubernetes agent to the latest version. Learn about the Kubernetes cluster explorer UI in New Relic One. For more information, see the Explorers Hub post. Monitor listing page and Synthetic labels To improve the experience of Synthetic monitors and labels, we've moved both experiences into the New Relic One platform. If you use the REST API for Synthetic label management, you must update to the tags API moving forward. The good news: with the NerdGraph tags API, you can organize and group all your entities in a single request. For more information about any of the following, see the Explorers Hub post. Action items for a successful transition: Synthetic monitors transition Comments Monitor index list When migration is completed, no action is needed on your part to use the new Synthetics entity listing pages. The new experience will be available to you automatically after July 20, 2020. For more information, learn how the explorer in New Relic One replaces the Synthetics monitors index. Existing Synthetics labels You may have already seen an option in the UI to migrate your Synthetics monitor labels to New Relic One tags. If you did not select that option, we've got you covered. Automatic migration from labels to tags starts begins July 8, 2020. For more information, learn how tagging in New Relic One replaces labels for Synthetics monitors. REST API If you use the REST API for Synthetics label management, follow these steps to update to the tags API: Learn more about NerdGraph. Review the NerdGraph tagging API tutorial. Make sure you have a Personal API key to use NerdGraph. Follow the procedures in the Explorers Hub post (look for the How do I transition my scripts from the Synthetics API to the tag API (NerdGraph)? section), and update your existing tags with the GraphiQL explorer at api.newrelic.com/graphiql. NerdGraph is our GraphQL API, a query language that lets you request exactly the data you need, without over-fetching or under-fetching. NerdGraph calls get all the data you need in a single request. NerdGraph also makes it easier to evolve APIs over time. \"Rollup by\" in Synthetics Synthetics is moving to New Relic One to provide a single platform for observability of your complex software systems. To do this we are unifying the tools you use to tag (or label) your services, applications, and monitors. The specific feature that is end-of-life is the Rollup by feature under the Search monitors dropdown menu. You can group monitors by tags in New Relic One without needing a separate Rollup by dropdown. No changes will be required to use the new Synthetic monitor listing pages. The new experiences will be available to you after July 20, 2020. Documentation: Tagging in New Relic One replaces labels for Synthetics monitors. Explorer in New Relic One replaces Synthetics monitors index. Action items for a successful transition: If you currently use Synthetics rollups: Follow the procedures in the Explorer Hub post to recreate the rollups that are being retired. Go to the Explorers Hub post about the rollups EOL. In particular, look for How can New Relic Workloads help me visualize groups of applications and monitors? in the post's FAQs section. Follow the procedures in the Explorers Hub post to recreate the rollups that are being retired. Embedded charts In order to reduce redundancy and provide a more unified experience, the embedded charts functionality will be replaced by the New Relic One Get chart. Embedded charts currently in use and hosted outside the New Relic domain will continue to function. The changes will include: The name on the chart's menu that generates them will change from Embed to Get chart link. For charts that are no longer supported, Embed will be replaced with Get chart link is not supported for this chart. The APM UI page that lists all embedded chart links will no longer be available. Documentation: Explorers Hub post New Relic One's enhanced query builder functionality replaces the EOL embed chart functionality. Action items for a successful transition: You can generate a publicly accessible link to add to internal and external websites. Users do not need to be logged in to New Relic to see the chart link. The ability to embed a chart will remain, but instead of clicking Embed (which will be removed from the UI), you will click Get chart link (which is in the same location). This gives you the ability to get links with an even broader range of chart visuals and behaviors than the one we are retiring. Here's an example of how it looks in New Relic One: To replace existing chart links you created with Embed, create new URLs with New Relic One's Get chart link, and insert them in webpages where they're used. If you have an embedded chart and get the message Get chart link is not supported for this chart, simply run a different query, select an available chart type, and then select Embed. Legacy distributed tracing UI To standardize our user experience, we will be deprecating the older distributed tracing UI, which exists within the rpm.newrelic.com domain. You can access distributed tracing through New Relic One, which provides a superior experience with all the functionality supported in the duplicate UI that is end-of-life. Documentation: Global and service-specific distributed tracing views in New Relic One Deprecated distributed tracing UI Action items for a successful transition: No action required, but you can get ready for the new UI experience. New Relic One's distributed tracing page builds on capabilities you are already familiar with. Get acquainted with the enhanced distributed tracing features in New Relic One, including search and filter capabilities with cross-account trace details, query options with the NerdGraph API, and histogram charts (which can help you quickly understand trace distribution for important values such as duration). Review the trace sampling options available with head-based sampling (standard distributed tracing) and tail-based sampling (Infinite Tracing). Violations changes In order to provide a unified experience, we're deprecating Browser, Mobile, and Synthetics monitor violations and replacing them with the New Relic One equivalent. New Relic One users can access violations by using any of these options: Click the Alerts and AI link in New Relic One's main UI. Review the entity list activity stream. See alert details from inside a specific entity via the new indicator for Operational, Warning, and Critical violations. You will see alert details automatically when navigating to one.newrelic.com. Documentation: Applied Intelligence and alerting in New Relic One Browser alert violations (moving to New Relic One) Mobile violations (moving to New Relic One) Monitor violations (moving to New Relic One) Action items for a successful transition: No action required, but you can get ready for the new UI experience. Here's an example of the detailed information about an Alerts violation for a selected entity in New Relic One. Violation details in New Relic One Comments Holistic view From New Relic One's homepage, the entity list presents an activity stream of all entities with alert violations. You no longer need to jump around individual lists of end-user, mobile, or monitor violations. Enhanced troubleshooting tools From New Relic One's homepage, you will also see an Alerts & AI (Applied Intelligence) link. From here you can solve problems faster with anomaly detection, incident correlation, and noise reduction. Specific violation From a selected entity, you will see a new button identifying the violation as Operational, Warning, or Critical, as well as entity metadata and useful details about the incident. Connected agents page Finding your connected agents has never been easier! You can already do this via the Query your data link in New Relic One. Simply run these NrDailyUsage queries to get a list of connected agents and hosts. The old Connected agents page is end-of-life and will be removed. Documentation: Explorers Hub post NRQL query tools NrDailyUsage data definition Action items for a successful transition: To query your connected apps and hosts, you can use existing NRQL query tools, such as New Relic One's query builder or the GraphQL API. Recommendation: For best results exploring comprehensive data about your apps and hosts, use query builder in New Relic One or the NerdGraph API. For best results with Insights, run separate queries for apps and hosts. Inactive apps in New Relic One Starting June 8, 2020, New Relic One will not continue to display any APM application that hasn't reported data for 93 days. To match our published APM data retention guidelines, applications that have not reported data will be available within the New Relic UI for 90 days. After 90 days, those applications will be removed from the UI. However, key metrics will continue to be available via the New Relic REST API based on subscription level. This is why the application name will remain reserved until the application is permanently deleted via the REST API Explorer. Action items for a successful transition: If you want to reuse an app name for an old app that is no longer reporting data: Use the REST API v2 or API Explorer to get summary data, including app ID, name, health status (look for gray), last reported, etc. Uninstall the agent for your app. Use the REST API or API Explorer to delete the apps. Synthetic monitor alert notifications and conditions In order to provide a unified experience, we're deprecating Synthetics monitor alert notifications and condition violations. We are replacing these pages with a new Synthetics monitor overview experience in New Relic One. This new experience provides visibility into a monitor's open violations and alert conditions with the monitor results in a single view, removing the need to open multiple tabs to view violations or alert conditions. Action items for a successful transition: No action required, but you can get ready for the new UI experience by reviewing our documentation about New Relic Applied Intelligence, which includes: The alerting functionality you are already familiar with in New Relic Alerts, and more Incident Intelligence, which reduces noise and accelerates your incident resolution process Proactive Detection, which surfaces relevant issues and provides automatic explanations to their cause",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.23355,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> feature end of life announcements July 2020",
        "sections": "Inactive apps in <em>New</em> <em>Relic</em> <em>One</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " To improve our unified experience, starting from Wednesday, August 12, 2020, Kubernetes integrations that <em>use</em> v1.7 or older will be deprecated. The <em>UI</em> experience in the infrastructure.newrelic.com domain will no longer be available; it will only be available in <em>New</em> <em>Relic</em> <em>One</em>. If you are already using"
      },
      "id": "603e795364441ff1924e8872"
    },
    {
      "sections": [
        "Dependencies UI page: View an entity's upstream and downstream dependencies",
        "Requirements",
        "View dependencies"
      ],
      "title": "Dependencies UI page: View an entity's upstream and downstream dependencies",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "2b2f328a6281bb155bcde07efec7f42eae943048",
      "image": "https://docs.newrelic.com/static/aabc5f64a91cc01b6e226df53c62458f/c1b63/new-relic-one-dependencies-UI.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/explore-downstream-dependencies-new-relic-one/",
      "published_at": "2021-06-25T23:47:17Z",
      "updated_at": "2021-03-30T08:53:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the New Relic Explorer, an entity's Dependencies page shows a filterable list of all the applications, services, databases, and hosts connected to the entity. It shows upstream and downstream dependencies, and provides paths to explore them. Similar to service maps, the dependencies page helps you understand how all of your upstream and downstream services are connected. It also uses the same color coding system used by service maps to show you what's performing well and what isn't. Requirements To view an entity's dependencies, make sure your app uses the minimum required APM agent version: C 1.0.0 or higher Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher View dependencies To view dependencies for applications, services, databases, and hosts connected to an entity: Go to one.newrelic.com, select Explorer, and select an entity. Select Dependencies. To drill down further, filter the apps, services, databases, or hosts. one.newrelic.com > Explorer > (select an entity) > Dependencies: View a filterable list of all the apps, services, databases, and hosts connected to an entity, and their color-coded health status. You can filter the dependencies page to view specific things that report to the entity. Dependencies include: Services: APM-monitored applications and services. Mobile applications: your mobile apps. Browser applications: your front-end browser apps. External services: external services monitored by APM. External services include out-of-process services such as web services, resources in the cloud, and any other network calls. Databases: your application's database and cache data. Databases are agentless. Because of this, alerts cannot be set for the database, as only the service call is reported to New Relic. Hosts: your infrastructure (servers and hosts).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 189.02011,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Dependencies <em>UI</em> page: View an entity&#x27;s upstream <em>and</em> downstream dependencies",
        "sections": "Dependencies <em>UI</em> page: View an entity&#x27;s upstream <em>and</em> downstream dependencies",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " services: external services monitored by APM. External services include out-of-process services such as web services, resources in the cloud, and any other network calls. Databases: your application&#x27;s database and cache <em>data</em>. Databases are agentless. Because of this, alerts cannot be set for the database, as only the service call is reported to <em>New</em> <em>Relic</em>. Hosts: your infrastructure (servers and hosts)."
      },
      "id": "603eb2e564441f0fe44e889b"
    },
    {
      "sections": [
        "Metric normalization rules",
        "Metric normalization rules management"
      ],
      "title": "Metric normalization rules",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "3c55e4717f145ac7ae0d88e860878f4e8d18cd6b",
      "image": "https://docs.newrelic.com/static/83edfb6f5b1b68712cac34d138bb8cb8/3996e/create-new-rule-window.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/metric-normalization-rules/",
      "published_at": "2021-06-25T23:48:14Z",
      "updated_at": "2021-03-29T20:39:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There may be cases where an application sends many individual metrics that could be better managed in groups. Most of these occur with web transactions metrics named from URLs. For more information on this issue, see Metric grouping issues (MGIs). To reduce high cardinality and prevent metric grouping issues, New Relic supports rules for grouping or filtering out metrics (normalization). In some cases, when MGIs with a significant high number of metrics are detected, a rule is created automatically to protect the platform from performance degradation. Metric normalization rules management You can create and manage new rules that deal with the noise produced from high cardinality metrics by using the metric normalization tool, which is accessible from each service dashboard in the New Relic Explorer. Once there, select Metric Normalization in the left sidebar. There you can see the existing rules or create new ones. Click a rule to modify it, or click Create a new rule to create a new one. A new pane to configure the rule will be displayed. Available fields are: Match expression: enter the regular expression to group all the metrics you want to include in the rule. Matches: here you will see a preview of the metrics matched by the regular expression above. Action: the action you want to perform on the metrics. Replace: replace the matched metrics by the regular expression with the value described in the Replacement field. Ignore: ignore any metric that matches the regular expression. Deny new metrics: only write metrics that have already been reported, and ignore those that match the regular expression. Replacement: only active when Replace is enabled. Matched metrics are replaced with the field's value. If the regular expression is capturing groups, you can use placeholders for them with \\1 or \\2 for the groups 1 and 2 respectively. Active: rules can’t be deleted, but can be deactivated. Click the toggle to enable or disable the rule. If you want the rule to be removed, reach out to New Relic's support. Notes: internal notes on the rule. Has no effect on the rule. Once you have set up the fields, click Create (or Edit in case you are editing an existing rule), and the rule will be applied immediately as long as it's Active.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.91962,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " grouping issues, <em>New</em> <em>Relic</em> supports rules for grouping or filtering out metrics (normalization). In some cases, when MGIs with a significant high number of metrics are detected, a rule is created automatically to protect the platform from performance degradation. Metric normalization rules management You"
      },
      "id": "603e810b64441ff3a74e8862"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/ui-data/explore-downstream-dependencies-new-relic-one": [
    {
      "sections": [
        "New Relic feature end of life announcements July 2020",
        "Old Kubernetes integration agent versions",
        "Monitor listing page and Synthetic labels",
        "\"Rollup by\" in Synthetics",
        "Embedded charts",
        "Legacy distributed tracing UI",
        "Violations changes",
        "Connected agents page",
        "Inactive apps in New Relic One",
        "Synthetic monitor alert notifications and conditions"
      ],
      "title": "New Relic feature end of life announcements July 2020",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "1db1d6b3df6d5ac3b983f78f3264cab332cff05a",
      "image": "https://docs.newrelic.com/static/f2b139d12bd8cdc13a9907b7874a4452/0a867/nrone-embed-bb062520.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/new-relic-feature-end-life-announcements-july-2020/",
      "published_at": "2021-06-25T23:01:41Z",
      "updated_at": "2021-06-03T10:03:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to improve your New Relic experience we've made some big improvements to our platform. As a result, we'll be ending support for some old features over the next few weeks. Many have already been publicly announced as \"end-of-life.\" These changes represent our commitment to improve your interactions with our platform. Our mission is one observability platform that unites your telemetry data, connects your full stack, and helps you build more perfect software. To that end we're focusing on simplifying your experience for troubleshooting, alerting, and visualizing data. Here are more details on what's changed, with some helpful links and guides on how to take advantage of new capabilities to achieve the same goals. As always, we're here to help. Please connect with us in the Explorers Hub, or contact your account team with any questions. Old Kubernetes integration agent versions To improve our unified experience, starting from Wednesday, August 12, 2020, Kubernetes integrations that use v1.7 or older will be deprecated. The UI experience in the infrastructure.newrelic.com domain will no longer be available; it will only be available in New Relic One. If you are already using the latest Kubernetes agent version, no action is necessary. If you are using v1.7 or older, you must update your integration in order to continue viewing Kubernetes performance data. Follow the instructions in our documentation to upgrade to the latest version of the Kubernetes integration. Action items for a successful transition: Review the Kubernetes agent deprecation notice. Follow standard procedures to upgrade your Kubernetes agent to the latest version. Learn about the Kubernetes cluster explorer UI in New Relic One. For more information, see the Explorers Hub post. Monitor listing page and Synthetic labels To improve the experience of Synthetic monitors and labels, we've moved both experiences into the New Relic One platform. If you use the REST API for Synthetic label management, you must update to the tags API moving forward. The good news: with the NerdGraph tags API, you can organize and group all your entities in a single request. For more information about any of the following, see the Explorers Hub post. Action items for a successful transition: Synthetic monitors transition Comments Monitor index list When migration is completed, no action is needed on your part to use the new Synthetics entity listing pages. The new experience will be available to you automatically after July 20, 2020. For more information, learn how the explorer in New Relic One replaces the Synthetics monitors index. Existing Synthetics labels You may have already seen an option in the UI to migrate your Synthetics monitor labels to New Relic One tags. If you did not select that option, we've got you covered. Automatic migration from labels to tags starts begins July 8, 2020. For more information, learn how tagging in New Relic One replaces labels for Synthetics monitors. REST API If you use the REST API for Synthetics label management, follow these steps to update to the tags API: Learn more about NerdGraph. Review the NerdGraph tagging API tutorial. Make sure you have a Personal API key to use NerdGraph. Follow the procedures in the Explorers Hub post (look for the How do I transition my scripts from the Synthetics API to the tag API (NerdGraph)? section), and update your existing tags with the GraphiQL explorer at api.newrelic.com/graphiql. NerdGraph is our GraphQL API, a query language that lets you request exactly the data you need, without over-fetching or under-fetching. NerdGraph calls get all the data you need in a single request. NerdGraph also makes it easier to evolve APIs over time. \"Rollup by\" in Synthetics Synthetics is moving to New Relic One to provide a single platform for observability of your complex software systems. To do this we are unifying the tools you use to tag (or label) your services, applications, and monitors. The specific feature that is end-of-life is the Rollup by feature under the Search monitors dropdown menu. You can group monitors by tags in New Relic One without needing a separate Rollup by dropdown. No changes will be required to use the new Synthetic monitor listing pages. The new experiences will be available to you after July 20, 2020. Documentation: Tagging in New Relic One replaces labels for Synthetics monitors. Explorer in New Relic One replaces Synthetics monitors index. Action items for a successful transition: If you currently use Synthetics rollups: Follow the procedures in the Explorer Hub post to recreate the rollups that are being retired. Go to the Explorers Hub post about the rollups EOL. In particular, look for How can New Relic Workloads help me visualize groups of applications and monitors? in the post's FAQs section. Follow the procedures in the Explorers Hub post to recreate the rollups that are being retired. Embedded charts In order to reduce redundancy and provide a more unified experience, the embedded charts functionality will be replaced by the New Relic One Get chart. Embedded charts currently in use and hosted outside the New Relic domain will continue to function. The changes will include: The name on the chart's menu that generates them will change from Embed to Get chart link. For charts that are no longer supported, Embed will be replaced with Get chart link is not supported for this chart. The APM UI page that lists all embedded chart links will no longer be available. Documentation: Explorers Hub post New Relic One's enhanced query builder functionality replaces the EOL embed chart functionality. Action items for a successful transition: You can generate a publicly accessible link to add to internal and external websites. Users do not need to be logged in to New Relic to see the chart link. The ability to embed a chart will remain, but instead of clicking Embed (which will be removed from the UI), you will click Get chart link (which is in the same location). This gives you the ability to get links with an even broader range of chart visuals and behaviors than the one we are retiring. Here's an example of how it looks in New Relic One: To replace existing chart links you created with Embed, create new URLs with New Relic One's Get chart link, and insert them in webpages where they're used. If you have an embedded chart and get the message Get chart link is not supported for this chart, simply run a different query, select an available chart type, and then select Embed. Legacy distributed tracing UI To standardize our user experience, we will be deprecating the older distributed tracing UI, which exists within the rpm.newrelic.com domain. You can access distributed tracing through New Relic One, which provides a superior experience with all the functionality supported in the duplicate UI that is end-of-life. Documentation: Global and service-specific distributed tracing views in New Relic One Deprecated distributed tracing UI Action items for a successful transition: No action required, but you can get ready for the new UI experience. New Relic One's distributed tracing page builds on capabilities you are already familiar with. Get acquainted with the enhanced distributed tracing features in New Relic One, including search and filter capabilities with cross-account trace details, query options with the NerdGraph API, and histogram charts (which can help you quickly understand trace distribution for important values such as duration). Review the trace sampling options available with head-based sampling (standard distributed tracing) and tail-based sampling (Infinite Tracing). Violations changes In order to provide a unified experience, we're deprecating Browser, Mobile, and Synthetics monitor violations and replacing them with the New Relic One equivalent. New Relic One users can access violations by using any of these options: Click the Alerts and AI link in New Relic One's main UI. Review the entity list activity stream. See alert details from inside a specific entity via the new indicator for Operational, Warning, and Critical violations. You will see alert details automatically when navigating to one.newrelic.com. Documentation: Applied Intelligence and alerting in New Relic One Browser alert violations (moving to New Relic One) Mobile violations (moving to New Relic One) Monitor violations (moving to New Relic One) Action items for a successful transition: No action required, but you can get ready for the new UI experience. Here's an example of the detailed information about an Alerts violation for a selected entity in New Relic One. Violation details in New Relic One Comments Holistic view From New Relic One's homepage, the entity list presents an activity stream of all entities with alert violations. You no longer need to jump around individual lists of end-user, mobile, or monitor violations. Enhanced troubleshooting tools From New Relic One's homepage, you will also see an Alerts & AI (Applied Intelligence) link. From here you can solve problems faster with anomaly detection, incident correlation, and noise reduction. Specific violation From a selected entity, you will see a new button identifying the violation as Operational, Warning, or Critical, as well as entity metadata and useful details about the incident. Connected agents page Finding your connected agents has never been easier! You can already do this via the Query your data link in New Relic One. Simply run these NrDailyUsage queries to get a list of connected agents and hosts. The old Connected agents page is end-of-life and will be removed. Documentation: Explorers Hub post NRQL query tools NrDailyUsage data definition Action items for a successful transition: To query your connected apps and hosts, you can use existing NRQL query tools, such as New Relic One's query builder or the GraphQL API. Recommendation: For best results exploring comprehensive data about your apps and hosts, use query builder in New Relic One or the NerdGraph API. For best results with Insights, run separate queries for apps and hosts. Inactive apps in New Relic One Starting June 8, 2020, New Relic One will not continue to display any APM application that hasn't reported data for 93 days. To match our published APM data retention guidelines, applications that have not reported data will be available within the New Relic UI for 90 days. After 90 days, those applications will be removed from the UI. However, key metrics will continue to be available via the New Relic REST API based on subscription level. This is why the application name will remain reserved until the application is permanently deleted via the REST API Explorer. Action items for a successful transition: If you want to reuse an app name for an old app that is no longer reporting data: Use the REST API v2 or API Explorer to get summary data, including app ID, name, health status (look for gray), last reported, etc. Uninstall the agent for your app. Use the REST API or API Explorer to delete the apps. Synthetic monitor alert notifications and conditions In order to provide a unified experience, we're deprecating Synthetics monitor alert notifications and condition violations. We are replacing these pages with a new Synthetics monitor overview experience in New Relic One. This new experience provides visibility into a monitor's open violations and alert conditions with the monitor results in a single view, removing the need to open multiple tabs to view violations or alert conditions. Action items for a successful transition: No action required, but you can get ready for the new UI experience by reviewing our documentation about New Relic Applied Intelligence, which includes: The alerting functionality you are already familiar with in New Relic Alerts, and more Incident Intelligence, which reduces noise and accelerates your incident resolution process Proactive Detection, which surfaces relevant issues and provides automatic explanations to their cause",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.23354,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> feature end of life announcements July 2020",
        "sections": "Inactive apps in <em>New</em> <em>Relic</em> <em>One</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " To improve our unified experience, starting from Wednesday, August 12, 2020, Kubernetes integrations that <em>use</em> v1.7 or older will be deprecated. The <em>UI</em> experience in the infrastructure.newrelic.com domain will no longer be available; it will only be available in <em>New</em> <em>Relic</em> <em>One</em>. If you are already using"
      },
      "id": "603e795364441ff1924e8872"
    },
    {
      "sections": [
        "Metric normalization rules",
        "Metric normalization rules management"
      ],
      "title": "Metric normalization rules",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "3c55e4717f145ac7ae0d88e860878f4e8d18cd6b",
      "image": "https://docs.newrelic.com/static/83edfb6f5b1b68712cac34d138bb8cb8/3996e/create-new-rule-window.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/metric-normalization-rules/",
      "published_at": "2021-06-25T23:48:14Z",
      "updated_at": "2021-03-29T20:39:59Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There may be cases where an application sends many individual metrics that could be better managed in groups. Most of these occur with web transactions metrics named from URLs. For more information on this issue, see Metric grouping issues (MGIs). To reduce high cardinality and prevent metric grouping issues, New Relic supports rules for grouping or filtering out metrics (normalization). In some cases, when MGIs with a significant high number of metrics are detected, a rule is created automatically to protect the platform from performance degradation. Metric normalization rules management You can create and manage new rules that deal with the noise produced from high cardinality metrics by using the metric normalization tool, which is accessible from each service dashboard in the New Relic Explorer. Once there, select Metric Normalization in the left sidebar. There you can see the existing rules or create new ones. Click a rule to modify it, or click Create a new rule to create a new one. A new pane to configure the rule will be displayed. Available fields are: Match expression: enter the regular expression to group all the metrics you want to include in the rule. Matches: here you will see a preview of the metrics matched by the regular expression above. Action: the action you want to perform on the metrics. Replace: replace the matched metrics by the regular expression with the value described in the Replacement field. Ignore: ignore any metric that matches the regular expression. Deny new metrics: only write metrics that have already been reported, and ignore those that match the regular expression. Replacement: only active when Replace is enabled. Matched metrics are replaced with the field's value. If the regular expression is capturing groups, you can use placeholders for them with \\1 or \\2 for the groups 1 and 2 respectively. Active: rules can’t be deleted, but can be deactivated. Click the toggle to enable or disable the rule. If you want the rule to be removed, reach out to New Relic's support. Notes: internal notes on the rule. Has no effect on the rule. Once you have set up the fields, click Create (or Edit in case you are editing an existing rule), and the rule will be applied immediately as long as it's Active.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 188.9196,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " grouping issues, <em>New</em> <em>Relic</em> supports rules for grouping or filtering out metrics (normalization). In some cases, when MGIs with a significant high number of metrics are detected, a rule is created automatically to protect the platform from performance degradation. Metric normalization rules management You"
      },
      "id": "603e810b64441ff3a74e8862"
    },
    {
      "sections": [
        "Supported browsers for New Relic UI",
        "Tip",
        "Supported browsers",
        "Limited support"
      ],
      "title": "Supported browsers for New Relic UI",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "3f47d88e8101dcb1b71c3990632f46ab4b9176d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/view-your-data/supported-browsers-new-relics-ui/",
      "published_at": "2021-06-26T08:38:02Z",
      "updated_at": "2021-03-16T15:50:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's UI supports the two most recent desktop versions of the most common browsers. If you're using an unsupported browser version, you'll see an error in the UI. Tip For the requirements for our browser monitoring, see Compatibility for browser monitoring. Supported browsers Our UI supports the two most recent desktop versions for these browsers: Google Chrome: Linux, macOS, Windows Microsoft Edge: Windows Mozilla Firefox: Linux, macOS, Windows Extended Support Release (ESR) versions of Firefox are not supported. Safari: macOS If your browser version is not supported, it may still work. However, to get the best functionality from our site (and others), we encourage you to upgrade to a supported version. Limited support Our UI provides limited support for mobile browsers. To access New Relic from a mobile device, install our Android app or iOS app. The workflows in our mobile apps are specifically designed for phone use cases. The web interface is not actively supported on mobile browsers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.63678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Supported browsers for <em>New</em> <em>Relic</em> <em>UI</em>",
        "sections": "Supported browsers for <em>New</em> <em>Relic</em> <em>UI</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ". However, to get the best functionality from our site (and others), we encourage you to upgrade to a supported version. Limited support Our <em>UI</em> provides limited support for mobile browsers. To access <em>New</em> <em>Relic</em> from a mobile device, install our Android app or iOS app. The workflows in our mobile apps are specifically designed for phone <em>use</em> cases. The web interface is not actively supported on mobile browsers."
      },
      "id": "603ebc5e28ccbceb0aeba7a5"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/ui-data/maps-in-context": [
    {
      "sections": [
        "How to use service maps",
        "Requirements",
        "Minimum versions when distributed tracing is enabled",
        "Minimum versions when distributed tracing is NOT enabled",
        "Add or remove connections to an entity",
        "Color coded for alerts",
        "Add maps and charts to dashboards",
        "Understand dependencies using API",
        "Externals and databases in maps",
        "Missing nodes"
      ],
      "title": "How to use service maps",
      "type": "docs",
      "tags": [
        "Understand dependencies",
        "Understand system dependencies",
        "Service maps"
      ],
      "external_id": "edc5ecde0c7ac8348afbcc6b82de546b0b60d349",
      "image": "https://docs.newrelic.com/static/145eb0bf271ea2c2a8535eb5aa6bf7c3/c1b63/map_in_dashboard.png",
      "url": "https://docs.newrelic.com/docs/understand-dependencies/understand-system-dependencies/service-maps/how-use-service-maps/",
      "published_at": "2021-06-26T08:25:55Z",
      "updated_at": "2021-03-30T19:06:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Here is information about how to use the current service maps feature. For help using the earlier service maps feature, see Legacy APM service maps. Service maps helps you visualize dependencies quickly and easily across your environment. They help you see how all your entities work together across your system. You can use service maps to troubleshoot problems, see how your environment works together, and ensure that issues don’t have downstream repercussions. Service maps also supports cross-account access so help you see relationships between entities for all your accounts. Requirements Service maps work with distributed tracing to connect relationships between entities. Service maps are still functional if you have not enabled distributed tracing, but we recommend having distributed tracing enabled for all agents. This ensures a more consistent experience while using service maps. For best results, update existing agents to the latest version. The required minimum agent versions for maps are: Minimum versions when distributed tracing is enabled The required minimum agent versions for maps using distributed tracing are: C SDK 1.1.0 or higher Go agent 2.1.0 or higher Java agent 4.3.0 or higher .NET agent 8.6.45.0 or higher Node.js agent 4.7.0 or higher PHP agent 8.4 or higher Python agent 4.2.0.100 or higher Ruby agent 5.3.0.346 or higher Minimum versions when distributed tracing is NOT enabled The minimum version requirements for maps not using distributed tracing are: C SDK: not available Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher Add or remove connections to an entity To view service maps, from one.newrelic.com click Explorer. Once you select an entity to view, you can select service maps from the sidebar. The map shows your upstream and downstream services: entities toward the left are upstream, entities toward the right are downstream. To add or remove connections to an entity: Hover over the entity in the map that you want to alter. Click add or remove more connections. In the connection list, keep boxes checked for the entities that you want to appear in the map. Unchecked entities will be removed from the map. Color coded for alerts Each entity in a map displays a color dependent on its performance. Green: there are currently no violations for this entities performance. Yellow: there is an open warning violation for this entity. Red: there is an open critical violation for this entity. Gray: no alert conditions have been set for the entity White: agent not reporting. This means that the agent installed on the entity is not reporting any data. This is expected behavior for databases or externals. Add maps and charts to dashboards one.newrelic.com > Dashboards: adding a service map to a dashboard provides context for the data being reported and where it's coming from. You can add any service map to a dashboard. For example, if you have a dashboard showcasing performance metrics for several entities, adding a service map to the dashboard shows how all the entities are related and provides additional context about your system. To add a service map to a dashboard: Go to one.newrelic.com and select the Explorer. Select an entity from the index. Click on Service map. Click Add to dashboard. Search for the dashboard you want to add the map to. Understand dependencies using API You can discover the same relationship connections available in service maps with NerdGraph. For more information and examples, see the NerdGraph GraphiQL relationships API tutorial. Externals and databases in maps In the New Relic UI, your out-of-process services are referred to as web external or background external data. Externals and databases have slightly different features in service maps than other entity types: Unlike other entities that appear in service maps, externals are aggregates. Clicking on an external service in the map shows you the list of all the external services that are rolled up into the one external entity. This is to reduce map clutter, as some entities can have dozens of externals being reported. Databases are agentless. Because of this, alerts cannot be set for the database, as only see the service call is reported to New Relic. Missing nodes If you are unable to view certain entities in New Relic One service maps, see Troubleshooting: Missing or obfuscated data in New Relic One.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.70029,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "How to use service <em>maps</em>",
        "sections": "Externals and databases <em>in</em> <em>maps</em>",
        "tags": "<em>Understand</em> dependencies",
        "body": " from the index. Click on Service <em>map</em>. Click Add to dashboard. Search for the dashboard <em>you</em> want to add the <em>map</em> to. <em>Understand</em> dependencies using API <em>You</em> can discover the same <em>relationship</em> connections available in service <em>maps</em> with NerdGraph. For more information and examples, see the NerdGraph"
      },
      "id": "603ec23264441fb02c4e8893"
    },
    {
      "sections": [
        "NerdGraph tutorial: Understand entity relationships and dependencies",
        "Relationship types",
        "Read relationships of an entity"
      ],
      "title": "NerdGraph tutorial: Understand entity relationships and dependencies",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "3699777ea1a7bf17213ccdaad3b44793e1561948",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-relationships-api-tutorial/",
      "published_at": "2021-06-25T17:17:27Z",
      "updated_at": "2021-05-28T10:25:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "One way to understand how your monitored entities relate to each other is through our NerdGraph API. The NerdGraph relationship API captures how pairs of entities interact and how they're related. By using the API, you can troubleshoot upstream and downstream services and understand how minor issues may have larger repercussions, similar to service maps. Relationship types Relationship types provide additional information about how two entities are related. The supported relationship types are: Type Description CALLS The relationship between one service or application calling another. Used to display upstream and downstream services. CONTAINS The relationship and hierarchical use cases common to modern and cloud infrastructure. For example, this could indicate that the HOST contains a container. HOSTS The relationship between an application or process and the system it runs on. SERVES The relationship between a back-end application and the browser application it returns in the response. is The relationship between an entity captured as a separate entity by another telemetry data source in addition to the one you are currently viewing. Read relationships of an entity You can use the NerdGraph relationship API to read the existing relationship of your monitored entities. The following example shows how to query an entity by its specific GUID, using the NerdGraph GraphiQL explorer. For more information, see Use NerdGraph to query entities. query{ actor{ entity(guid: YOUR_ENTITY_GUID){ name relationships{ source { entity{ guid, name } } target { entity{ guid, name } }, type } } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 174.85883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Understand</em> <em>entity</em> <em>relationships</em> and dependencies",
        "sections": "NerdGraph tutorial: <em>Understand</em> <em>entity</em> <em>relationships</em> and dependencies",
        "body": " The <em>relationship</em> between a back-end application and the browser application it returns in the response. is The <em>relationship</em> between an <em>entity</em> captured as a separate <em>entity</em> by another telemetry data source in addition to the one <em>you</em> are currently viewing. Read <em>relationships</em> of an <em>entity</em> <em>You</em> can use"
      },
      "id": "603ec1c664441fb7ff4e8852"
    },
    {
      "sections": [
        "What is an entity in New Relic?",
        "What is an entity?",
        "Find and explore entities",
        "Tip",
        "Entity synthesis",
        "Reserved attributes for synthesized entities",
        "Entity relationships",
        "Important",
        "Which relationships are created?",
        "Source: New Relic agent",
        "Source: Infrastructure",
        "Source: Synthetics monitor",
        "Source: Kubernetes",
        "External services",
        "Group and organize entities"
      ],
      "title": "What is an entity in New Relic?",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "Core concepts"
      ],
      "external_id": "52a3e08bc9103c717d27b153e4fd4f547d6ecc32",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/core-concepts/what-entity-new-relic/",
      "published_at": "2021-06-25T22:47:00Z",
      "updated_at": "2021-06-15T10:28:05Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic monitoring is built around the concept of the entity. An entity is anything that reports data to New Relic. This document explains: What entities are How to find entity data How to modify existing entity types or create new ones How entities are related to one another How to organize them into groups for easier analysis What is an entity? From a New Relic product perspective, entity is a broad concept. An entity is anything we can identify that has data you can monitor. \"Entity\" can refer to fundamental data-reporting components like applications, hosts, and database services, but it can also refer to larger groupings of those components. For example, to monitor a data center, you could aggregate those hosts in New Relic to be a workload (a custom grouping of entities). That workload is, itself, also an entity. This conceptual definition of \"entity\" is important because New Relic's goal is to give you practical information about the status of your business-important entities (and not just give you an unhelpfully large stream of assorted metrics and data). Our focus on entities, and the relationships between them, helps us optimize monitoring and troubleshooting of complex, modern systems. Find and explore entities You'll find your entities wherever you see your data reporting in New Relic. Tip You can create new entity types to monitor any data source. Learn more about entity synthesis. Some tips for finding and understanding entity data: To find an entity's unique global identifier (GUID): from any list of monitored entities in the New Relic Explorer, hover over a specific entity and click the icon to see the GUID and other metadata. An entity's GUID is reported as the attribute entityGuid. You can query for an entity using this attribute in the query builder. Use the Related Entities view in the New Relic Explorer, service maps, distributed tracing, and our relationships API in GraphQL to see connections between entities. Explore entity data using our NerdGraph GraphiQL explorer (api.newrelic.com/graphiql). Entity synthesis If you have telemetry from any source that's not supported by New Relic out of the box, you can propose a mapping for it. Once approved, any telemetry received by New Relic which matches your definition file will be synthesized into an entity. Tip For more information on how to modify existing entity types or create new ones please refer to our Entity Synthesis documentation. Reserved attributes for synthesized entities These attributes are meant to be synthesized from the telemetry we receive. Do not set them unless you are aware of the implications and consequences. Attribute Description entity.guid Generally, you should not set this attribute field on your telemetry data. New Relic may add this field to ingested data to store a unique identifier for the entity associated with the data point. If telemetry arrives with the entity.guid attribute already present, then New Relic will not change the value. However, it may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. One use case for passing this attribute is to associate ingested telemetry with an entity already created by New Relic. When the entity.guid attribute is sent, the value will override New Relic’s entity identification system (such as entity synthesis definitions) and instead will use the attribute as the data. entity.name This attribute shouldn't be put on ingested telemetry data unless you're trying to override the entity name that would have been selected by New Relic’s entity identification system. While New Relic won't change the value if it's already present on the data, New Relic may add the attribute to your data. Therefore invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. If this field is present on ingested telemetry, its value will be used to name the entity associated with the data point. This name will be used instead of the name selected by New Relic’s entity identification system (for example, entity synthesis definitions). Note that many entities use the name as part of their identification, so changing this field may result in the generation of a new entity. entity.type This attribute shouldn't be put on ingested telemetry data except for certain legacy cases where it's required to distinguish entity types. Passing this field may interfere with entity detection, particularly if unrecognized values are sent in this field. While New Relic won't change the value if already present on the data, the field is not guaranteed to provide unambiguous filtering of telemetry at query-time. Existing entity definitions already have overlapping values, and we recommend avoiding entity.type in favor of other fields for filtering telemetry queries. This field is used by New Relic, meaning that invalid or unexpected values may cause undefined behavior such as missing entities in the UI, or telemetry not associating with the expected entities. Entity relationships Connections between entities are automatically created by New Relic based on what we can infer from your telemetry. For example, when two services that communicate using HTTP are instrumented with New Relic, we infer a \"calls/called-by\" relationship between them. When viewing a single entity in either the New Relic Explorer, Navigator, or Lookout, you can see its Related Entities in the entity's mini overview. Related Entities is a visualization of the various entities connected directly to the current entity in focus. You can quickly view important metrics for these related entities and navigate from one entity to another, through all the connected parts of your stack. Tip You can learn more about how entities are related using our NerdGraph API. When relationships are not automatically detected, you can manually create them using the \"Add/edit related entities\" link in Related Entities. Important Currently, you can only manually create calls/called-by relationships between service entities. Tip To manage manual relationships, you need to have modify and delete capabilities on entity relationships. If you don’t see the edit relationships button, contact your account admin. Which relationships are created? These are the relationships created between entities: Source: New Relic agent Relationship source Relationship type Relationship target Why is the relationship created? Application instrumented with a New Relic agent CALLS Application instrumented with a New Relic agent Relationships between applications monitored by New Relic agents are reported using the DurationByCaller metric. The callee reports the metric. For example, the metric DurationByCaller/Mobile/100/1234/HTTP/all indicates that the caller is APPLICATION 1234 for account 100. Application instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent An application (caller) that calls a service (callee) monitored by New Relic creates a relationship that's reported by the caller using the ExternalApp metric. For example, the metric ExternalApp/dirac.vips.net/100#1234/all indicates that the callee is APPLICATION 1234 for account 100. The metric is reported if the callee successfully responds to the caller. Service instrumented with a New Relic agent CALLS Service instrumented with a New Relic agent When a New Relic agent detects that a service (caller) calls another service (callee) instrumented by New Relic, the callee reports the metric ClientApplication. For example, the metric ClientApplication/100#1234/all indicates that the caller is APPLICATION 1234 for account 100. Service instrumented with a New Relic agent CALLS A datastore instance When an application calls a datastore instance it creates a relationship reported with the DatastoreInstance metric. For example, the metric Datastore/instance/MySQL/172.16.16.3/3306 indicates the datastore instance is vendor: MySQL, host: 172.16.16.3, port: 3306. This metric also supports the legacy datastore instance format Datastore/instance/MySQL/172.16.16.3:3306. Currently we cannot determine whether the datastore instance is instrumented by New Relic and has an entity associated to it. APM agent SERVES Browser agent This relationship is created when an APM agent injects the Browser agent into a page. Workload entity CONTAINS Any entity When a workload is created or updated, relationships for each of the entities that belong to the workload are created. Because some workloads are “dynamic” (defined by tags), relationships are re-created every 5 minutes. This way entities can join or leave the workload. Source: Infrastructure Relationship source Relationship type Relationship target Why is the relationship created? Infrastructure host HOSTS Application This relationship is created when an application is running in one or more hosts, and the infra agent is running in those hosts. Infrastructure host HOSTS Container This relationship is created when containers are running in one or more hosts, and the host is instrumented with the infra agent. Source: Synthetics monitor Relationship source Relationship type Relationship target Why is the relationship created? Synthetics Monitor CALLS Browser agent This relationship is created when a synthetics monitor checks a page instrumented with the Browser agent. Synthetics Monitor CALLS APM application Agent events that contain the attribute nr.syntheticsMonitorId have been described as synthetics monitors (the source) interacting with an APM application (the target). If the header exists and the APM application Id exists, a relationship is created between the monitor and the app. Source: Kubernetes Relationship source Relationship type Relationship target Why is the relationship created? Cluster CONTAINS Pod This relationship is created when a pod is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Deployment This relationship is created when a deployment is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS DaemonSet This relationship is created when a DaemonSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS StatefulSet This relationship is created when a StatefulSet is created in a cluster instrumented with the New Relic Kubernetes integration. Cluster CONTAINS Host This relationship is created when a host that's part of a cluster is instrumented with the New Relic Kubernetes integration. Deployment CONTAINS Pod This relationship is created when a deployment creates a pod in a cluster instrumented with the New Relic Kubernetes integration. DaemonSet CONTAINS Pod This relationship is created when a DaemonSet is created a pod in a cluster instrumented with the New Relic Kubernetes integration. StatefulSet CONTAINS Pod This relationship is created when a StatefulSet creates a pod in a cluster instrumented with the New Relic Kubernetes integration. Pod CONTAINS Container This relationship is created when a pod creates a container in a cluster instrumented with the New Relic Kubernetes integration. Host HOSTS Pod This relationship is created when a pod is running in a host that's part of a cluster instrumented with the New Relic Kubernetes integration. Container HOSTS Application This relationship is created when an application is running in docker, and the hosts where docker is running are instrumented by the the infra agent. External services Relationship source Relationship type Relationship target Why is the relationship created? External service CALLS External service When the relationship is created, the external service reports a span with its name on the service.name attribute and the name of the service that initiates the call in the parent.service.name attribute. Application IS External service A relationship between an application and an external service is created so that users can navigate between them using the related entities component. Browser application instrumented with a New Relic agent CALLS External service A Browser application reports an Ajax/HostTransaction metric when calling an external service (URL). Example metric: Ajax/HostTransaction/api.segment.io:443/CallbackTime' Cluster CONTAINS External service When the relationship is created, the external service reports a span with the attribute k8s.cluster.name, the name of the cluster. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Pod HOSTS External service When the relationship is created, the external service reports a span with the following attributes: service.name: The name of the service. k8s.cluster.name: The name of the cluster. k8s.pod.name: The name of the pod that’s running the service. k8s.namespace.name: The namespace where the pod was created. The cluster must be instrumented with the New Relic Kubernetes integration and the cluster name set for the integration must match the one reported in the span. Group and organize entities You can place entities into groups that reflect business-important relationships in your organization. For example, you might group all entities related to a specific team or department, or related to a specific service. Or you might group multiple hosts together to reflect their grouping in a data center. To group your entities, see: How to tag entities Create workloads (groups of related entities)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.12582,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "What is an <em>entity</em> <em>in</em> New Relic?",
        "sections": "<em>Entity</em> <em>relationships</em>",
        "body": " builder. Use the Related Entities view in the New Relic Explorer, service <em>maps</em>, distributed tracing, and our <em>relationships</em> API in GraphQL to see connections between entities. Explore <em>entity</em> data using our NerdGraph GraphiQL explorer (api.newrelic.com&#x2F;graphiql). <em>Entity</em> synthesis If <em>you</em> have telemetry from"
      },
      "id": "603ec160e7b9d295f72a07fc"
    }
  ],
  "/docs/new-relic-one/use-new-relic-one/ui-data/metric-normalization-rules": [
    {
      "sections": [
        "New Relic feature end of life announcements July 2020",
        "Old Kubernetes integration agent versions",
        "Monitor listing page and Synthetic labels",
        "\"Rollup by\" in Synthetics",
        "Embedded charts",
        "Legacy distributed tracing UI",
        "Violations changes",
        "Connected agents page",
        "Inactive apps in New Relic One",
        "Synthetic monitor alert notifications and conditions"
      ],
      "title": "New Relic feature end of life announcements July 2020",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "1db1d6b3df6d5ac3b983f78f3264cab332cff05a",
      "image": "https://docs.newrelic.com/static/f2b139d12bd8cdc13a9907b7874a4452/0a867/nrone-embed-bb062520.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/new-relic-feature-end-life-announcements-july-2020/",
      "published_at": "2021-06-25T23:01:41Z",
      "updated_at": "2021-06-03T10:03:21Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to improve your New Relic experience we've made some big improvements to our platform. As a result, we'll be ending support for some old features over the next few weeks. Many have already been publicly announced as \"end-of-life.\" These changes represent our commitment to improve your interactions with our platform. Our mission is one observability platform that unites your telemetry data, connects your full stack, and helps you build more perfect software. To that end we're focusing on simplifying your experience for troubleshooting, alerting, and visualizing data. Here are more details on what's changed, with some helpful links and guides on how to take advantage of new capabilities to achieve the same goals. As always, we're here to help. Please connect with us in the Explorers Hub, or contact your account team with any questions. Old Kubernetes integration agent versions To improve our unified experience, starting from Wednesday, August 12, 2020, Kubernetes integrations that use v1.7 or older will be deprecated. The UI experience in the infrastructure.newrelic.com domain will no longer be available; it will only be available in New Relic One. If you are already using the latest Kubernetes agent version, no action is necessary. If you are using v1.7 or older, you must update your integration in order to continue viewing Kubernetes performance data. Follow the instructions in our documentation to upgrade to the latest version of the Kubernetes integration. Action items for a successful transition: Review the Kubernetes agent deprecation notice. Follow standard procedures to upgrade your Kubernetes agent to the latest version. Learn about the Kubernetes cluster explorer UI in New Relic One. For more information, see the Explorers Hub post. Monitor listing page and Synthetic labels To improve the experience of Synthetic monitors and labels, we've moved both experiences into the New Relic One platform. If you use the REST API for Synthetic label management, you must update to the tags API moving forward. The good news: with the NerdGraph tags API, you can organize and group all your entities in a single request. For more information about any of the following, see the Explorers Hub post. Action items for a successful transition: Synthetic monitors transition Comments Monitor index list When migration is completed, no action is needed on your part to use the new Synthetics entity listing pages. The new experience will be available to you automatically after July 20, 2020. For more information, learn how the explorer in New Relic One replaces the Synthetics monitors index. Existing Synthetics labels You may have already seen an option in the UI to migrate your Synthetics monitor labels to New Relic One tags. If you did not select that option, we've got you covered. Automatic migration from labels to tags starts begins July 8, 2020. For more information, learn how tagging in New Relic One replaces labels for Synthetics monitors. REST API If you use the REST API for Synthetics label management, follow these steps to update to the tags API: Learn more about NerdGraph. Review the NerdGraph tagging API tutorial. Make sure you have a Personal API key to use NerdGraph. Follow the procedures in the Explorers Hub post (look for the How do I transition my scripts from the Synthetics API to the tag API (NerdGraph)? section), and update your existing tags with the GraphiQL explorer at api.newrelic.com/graphiql. NerdGraph is our GraphQL API, a query language that lets you request exactly the data you need, without over-fetching or under-fetching. NerdGraph calls get all the data you need in a single request. NerdGraph also makes it easier to evolve APIs over time. \"Rollup by\" in Synthetics Synthetics is moving to New Relic One to provide a single platform for observability of your complex software systems. To do this we are unifying the tools you use to tag (or label) your services, applications, and monitors. The specific feature that is end-of-life is the Rollup by feature under the Search monitors dropdown menu. You can group monitors by tags in New Relic One without needing a separate Rollup by dropdown. No changes will be required to use the new Synthetic monitor listing pages. The new experiences will be available to you after July 20, 2020. Documentation: Tagging in New Relic One replaces labels for Synthetics monitors. Explorer in New Relic One replaces Synthetics monitors index. Action items for a successful transition: If you currently use Synthetics rollups: Follow the procedures in the Explorer Hub post to recreate the rollups that are being retired. Go to the Explorers Hub post about the rollups EOL. In particular, look for How can New Relic Workloads help me visualize groups of applications and monitors? in the post's FAQs section. Follow the procedures in the Explorers Hub post to recreate the rollups that are being retired. Embedded charts In order to reduce redundancy and provide a more unified experience, the embedded charts functionality will be replaced by the New Relic One Get chart. Embedded charts currently in use and hosted outside the New Relic domain will continue to function. The changes will include: The name on the chart's menu that generates them will change from Embed to Get chart link. For charts that are no longer supported, Embed will be replaced with Get chart link is not supported for this chart. The APM UI page that lists all embedded chart links will no longer be available. Documentation: Explorers Hub post New Relic One's enhanced query builder functionality replaces the EOL embed chart functionality. Action items for a successful transition: You can generate a publicly accessible link to add to internal and external websites. Users do not need to be logged in to New Relic to see the chart link. The ability to embed a chart will remain, but instead of clicking Embed (which will be removed from the UI), you will click Get chart link (which is in the same location). This gives you the ability to get links with an even broader range of chart visuals and behaviors than the one we are retiring. Here's an example of how it looks in New Relic One: To replace existing chart links you created with Embed, create new URLs with New Relic One's Get chart link, and insert them in webpages where they're used. If you have an embedded chart and get the message Get chart link is not supported for this chart, simply run a different query, select an available chart type, and then select Embed. Legacy distributed tracing UI To standardize our user experience, we will be deprecating the older distributed tracing UI, which exists within the rpm.newrelic.com domain. You can access distributed tracing through New Relic One, which provides a superior experience with all the functionality supported in the duplicate UI that is end-of-life. Documentation: Global and service-specific distributed tracing views in New Relic One Deprecated distributed tracing UI Action items for a successful transition: No action required, but you can get ready for the new UI experience. New Relic One's distributed tracing page builds on capabilities you are already familiar with. Get acquainted with the enhanced distributed tracing features in New Relic One, including search and filter capabilities with cross-account trace details, query options with the NerdGraph API, and histogram charts (which can help you quickly understand trace distribution for important values such as duration). Review the trace sampling options available with head-based sampling (standard distributed tracing) and tail-based sampling (Infinite Tracing). Violations changes In order to provide a unified experience, we're deprecating Browser, Mobile, and Synthetics monitor violations and replacing them with the New Relic One equivalent. New Relic One users can access violations by using any of these options: Click the Alerts and AI link in New Relic One's main UI. Review the entity list activity stream. See alert details from inside a specific entity via the new indicator for Operational, Warning, and Critical violations. You will see alert details automatically when navigating to one.newrelic.com. Documentation: Applied Intelligence and alerting in New Relic One Browser alert violations (moving to New Relic One) Mobile violations (moving to New Relic One) Monitor violations (moving to New Relic One) Action items for a successful transition: No action required, but you can get ready for the new UI experience. Here's an example of the detailed information about an Alerts violation for a selected entity in New Relic One. Violation details in New Relic One Comments Holistic view From New Relic One's homepage, the entity list presents an activity stream of all entities with alert violations. You no longer need to jump around individual lists of end-user, mobile, or monitor violations. Enhanced troubleshooting tools From New Relic One's homepage, you will also see an Alerts & AI (Applied Intelligence) link. From here you can solve problems faster with anomaly detection, incident correlation, and noise reduction. Specific violation From a selected entity, you will see a new button identifying the violation as Operational, Warning, or Critical, as well as entity metadata and useful details about the incident. Connected agents page Finding your connected agents has never been easier! You can already do this via the Query your data link in New Relic One. Simply run these NrDailyUsage queries to get a list of connected agents and hosts. The old Connected agents page is end-of-life and will be removed. Documentation: Explorers Hub post NRQL query tools NrDailyUsage data definition Action items for a successful transition: To query your connected apps and hosts, you can use existing NRQL query tools, such as New Relic One's query builder or the GraphQL API. Recommendation: For best results exploring comprehensive data about your apps and hosts, use query builder in New Relic One or the NerdGraph API. For best results with Insights, run separate queries for apps and hosts. Inactive apps in New Relic One Starting June 8, 2020, New Relic One will not continue to display any APM application that hasn't reported data for 93 days. To match our published APM data retention guidelines, applications that have not reported data will be available within the New Relic UI for 90 days. After 90 days, those applications will be removed from the UI. However, key metrics will continue to be available via the New Relic REST API based on subscription level. This is why the application name will remain reserved until the application is permanently deleted via the REST API Explorer. Action items for a successful transition: If you want to reuse an app name for an old app that is no longer reporting data: Use the REST API v2 or API Explorer to get summary data, including app ID, name, health status (look for gray), last reported, etc. Uninstall the agent for your app. Use the REST API or API Explorer to delete the apps. Synthetic monitor alert notifications and conditions In order to provide a unified experience, we're deprecating Synthetics monitor alert notifications and condition violations. We are replacing these pages with a new Synthetics monitor overview experience in New Relic One. This new experience provides visibility into a monitor's open violations and alert conditions with the monitor results in a single view, removing the need to open multiple tabs to view violations or alert conditions. Action items for a successful transition: No action required, but you can get ready for the new UI experience by reviewing our documentation about New Relic Applied Intelligence, which includes: The alerting functionality you are already familiar with in New Relic Alerts, and more Incident Intelligence, which reduces noise and accelerates your incident resolution process Proactive Detection, which surfaces relevant issues and provides automatic explanations to their cause",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 228.23352,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>New</em> <em>Relic</em> feature end of life announcements July 2020",
        "sections": "Inactive apps in <em>New</em> <em>Relic</em> <em>One</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " To improve our unified experience, starting from Wednesday, August 12, 2020, Kubernetes integrations that <em>use</em> v1.7 or older will be deprecated. The <em>UI</em> experience in the infrastructure.newrelic.com domain will no longer be available; it will only be available in <em>New</em> <em>Relic</em> <em>One</em>. If you are already using"
      },
      "id": "603e795364441ff1924e8872"
    },
    {
      "sections": [
        "Dependencies UI page: View an entity's upstream and downstream dependencies",
        "Requirements",
        "View dependencies"
      ],
      "title": "Dependencies UI page: View an entity's upstream and downstream dependencies",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "2b2f328a6281bb155bcde07efec7f42eae943048",
      "image": "https://docs.newrelic.com/static/aabc5f64a91cc01b6e226df53c62458f/c1b63/new-relic-one-dependencies-UI.png",
      "url": "https://docs.newrelic.com/docs/new-relic-one/use-new-relic-one/ui-data/explore-downstream-dependencies-new-relic-one/",
      "published_at": "2021-06-25T23:47:17Z",
      "updated_at": "2021-03-30T08:53:10Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In the New Relic Explorer, an entity's Dependencies page shows a filterable list of all the applications, services, databases, and hosts connected to the entity. It shows upstream and downstream dependencies, and provides paths to explore them. Similar to service maps, the dependencies page helps you understand how all of your upstream and downstream services are connected. It also uses the same color coding system used by service maps to show you what's performing well and what isn't. Requirements To view an entity's dependencies, make sure your app uses the minimum required APM agent version: C 1.0.0 or higher Go 1.11 or higher Java 3.9.0 or higher .NET 4.2 or higher Node.js 2.0.0 or higher PHP 4.19.0 or higher Python 2.38.0.31 or higher Ruby 4.3.0 or higher View dependencies To view dependencies for applications, services, databases, and hosts connected to an entity: Go to one.newrelic.com, select Explorer, and select an entity. Select Dependencies. To drill down further, filter the apps, services, databases, or hosts. one.newrelic.com > Explorer > (select an entity) > Dependencies: View a filterable list of all the apps, services, databases, and hosts connected to an entity, and their color-coded health status. You can filter the dependencies page to view specific things that report to the entity. Dependencies include: Services: APM-monitored applications and services. Mobile applications: your mobile apps. Browser applications: your front-end browser apps. External services: external services monitored by APM. External services include out-of-process services such as web services, resources in the cloud, and any other network calls. Databases: your application's database and cache data. Databases are agentless. Because of this, alerts cannot be set for the database, as only the service call is reported to New Relic. Hosts: your infrastructure (servers and hosts).",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 189.02011,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Dependencies <em>UI</em> page: View an entity&#x27;s upstream <em>and</em> downstream dependencies",
        "sections": "Dependencies <em>UI</em> page: View an entity&#x27;s upstream <em>and</em> downstream dependencies",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": " services: external services monitored by APM. External services include out-of-process services such as web services, resources in the cloud, and any other network calls. Databases: your application&#x27;s database and cache <em>data</em>. Databases are agentless. Because of this, alerts cannot be set for the database, as only the service call is reported to <em>New</em> <em>Relic</em>. Hosts: your infrastructure (servers and hosts)."
      },
      "id": "603eb2e564441f0fe44e889b"
    },
    {
      "sections": [
        "Supported browsers for New Relic UI",
        "Tip",
        "Supported browsers",
        "Limited support"
      ],
      "title": "Supported browsers for New Relic UI",
      "type": "docs",
      "tags": [
        "New Relic One",
        "Use New Relic One",
        "UI and data"
      ],
      "external_id": "3f47d88e8101dcb1b71c3990632f46ab4b9176d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/using-new-relic/user-interface-functions/view-your-data/supported-browsers-new-relics-ui/",
      "published_at": "2021-06-26T08:38:02Z",
      "updated_at": "2021-03-16T15:50:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's UI supports the two most recent desktop versions of the most common browsers. If you're using an unsupported browser version, you'll see an error in the UI. Tip For the requirements for our browser monitoring, see Compatibility for browser monitoring. Supported browsers Our UI supports the two most recent desktop versions for these browsers: Google Chrome: Linux, macOS, Windows Microsoft Edge: Windows Mozilla Firefox: Linux, macOS, Windows Extended Support Release (ESR) versions of Firefox are not supported. Safari: macOS If your browser version is not supported, it may still work. However, to get the best functionality from our site (and others), we encourage you to upgrade to a supported version. Limited support Our UI provides limited support for mobile browsers. To access New Relic from a mobile device, install our Android app or iOS app. The workflows in our mobile apps are specifically designed for phone use cases. The web interface is not actively supported on mobile browsers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 186.63678,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Supported browsers for <em>New</em> <em>Relic</em> <em>UI</em>",
        "sections": "Supported browsers for <em>New</em> <em>Relic</em> <em>UI</em>",
        "tags": "<em>Use</em> <em>New</em> <em>Relic</em> <em>One</em>",
        "body": ". However, to get the best functionality from our site (and others), we encourage you to upgrade to a supported version. Limited support Our <em>UI</em> provides limited support for mobile browsers. To access <em>New</em> <em>Relic</em> from a mobile device, install our Android app or iOS app. The workflows in our mobile apps are specifically designed for phone <em>use</em> cases. The web interface is not actively supported on mobile browsers."
      },
      "id": "603ebc5e28ccbceb0aeba7a5"
    }
  ]
}