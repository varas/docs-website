{
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-firestore-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99377,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99377,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    },
    {
      "sections": [
        "Google Cloud Storage monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "Inventory data"
      ],
      "title": "Google Cloud Storage monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "b82474e156f5c250b2a97c371b450b9254183297",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-storage-monitoring-integration/",
      "published_at": "2021-07-02T15:52:59Z",
      "updated_at": "2021-03-16T05:46:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers an integration for reporting your Google Cloud Storage data to New Relic. Learn how to connect this integration to infrastructure monitoring and about the metric data and inventory data that New Relic reports for this integration. Features Google Cloud Storage is a Google Cloud Platform service that you can use to serve website content, to store data for archival and disaster recovery, and to distribute data objects via direct download. With the Google Cloud Storage integration, you can access these features: View charts and information about the data you are storing and retrieving from Google Cloud Storage. Create custom queries and charts in from automatically captured data. Set alerts on your Google Cloud Storage data directly from the Integrations page. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency New Relic queries your Google Cloud Storage services based on a polling interval of 5 minutes. Find and use data After connecting the integration to New Relic and waiting a few minutes, data will appear in the New Relic UI. To find and use integration data, including your dashboards and your alert settings, go to one.newrelic.com > Infrastructure > GCP > Google Cloud Storage. To create custom dashboards for the integration, create queries for the GcpStorageBucketSample event type with the provider value GcpStorageBucket. Metric data The integration reports metric data for all values of method and response_code: response_code: The response code of the requests. method: The name of the API method called. The metric data that New Relic receives from your Google Cloud Storage integration includes: Metric Description api.Requests Delta count of API calls. network.ReceivedBytes Delta count of bytes received over the network. network.SentBytes Delta count of bytes sent over the network. Inventory data Inventory data for Google Cloud Storage bucket objects includes the following properties: Inventory data Description acl Access control list for the bucket that lets you specify who has access to your data and to what extent. cors The Cross-Origin Resource Sharing (CORS) configuration for the bucket. createTime Time when the bucket was created. defaultAcl Default access control list configuration for the bucket's blobs. etag HTTP 1.1 entity tag for the bucket. indexPage The bucket's website index page. This behaves as the bucket's directory index where missing blobs are treated as potential directories. labels Labels for the bucket, in key/value pairs. This is only available if the GCP project is linked to New Relic through a service account and extended inventory collection is enabled. metageneration The generation of the metadata for the bucket. name The name of the bucket. notFoundPage The custom object that will be returned when a requested resource is not found. owner The owner of the bucket. A bucket is always owned by the project team owners group. project The name that you assigned to the project. A project consists of a set of users, a set of APIs, and settings for those APIs. requesterPays If set to true, the user accessing the bucket or an object it contains assumes the access transit costs. storageClass The default storage class for a bucket, if you don't specify one for a new object. The storage class defines how Google Cloud Storage stores objects in the bucket and determines the SLA and storage cost. For more information, see storage classes. zone The zone where the bucket is deployed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17128,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Storage monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Storage monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " and retrieving from <em>Google</em> <em>Cloud</em> Storage. Create custom queries and charts in from automatically captured data. Set alerts on your <em>Google</em> <em>Cloud</em> Storage data directly from the <em>Integrations</em> page. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e8f63196a67fa56a83dbc"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-load-balancing-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-pubsub-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-router-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-run-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-spanner-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-sql-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-storage-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99376,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration": [
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    },
    {
      "sections": [
        "Google Cloud Storage monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "Inventory data"
      ],
      "title": "Google Cloud Storage monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "b82474e156f5c250b2a97c371b450b9254183297",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-storage-monitoring-integration/",
      "published_at": "2021-07-02T15:52:59Z",
      "updated_at": "2021-03-16T05:46:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers an integration for reporting your Google Cloud Storage data to New Relic. Learn how to connect this integration to infrastructure monitoring and about the metric data and inventory data that New Relic reports for this integration. Features Google Cloud Storage is a Google Cloud Platform service that you can use to serve website content, to store data for archival and disaster recovery, and to distribute data objects via direct download. With the Google Cloud Storage integration, you can access these features: View charts and information about the data you are storing and retrieving from Google Cloud Storage. Create custom queries and charts in from automatically captured data. Set alerts on your Google Cloud Storage data directly from the Integrations page. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency New Relic queries your Google Cloud Storage services based on a polling interval of 5 minutes. Find and use data After connecting the integration to New Relic and waiting a few minutes, data will appear in the New Relic UI. To find and use integration data, including your dashboards and your alert settings, go to one.newrelic.com > Infrastructure > GCP > Google Cloud Storage. To create custom dashboards for the integration, create queries for the GcpStorageBucketSample event type with the provider value GcpStorageBucket. Metric data The integration reports metric data for all values of method and response_code: response_code: The response code of the requests. method: The name of the API method called. The metric data that New Relic receives from your Google Cloud Storage integration includes: Metric Description api.Requests Delta count of API calls. network.ReceivedBytes Delta count of bytes received over the network. network.SentBytes Delta count of bytes sent over the network. Inventory data Inventory data for Google Cloud Storage bucket objects includes the following properties: Inventory data Description acl Access control list for the bucket that lets you specify who has access to your data and to what extent. cors The Cross-Origin Resource Sharing (CORS) configuration for the bucket. createTime Time when the bucket was created. defaultAcl Default access control list configuration for the bucket's blobs. etag HTTP 1.1 entity tag for the bucket. indexPage The bucket's website index page. This behaves as the bucket's directory index where missing blobs are treated as potential directories. labels Labels for the bucket, in key/value pairs. This is only available if the GCP project is linked to New Relic through a service account and extended inventory collection is enabled. metageneration The generation of the metadata for the bucket. name The name of the bucket. notFoundPage The custom object that will be returned when a requested resource is not found. owner The owner of the bucket. A bucket is always owned by the project team owners group. project The name that you assigned to the project. A project consists of a set of users, a set of APIs, and settings for those APIs. requesterPays If set to true, the user accessing the bucket or an object it contains assumes the access transit costs. storageClass The default storage class for a bucket, if you don't specify one for a new object. The storage class defines how Google Cloud Storage stores objects in the bucket and determines the SLA and storage cost. For more information, see storage classes. zone The zone where the bucket is deployed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Storage monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Storage monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " and retrieving from <em>Google</em> <em>Cloud</em> Storage. Create custom queries and charts in from automatically captured data. Set alerts on your <em>Google</em> <em>Cloud</em> Storage data directly from the <em>Integrations</em> page. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e8f63196a67fa56a83dbc"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-datastore-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76227,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-direct-interconnect-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-kubernetes-engine-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-memcached": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-memorystore-redis": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Serverless VPC Access monitoring integration",
        "Activate integration",
        "Configuration and polling",
        "Find and use data",
        "Metric data",
        "VPC Access Connector data"
      ],
      "title": "Google Serverless VPC Access monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "a1ee8cb1f9d6a05f4a5e5ec6ac4c5e275868e891",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's integrations include an integration for reporting your GCP VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Configuration and polling You can change the polling frequency and filter data using configuration options. Default polling information for the GCP VPC Access integration: New Relic polling interval: 5 minutes Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > GCP and select an integration. Data is attached to the following event type: Entity Event Type Provider Connector GcpVpcaccessConnectorSample GcpVpcaccessConnector For more on how to use your data, see Understand and use integration data. Metric data This integration collects GCP VPC Access data for Connector. VPC Access Connector data Metric Unit Description connector.ReceivedBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.ReceivedPackets Count Delta of packets received by a VPC Access Connector. connector.SentBytes Bytes Delta of bytes transferred by a VPC Access Connector. connector.SentPackets Count Delta of packets sent by a VPC Access Connector.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "sections": "<em>Google</em> Serverless VPC Access monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic&#x27;s <em>integrations</em> include an integration for reporting your <em>GCP</em> VPC Access data to our products. Here we explain how to activate the integration and what data it collects. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e9e73196a67f7b0a83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-serverless-vpc-access-monitoring-integration": [
    {
      "sections": [
        "Google Compute Engine monitoring integration",
        "Activate integration",
        "Important",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "GcpVirtualMachineSample",
        "GcpVirtualMachineDiskSample",
        "Inventory data",
        "gcp/compute/virtual-machine",
        "gcp/compute/virtual-machine/disk",
        "Learn more"
      ],
      "title": "Google Compute Engine monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "749ce2f670e38c332eb8b591fb0fbf0098ba157f",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-compute-engine-monitoring-integration/",
      "published_at": "2021-07-02T15:51:55Z",
      "updated_at": "2021-05-15T19:35:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "All New Relic Infrastructure accounts, regardless of subscription level, can use New Relic's Compute Engine integration to get a comprehensive, real-time view of their host's performance and status. New Relic Infrastructure's integration with Google Compute Engine reports metadata about instances (virtual machines) hosted on Google's infrastructure. You can monitor and alert on your GCP instances data from New Relic Infrastructure, and you can create custom queries and chart dashboards in New Relic Insights. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your Google Cloud projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic Infrastructure integrations query your GCP services according to a polling interval, which varies depending on the integration. The polling interval for the Google Compute Engine integration is 5 minutes. Find and use data After activating the integration and waiting a few minutes (based on the polling frequency), data will appear in the New Relic UI. To find and use your data, including links to your dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP > (select an integration). Metric data Metric data that New Relic receives from your GCP Compute Engine integration include: GcpVirtualMachineSample Name Description firewall.DroppedBytes Delta count of incoming bytes dropped by the firewall. firewall.DroppedPackets Delta count of incoming packets dropped by the firewall. instance.cpu.ReservedCores Total number of cores reserved on the host of the instance. GcpVirtualMachineDiskSample Name Description instance.disk.ThrottledReadBytes Delta count of bytes in throttled read operations. instance.disk.ThrottledReadOps Delta count of throttled read operations. instance.disk.ThrottledWriteBytes Delta count of bytes in throttled write operations. instance.disk.ThrottledWriteOps Delta count of throttled write operations. Inventory data Inventory data is information about the status or configuration of a service or host. You can examine inventory data in New Relic Infrastructure and in New Relic Insights. The Google Compute Engine integration reports configuration information and labels for virtual machines and disks through the properties listed below. Virtual machine tags are treated as labels that take the value true. gcp/compute/virtual-machine automaticRestart canIpForward cpuPlatform creationTimestamp deletionProtection description instanceId isPreemptible label.* machineType metadataFingerprint name networkInterfaces onHostMaintenance project status networkTags zone gcp/compute/virtual-machine/disk creationTimestamp description diskId encrypted instanceId instanceName label.* lastAttachTimestamp lastDetachTimestamp licenses name project replicaZones sizeGb sourceImage sourceImageId sourceSnapshot sourceSnapshotId status type users zone Learn more",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 167.99374,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "sections": "<em>Google</em> Compute Engine monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " your <em>GCP</em> service to New Relic Infrastructure. Important You must install the Infrastructure agent on each GCE host to see metrics from that host. Connecting your <em>Google</em> <em>Cloud</em> projects allows Infrastructure to access GCE metadata, such as region, type, and tags. Polling frequency New Relic"
      },
      "id": "603e7d1f28ccbc483ceba771"
    },
    {
      "sections": [
        "Google Cloud Functions monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "View and use data",
        "Metric data",
        "Inventory data",
        "Important"
      ],
      "title": "Google Cloud Functions monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "2805038e3e7040ea7032a96268fceba1faa0647e",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-functions-monitoring-integration/",
      "published_at": "2021-07-02T14:20:18Z",
      "updated_at": "2021-03-16T05:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our infrastructure integrations with the Google Cloud Platform (GCP) includes one that reports Google Cloud Functions data to our products. This document explains how to activate the GCP Cloud Functions integration and describes the data that can be reported. Features Google Cloud Functions service allows running code in a serverless way. Using the Google UI, developers can create short pieces of code that are intended to do a specific function. The function can then respond to cloud events without the need to manage an application server or runtime environment. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency Our integrations query your GCP services according to a polling interval, which varies depending on the integration. Polling frequency for GCP Cloud Functions: five minutes Resolution: one data point every minute View and use data After activating the integration and then waiting a few minutes (based on the polling frequency), data will appear in the UI. To view and use your data, including links to your dashboards and alert settings, go to one.newrelic.com, in top nav click Infrastructure, click GCP, then (select an integration). Metric data Metric data we receive from your GCP Cloud Functions integration includes: Attribute Description function.Executions Count of functions that executed, by status. function.ExecutionTimeNanos Time for each function to execute, in nanoseconds. function.UserMemoryBytes Memory used for each function, in bytes. Inventory data Inventory data we receive from your GCP Cloud Functions integration includes the following inventory. Important Inventory indicated with * are fetched only when the GCP project is linked to New Relic through a service account. Inventory Description description * User-provided description of a function. entryPoint * The name of the function (as defined in source code) that will be executed. eventTriggerFailurePolicy * For functions that can be triggered by events, the policy for failed executions. eventTriggerResource * For functions that can be triggered by events, the resource(s) from which to observe events. eventTriggerService * For functions that can be triggered by events, the hostname of the service that should be observed. eventTriggerType * For functions that can be triggered by events, the type of event to observe. httpsTriggerUr * For functions that can be triggered via HTTPS endpoint, the deployed URL for the function. label * Labels for the function. memory * The amount of memory in MB available for a function. name The name of the function. project The Google Cloud project that the function belongs to. runtime * The runtime in which the function is going to run. status * Status of the function deployment. timeout * The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. versionId * The version identifier of the Cloud Function. zone The zone where the function is running.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.76225,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Functions monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "Our infrastructure <em>integrations</em> with the <em>Google</em> <em>Cloud</em> <em>Platform</em> (<em>GCP</em>) includes one that reports <em>Google</em> <em>Cloud</em> Functions data to our products. This document explains how to activate the <em>GCP</em> <em>Cloud</em> Functions integration and describes the data that can be reported. Features <em>Google</em> <em>Cloud</em> Functions service"
      },
      "id": "603e8f62e7b9d2fe6b2a081d"
    },
    {
      "sections": [
        "Google Cloud Storage monitoring integration",
        "Features",
        "Activate integration",
        "Polling frequency",
        "Find and use data",
        "Metric data",
        "Inventory data"
      ],
      "title": "Google Cloud Storage monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "GCP integrations list"
      ],
      "external_id": "b82474e156f5c250b2a97c371b450b9254183297",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/gcp-integrations-list/google-cloud-storage-monitoring-integration/",
      "published_at": "2021-07-02T15:52:59Z",
      "updated_at": "2021-03-16T05:46:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers an integration for reporting your Google Cloud Storage data to New Relic. Learn how to connect this integration to infrastructure monitoring and about the metric data and inventory data that New Relic reports for this integration. Features Google Cloud Storage is a Google Cloud Platform service that you can use to serve website content, to store data for archival and disaster recovery, and to distribute data objects via direct download. With the Google Cloud Storage integration, you can access these features: View charts and information about the data you are storing and retrieving from Google Cloud Storage. Create custom queries and charts in from automatically captured data. Set alerts on your Google Cloud Storage data directly from the Integrations page. Activate integration To enable the integration follow standard procedures to connect your GCP service to New Relic. Polling frequency New Relic queries your Google Cloud Storage services based on a polling interval of 5 minutes. Find and use data After connecting the integration to New Relic and waiting a few minutes, data will appear in the New Relic UI. To find and use integration data, including your dashboards and your alert settings, go to one.newrelic.com > Infrastructure > GCP > Google Cloud Storage. To create custom dashboards for the integration, create queries for the GcpStorageBucketSample event type with the provider value GcpStorageBucket. Metric data The integration reports metric data for all values of method and response_code: response_code: The response code of the requests. method: The name of the API method called. The metric data that New Relic receives from your Google Cloud Storage integration includes: Metric Description api.Requests Delta count of API calls. network.ReceivedBytes Delta count of bytes received over the network. network.SentBytes Delta count of bytes sent over the network. Inventory data Inventory data for Google Cloud Storage bucket objects includes the following properties: Inventory data Description acl Access control list for the bucket that lets you specify who has access to your data and to what extent. cors The Cross-Origin Resource Sharing (CORS) configuration for the bucket. createTime Time when the bucket was created. defaultAcl Default access control list configuration for the bucket's blobs. etag HTTP 1.1 entity tag for the bucket. indexPage The bucket's website index page. This behaves as the bucket's directory index where missing blobs are treated as potential directories. labels Labels for the bucket, in key/value pairs. This is only available if the GCP project is linked to New Relic through a service account and extended inventory collection is enabled. metageneration The generation of the metadata for the bucket. name The name of the bucket. notFoundPage The custom object that will be returned when a requested resource is not found. owner The owner of the bucket. A bucket is always owned by the project team owners group. project The name that you assigned to the project. A project consists of a set of users, a set of APIs, and settings for those APIs. requesterPays If set to true, the user accessing the bucket or an object it contains assumes the access transit costs. storageClass The default storage class for a bucket, if you don't specify one for a new object. The storage class defines how Google Cloud Storage stores objects in the bucket and determines the SLA and storage cost. For more information, see storage classes. zone The zone where the bucket is deployed.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.17126,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Google</em> <em>Cloud</em> Storage monitoring <em>integration</em>",
        "sections": "<em>Google</em> <em>Cloud</em> Storage monitoring <em>integration</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": " and retrieving from <em>Google</em> <em>Cloud</em> Storage. Create custom queries and charts in from automatically captured data. Set alerts on your <em>Google</em> <em>Cloud</em> Storage data directly from the <em>Integrations</em> page. Activate integration To enable the integration follow standard procedures to connect your <em>GCP</em> service to New Relic"
      },
      "id": "603e8f63196a67fa56a83dbc"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic": [
    {
      "sections": [
        "Integrations and custom roles",
        "Recommended role",
        "Optional role",
        "Important",
        "List of permissions",
        "Common permissions",
        "Service-specific permissions",
        "Permissions to link projects through the UI"
      ],
      "title": "Integrations and custom roles",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "d4f60e2d8413ddde9a342980d75a0e216af9baa4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles/",
      "published_at": "2021-07-02T15:56:58Z",
      "updated_at": "2021-05-28T05:06:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To read the relevant data from your Google Cloud Platform (GCP) account, New Relic uses the Google Stackdriver API and also other specific services APIs. To access these APIs in your Google Cloud project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses roles to grant these permissions. Recommended role By default we highly recommend using the GCP primitive role Role Viewer, which grants \"permissions for read-only actions that do not affect your cloud infrastructure state, such as viewing (but not modifying) existing resources or data.\" This role is automatically managed by Google and updated when new Google Cloud services are released or modified. Optional role Alternatively, you can create your own custom role based on the list of permissions, which specifies the minimum set of permissions required to fetch data from each GCP integration. This will allow you to have more control over the permissions set for the New Relic authorized account. Important New Relic has no way of identifying problems related to custom permissions. If you choose to create a custom role, it is your responsibility to maintain it and ensure proper data is being collected. To customize your role you need to: Create a Google Cloud IAM Custom Role in each one of the GCP projects you want to monitor with New Relic. In each custom role, add the permissions that are specifically required for the cloud services you want to monitor according to the following list. Assign the custom role(s) to the New Relic authorized account. List of permissions Common permissions All integrations need the following permission: monitoring.timeSeries.list serviceusage.services.use Service-specific permissions For some GCP integrations, New Relic will also need the following permissions, mainly to collect labels and inventory attributes. Integration Permissions Google AppEngine n/a; Google App Engine does not require additional permissions. Google BigQuery bigquery.datasets.get bigquery.tables.get bigquery.tables.list Google Cloud Functions cloudfunctions.locations.list Google Cloud Load Balancing n/a; Google Cloud Load Balancing does not require additional permissions. Google Cloud Pub/Sub pubsub.subscriptions.get pubsub.subscriptions.list pubsub.topics.get pubsub.topics.list Google Cloud Spanner spanner.instances.list spanner.databases.list spanner.databases.getDdl Google Cloud SQL cloudsql.instances.list Google Cloud Storage storage.buckets.list Google Compute Engine compute.instances.list compute.disks.get compute.disks.list Google Kubernetes Engine container.clusters.list Permissions to link projects through the UI To be able to see the list of projects that you can link to New Relic through the UI, your New Relic authorized service account needs the following permissions: resourcemanager.projects.get monitoring.monitoredResourceDescriptors.list If you do not want to grant New Relic authorized account the permissions that are needed for the linking process through the UI, you have the following options: Assign the Role Viewer or Monitoring Viewer role initially to the authorized account to link Google Cloud projects to New Relic through the UI. After the projects are linked, assign a Google Cloud custom role to the authorized account. Use New Relic NerdGraph to link Google Cloud projects to New Relic. This does not involve listing the viewable projects. However, you must know the id of the project you want to monitor. For more information, see the NerdGraph GraphiQL cloud integrations API tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.70726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Integrations</em> and custom roles",
        "sections": "<em>Integrations</em> and custom roles",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To read the relevant data from your <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) account, New Relic uses the <em>Google</em> Stackdriver API and also other specific services APIs. To access these APIs in your <em>Google</em> <em>Cloud</em> project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses"
      },
      "id": "603ebb3564441f34b64e8874"
    },
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "Tip",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-07-02T15:56:50Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.67145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    },
    {
      "sections": [
        "GCP integration metrics",
        "Google Cloud Metrics"
      ],
      "title": "GCP integration metrics",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "65e4b0551be716988b29175976fd62a33d82a807",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Google Cloud Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization flex.cpu.Utilization GCP App Engine gcp.appengine.flex.disk.read_bytes_count flex.disk.ReadBytes GCP App Engine gcp.appengine.flex.disk.write_bytes_count flex.disk.WriteBytes GCP App Engine gcp.appengine.flex.network.received_bytes_count flex.network.ReceivedBytes GCP App Engine gcp.appengine.flex.network.sent_bytes_count flex.network.SentBytes GCP App Engine gcp.appengine.http.server.dos_intercept_count server.DosIntercepts GCP App Engine gcp.appengine.http.server.quota_denial_count server.QuotaDenials GCP App Engine gcp.appengine.http.server.response_count server.Responses GCP App Engine gcp.appengine.http.server.response_latencies server.ResponseLatenciesMilliseconds GCP App Engine gcp.appengine.http.server.response_style_count http.server.ResponseStyle GCP App Engine gcp.appengine.memcache.centi_mcu_count memcache.CentiMcu GCP App Engine gcp.appengine.memcache.operation_count memcache.Operations GCP App Engine gcp.appengine.memcache.received_bytes_count memcache.ReceivedBytes GCP App Engine gcp.appengine.memcache.sent_bytes_count memcache.SentBytes GCP App Engine gcp.appengine.system.cpu.usage system.cpu.Usage GCP App Engine gcp.appengine.system.instance_count system.Instances GCP App Engine gcp.appengine.system.memory.usage system.memory.UsageBytes GCP App Engine gcp.appengine.system.network.received_bytes_count system.network.ReceivedBytes GCP App Engine gcp.appengine.system.network.sent_bytes_count system.network.SentBytes GCP App Engine gcp.cloudtasks.api.request_count api.Requests GCP App Engine gcp.cloudtasks.queue.task_attempt_count queue.taskAttempts GCP App Engine gcp.cloudtasks.queue.task_attempt_delays queue.taskAttemptDelaysMilliseconds GCP BigQuery gcp.bigquery.storage.stored_bytes storage.StoredBytes GCP BigQuery gcp.bigquery.storage.table_count storage.Tables GCP BigQuery gcp.bigquery.query.count query.Count GCP BigQuery gcp.bigquery.query.execution_times query.ExecutionTimes GCP BigQuery gcp.bigquery.slots.allocated slots.Allocated GCP BigQuery gcp.bigquery.slots.allocated_for_project slots.AllocatedForProject GCP BigQuery gcp.bigquery.slots.allocated_for_project_and_job_type slots.AllocatedForProjectAndJobType GCP BigQuery gcp.bigquery.slots.allocated_for_reservation slots.AllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_allocated_for_reservation slots.TotalAllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_available slots.TotalAvailable GCP BigQuery gcp.bigquery.storage.uploaded_bytes storage.UploadedBytes GCP BigQuery gcp.bigquery.storage.uploaded_bytes_billed storage.UploadedBytesBilled GCP BigQuery gcp.bigquery.storage.uploaded_row_count storage.UploadedRows GCP Dataflow gcp.dataflow.job.billable_shuffle_data_processed job.BillableShuffleDataProcessed GCP Dataflow gcp.dataflow.job.current_num_vcpus job.CurrentNumVcpus GCP Dataflow gcp.dataflow.job.current_shuffle_slots job.CurrentShuffleSlots GCP Dataflow gcp.dataflow.job.data_watermark_age job.DataWatermarkAge GCP Dataflow gcp.dataflow.job.elapsed_time job.ElapsedTime GCP Dataflow gcp.dataflow.job.element_count job.Elements GCP Dataflow gcp.dataflow.job.estimated_byte_count job.EstimatedBytes GCP Dataflow gcp.dataflow.job.is_failed job.IsFailed GCP Dataflow gcp.dataflow.job.per_stage_data_watermark_age job.PerStageDataWatermarkAge GCP Dataflow gcp.dataflow.job.per_stage_system_lag job.PerStageSystemLag GCP Dataflow gcp.dataflow.job.system_lag job.SystemLag GCP Dataflow gcp.dataflow.job.total_memory_usage_time job.TotalMemoryUsageTime GCP Dataflow gcp.dataflow.job.total_pd_usage_time job.TotalPdUsageTime GCP Dataflow gcp.dataflow.job.total_shuffle_data_processed job.TotalShuffleDataProcessed GCP Dataflow gcp.dataflow.job.total_streaming_data_processed job.TotalStreamingDataProcessed GCP Dataflow gcp.dataflow.job.total_vcpu_time job.TotalVcpuTime GCP Dataflow gcp.dataflow.job.user_counter job.UserCounter GCP Dataproc gcp.dataproc.cluster.hdfs.datanodes cluster.hdfs.Datanodes GCP Dataproc gcp.dataproc.cluster.hdfs.storage_capacity cluster.hdfs.StorageCapacity GCP Dataproc gcp.dataproc.cluster.hdfs.storage_utilization cluster.hdfs.StorageUtilization GCP Dataproc gcp.dataproc.cluster.hdfs.unhealthy_blocks cluster.hdfs.UnhealthyBlocks GCP Dataproc gcp.dataproc.cluster.job.completion_time cluster.job.CompletionTime GCP Dataproc gcp.dataproc.cluster.job.duration cluster.job.Duration GCP Dataproc gcp.dataproc.cluster.job.failed_count cluster.job.Failures GCP Dataproc gcp.dataproc.cluster.job.running_count cluster.job.Running GCP Dataproc gcp.dataproc.cluster.job.submitted_count cluster.job.Submitted GCP Dataproc gcp.dataproc.cluster.operation.completion_time cluster.operation.CompletionTime GCP Dataproc gcp.dataproc.cluster.operation.duration cluster.operation.Duration GCP Dataproc gcp.dataproc.cluster.operation.failed_count cluster.operation.Failures GCP Dataproc gcp.dataproc.cluster.operation.running_count cluster.operation.Running GCP Dataproc gcp.dataproc.cluster.operation.submitted_count cluster.operation.Submitted GCP Dataproc gcp.dataproc.cluster.yarn.allocated_memory_percentage cluster.yarn.AllocatedMemoryPercentage GCP Dataproc gcp.dataproc.cluster.yarn.apps cluster.yarn.Apps GCP Dataproc gcp.dataproc.cluster.yarn.containers cluster.yarn.Containers GCP Dataproc gcp.dataproc.cluster.yarn.memory_size cluster.yarn.MemorySize GCP Dataproc gcp.dataproc.cluster.yarn.nodemanagers cluster.yarn.Nodemanagers GCP Dataproc gcp.dataproc.cluster.yarn.pending_memory_size cluster.yarn.PendingMemorySize GCP Dataproc gcp.dataproc.cluster.yarn.virtual_cores cluster.yarn.VirtualCores GCP Datastore gcp.datastore.api.request_count api.Requests GCP Datastore gcp.datastore.entity.read_sizes entity.ReadSizes GCP Datastore gcp.datastore.entity.write_sizes entity.WriteSizes GCP Datastore gcp.datastore.index.write_count index.Writes GCP Firebase Database gcp.firebasedatabase.io.database_load io.DatabaseLoad GCP Firebase Database gcp.firebasedatabase.io.persisted_bytes_count io.PersistedBytes GCP Firebase Database gcp.firebasedatabase.io.sent_responses_count io.SentResponses GCP Firebase Database gcp.firebasedatabase.io.utilization io.Utilization GCP Firebase Database gcp.firebasedatabase.network.active_connections network.ActiveConnections GCP Firebase Database gcp.firebasedatabase.network.api_hits_count network.ApiHits GCP Firebase Database gcp.firebasedatabase.network.broadcast_load network.BroadcastLoad GCP Firebase Database gcp.firebasedatabase.network.https_requests_count network.HttpsRequests GCP Firebase Database gcp.firebasedatabase.network.monthly_sent network.MonthlySent GCP Firebase Database gcp.firebasedatabase.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Database gcp.firebasedatabase.network.sent_bytes_count network.SentBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_and_protocol_bytes_count network.SentPayloadAndProtocolBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_bytes_count network.SentPayloadBytes GCP Firebase Database gcp.firebasedatabase.rules.evaluation_count rules.Evaluation GCP Firebase Database gcp.firebasedatabase.storage.limit storage.Limit GCP Firebase Database gcp.firebasedatabase.storage.total_bytes storage.TotalBytes GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent network.MonthlySent GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Hosting gcp.firebasehosting.network.sent_bytes_count network.SentBytes GCP Firebase Hosting gcp.firebasehosting.storage.limit storage.Limit GCP Firebase Hosting gcp.firebasehosting.storage.total_bytes storage.TotalBytes GCP Firebase Storage gcp.firebasestorage.rules.evaluation_count rules.Evaluation GCP Firestore gcp.firestore.api.request_count api.Request GCP Firestore gcp.firestore.document.delete_count document.Delete GCP Firestore gcp.firestore.document.read_count document.Read GCP Firestore gcp.firestore.document.write_count document.Write GCP Firestore gcp.firestore.network.active_connections network.ActiveConnections GCP Firestore gcp.firestore.network.snapshot_listeners network.SnapshotListeners GCP Firestore gcp.firestore.rules.evaluation_count rules.Evaluation GCP Cloud Functions gcp.cloudfunctions.function.execution_count function.Executions GCP Cloud Functions gcp.cloudfunctions.function.execution_times function.ExecutionTimeNanos GCP Cloud Functions gcp.cloudfunctions.function.user_memory_bytes function.UserMemoryBytes GCP Interconnect gcp.interconnect.network.interconnect.capacity network.interconnect.Capacity GCP Interconnect gcp.interconnect.network.interconnect.dropped_packets_count network.interconnect.DroppedPackets GCP Interconnect gcp.interconnect.network.interconnect.link.rx_power network.interconnect.link.RxPower GCP Interconnect gcp.interconnect.network.interconnect.link.tx_power network.interconnect.link.TxPower GCP Interconnect gcp.interconnect.network.interconnect.receive_errors_count network.interconnect.ReceiveErrors GCP Interconnect gcp.interconnect.network.interconnect.received_bytes_count network.interconnect.ReceivedBytes GCP Interconnect gcp.interconnect.network.interconnect.received_unicast_packets_count network.interconnect.ReceivedUnicastPackets GCP Interconnect gcp.interconnect.network.interconnect.send_errors_count network.interconnect.SendErrors GCP Interconnect gcp.interconnect.network.interconnect.sent_bytes_count network.interconnect.SentBytes GCP Interconnect gcp.interconnect.network.interconnect.sent_unicast_packets_count network.interconnect.SentUnicastPackets GCP Interconnect gcp.interconnect.network.attachment.capacity network.attachment.Capacity GCP Interconnect gcp.interconnect.network.attachment.received_bytes_count network.attachment.ReceivedBytes GCP Interconnect gcp.interconnect.network.attachment.received_packets_count network.attachment.ReceivedPackets GCP Interconnect gcp.interconnect.network.attachment.sent_bytes_count network.attachment.SentBytes GCP Interconnect gcp.interconnect.network.attachment.sent_packets_count network.attachment.SentPackets GCP Kubernetes Engine gcp.kubernetes.container.accelerator.duty_cycle container.accelerator.dutyCycle GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_total container.accelerator.memoryTotal GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_used container.accelerator.memoryUsed GCP Kubernetes Engine gcp.kubernetes.container.accelerator.request container.accelerator.request GCP Kubernetes Engine gcp.kubernetes.container.cpu.core_usage_time container.cpu.usageTime GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_cores container.cpu.limitCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_utilization container.cpu.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_cores container.cpu.requestCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_utilization container.cpu.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_bytes container.memory.limitBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_utilization container.memory.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.request_bytes container.memory.requestBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.request_utilization container.memory.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.used_bytes container.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.container.restart_count container.restartCount GCP Kubernetes Engine gcp.kubernetes.container.uptime container.uptime GCP Kubernetes Engine gcp.kubernetes.node_daemon.cpu.core_usage_time nodeDaemon.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node_daemon.memory.used_bytes nodeDaemon.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_cores node.cpu.allocatableCores GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_utilization node.cpu.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.cpu.core_usage_time node.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node.cpu.total_cores node.cpu.totalCores GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_bytes node.memory.allocatableBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_utilization node.memory.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.memory.total_bytes node.memory.totalBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.used_bytes node.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.network.received_bytes_count node.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.node.network.sent_bytes_count node.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.received_bytes_count pod.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.sent_bytes_count pod.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.volume.total_bytes pod.volume.totalBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.used_bytes pod.volume.usedBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.utilization pod.volume.utilization GCP Load Balancer gcp.loadbalancing.https.backend_latencies https.BackendLatencies GCP Load Balancer gcp.loadbalancing.https.backend_request_bytes_count https.BackendRequestBytes GCP Load Balancer gcp.loadbalancing.https.backend_request_count https.BackendRequests GCP Load Balancer gcp.loadbalancing.https.backend_response_bytes_count https.BackendResponseBytes GCP Load Balancer gcp.loadbalancing.https.frontend_tcp_rtt https.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.https.request_bytes_count https.RequestBytes GCP Load Balancer gcp.loadbalancing.https.request_count https.Requests GCP Load Balancer gcp.loadbalancing.https.response_bytes_count https.ResponseBytes GCP Load Balancer gcp.loadbalancing.https.total_latencies https.TotalLatencies GCP Load Balancer gcp.loadbalancing.l3.internal.egress_bytes_count l3.internal.EgressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.egress_packets_count l3.internal.EgressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_bytes_count l3.internal.IngressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_packets_count l3.internal.IngressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.rtt_latencies l3.internal.RttLatencies GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.closed_connections tcpSslProxy.ClosedConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.egress_bytes_count tcpSslProxy.EgressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.frontend_tcp_rtt tcpSslProxy.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.ingress_bytes_count tcpSslProxy.IngressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.new_connections tcpSslProxy.NewConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.open_connections tcpSslProxy.OpenConnections GCP Pub/Sub gcp.pubsub.subscription.backlog_bytes subscription.BacklogBytes GCP Pub/Sub gcp.pubsub.subscription.byte_cost subscription.ByteCost GCP Pub/Sub gcp.pubsub.subscription.config_updates_count subscription.ConfigUpdates GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_message_operation_count subscription.ModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_request_count subscription.ModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.num_outstanding_messages subscription.NumOutstandingMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages subscription.NumRetainedAckedMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages_by_region subscription.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_unacked_messages_by_region subscription.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_undelivered_messages subscription.NumUndeliveredMessages GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age subscription.OldestRetainedAckedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age_by_region subscription.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age subscription.OldestUnackedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age_by_region subscription.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.pull_ack_message_operation_count subscription.PullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_ack_request_count subscription.PullAckRequest GCP Pub/Sub gcp.pubsub.subscription.pull_message_operation_count subscription.PullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_request_count subscription.PullRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_count subscription.PushRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_latencies subscription.PushRequestLatencies GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes subscription.RetainedAckedBytes GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes_by_region subscription.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_message_operation_count subscription.StreamingPullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_request_count subscription.StreamingPullAckRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_message_operation_count subscription.StreamingPullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_message_operation_count subscription.StreamingPullModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_request_count subscription.StreamingPullModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_response_count subscription.StreamingPullResponse GCP Pub/Sub gcp.pubsub.subscription.unacked_bytes_by_region subscription.UnackedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.byte_cost topic.ByteCost GCP Pub/Sub gcp.pubsub.topic.config_updates_count topic.ConfigUpdates GCP Pub/Sub gcp.pubsub.topic.message_sizes topic.MessageSizes GCP Pub/Sub gcp.pubsub.topic.num_retained_acked_messages_by_region topic.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.num_unacked_messages_by_region topic.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_retained_acked_message_age_by_region topic.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_unacked_message_age_by_region topic.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.retained_acked_bytes_by_region topic.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.send_message_operation_count topic.SendMessageOperation GCP Pub/Sub gcp.pubsub.topic.send_request_count topic.SendRequest GCP Pub/Sub gcp.pubsub.topic.unacked_bytes_by_region topic.UnackedBytesByRegion GCP Router gcp.router.best_received_routes_count BestReceivedRoutes GCP Router gcp.router.bfd.control.receive_intervals bfd.control.ReceiveIntervals GCP Router gcp.router.bfd.control.received_packets_count bfd.control.ReceivedPackets GCP Router gcp.router.bfd.control.rejected_packets_count bfd.control.RejectedPackets GCP Router gcp.router.bfd.control.transmit_intervals bfd.control.TransmitIntervals GCP Router gcp.router.bfd.control.transmitted_packets_count bfd.control.TransmittedPackets GCP Router gcp.router.bfd.session_up bfd.SessionUp GCP Router gcp.router.bgp_sessions_down_count BgpSessionsDown GCP Router gcp.router.bgp_sessions_up_count BgpSessionsUp GCP Router gcp.router.bgp.received_routes_count bgp.ReceivedRoutes GCP Router gcp.router.bgp.sent_routes_count bgp.SentRoutes GCP Router gcp.router.bgp.session_up bgp.SessionUp GCP Router gcp.router.router_up RouterUp GCP Router gcp.router.sent_routes_count SentRoutes GCP Router gcp.router.nat.allocated_ports nat.AllocatedPorts GCP Router gcp.router.nat.closed_connections_count nat.ClosedConnections GCP Router gcp.router.nat.dropped_received_packets_count nat.DroppedReceivedPackets GCP Router gcp.router.nat.new_connections_count nat.NewConnections GCP Router gcp.router.nat.port_usage nat.PortUsage GCP Router gcp.router.nat.received_bytes_count nat.ReceivedBytes GCP Router gcp.router.nat.received_packets_count nat.ReceivedPackets GCP Router gcp.router.nat.sent_bytes_count nat.SentBytes GCP Router gcp.router.nat.sent_packets_count nat.SentPackets GCP Run gcp.run.container.billable_instance_time container.BillableInstanceTime GCP Run gcp.run.container.cpu.allocation_time container.cpu.AllocationTime GCP Run gcp.run.container.memory.allocation_time container.memory.AllocationTime GCP Run gcp.run.request_count Request GCP Run gcp.run.request_latencies RequestLatencies GCP Spanner gcp.spanner.api.received_bytes_count api.ReceivedBytes GCP Spanner gcp.spanner.api.request_count api.Requests GCP Spanner gcp.spanner.api.request_latencies api.RequestLatencies GCP Spanner gcp.spanner.instance.cpu.utilization instance.cpu.Utilization GCP Spanner gcp.spanner.instance.node_count instance.nodes GCP Spanner gcp.spanner.instance.session_count instance.sessions GCP Spanner gcp.spanner.instance.storage.used_bytes instance.storage.UsedBytes GCP Cloud SQL gcp.cloudsql.database.auto_failover_request_count database.AutoFailoverRequest GCP Cloud SQL gcp.cloudsql.database.available_for_failover database.AvailableForFailover GCP Cloud SQL gcp.cloudsql.database.cpu.reserved_cores database.cpu.ReservedCores GCP Cloud SQL gcp.cloudsql.database.cpu.usage_time database.cpu.UsageTime GCP Cloud SQL gcp.cloudsql.database.cpu.utilization database.cpu.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.bytes_used database.disk.BytesUsed GCP Cloud SQL gcp.cloudsql.database.disk.quota database.disk.Quota GCP Cloud SQL gcp.cloudsql.database.disk.read_ops_count database.disk.ReadOps GCP Cloud SQL gcp.cloudsql.database.disk.utilization database.disk.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.write_ops_count database.disk.WriteOps GCP Cloud SQL gcp.cloudsql.database.memory.quota database.memory.Quota GCP Cloud SQL gcp.cloudsql.database.memory.usage database.memory.Usage GCP Cloud SQL gcp.cloudsql.database.memory.utilization database.memory.Utilization GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_dirty database.mysql.InnodbBufferPoolPagesDirty GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_free database.mysql.InnodbBufferPoolPagesFree GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_total database.mysql.InnodbBufferPoolPagesTotal GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_data_fsyncs database.mysql.InnodbDataFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_os_log_fsyncs database.mysql.InnodbOsLogFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_read database.mysql.InnodbPagesRead GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_written database.mysql.InnodbPagesWritten GCP Cloud SQL gcp.cloudsql.database.mysql.queries database.mysql.Queries GCP Cloud SQL gcp.cloudsql.database.mysql.questions database.mysql.Questions GCP Cloud SQL gcp.cloudsql.database.mysql.received_bytes_count database.mysql.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.mysql.replication.seconds_behind_master database.mysql.replication.SecondsBehindMaster GCP Cloud SQL gcp.cloudsql.database.mysql.sent_bytes_count database.mysql.SentBytes GCP Cloud SQL gcp.cloudsql.database.network.connections database.network.Connections GCP Cloud SQL gcp.cloudsql.database.network.received_bytes_count database.network.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.network.sent_bytes_count database.network.SentBytes GCP Cloud SQL gcp.cloudsql.database.postgresql.num_backends database.postgresql.NumBackends GCP Cloud SQL gcp.cloudsql.database.postgresql.replication.replica_byte_lag database.postgresql.replication.ReplicaByteLag GCP Cloud SQL gcp.cloudsql.database.postgresql.transaction_count database.postgresql.Transaction GCP Cloud SQL gcp.cloudsql.database.up database.Up GCP Cloud SQL gcp.cloudsql.database.uptime database.Uptime GCP Cloud Storage gcp.storage.api.request_count api.Requests GCP Cloud Storage gcp.storage.network.received_bytes_count network.ReceivedBytes GCP Cloud Storage gcp.storage.network.sent_bytes_count network.SentBytes GCP VMs gcp.compute.firewall.dropped_bytes_count firewall.DroppedBytes GCP VMs gcp.compute.firewall.dropped_packets_count firewall.DroppedPackets GCP VMs gcp.compute.instance.cpu.reserved_cores instance.cpu.ReservedCores GCP VMs gcp.compute.instance.cpu.utilization instance.cpu.Utilization GCP VMs gcp.compute.instance.disk.read_bytes_count instance.disk.ReadBytes GCP VMs gcp.compute.instance.disk.read_ops_count instance.disk.ReadOps GCP VMs gcp.compute.instance.disk.write_bytes_count instance.disk.WriteBytes GCP VMs gcp.compute.instance.disk.write_ops_count instance.disk.WriteOps GCP VMs gcp.compute.instance.network.received_bytes_count instance.network.ReceivedBytes GCP VMs gcp.compute.instance.network.received_packets_count instance.network.ReceivedPackets GCP VMs gcp.compute.instance.network.sent_bytes_count instance.network.SentBytes GCP VMs gcp.compute.instance.network.sent_packets_count instance.network.SentPackets GCP VMs gcp.compute.instance.disk.throttled_read_bytes_count instance.disk.ThrottledReadBytes GCP VMs gcp.compute.instance.disk.throttled_read_ops_count instance.disk.ThrottledReadOps GCP VMs gcp.compute.instance.disk.throttled_write_bytes_count instance.disk.ThrottledWriteBytes GCP VMs gcp.compute.instance.disk.throttled_write_ops_count instance.disk.ThrottledWriteOps GCP VPC Access gcp.vpcaccess.connector.received_bytes_count connector.ReceivedBytes GCP VPC Access gcp.vpcaccess.connector.received_packets_count connector.ReceivedPackets GCP VPC Access gcp.vpcaccess.connector.sent_bytes_count connector.SentBytes GCP VPC Access gcp.vpcaccess.connector.sent_packets_count connector.SentPackets",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.89291,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GCP <em>integration</em> metrics",
        "sections": "<em>Google</em> <em>Cloud</em> Metrics",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "<em>Google</em> <em>Cloud</em> Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization"
      },
      "id": "603e8a5264441f524a4e8840"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics": [
    {
      "sections": [
        "Integrations and custom roles",
        "Recommended role",
        "Optional role",
        "Important",
        "List of permissions",
        "Common permissions",
        "Service-specific permissions",
        "Permissions to link projects through the UI"
      ],
      "title": "Integrations and custom roles",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "d4f60e2d8413ddde9a342980d75a0e216af9baa4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles/",
      "published_at": "2021-07-02T15:56:58Z",
      "updated_at": "2021-05-28T05:06:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To read the relevant data from your Google Cloud Platform (GCP) account, New Relic uses the Google Stackdriver API and also other specific services APIs. To access these APIs in your Google Cloud project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses roles to grant these permissions. Recommended role By default we highly recommend using the GCP primitive role Role Viewer, which grants \"permissions for read-only actions that do not affect your cloud infrastructure state, such as viewing (but not modifying) existing resources or data.\" This role is automatically managed by Google and updated when new Google Cloud services are released or modified. Optional role Alternatively, you can create your own custom role based on the list of permissions, which specifies the minimum set of permissions required to fetch data from each GCP integration. This will allow you to have more control over the permissions set for the New Relic authorized account. Important New Relic has no way of identifying problems related to custom permissions. If you choose to create a custom role, it is your responsibility to maintain it and ensure proper data is being collected. To customize your role you need to: Create a Google Cloud IAM Custom Role in each one of the GCP projects you want to monitor with New Relic. In each custom role, add the permissions that are specifically required for the cloud services you want to monitor according to the following list. Assign the custom role(s) to the New Relic authorized account. List of permissions Common permissions All integrations need the following permission: monitoring.timeSeries.list serviceusage.services.use Service-specific permissions For some GCP integrations, New Relic will also need the following permissions, mainly to collect labels and inventory attributes. Integration Permissions Google AppEngine n/a; Google App Engine does not require additional permissions. Google BigQuery bigquery.datasets.get bigquery.tables.get bigquery.tables.list Google Cloud Functions cloudfunctions.locations.list Google Cloud Load Balancing n/a; Google Cloud Load Balancing does not require additional permissions. Google Cloud Pub/Sub pubsub.subscriptions.get pubsub.subscriptions.list pubsub.topics.get pubsub.topics.list Google Cloud Spanner spanner.instances.list spanner.databases.list spanner.databases.getDdl Google Cloud SQL cloudsql.instances.list Google Cloud Storage storage.buckets.list Google Compute Engine compute.instances.list compute.disks.get compute.disks.list Google Kubernetes Engine container.clusters.list Permissions to link projects through the UI To be able to see the list of projects that you can link to New Relic through the UI, your New Relic authorized service account needs the following permissions: resourcemanager.projects.get monitoring.monitoredResourceDescriptors.list If you do not want to grant New Relic authorized account the permissions that are needed for the linking process through the UI, you have the following options: Assign the Role Viewer or Monitoring Viewer role initially to the authorized account to link Google Cloud projects to New Relic through the UI. After the projects are linked, assign a Google Cloud custom role to the authorized account. Use New Relic NerdGraph to link Google Cloud projects to New Relic. This does not involve listing the viewable projects. However, you must know the id of the project you want to monitor. For more information, see the NerdGraph GraphiQL cloud integrations API tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.70726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Integrations</em> and custom roles",
        "sections": "<em>Integrations</em> and custom roles",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To read the relevant data from your <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) account, New Relic uses the <em>Google</em> Stackdriver API and also other specific services APIs. To access these APIs in your <em>Google</em> <em>Cloud</em> project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses"
      },
      "id": "603ebb3564441f34b64e8874"
    },
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "Tip",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-07-02T15:56:50Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.67145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    },
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Tip",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-07-02T15:55:26Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.52292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To <em>start</em> receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. Tip To use <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em> and the rest of our observability <em>platform</em>, join the New Relic family! Sign up to create your free"
      },
      "id": "603e8309196a67fc4fa83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles": [
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "Tip",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-07-02T15:56:50Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.67145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    },
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Tip",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-07-02T15:55:26Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.52292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To <em>start</em> receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. Tip To use <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em> and the rest of our observability <em>platform</em>, join the New Relic family! Sign up to create your free"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "GCP integration metrics",
        "Google Cloud Metrics"
      ],
      "title": "GCP integration metrics",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "65e4b0551be716988b29175976fd62a33d82a807",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Google Cloud Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization flex.cpu.Utilization GCP App Engine gcp.appengine.flex.disk.read_bytes_count flex.disk.ReadBytes GCP App Engine gcp.appengine.flex.disk.write_bytes_count flex.disk.WriteBytes GCP App Engine gcp.appengine.flex.network.received_bytes_count flex.network.ReceivedBytes GCP App Engine gcp.appengine.flex.network.sent_bytes_count flex.network.SentBytes GCP App Engine gcp.appengine.http.server.dos_intercept_count server.DosIntercepts GCP App Engine gcp.appengine.http.server.quota_denial_count server.QuotaDenials GCP App Engine gcp.appengine.http.server.response_count server.Responses GCP App Engine gcp.appengine.http.server.response_latencies server.ResponseLatenciesMilliseconds GCP App Engine gcp.appengine.http.server.response_style_count http.server.ResponseStyle GCP App Engine gcp.appengine.memcache.centi_mcu_count memcache.CentiMcu GCP App Engine gcp.appengine.memcache.operation_count memcache.Operations GCP App Engine gcp.appengine.memcache.received_bytes_count memcache.ReceivedBytes GCP App Engine gcp.appengine.memcache.sent_bytes_count memcache.SentBytes GCP App Engine gcp.appengine.system.cpu.usage system.cpu.Usage GCP App Engine gcp.appengine.system.instance_count system.Instances GCP App Engine gcp.appengine.system.memory.usage system.memory.UsageBytes GCP App Engine gcp.appengine.system.network.received_bytes_count system.network.ReceivedBytes GCP App Engine gcp.appengine.system.network.sent_bytes_count system.network.SentBytes GCP App Engine gcp.cloudtasks.api.request_count api.Requests GCP App Engine gcp.cloudtasks.queue.task_attempt_count queue.taskAttempts GCP App Engine gcp.cloudtasks.queue.task_attempt_delays queue.taskAttemptDelaysMilliseconds GCP BigQuery gcp.bigquery.storage.stored_bytes storage.StoredBytes GCP BigQuery gcp.bigquery.storage.table_count storage.Tables GCP BigQuery gcp.bigquery.query.count query.Count GCP BigQuery gcp.bigquery.query.execution_times query.ExecutionTimes GCP BigQuery gcp.bigquery.slots.allocated slots.Allocated GCP BigQuery gcp.bigquery.slots.allocated_for_project slots.AllocatedForProject GCP BigQuery gcp.bigquery.slots.allocated_for_project_and_job_type slots.AllocatedForProjectAndJobType GCP BigQuery gcp.bigquery.slots.allocated_for_reservation slots.AllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_allocated_for_reservation slots.TotalAllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_available slots.TotalAvailable GCP BigQuery gcp.bigquery.storage.uploaded_bytes storage.UploadedBytes GCP BigQuery gcp.bigquery.storage.uploaded_bytes_billed storage.UploadedBytesBilled GCP BigQuery gcp.bigquery.storage.uploaded_row_count storage.UploadedRows GCP Dataflow gcp.dataflow.job.billable_shuffle_data_processed job.BillableShuffleDataProcessed GCP Dataflow gcp.dataflow.job.current_num_vcpus job.CurrentNumVcpus GCP Dataflow gcp.dataflow.job.current_shuffle_slots job.CurrentShuffleSlots GCP Dataflow gcp.dataflow.job.data_watermark_age job.DataWatermarkAge GCP Dataflow gcp.dataflow.job.elapsed_time job.ElapsedTime GCP Dataflow gcp.dataflow.job.element_count job.Elements GCP Dataflow gcp.dataflow.job.estimated_byte_count job.EstimatedBytes GCP Dataflow gcp.dataflow.job.is_failed job.IsFailed GCP Dataflow gcp.dataflow.job.per_stage_data_watermark_age job.PerStageDataWatermarkAge GCP Dataflow gcp.dataflow.job.per_stage_system_lag job.PerStageSystemLag GCP Dataflow gcp.dataflow.job.system_lag job.SystemLag GCP Dataflow gcp.dataflow.job.total_memory_usage_time job.TotalMemoryUsageTime GCP Dataflow gcp.dataflow.job.total_pd_usage_time job.TotalPdUsageTime GCP Dataflow gcp.dataflow.job.total_shuffle_data_processed job.TotalShuffleDataProcessed GCP Dataflow gcp.dataflow.job.total_streaming_data_processed job.TotalStreamingDataProcessed GCP Dataflow gcp.dataflow.job.total_vcpu_time job.TotalVcpuTime GCP Dataflow gcp.dataflow.job.user_counter job.UserCounter GCP Dataproc gcp.dataproc.cluster.hdfs.datanodes cluster.hdfs.Datanodes GCP Dataproc gcp.dataproc.cluster.hdfs.storage_capacity cluster.hdfs.StorageCapacity GCP Dataproc gcp.dataproc.cluster.hdfs.storage_utilization cluster.hdfs.StorageUtilization GCP Dataproc gcp.dataproc.cluster.hdfs.unhealthy_blocks cluster.hdfs.UnhealthyBlocks GCP Dataproc gcp.dataproc.cluster.job.completion_time cluster.job.CompletionTime GCP Dataproc gcp.dataproc.cluster.job.duration cluster.job.Duration GCP Dataproc gcp.dataproc.cluster.job.failed_count cluster.job.Failures GCP Dataproc gcp.dataproc.cluster.job.running_count cluster.job.Running GCP Dataproc gcp.dataproc.cluster.job.submitted_count cluster.job.Submitted GCP Dataproc gcp.dataproc.cluster.operation.completion_time cluster.operation.CompletionTime GCP Dataproc gcp.dataproc.cluster.operation.duration cluster.operation.Duration GCP Dataproc gcp.dataproc.cluster.operation.failed_count cluster.operation.Failures GCP Dataproc gcp.dataproc.cluster.operation.running_count cluster.operation.Running GCP Dataproc gcp.dataproc.cluster.operation.submitted_count cluster.operation.Submitted GCP Dataproc gcp.dataproc.cluster.yarn.allocated_memory_percentage cluster.yarn.AllocatedMemoryPercentage GCP Dataproc gcp.dataproc.cluster.yarn.apps cluster.yarn.Apps GCP Dataproc gcp.dataproc.cluster.yarn.containers cluster.yarn.Containers GCP Dataproc gcp.dataproc.cluster.yarn.memory_size cluster.yarn.MemorySize GCP Dataproc gcp.dataproc.cluster.yarn.nodemanagers cluster.yarn.Nodemanagers GCP Dataproc gcp.dataproc.cluster.yarn.pending_memory_size cluster.yarn.PendingMemorySize GCP Dataproc gcp.dataproc.cluster.yarn.virtual_cores cluster.yarn.VirtualCores GCP Datastore gcp.datastore.api.request_count api.Requests GCP Datastore gcp.datastore.entity.read_sizes entity.ReadSizes GCP Datastore gcp.datastore.entity.write_sizes entity.WriteSizes GCP Datastore gcp.datastore.index.write_count index.Writes GCP Firebase Database gcp.firebasedatabase.io.database_load io.DatabaseLoad GCP Firebase Database gcp.firebasedatabase.io.persisted_bytes_count io.PersistedBytes GCP Firebase Database gcp.firebasedatabase.io.sent_responses_count io.SentResponses GCP Firebase Database gcp.firebasedatabase.io.utilization io.Utilization GCP Firebase Database gcp.firebasedatabase.network.active_connections network.ActiveConnections GCP Firebase Database gcp.firebasedatabase.network.api_hits_count network.ApiHits GCP Firebase Database gcp.firebasedatabase.network.broadcast_load network.BroadcastLoad GCP Firebase Database gcp.firebasedatabase.network.https_requests_count network.HttpsRequests GCP Firebase Database gcp.firebasedatabase.network.monthly_sent network.MonthlySent GCP Firebase Database gcp.firebasedatabase.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Database gcp.firebasedatabase.network.sent_bytes_count network.SentBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_and_protocol_bytes_count network.SentPayloadAndProtocolBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_bytes_count network.SentPayloadBytes GCP Firebase Database gcp.firebasedatabase.rules.evaluation_count rules.Evaluation GCP Firebase Database gcp.firebasedatabase.storage.limit storage.Limit GCP Firebase Database gcp.firebasedatabase.storage.total_bytes storage.TotalBytes GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent network.MonthlySent GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Hosting gcp.firebasehosting.network.sent_bytes_count network.SentBytes GCP Firebase Hosting gcp.firebasehosting.storage.limit storage.Limit GCP Firebase Hosting gcp.firebasehosting.storage.total_bytes storage.TotalBytes GCP Firebase Storage gcp.firebasestorage.rules.evaluation_count rules.Evaluation GCP Firestore gcp.firestore.api.request_count api.Request GCP Firestore gcp.firestore.document.delete_count document.Delete GCP Firestore gcp.firestore.document.read_count document.Read GCP Firestore gcp.firestore.document.write_count document.Write GCP Firestore gcp.firestore.network.active_connections network.ActiveConnections GCP Firestore gcp.firestore.network.snapshot_listeners network.SnapshotListeners GCP Firestore gcp.firestore.rules.evaluation_count rules.Evaluation GCP Cloud Functions gcp.cloudfunctions.function.execution_count function.Executions GCP Cloud Functions gcp.cloudfunctions.function.execution_times function.ExecutionTimeNanos GCP Cloud Functions gcp.cloudfunctions.function.user_memory_bytes function.UserMemoryBytes GCP Interconnect gcp.interconnect.network.interconnect.capacity network.interconnect.Capacity GCP Interconnect gcp.interconnect.network.interconnect.dropped_packets_count network.interconnect.DroppedPackets GCP Interconnect gcp.interconnect.network.interconnect.link.rx_power network.interconnect.link.RxPower GCP Interconnect gcp.interconnect.network.interconnect.link.tx_power network.interconnect.link.TxPower GCP Interconnect gcp.interconnect.network.interconnect.receive_errors_count network.interconnect.ReceiveErrors GCP Interconnect gcp.interconnect.network.interconnect.received_bytes_count network.interconnect.ReceivedBytes GCP Interconnect gcp.interconnect.network.interconnect.received_unicast_packets_count network.interconnect.ReceivedUnicastPackets GCP Interconnect gcp.interconnect.network.interconnect.send_errors_count network.interconnect.SendErrors GCP Interconnect gcp.interconnect.network.interconnect.sent_bytes_count network.interconnect.SentBytes GCP Interconnect gcp.interconnect.network.interconnect.sent_unicast_packets_count network.interconnect.SentUnicastPackets GCP Interconnect gcp.interconnect.network.attachment.capacity network.attachment.Capacity GCP Interconnect gcp.interconnect.network.attachment.received_bytes_count network.attachment.ReceivedBytes GCP Interconnect gcp.interconnect.network.attachment.received_packets_count network.attachment.ReceivedPackets GCP Interconnect gcp.interconnect.network.attachment.sent_bytes_count network.attachment.SentBytes GCP Interconnect gcp.interconnect.network.attachment.sent_packets_count network.attachment.SentPackets GCP Kubernetes Engine gcp.kubernetes.container.accelerator.duty_cycle container.accelerator.dutyCycle GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_total container.accelerator.memoryTotal GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_used container.accelerator.memoryUsed GCP Kubernetes Engine gcp.kubernetes.container.accelerator.request container.accelerator.request GCP Kubernetes Engine gcp.kubernetes.container.cpu.core_usage_time container.cpu.usageTime GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_cores container.cpu.limitCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_utilization container.cpu.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_cores container.cpu.requestCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_utilization container.cpu.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_bytes container.memory.limitBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_utilization container.memory.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.request_bytes container.memory.requestBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.request_utilization container.memory.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.used_bytes container.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.container.restart_count container.restartCount GCP Kubernetes Engine gcp.kubernetes.container.uptime container.uptime GCP Kubernetes Engine gcp.kubernetes.node_daemon.cpu.core_usage_time nodeDaemon.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node_daemon.memory.used_bytes nodeDaemon.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_cores node.cpu.allocatableCores GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_utilization node.cpu.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.cpu.core_usage_time node.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node.cpu.total_cores node.cpu.totalCores GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_bytes node.memory.allocatableBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_utilization node.memory.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.memory.total_bytes node.memory.totalBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.used_bytes node.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.network.received_bytes_count node.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.node.network.sent_bytes_count node.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.received_bytes_count pod.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.sent_bytes_count pod.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.volume.total_bytes pod.volume.totalBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.used_bytes pod.volume.usedBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.utilization pod.volume.utilization GCP Load Balancer gcp.loadbalancing.https.backend_latencies https.BackendLatencies GCP Load Balancer gcp.loadbalancing.https.backend_request_bytes_count https.BackendRequestBytes GCP Load Balancer gcp.loadbalancing.https.backend_request_count https.BackendRequests GCP Load Balancer gcp.loadbalancing.https.backend_response_bytes_count https.BackendResponseBytes GCP Load Balancer gcp.loadbalancing.https.frontend_tcp_rtt https.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.https.request_bytes_count https.RequestBytes GCP Load Balancer gcp.loadbalancing.https.request_count https.Requests GCP Load Balancer gcp.loadbalancing.https.response_bytes_count https.ResponseBytes GCP Load Balancer gcp.loadbalancing.https.total_latencies https.TotalLatencies GCP Load Balancer gcp.loadbalancing.l3.internal.egress_bytes_count l3.internal.EgressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.egress_packets_count l3.internal.EgressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_bytes_count l3.internal.IngressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_packets_count l3.internal.IngressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.rtt_latencies l3.internal.RttLatencies GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.closed_connections tcpSslProxy.ClosedConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.egress_bytes_count tcpSslProxy.EgressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.frontend_tcp_rtt tcpSslProxy.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.ingress_bytes_count tcpSslProxy.IngressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.new_connections tcpSslProxy.NewConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.open_connections tcpSslProxy.OpenConnections GCP Pub/Sub gcp.pubsub.subscription.backlog_bytes subscription.BacklogBytes GCP Pub/Sub gcp.pubsub.subscription.byte_cost subscription.ByteCost GCP Pub/Sub gcp.pubsub.subscription.config_updates_count subscription.ConfigUpdates GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_message_operation_count subscription.ModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_request_count subscription.ModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.num_outstanding_messages subscription.NumOutstandingMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages subscription.NumRetainedAckedMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages_by_region subscription.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_unacked_messages_by_region subscription.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_undelivered_messages subscription.NumUndeliveredMessages GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age subscription.OldestRetainedAckedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age_by_region subscription.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age subscription.OldestUnackedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age_by_region subscription.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.pull_ack_message_operation_count subscription.PullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_ack_request_count subscription.PullAckRequest GCP Pub/Sub gcp.pubsub.subscription.pull_message_operation_count subscription.PullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_request_count subscription.PullRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_count subscription.PushRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_latencies subscription.PushRequestLatencies GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes subscription.RetainedAckedBytes GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes_by_region subscription.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_message_operation_count subscription.StreamingPullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_request_count subscription.StreamingPullAckRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_message_operation_count subscription.StreamingPullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_message_operation_count subscription.StreamingPullModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_request_count subscription.StreamingPullModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_response_count subscription.StreamingPullResponse GCP Pub/Sub gcp.pubsub.subscription.unacked_bytes_by_region subscription.UnackedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.byte_cost topic.ByteCost GCP Pub/Sub gcp.pubsub.topic.config_updates_count topic.ConfigUpdates GCP Pub/Sub gcp.pubsub.topic.message_sizes topic.MessageSizes GCP Pub/Sub gcp.pubsub.topic.num_retained_acked_messages_by_region topic.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.num_unacked_messages_by_region topic.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_retained_acked_message_age_by_region topic.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_unacked_message_age_by_region topic.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.retained_acked_bytes_by_region topic.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.send_message_operation_count topic.SendMessageOperation GCP Pub/Sub gcp.pubsub.topic.send_request_count topic.SendRequest GCP Pub/Sub gcp.pubsub.topic.unacked_bytes_by_region topic.UnackedBytesByRegion GCP Router gcp.router.best_received_routes_count BestReceivedRoutes GCP Router gcp.router.bfd.control.receive_intervals bfd.control.ReceiveIntervals GCP Router gcp.router.bfd.control.received_packets_count bfd.control.ReceivedPackets GCP Router gcp.router.bfd.control.rejected_packets_count bfd.control.RejectedPackets GCP Router gcp.router.bfd.control.transmit_intervals bfd.control.TransmitIntervals GCP Router gcp.router.bfd.control.transmitted_packets_count bfd.control.TransmittedPackets GCP Router gcp.router.bfd.session_up bfd.SessionUp GCP Router gcp.router.bgp_sessions_down_count BgpSessionsDown GCP Router gcp.router.bgp_sessions_up_count BgpSessionsUp GCP Router gcp.router.bgp.received_routes_count bgp.ReceivedRoutes GCP Router gcp.router.bgp.sent_routes_count bgp.SentRoutes GCP Router gcp.router.bgp.session_up bgp.SessionUp GCP Router gcp.router.router_up RouterUp GCP Router gcp.router.sent_routes_count SentRoutes GCP Router gcp.router.nat.allocated_ports nat.AllocatedPorts GCP Router gcp.router.nat.closed_connections_count nat.ClosedConnections GCP Router gcp.router.nat.dropped_received_packets_count nat.DroppedReceivedPackets GCP Router gcp.router.nat.new_connections_count nat.NewConnections GCP Router gcp.router.nat.port_usage nat.PortUsage GCP Router gcp.router.nat.received_bytes_count nat.ReceivedBytes GCP Router gcp.router.nat.received_packets_count nat.ReceivedPackets GCP Router gcp.router.nat.sent_bytes_count nat.SentBytes GCP Router gcp.router.nat.sent_packets_count nat.SentPackets GCP Run gcp.run.container.billable_instance_time container.BillableInstanceTime GCP Run gcp.run.container.cpu.allocation_time container.cpu.AllocationTime GCP Run gcp.run.container.memory.allocation_time container.memory.AllocationTime GCP Run gcp.run.request_count Request GCP Run gcp.run.request_latencies RequestLatencies GCP Spanner gcp.spanner.api.received_bytes_count api.ReceivedBytes GCP Spanner gcp.spanner.api.request_count api.Requests GCP Spanner gcp.spanner.api.request_latencies api.RequestLatencies GCP Spanner gcp.spanner.instance.cpu.utilization instance.cpu.Utilization GCP Spanner gcp.spanner.instance.node_count instance.nodes GCP Spanner gcp.spanner.instance.session_count instance.sessions GCP Spanner gcp.spanner.instance.storage.used_bytes instance.storage.UsedBytes GCP Cloud SQL gcp.cloudsql.database.auto_failover_request_count database.AutoFailoverRequest GCP Cloud SQL gcp.cloudsql.database.available_for_failover database.AvailableForFailover GCP Cloud SQL gcp.cloudsql.database.cpu.reserved_cores database.cpu.ReservedCores GCP Cloud SQL gcp.cloudsql.database.cpu.usage_time database.cpu.UsageTime GCP Cloud SQL gcp.cloudsql.database.cpu.utilization database.cpu.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.bytes_used database.disk.BytesUsed GCP Cloud SQL gcp.cloudsql.database.disk.quota database.disk.Quota GCP Cloud SQL gcp.cloudsql.database.disk.read_ops_count database.disk.ReadOps GCP Cloud SQL gcp.cloudsql.database.disk.utilization database.disk.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.write_ops_count database.disk.WriteOps GCP Cloud SQL gcp.cloudsql.database.memory.quota database.memory.Quota GCP Cloud SQL gcp.cloudsql.database.memory.usage database.memory.Usage GCP Cloud SQL gcp.cloudsql.database.memory.utilization database.memory.Utilization GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_dirty database.mysql.InnodbBufferPoolPagesDirty GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_free database.mysql.InnodbBufferPoolPagesFree GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_total database.mysql.InnodbBufferPoolPagesTotal GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_data_fsyncs database.mysql.InnodbDataFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_os_log_fsyncs database.mysql.InnodbOsLogFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_read database.mysql.InnodbPagesRead GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_written database.mysql.InnodbPagesWritten GCP Cloud SQL gcp.cloudsql.database.mysql.queries database.mysql.Queries GCP Cloud SQL gcp.cloudsql.database.mysql.questions database.mysql.Questions GCP Cloud SQL gcp.cloudsql.database.mysql.received_bytes_count database.mysql.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.mysql.replication.seconds_behind_master database.mysql.replication.SecondsBehindMaster GCP Cloud SQL gcp.cloudsql.database.mysql.sent_bytes_count database.mysql.SentBytes GCP Cloud SQL gcp.cloudsql.database.network.connections database.network.Connections GCP Cloud SQL gcp.cloudsql.database.network.received_bytes_count database.network.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.network.sent_bytes_count database.network.SentBytes GCP Cloud SQL gcp.cloudsql.database.postgresql.num_backends database.postgresql.NumBackends GCP Cloud SQL gcp.cloudsql.database.postgresql.replication.replica_byte_lag database.postgresql.replication.ReplicaByteLag GCP Cloud SQL gcp.cloudsql.database.postgresql.transaction_count database.postgresql.Transaction GCP Cloud SQL gcp.cloudsql.database.up database.Up GCP Cloud SQL gcp.cloudsql.database.uptime database.Uptime GCP Cloud Storage gcp.storage.api.request_count api.Requests GCP Cloud Storage gcp.storage.network.received_bytes_count network.ReceivedBytes GCP Cloud Storage gcp.storage.network.sent_bytes_count network.SentBytes GCP VMs gcp.compute.firewall.dropped_bytes_count firewall.DroppedBytes GCP VMs gcp.compute.firewall.dropped_packets_count firewall.DroppedPackets GCP VMs gcp.compute.instance.cpu.reserved_cores instance.cpu.ReservedCores GCP VMs gcp.compute.instance.cpu.utilization instance.cpu.Utilization GCP VMs gcp.compute.instance.disk.read_bytes_count instance.disk.ReadBytes GCP VMs gcp.compute.instance.disk.read_ops_count instance.disk.ReadOps GCP VMs gcp.compute.instance.disk.write_bytes_count instance.disk.WriteBytes GCP VMs gcp.compute.instance.disk.write_ops_count instance.disk.WriteOps GCP VMs gcp.compute.instance.network.received_bytes_count instance.network.ReceivedBytes GCP VMs gcp.compute.instance.network.received_packets_count instance.network.ReceivedPackets GCP VMs gcp.compute.instance.network.sent_bytes_count instance.network.SentBytes GCP VMs gcp.compute.instance.network.sent_packets_count instance.network.SentPackets GCP VMs gcp.compute.instance.disk.throttled_read_bytes_count instance.disk.ThrottledReadBytes GCP VMs gcp.compute.instance.disk.throttled_read_ops_count instance.disk.ThrottledReadOps GCP VMs gcp.compute.instance.disk.throttled_write_bytes_count instance.disk.ThrottledWriteBytes GCP VMs gcp.compute.instance.disk.throttled_write_ops_count instance.disk.ThrottledWriteOps GCP VPC Access gcp.vpcaccess.connector.received_bytes_count connector.ReceivedBytes GCP VPC Access gcp.vpcaccess.connector.received_packets_count connector.ReceivedPackets GCP VPC Access gcp.vpcaccess.connector.sent_bytes_count connector.SentBytes GCP VPC Access gcp.vpcaccess.connector.sent_packets_count connector.SentPackets",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.89291,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GCP <em>integration</em> metrics",
        "sections": "<em>Google</em> <em>Cloud</em> Metrics",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "<em>Google</em> <em>Cloud</em> Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization"
      },
      "id": "603e8a5264441f524a4e8840"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations": [
    {
      "sections": [
        "Integrations and custom roles",
        "Recommended role",
        "Optional role",
        "Important",
        "List of permissions",
        "Common permissions",
        "Service-specific permissions",
        "Permissions to link projects through the UI"
      ],
      "title": "Integrations and custom roles",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "d4f60e2d8413ddde9a342980d75a0e216af9baa4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles/",
      "published_at": "2021-07-02T15:56:58Z",
      "updated_at": "2021-05-28T05:06:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To read the relevant data from your Google Cloud Platform (GCP) account, New Relic uses the Google Stackdriver API and also other specific services APIs. To access these APIs in your Google Cloud project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses roles to grant these permissions. Recommended role By default we highly recommend using the GCP primitive role Role Viewer, which grants \"permissions for read-only actions that do not affect your cloud infrastructure state, such as viewing (but not modifying) existing resources or data.\" This role is automatically managed by Google and updated when new Google Cloud services are released or modified. Optional role Alternatively, you can create your own custom role based on the list of permissions, which specifies the minimum set of permissions required to fetch data from each GCP integration. This will allow you to have more control over the permissions set for the New Relic authorized account. Important New Relic has no way of identifying problems related to custom permissions. If you choose to create a custom role, it is your responsibility to maintain it and ensure proper data is being collected. To customize your role you need to: Create a Google Cloud IAM Custom Role in each one of the GCP projects you want to monitor with New Relic. In each custom role, add the permissions that are specifically required for the cloud services you want to monitor according to the following list. Assign the custom role(s) to the New Relic authorized account. List of permissions Common permissions All integrations need the following permission: monitoring.timeSeries.list serviceusage.services.use Service-specific permissions For some GCP integrations, New Relic will also need the following permissions, mainly to collect labels and inventory attributes. Integration Permissions Google AppEngine n/a; Google App Engine does not require additional permissions. Google BigQuery bigquery.datasets.get bigquery.tables.get bigquery.tables.list Google Cloud Functions cloudfunctions.locations.list Google Cloud Load Balancing n/a; Google Cloud Load Balancing does not require additional permissions. Google Cloud Pub/Sub pubsub.subscriptions.get pubsub.subscriptions.list pubsub.topics.get pubsub.topics.list Google Cloud Spanner spanner.instances.list spanner.databases.list spanner.databases.getDdl Google Cloud SQL cloudsql.instances.list Google Cloud Storage storage.buckets.list Google Compute Engine compute.instances.list compute.disks.get compute.disks.list Google Kubernetes Engine container.clusters.list Permissions to link projects through the UI To be able to see the list of projects that you can link to New Relic through the UI, your New Relic authorized service account needs the following permissions: resourcemanager.projects.get monitoring.monitoredResourceDescriptors.list If you do not want to grant New Relic authorized account the permissions that are needed for the linking process through the UI, you have the following options: Assign the Role Viewer or Monitoring Viewer role initially to the authorized account to link Google Cloud projects to New Relic through the UI. After the projects are linked, assign a Google Cloud custom role to the authorized account. Use New Relic NerdGraph to link Google Cloud projects to New Relic. This does not involve listing the viewable projects. However, you must know the id of the project you want to monitor. For more information, see the NerdGraph GraphiQL cloud integrations API tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.70726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Integrations</em> and custom roles",
        "sections": "<em>Integrations</em> and custom roles",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To read the relevant data from your <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) account, New Relic uses the <em>Google</em> Stackdriver API and also other specific services APIs. To access these APIs in your <em>Google</em> <em>Cloud</em> project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses"
      },
      "id": "603ebb3564441f34b64e8874"
    },
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Tip",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-07-02T15:55:26Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.52292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To <em>start</em> receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. Tip To use <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em> and the rest of our observability <em>platform</em>, join the New Relic family! Sign up to create your free"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "GCP integration metrics",
        "Google Cloud Metrics"
      ],
      "title": "GCP integration metrics",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "65e4b0551be716988b29175976fd62a33d82a807",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/gcp-integration-metrics/",
      "published_at": "2021-07-02T15:55:27Z",
      "updated_at": "2021-03-16T05:48:38Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Google Cloud Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization flex.cpu.Utilization GCP App Engine gcp.appengine.flex.disk.read_bytes_count flex.disk.ReadBytes GCP App Engine gcp.appengine.flex.disk.write_bytes_count flex.disk.WriteBytes GCP App Engine gcp.appengine.flex.network.received_bytes_count flex.network.ReceivedBytes GCP App Engine gcp.appengine.flex.network.sent_bytes_count flex.network.SentBytes GCP App Engine gcp.appengine.http.server.dos_intercept_count server.DosIntercepts GCP App Engine gcp.appengine.http.server.quota_denial_count server.QuotaDenials GCP App Engine gcp.appengine.http.server.response_count server.Responses GCP App Engine gcp.appengine.http.server.response_latencies server.ResponseLatenciesMilliseconds GCP App Engine gcp.appengine.http.server.response_style_count http.server.ResponseStyle GCP App Engine gcp.appengine.memcache.centi_mcu_count memcache.CentiMcu GCP App Engine gcp.appengine.memcache.operation_count memcache.Operations GCP App Engine gcp.appengine.memcache.received_bytes_count memcache.ReceivedBytes GCP App Engine gcp.appengine.memcache.sent_bytes_count memcache.SentBytes GCP App Engine gcp.appengine.system.cpu.usage system.cpu.Usage GCP App Engine gcp.appengine.system.instance_count system.Instances GCP App Engine gcp.appengine.system.memory.usage system.memory.UsageBytes GCP App Engine gcp.appengine.system.network.received_bytes_count system.network.ReceivedBytes GCP App Engine gcp.appengine.system.network.sent_bytes_count system.network.SentBytes GCP App Engine gcp.cloudtasks.api.request_count api.Requests GCP App Engine gcp.cloudtasks.queue.task_attempt_count queue.taskAttempts GCP App Engine gcp.cloudtasks.queue.task_attempt_delays queue.taskAttemptDelaysMilliseconds GCP BigQuery gcp.bigquery.storage.stored_bytes storage.StoredBytes GCP BigQuery gcp.bigquery.storage.table_count storage.Tables GCP BigQuery gcp.bigquery.query.count query.Count GCP BigQuery gcp.bigquery.query.execution_times query.ExecutionTimes GCP BigQuery gcp.bigquery.slots.allocated slots.Allocated GCP BigQuery gcp.bigquery.slots.allocated_for_project slots.AllocatedForProject GCP BigQuery gcp.bigquery.slots.allocated_for_project_and_job_type slots.AllocatedForProjectAndJobType GCP BigQuery gcp.bigquery.slots.allocated_for_reservation slots.AllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_allocated_for_reservation slots.TotalAllocatedForReservation GCP BigQuery gcp.bigquery.slots.total_available slots.TotalAvailable GCP BigQuery gcp.bigquery.storage.uploaded_bytes storage.UploadedBytes GCP BigQuery gcp.bigquery.storage.uploaded_bytes_billed storage.UploadedBytesBilled GCP BigQuery gcp.bigquery.storage.uploaded_row_count storage.UploadedRows GCP Dataflow gcp.dataflow.job.billable_shuffle_data_processed job.BillableShuffleDataProcessed GCP Dataflow gcp.dataflow.job.current_num_vcpus job.CurrentNumVcpus GCP Dataflow gcp.dataflow.job.current_shuffle_slots job.CurrentShuffleSlots GCP Dataflow gcp.dataflow.job.data_watermark_age job.DataWatermarkAge GCP Dataflow gcp.dataflow.job.elapsed_time job.ElapsedTime GCP Dataflow gcp.dataflow.job.element_count job.Elements GCP Dataflow gcp.dataflow.job.estimated_byte_count job.EstimatedBytes GCP Dataflow gcp.dataflow.job.is_failed job.IsFailed GCP Dataflow gcp.dataflow.job.per_stage_data_watermark_age job.PerStageDataWatermarkAge GCP Dataflow gcp.dataflow.job.per_stage_system_lag job.PerStageSystemLag GCP Dataflow gcp.dataflow.job.system_lag job.SystemLag GCP Dataflow gcp.dataflow.job.total_memory_usage_time job.TotalMemoryUsageTime GCP Dataflow gcp.dataflow.job.total_pd_usage_time job.TotalPdUsageTime GCP Dataflow gcp.dataflow.job.total_shuffle_data_processed job.TotalShuffleDataProcessed GCP Dataflow gcp.dataflow.job.total_streaming_data_processed job.TotalStreamingDataProcessed GCP Dataflow gcp.dataflow.job.total_vcpu_time job.TotalVcpuTime GCP Dataflow gcp.dataflow.job.user_counter job.UserCounter GCP Dataproc gcp.dataproc.cluster.hdfs.datanodes cluster.hdfs.Datanodes GCP Dataproc gcp.dataproc.cluster.hdfs.storage_capacity cluster.hdfs.StorageCapacity GCP Dataproc gcp.dataproc.cluster.hdfs.storage_utilization cluster.hdfs.StorageUtilization GCP Dataproc gcp.dataproc.cluster.hdfs.unhealthy_blocks cluster.hdfs.UnhealthyBlocks GCP Dataproc gcp.dataproc.cluster.job.completion_time cluster.job.CompletionTime GCP Dataproc gcp.dataproc.cluster.job.duration cluster.job.Duration GCP Dataproc gcp.dataproc.cluster.job.failed_count cluster.job.Failures GCP Dataproc gcp.dataproc.cluster.job.running_count cluster.job.Running GCP Dataproc gcp.dataproc.cluster.job.submitted_count cluster.job.Submitted GCP Dataproc gcp.dataproc.cluster.operation.completion_time cluster.operation.CompletionTime GCP Dataproc gcp.dataproc.cluster.operation.duration cluster.operation.Duration GCP Dataproc gcp.dataproc.cluster.operation.failed_count cluster.operation.Failures GCP Dataproc gcp.dataproc.cluster.operation.running_count cluster.operation.Running GCP Dataproc gcp.dataproc.cluster.operation.submitted_count cluster.operation.Submitted GCP Dataproc gcp.dataproc.cluster.yarn.allocated_memory_percentage cluster.yarn.AllocatedMemoryPercentage GCP Dataproc gcp.dataproc.cluster.yarn.apps cluster.yarn.Apps GCP Dataproc gcp.dataproc.cluster.yarn.containers cluster.yarn.Containers GCP Dataproc gcp.dataproc.cluster.yarn.memory_size cluster.yarn.MemorySize GCP Dataproc gcp.dataproc.cluster.yarn.nodemanagers cluster.yarn.Nodemanagers GCP Dataproc gcp.dataproc.cluster.yarn.pending_memory_size cluster.yarn.PendingMemorySize GCP Dataproc gcp.dataproc.cluster.yarn.virtual_cores cluster.yarn.VirtualCores GCP Datastore gcp.datastore.api.request_count api.Requests GCP Datastore gcp.datastore.entity.read_sizes entity.ReadSizes GCP Datastore gcp.datastore.entity.write_sizes entity.WriteSizes GCP Datastore gcp.datastore.index.write_count index.Writes GCP Firebase Database gcp.firebasedatabase.io.database_load io.DatabaseLoad GCP Firebase Database gcp.firebasedatabase.io.persisted_bytes_count io.PersistedBytes GCP Firebase Database gcp.firebasedatabase.io.sent_responses_count io.SentResponses GCP Firebase Database gcp.firebasedatabase.io.utilization io.Utilization GCP Firebase Database gcp.firebasedatabase.network.active_connections network.ActiveConnections GCP Firebase Database gcp.firebasedatabase.network.api_hits_count network.ApiHits GCP Firebase Database gcp.firebasedatabase.network.broadcast_load network.BroadcastLoad GCP Firebase Database gcp.firebasedatabase.network.https_requests_count network.HttpsRequests GCP Firebase Database gcp.firebasedatabase.network.monthly_sent network.MonthlySent GCP Firebase Database gcp.firebasedatabase.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Database gcp.firebasedatabase.network.sent_bytes_count network.SentBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_and_protocol_bytes_count network.SentPayloadAndProtocolBytes GCP Firebase Database gcp.firebasedatabase.network.sent_payload_bytes_count network.SentPayloadBytes GCP Firebase Database gcp.firebasedatabase.rules.evaluation_count rules.Evaluation GCP Firebase Database gcp.firebasedatabase.storage.limit storage.Limit GCP Firebase Database gcp.firebasedatabase.storage.total_bytes storage.TotalBytes GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent network.MonthlySent GCP Firebase Hosting gcp.firebasehosting.network.monthly_sent_limit network.MonthlySentLimit GCP Firebase Hosting gcp.firebasehosting.network.sent_bytes_count network.SentBytes GCP Firebase Hosting gcp.firebasehosting.storage.limit storage.Limit GCP Firebase Hosting gcp.firebasehosting.storage.total_bytes storage.TotalBytes GCP Firebase Storage gcp.firebasestorage.rules.evaluation_count rules.Evaluation GCP Firestore gcp.firestore.api.request_count api.Request GCP Firestore gcp.firestore.document.delete_count document.Delete GCP Firestore gcp.firestore.document.read_count document.Read GCP Firestore gcp.firestore.document.write_count document.Write GCP Firestore gcp.firestore.network.active_connections network.ActiveConnections GCP Firestore gcp.firestore.network.snapshot_listeners network.SnapshotListeners GCP Firestore gcp.firestore.rules.evaluation_count rules.Evaluation GCP Cloud Functions gcp.cloudfunctions.function.execution_count function.Executions GCP Cloud Functions gcp.cloudfunctions.function.execution_times function.ExecutionTimeNanos GCP Cloud Functions gcp.cloudfunctions.function.user_memory_bytes function.UserMemoryBytes GCP Interconnect gcp.interconnect.network.interconnect.capacity network.interconnect.Capacity GCP Interconnect gcp.interconnect.network.interconnect.dropped_packets_count network.interconnect.DroppedPackets GCP Interconnect gcp.interconnect.network.interconnect.link.rx_power network.interconnect.link.RxPower GCP Interconnect gcp.interconnect.network.interconnect.link.tx_power network.interconnect.link.TxPower GCP Interconnect gcp.interconnect.network.interconnect.receive_errors_count network.interconnect.ReceiveErrors GCP Interconnect gcp.interconnect.network.interconnect.received_bytes_count network.interconnect.ReceivedBytes GCP Interconnect gcp.interconnect.network.interconnect.received_unicast_packets_count network.interconnect.ReceivedUnicastPackets GCP Interconnect gcp.interconnect.network.interconnect.send_errors_count network.interconnect.SendErrors GCP Interconnect gcp.interconnect.network.interconnect.sent_bytes_count network.interconnect.SentBytes GCP Interconnect gcp.interconnect.network.interconnect.sent_unicast_packets_count network.interconnect.SentUnicastPackets GCP Interconnect gcp.interconnect.network.attachment.capacity network.attachment.Capacity GCP Interconnect gcp.interconnect.network.attachment.received_bytes_count network.attachment.ReceivedBytes GCP Interconnect gcp.interconnect.network.attachment.received_packets_count network.attachment.ReceivedPackets GCP Interconnect gcp.interconnect.network.attachment.sent_bytes_count network.attachment.SentBytes GCP Interconnect gcp.interconnect.network.attachment.sent_packets_count network.attachment.SentPackets GCP Kubernetes Engine gcp.kubernetes.container.accelerator.duty_cycle container.accelerator.dutyCycle GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_total container.accelerator.memoryTotal GCP Kubernetes Engine gcp.kubernetes.container.accelerator.memory_used container.accelerator.memoryUsed GCP Kubernetes Engine gcp.kubernetes.container.accelerator.request container.accelerator.request GCP Kubernetes Engine gcp.kubernetes.container.cpu.core_usage_time container.cpu.usageTime GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_cores container.cpu.limitCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.limit_utilization container.cpu.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_cores container.cpu.requestCores GCP Kubernetes Engine gcp.kubernetes.container.cpu.request_utilization container.cpu.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_bytes container.memory.limitBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.limit_utilization container.memory.limitUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.request_bytes container.memory.requestBytes GCP Kubernetes Engine gcp.kubernetes.container.memory.request_utilization container.memory.requestUtilization GCP Kubernetes Engine gcp.kubernetes.container.memory.used_bytes container.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.container.restart_count container.restartCount GCP Kubernetes Engine gcp.kubernetes.container.uptime container.uptime GCP Kubernetes Engine gcp.kubernetes.node_daemon.cpu.core_usage_time nodeDaemon.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node_daemon.memory.used_bytes nodeDaemon.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_cores node.cpu.allocatableCores GCP Kubernetes Engine gcp.kubernetes.node.cpu.allocatable_utilization node.cpu.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.cpu.core_usage_time node.cpu.coreUsageTime GCP Kubernetes Engine gcp.kubernetes.node.cpu.total_cores node.cpu.totalCores GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_bytes node.memory.allocatableBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.allocatable_utilization node.memory.allocatableUtilization GCP Kubernetes Engine gcp.kubernetes.node.memory.total_bytes node.memory.totalBytes GCP Kubernetes Engine gcp.kubernetes.node.memory.used_bytes node.memory.usedBytes GCP Kubernetes Engine gcp.kubernetes.node.network.received_bytes_count node.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.node.network.sent_bytes_count node.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.received_bytes_count pod.network.receivedBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.network.sent_bytes_count pod.network.sentBytesCount GCP Kubernetes Engine gcp.kubernetes.pod.volume.total_bytes pod.volume.totalBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.used_bytes pod.volume.usedBytes GCP Kubernetes Engine gcp.kubernetes.pod.volume.utilization pod.volume.utilization GCP Load Balancer gcp.loadbalancing.https.backend_latencies https.BackendLatencies GCP Load Balancer gcp.loadbalancing.https.backend_request_bytes_count https.BackendRequestBytes GCP Load Balancer gcp.loadbalancing.https.backend_request_count https.BackendRequests GCP Load Balancer gcp.loadbalancing.https.backend_response_bytes_count https.BackendResponseBytes GCP Load Balancer gcp.loadbalancing.https.frontend_tcp_rtt https.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.https.request_bytes_count https.RequestBytes GCP Load Balancer gcp.loadbalancing.https.request_count https.Requests GCP Load Balancer gcp.loadbalancing.https.response_bytes_count https.ResponseBytes GCP Load Balancer gcp.loadbalancing.https.total_latencies https.TotalLatencies GCP Load Balancer gcp.loadbalancing.l3.internal.egress_bytes_count l3.internal.EgressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.egress_packets_count l3.internal.EgressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_bytes_count l3.internal.IngressBytes GCP Load Balancer gcp.loadbalancing.l3.internal.ingress_packets_count l3.internal.IngressPackets GCP Load Balancer gcp.loadbalancing.l3.internal.rtt_latencies l3.internal.RttLatencies GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.closed_connections tcpSslProxy.ClosedConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.egress_bytes_count tcpSslProxy.EgressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.frontend_tcp_rtt tcpSslProxy.FrontendTcpRtt GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.ingress_bytes_count tcpSslProxy.IngressBytes GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.new_connections tcpSslProxy.NewConnections GCP Load Balancer gcp.loadbalancing.tcp_ssl_proxy.open_connections tcpSslProxy.OpenConnections GCP Pub/Sub gcp.pubsub.subscription.backlog_bytes subscription.BacklogBytes GCP Pub/Sub gcp.pubsub.subscription.byte_cost subscription.ByteCost GCP Pub/Sub gcp.pubsub.subscription.config_updates_count subscription.ConfigUpdates GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_message_operation_count subscription.ModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.mod_ack_deadline_request_count subscription.ModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.num_outstanding_messages subscription.NumOutstandingMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages subscription.NumRetainedAckedMessages GCP Pub/Sub gcp.pubsub.subscription.num_retained_acked_messages_by_region subscription.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_unacked_messages_by_region subscription.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.subscription.num_undelivered_messages subscription.NumUndeliveredMessages GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age subscription.OldestRetainedAckedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_retained_acked_message_age_by_region subscription.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age subscription.OldestUnackedMessageAge GCP Pub/Sub gcp.pubsub.subscription.oldest_unacked_message_age_by_region subscription.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.subscription.pull_ack_message_operation_count subscription.PullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_ack_request_count subscription.PullAckRequest GCP Pub/Sub gcp.pubsub.subscription.pull_message_operation_count subscription.PullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.pull_request_count subscription.PullRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_count subscription.PushRequest GCP Pub/Sub gcp.pubsub.subscription.push_request_latencies subscription.PushRequestLatencies GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes subscription.RetainedAckedBytes GCP Pub/Sub gcp.pubsub.subscription.retained_acked_bytes_by_region subscription.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_message_operation_count subscription.StreamingPullAckMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_ack_request_count subscription.StreamingPullAckRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_message_operation_count subscription.StreamingPullMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_message_operation_count subscription.StreamingPullModAckDeadlineMessageOperation GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_mod_ack_deadline_request_count subscription.StreamingPullModAckDeadlineRequest GCP Pub/Sub gcp.pubsub.subscription.streaming_pull_response_count subscription.StreamingPullResponse GCP Pub/Sub gcp.pubsub.subscription.unacked_bytes_by_region subscription.UnackedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.byte_cost topic.ByteCost GCP Pub/Sub gcp.pubsub.topic.config_updates_count topic.ConfigUpdates GCP Pub/Sub gcp.pubsub.topic.message_sizes topic.MessageSizes GCP Pub/Sub gcp.pubsub.topic.num_retained_acked_messages_by_region topic.NumRetainedAckedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.num_unacked_messages_by_region topic.NumUnackedMessagesByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_retained_acked_message_age_by_region topic.OldestRetainedAckedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.oldest_unacked_message_age_by_region topic.OldestUnackedMessageAgeByRegion GCP Pub/Sub gcp.pubsub.topic.retained_acked_bytes_by_region topic.RetainedAckedBytesByRegion GCP Pub/Sub gcp.pubsub.topic.send_message_operation_count topic.SendMessageOperation GCP Pub/Sub gcp.pubsub.topic.send_request_count topic.SendRequest GCP Pub/Sub gcp.pubsub.topic.unacked_bytes_by_region topic.UnackedBytesByRegion GCP Router gcp.router.best_received_routes_count BestReceivedRoutes GCP Router gcp.router.bfd.control.receive_intervals bfd.control.ReceiveIntervals GCP Router gcp.router.bfd.control.received_packets_count bfd.control.ReceivedPackets GCP Router gcp.router.bfd.control.rejected_packets_count bfd.control.RejectedPackets GCP Router gcp.router.bfd.control.transmit_intervals bfd.control.TransmitIntervals GCP Router gcp.router.bfd.control.transmitted_packets_count bfd.control.TransmittedPackets GCP Router gcp.router.bfd.session_up bfd.SessionUp GCP Router gcp.router.bgp_sessions_down_count BgpSessionsDown GCP Router gcp.router.bgp_sessions_up_count BgpSessionsUp GCP Router gcp.router.bgp.received_routes_count bgp.ReceivedRoutes GCP Router gcp.router.bgp.sent_routes_count bgp.SentRoutes GCP Router gcp.router.bgp.session_up bgp.SessionUp GCP Router gcp.router.router_up RouterUp GCP Router gcp.router.sent_routes_count SentRoutes GCP Router gcp.router.nat.allocated_ports nat.AllocatedPorts GCP Router gcp.router.nat.closed_connections_count nat.ClosedConnections GCP Router gcp.router.nat.dropped_received_packets_count nat.DroppedReceivedPackets GCP Router gcp.router.nat.new_connections_count nat.NewConnections GCP Router gcp.router.nat.port_usage nat.PortUsage GCP Router gcp.router.nat.received_bytes_count nat.ReceivedBytes GCP Router gcp.router.nat.received_packets_count nat.ReceivedPackets GCP Router gcp.router.nat.sent_bytes_count nat.SentBytes GCP Router gcp.router.nat.sent_packets_count nat.SentPackets GCP Run gcp.run.container.billable_instance_time container.BillableInstanceTime GCP Run gcp.run.container.cpu.allocation_time container.cpu.AllocationTime GCP Run gcp.run.container.memory.allocation_time container.memory.AllocationTime GCP Run gcp.run.request_count Request GCP Run gcp.run.request_latencies RequestLatencies GCP Spanner gcp.spanner.api.received_bytes_count api.ReceivedBytes GCP Spanner gcp.spanner.api.request_count api.Requests GCP Spanner gcp.spanner.api.request_latencies api.RequestLatencies GCP Spanner gcp.spanner.instance.cpu.utilization instance.cpu.Utilization GCP Spanner gcp.spanner.instance.node_count instance.nodes GCP Spanner gcp.spanner.instance.session_count instance.sessions GCP Spanner gcp.spanner.instance.storage.used_bytes instance.storage.UsedBytes GCP Cloud SQL gcp.cloudsql.database.auto_failover_request_count database.AutoFailoverRequest GCP Cloud SQL gcp.cloudsql.database.available_for_failover database.AvailableForFailover GCP Cloud SQL gcp.cloudsql.database.cpu.reserved_cores database.cpu.ReservedCores GCP Cloud SQL gcp.cloudsql.database.cpu.usage_time database.cpu.UsageTime GCP Cloud SQL gcp.cloudsql.database.cpu.utilization database.cpu.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.bytes_used database.disk.BytesUsed GCP Cloud SQL gcp.cloudsql.database.disk.quota database.disk.Quota GCP Cloud SQL gcp.cloudsql.database.disk.read_ops_count database.disk.ReadOps GCP Cloud SQL gcp.cloudsql.database.disk.utilization database.disk.Utilization GCP Cloud SQL gcp.cloudsql.database.disk.write_ops_count database.disk.WriteOps GCP Cloud SQL gcp.cloudsql.database.memory.quota database.memory.Quota GCP Cloud SQL gcp.cloudsql.database.memory.usage database.memory.Usage GCP Cloud SQL gcp.cloudsql.database.memory.utilization database.memory.Utilization GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_dirty database.mysql.InnodbBufferPoolPagesDirty GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_free database.mysql.InnodbBufferPoolPagesFree GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_buffer_pool_pages_total database.mysql.InnodbBufferPoolPagesTotal GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_data_fsyncs database.mysql.InnodbDataFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_os_log_fsyncs database.mysql.InnodbOsLogFsyncs GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_read database.mysql.InnodbPagesRead GCP Cloud SQL gcp.cloudsql.database.mysql.innodb_pages_written database.mysql.InnodbPagesWritten GCP Cloud SQL gcp.cloudsql.database.mysql.queries database.mysql.Queries GCP Cloud SQL gcp.cloudsql.database.mysql.questions database.mysql.Questions GCP Cloud SQL gcp.cloudsql.database.mysql.received_bytes_count database.mysql.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.mysql.replication.seconds_behind_master database.mysql.replication.SecondsBehindMaster GCP Cloud SQL gcp.cloudsql.database.mysql.sent_bytes_count database.mysql.SentBytes GCP Cloud SQL gcp.cloudsql.database.network.connections database.network.Connections GCP Cloud SQL gcp.cloudsql.database.network.received_bytes_count database.network.ReceivedBytes GCP Cloud SQL gcp.cloudsql.database.network.sent_bytes_count database.network.SentBytes GCP Cloud SQL gcp.cloudsql.database.postgresql.num_backends database.postgresql.NumBackends GCP Cloud SQL gcp.cloudsql.database.postgresql.replication.replica_byte_lag database.postgresql.replication.ReplicaByteLag GCP Cloud SQL gcp.cloudsql.database.postgresql.transaction_count database.postgresql.Transaction GCP Cloud SQL gcp.cloudsql.database.up database.Up GCP Cloud SQL gcp.cloudsql.database.uptime database.Uptime GCP Cloud Storage gcp.storage.api.request_count api.Requests GCP Cloud Storage gcp.storage.network.received_bytes_count network.ReceivedBytes GCP Cloud Storage gcp.storage.network.sent_bytes_count network.SentBytes GCP VMs gcp.compute.firewall.dropped_bytes_count firewall.DroppedBytes GCP VMs gcp.compute.firewall.dropped_packets_count firewall.DroppedPackets GCP VMs gcp.compute.instance.cpu.reserved_cores instance.cpu.ReservedCores GCP VMs gcp.compute.instance.cpu.utilization instance.cpu.Utilization GCP VMs gcp.compute.instance.disk.read_bytes_count instance.disk.ReadBytes GCP VMs gcp.compute.instance.disk.read_ops_count instance.disk.ReadOps GCP VMs gcp.compute.instance.disk.write_bytes_count instance.disk.WriteBytes GCP VMs gcp.compute.instance.disk.write_ops_count instance.disk.WriteOps GCP VMs gcp.compute.instance.network.received_bytes_count instance.network.ReceivedBytes GCP VMs gcp.compute.instance.network.received_packets_count instance.network.ReceivedPackets GCP VMs gcp.compute.instance.network.sent_bytes_count instance.network.SentBytes GCP VMs gcp.compute.instance.network.sent_packets_count instance.network.SentPackets GCP VMs gcp.compute.instance.disk.throttled_read_bytes_count instance.disk.ThrottledReadBytes GCP VMs gcp.compute.instance.disk.throttled_read_ops_count instance.disk.ThrottledReadOps GCP VMs gcp.compute.instance.disk.throttled_write_bytes_count instance.disk.ThrottledWriteBytes GCP VMs gcp.compute.instance.disk.throttled_write_ops_count instance.disk.ThrottledWriteOps GCP VPC Access gcp.vpcaccess.connector.received_bytes_count connector.ReceivedBytes GCP VPC Access gcp.vpcaccess.connector.received_packets_count connector.ReceivedPackets GCP VPC Access gcp.vpcaccess.connector.sent_bytes_count connector.SentBytes GCP VPC Access gcp.vpcaccess.connector.sent_packets_count connector.SentPackets",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 151.89291,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "GCP <em>integration</em> metrics",
        "sections": "<em>Google</em> <em>Cloud</em> Metrics",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "<em>Google</em> <em>Cloud</em> Metrics The following table contains the metrics we collect for GCP. Integration Dimensional Metric Name (new) Sample Metric Name (previous) GCP App Engine gcp.appengine.flex.cpu.reserved_cores flex.cpu.ReservedCores GCP App Engine gcp.appengine.flex.cpu.utilization"
      },
      "id": "603e8a5264441f524a4e8840"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/getting-started/polling-intervals-gcp-integrations": [
    {
      "sections": [
        "Integrations and custom roles",
        "Recommended role",
        "Optional role",
        "Important",
        "List of permissions",
        "Common permissions",
        "Service-specific permissions",
        "Permissions to link projects through the UI"
      ],
      "title": "Integrations and custom roles",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "d4f60e2d8413ddde9a342980d75a0e216af9baa4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles/",
      "published_at": "2021-07-02T15:56:58Z",
      "updated_at": "2021-05-28T05:06:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To read the relevant data from your Google Cloud Platform (GCP) account, New Relic uses the Google Stackdriver API and also other specific services APIs. To access these APIs in your Google Cloud project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses roles to grant these permissions. Recommended role By default we highly recommend using the GCP primitive role Role Viewer, which grants \"permissions for read-only actions that do not affect your cloud infrastructure state, such as viewing (but not modifying) existing resources or data.\" This role is automatically managed by Google and updated when new Google Cloud services are released or modified. Optional role Alternatively, you can create your own custom role based on the list of permissions, which specifies the minimum set of permissions required to fetch data from each GCP integration. This will allow you to have more control over the permissions set for the New Relic authorized account. Important New Relic has no way of identifying problems related to custom permissions. If you choose to create a custom role, it is your responsibility to maintain it and ensure proper data is being collected. To customize your role you need to: Create a Google Cloud IAM Custom Role in each one of the GCP projects you want to monitor with New Relic. In each custom role, add the permissions that are specifically required for the cloud services you want to monitor according to the following list. Assign the custom role(s) to the New Relic authorized account. List of permissions Common permissions All integrations need the following permission: monitoring.timeSeries.list serviceusage.services.use Service-specific permissions For some GCP integrations, New Relic will also need the following permissions, mainly to collect labels and inventory attributes. Integration Permissions Google AppEngine n/a; Google App Engine does not require additional permissions. Google BigQuery bigquery.datasets.get bigquery.tables.get bigquery.tables.list Google Cloud Functions cloudfunctions.locations.list Google Cloud Load Balancing n/a; Google Cloud Load Balancing does not require additional permissions. Google Cloud Pub/Sub pubsub.subscriptions.get pubsub.subscriptions.list pubsub.topics.get pubsub.topics.list Google Cloud Spanner spanner.instances.list spanner.databases.list spanner.databases.getDdl Google Cloud SQL cloudsql.instances.list Google Cloud Storage storage.buckets.list Google Compute Engine compute.instances.list compute.disks.get compute.disks.list Google Kubernetes Engine container.clusters.list Permissions to link projects through the UI To be able to see the list of projects that you can link to New Relic through the UI, your New Relic authorized service account needs the following permissions: resourcemanager.projects.get monitoring.monitoredResourceDescriptors.list If you do not want to grant New Relic authorized account the permissions that are needed for the linking process through the UI, you have the following options: Assign the Role Viewer or Monitoring Viewer role initially to the authorized account to link Google Cloud projects to New Relic through the UI. After the projects are linked, assign a Google Cloud custom role to the authorized account. Use New Relic NerdGraph to link Google Cloud projects to New Relic. This does not involve listing the viewable projects. However, you must know the id of the project you want to monitor. For more information, see the NerdGraph GraphiQL cloud integrations API tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.70726,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Integrations</em> and custom roles",
        "sections": "<em>Integrations</em> and custom roles",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To read the relevant data from your <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) account, New Relic uses the <em>Google</em> Stackdriver API and also other specific services APIs. To access these APIs in your <em>Google</em> <em>Cloud</em> project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses"
      },
      "id": "603ebb3564441f34b64e8874"
    },
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "Tip",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-07-02T15:56:50Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 158.67145,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    },
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Tip",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-07-02T15:55:26Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 155.52292,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To <em>start</em> receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. Tip To use <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em> and the rest of our observability <em>platform</em>, join the New Relic family! Sign up to create your free"
      },
      "id": "603e8309196a67fc4fa83da7"
    }
  ],
  "/docs/integrations/google-cloud-platform-integrations/troubleshooting/gcp-integration-api-authentication-errors": [
    {
      "sections": [
        "Integrations and custom roles",
        "Recommended role",
        "Optional role",
        "Important",
        "List of permissions",
        "Common permissions",
        "Service-specific permissions",
        "Permissions to link projects through the UI"
      ],
      "title": "Integrations and custom roles",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "d4f60e2d8413ddde9a342980d75a0e216af9baa4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/integrations-custom-roles/",
      "published_at": "2021-07-02T15:56:58Z",
      "updated_at": "2021-05-28T05:06:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To read the relevant data from your Google Cloud Platform (GCP) account, New Relic uses the Google Stackdriver API and also other specific services APIs. To access these APIs in your Google Cloud project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses roles to grant these permissions. Recommended role By default we highly recommend using the GCP primitive role Role Viewer, which grants \"permissions for read-only actions that do not affect your cloud infrastructure state, such as viewing (but not modifying) existing resources or data.\" This role is automatically managed by Google and updated when new Google Cloud services are released or modified. Optional role Alternatively, you can create your own custom role based on the list of permissions, which specifies the minimum set of permissions required to fetch data from each GCP integration. This will allow you to have more control over the permissions set for the New Relic authorized account. Important New Relic has no way of identifying problems related to custom permissions. If you choose to create a custom role, it is your responsibility to maintain it and ensure proper data is being collected. To customize your role you need to: Create a Google Cloud IAM Custom Role in each one of the GCP projects you want to monitor with New Relic. In each custom role, add the permissions that are specifically required for the cloud services you want to monitor according to the following list. Assign the custom role(s) to the New Relic authorized account. List of permissions Common permissions All integrations need the following permission: monitoring.timeSeries.list serviceusage.services.use Service-specific permissions For some GCP integrations, New Relic will also need the following permissions, mainly to collect labels and inventory attributes. Integration Permissions Google AppEngine n/a; Google App Engine does not require additional permissions. Google BigQuery bigquery.datasets.get bigquery.tables.get bigquery.tables.list Google Cloud Functions cloudfunctions.locations.list Google Cloud Load Balancing n/a; Google Cloud Load Balancing does not require additional permissions. Google Cloud Pub/Sub pubsub.subscriptions.get pubsub.subscriptions.list pubsub.topics.get pubsub.topics.list Google Cloud Spanner spanner.instances.list spanner.databases.list spanner.databases.getDdl Google Cloud SQL cloudsql.instances.list Google Cloud Storage storage.buckets.list Google Compute Engine compute.instances.list compute.disks.get compute.disks.list Google Kubernetes Engine container.clusters.list Permissions to link projects through the UI To be able to see the list of projects that you can link to New Relic through the UI, your New Relic authorized service account needs the following permissions: resourcemanager.projects.get monitoring.monitoredResourceDescriptors.list If you do not want to grant New Relic authorized account the permissions that are needed for the linking process through the UI, you have the following options: Assign the Role Viewer or Monitoring Viewer role initially to the authorized account to link Google Cloud projects to New Relic through the UI. After the projects are linked, assign a Google Cloud custom role to the authorized account. Use New Relic NerdGraph to link Google Cloud projects to New Relic. This does not involve listing the viewable projects. However, you must know the id of the project you want to monitor. For more information, see the NerdGraph GraphiQL cloud integrations API tutorial.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 128.27974,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Integrations</em> and custom roles",
        "sections": "<em>Integrations</em> and custom roles",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To read the relevant data from your <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) account, New Relic uses the <em>Google</em> Stackdriver API and also other specific services APIs. To access these APIs in your <em>Google</em> <em>Cloud</em> project, the New Relic authorized account needs to be granted a certain set of permissions; GCP uses"
      },
      "id": "603ebb3564441f34b64e8874"
    },
    {
      "sections": [
        "Connect Google Cloud Platform services to New Relic",
        "Tip",
        "Requirements",
        "Authorization options",
        "Service account (recommended)",
        "User account",
        "Connect GCP to New Relic infrastructure monitoring",
        "Explore app data in New Relic",
        "Link multiple Google projects",
        "Unlink your GCP integrations"
      ],
      "title": "Connect Google Cloud Platform services to New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "05934d2b03ec1ac5fa43298b21a06dc2e0f8c3b9",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/connect-google-cloud-platform-services-new-relic/",
      "published_at": "2021-07-02T15:55:26Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To start receiving Google Cloud Platform (GCP) data with New Relic GCP integrations, connect your Google project to New Relic infrastructure monitoring. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements These are the requirements for the authorization: GCP integration requirements Comments Monitoring In the GCP project API & Services Library settings, you must enable Google Stackdriver Monitoring API. Authorization For service account authorization (recommended): A user with Project IAM Admin role is needed to add the service account ID as a member in your GCP project. In the GCP project IAM & admin, the service account must have the Project Viewer role and the Service Usage Consumer role or, alternatively, a custom role. For user account authorization: The New Relic user that will integrate the GCP project must have a Google account and must be able to view the GCP project that New Relic will monitor. In the GCP project IAM & admin, the user must have the Project Viewer role. Please note that this authorization method will not allow New Relic to collect labels and other inventory attributes that can be useful for narrowing down your NRQL queries, dashboards and alerts. You can migrate the authorization method from user account to service account from the Manage services link in New Relic's user interface. Project name As part of the online setup process, you must identify Project name of the projects you want to monitor with New Relic. The UI workflow automatically lists active projects you can select. Permissions (only for user account authorization) New Relic requires a specific set of read-only permissions exclusively; this means that, for certain integrations, only partial inventory data will be available. Keep in mind that New Relic doesn't inherit your Google account's permissions and therefore is not authorized to perform any changes in the project. For more information about the API permissions that New Relic uses, see the Google documentation about scopes. Authorization options Integrating your GCP project with New Relic requires you to authorize New Relic to fetch monitoring data from your GCP project. You can choose between two authorization methods: Service accounts or User accounts. Service account (recommended) The service account authorization is recommended. If you authorize New Relic to fetch data through a service account, we will call your GCP project APIs using a service account ID and its associated public/private key pair. New Relic manages a specific Google service account for your New Relic account; you do not need to create it or manage the associated private key. Just add the service account ID as a member with viewing permissions in your project. This authorization method is recommended, especially if your GCP project is managed by a team. It also guarantees that New Relic will collect labels and inventory attributes whenever possible. User account If you authorize New Relic to fetch data through a user account, New Relic will access your GCP project monitoring data on behalf of a particular Google user. The authorization process is achieved through an OAuth workflow, which redirects you from the New Relic UI to a Google authorization interface. However, since the authorization is linked to a particular Google user, this method is not recommended for GCP projects that are managed by large teams. Connect GCP to New Relic infrastructure monitoring To connect your Google account to New Relic with user account authorization: Go to one.newrelic.com > Infrastructure > GCP. At the top of Infrastructure's Google Cloud Services integrations page, select Add a GCP account. Choose Authorization Method: Select either Authorize a Service Account or Authorize a User Account, and follow the instructions in the UI to authorize New Relic. Add projects: Select the projects that you want New Relic to receive data from. Select services: From the list of available services for your GCP account, select the individual services you want New Relic to receive data from, or select all of the services. Tip These services will be enabled for all of the projects that you selected in the previous step. Once the setup process is finished, you can fine-tune the services that you want monitored for each project individually. To complete the setup process, select Finish. If you see API authentication errors, follow the troubleshooting procedures. Explore app data in New Relic After you authorize New Relic to integrate one or more of your Google project's services, New Relic starts monitoring your GCP data at regular polling intervals. After a few minutes, data will appear in the New Relic UI. To find and use your data, including links to dashboards and alert settings, go to one.newrelic.com > Infrastructure > GCP. Link multiple Google projects For your convenience, the setup process allows you to select more than one project at a time. After the first setup, if you need to monitor additional GCP projects with New Relic, you can repeat the procedure to connect your GCP services as many times as you need. Unlink your GCP integrations You can disable any of your GCP integrations any time and still keep your Google project connected to New Relic. If you want to... Do this Disable a GCP service monitoring To disconnect individual GCP services but keep the integration with New Relic for other GCP services in your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, make changes to the checkbox options for available services and select Save changes. Unlink your project monitoring To uninstall all of your GCP services completely from New Relic Integrations, unlink your Google account: Go to one.newrelic.com > Infrastructure > GCP and select Manage services. From your GCP account page, select Unlink account and select Save changes. Clean your GCP Projects after unlinking New Relic To clean your GCP project after unlinking, follow these steps if you were using a service account: Open the GCP IAM Console. Select the project you want to unlink from New Relic and click Open. Select the service account that is used by New Relic. Click the Remove icon. Or follow these steps if you were using a user account: Open your Google user account settings. Open the Apps with access to your account section. Choose New Relic application. Choose Remove Access.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 124.99138,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "sections": "Connect <em>Google</em> <em>Cloud</em> <em>Platform</em> services to New Relic",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "To start receiving <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) data with New Relic GCP <em>integrations</em>, connect your <em>Google</em> project to New Relic infrastructure monitoring. Tip To use <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em> and the rest of our observability <em>platform</em>, join the New Relic family! Sign up to create your free"
      },
      "id": "603e8309196a67fc4fa83da7"
    },
    {
      "sections": [
        "Introduction to Google Cloud Platform integrations",
        "Connect GCP and New Relic",
        "Tip",
        "View your GCP data"
      ],
      "title": "Introduction to Google Cloud Platform integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Google Cloud Platform integrations",
        "Get started"
      ],
      "external_id": "508adec5bbbcaef86a079533911bbbec5e1824c4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/google-cloud-platform-integrations/get-started/introduction-google-cloud-platform-integrations/",
      "published_at": "2021-07-02T15:56:50Z",
      "updated_at": "2021-03-16T05:48:39Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations monitor the performance of popular products and services. New Relic's Google Cloud Platform (GCP) integrations let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures to connect your GCP service to New Relic. Tip To use Google Cloud Platform integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. View your GCP data Once you follow the configuration process, data from your Google Cloud Platform account will report directly to New Relic. To view your GCP data: Go to one.newrelic.com > Infrastructure > GCP. For any of the integrations listed: Select an integration name to view data in a pre-configured dashboard. OR Select the Explore data icon to view GCP data. You can view and reuse the Insights NRQL queries both in the pre-configured dashboards and in the Events explorer dashboards. This allows you to tailor queries to your specific needs. Inventory, events, and dashboards for all services are available in New Relic.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.05382,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "sections": "Introduction to <em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "tags": "<em>Google</em> <em>Cloud</em> <em>Platform</em> <em>integrations</em>",
        "body": "New Relic infrastructure <em>integrations</em> monitor the performance of popular products and services. New Relic&#x27;s <em>Google</em> <em>Cloud</em> <em>Platform</em> (GCP) <em>integrations</em> let you monitor your GCP data in several New Relic features. Connect GCP and New Relic In order to obtain GCP data, follow standard procedures"
      },
      "id": "603e86d3e7b9d20feb2a07ed"
    }
  ],
  "/docs/integrations/grafana-integrations/get-started/grafana-support-prometheus-promql": [
    {
      "sections": [
        "Introduction to New Relic NerdGraph, our GraphQL API",
        "Tip",
        "What is NerdGraph?",
        "Important",
        "Use the GraphiQL explorer",
        "Requirements and endpoints",
        "What can you do with NerdGraph?",
        "NerdGraph terminology",
        "Tips on using the GraphiQL explorer",
        "Query accounts a New Relic user can access",
        "Query user, account, and NRQL in one request"
      ],
      "title": "Introduction to New Relic NerdGraph, our GraphQL API",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Get started"
      ],
      "external_id": "e8e96c16cd75f494ebfacb3bc53b4ee9ccf1c727",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/get-started/introduction-new-relic-nerdgraph/",
      "published_at": "2021-07-02T08:51:08Z",
      "updated_at": "2021-07-02T08:51:08Z",
      "document_type": "page",
      "popularity": 1,
      "body": "NerdGraph is our GraphQL-format API that lets you query New Relic data and configure some New Relic features. Tip To use our APIs, or the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. What is NerdGraph? New Relic has several APIs. NerdGraph is our preferred API for querying New Relic data, and for performing some specific configurations (learn more about features). NerdGraph provides a single API interface for returning data from New Relic’s various APIs and microservices. Over time, other configuration capabilities will be added to NerdGraph. Important NerdGraph isn’t used for data ingest. For that, you'd use our data ingest APIs. NerdGraph is built using GraphQL, which is an open source API format that allows you to request exactly the data needed, with no over-fetching or under-fetching. For a lesson in how to use NerdGraph, watch this 7-minute video: Want to watch more video tutorials? Go to the New Relic University’s Intro to NerdGraph. Or see the online course on New Relic APIs. Use the GraphiQL explorer To get started using GraphQL, we recommend playing around with our GraphiQL explorer (GraphiQL is an open source graphical interface for using GraphQL). You can use it to explore our data schema, to read built-in object definitions, and to build and execute queries. To use GraphQL, you’ll need a user-specific New Relic API key called a user key. You can generate one or find an existing one from the GraphiQL explorer’s API key dropdown. To find the GraphiQL explorer: If your New Relic account uses an EU data center, go to api.eu.newrelic.com/graphiql. Otherwise use api.newrelic.com/graphiql. For tips on how to build queries, see Build queries. Requirements and endpoints To use NerdGraph, you need a New Relic user key, which can be generated and accessed from the GraphiQL explorer. The endpoints are: Main endpoint: https://api.newrelic.com/graphql Endpoint for accounts using EU data center: https://api.eu.newrelic.com/graphql To access the endpoint, use the following cURL command: curl -X POST https://api.newrelic.com/graphql \\ -H 'Content-Type: application/json' \\ -H 'API-Key: YOUR_NEW_RELIC_USER_KEY' \\ -d '{ \"query\": \"{ requestContext { userId apiKey } }\" } ' Copy What can you do with NerdGraph? NerdGraph functionality can be broken down into two main categories: Querying New Relic data. You can fetch data for a variety of purposes, including using it in a programmatic workflow, or building a New Relic One app for custom data visualizations. Configuring New Relic features. There are a variety of configurations available and more will be added over time. You can do things like add tags, configure workloads, or customize \"golden metrics.\" You can use NerdGraph to return a wide range of New Relic data but we’ve created some tutorials for common use cases: Topic Tutorials Your monitored entities Get data about entities Understand entity relationships and dependencies (used to build service maps) Query and configure \"golden metrics\" (important entity metrics) Querying data Query using NRQL (our query language) Tags Add and manage tags Dashboards Create dashboards Export dashboards to other accounts Export dashboards as files Migrate from Insights Dashboard API to NerdGraph Alerts See all alert-related tutorials Applied Intelligence View and configure topology Workloads View and configure workloads Manage keys Create and manage keys (license keys used for data ingest, and user keys) Manage data Convert event data to metric data Drop data Distributed tracing Query distributed tracing data Configure Infinite Tracing New Relic One apps Build a New Relic One app Cloud integrations (AWS, Azure, GCP) Configure cloud integrations Partners and resellers Manage subscriptions (only for partners using original pricing plan) Data partitions Manage data partitions NerdGraph terminology The following are terms that originate with GraphQL (the API format NerdGraph uses). Term Definition Queries and mutations There are two classes of GraphQL operations: Queries are basic requests used only to fetch data. These queries are not static, meaning that you can ask for more data or less data, depending on your needs. For each query, you can specify exactly what data you want to retrieve, as long as it is supported by the schema. Mutations are requests that perform an action, such as creating a resource or changing configuration. Mutations require the keyword mutation, as well as the name of the mutation. Type Data in GraphQL is organized into types. Types can be scalars (like strings, numbers, or booleans) or object types. An object type is a custom type made up of a collection of fields. For example, an object type called User may represent a user in a system. Field A field represents a piece of information on an object type that can be queried. Fields can be scalars, lists, or objects. For example, a User object type could have a string field called name. Interface An interface is an abstract type that represents a collection of common fields that other object types can implement. Tips on using the GraphiQL explorer You can make queries with the NerdGraph GraphiQL explorer. The explorer provides built-in schema definitions and features, including auto-complete and query validation. Query accounts a New Relic user can access You can query for the name of an account that an actor (a New Relic authorized user) has access to: query { actor { account(id: YOUR_ACCOUNT_ID) { name } } } Copy The response will mirror the query structure you defined in the request, making it easy to ask for the specific data that you want. { \"data\": { \"actor\": { \"account\": { \"name\": \"Data Nerd\" } } } } Copy Query user, account, and NRQL in one request The graph structure shows its capabilities when queries become more complex. For example, you can query for user information, account information, and make a NRQL query with one request. With REST API, this would take three different requests to three different endpoints. query { actor { account(id: YOUR_ACCOUNT_ID) { name nrql(query: \"SELECT * FROM Transaction\") { results } } user { name id } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.775894,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": ", with no over-fetching or under-fetching. For a lesson in how to use NerdGraph, watch this 7-minute video: Want to watch more video tutorials? Go to the New Relic University’s Intro to NerdGraph. Or see the online course on New Relic APIs. Use the GraphiQL explorer To <em>get</em> <em>started</em> using GraphQL, we"
      },
      "id": "6043ff97196a67d0a0960f55"
    },
    {
      "sections": [
        "Get data into New Relic",
        "New Relic-built agents and integrations",
        "Report custom data"
      ],
      "title": "Get data into New Relic",
      "type": "docs",
      "tags": [
        "Telemetry Data Platform",
        "Ingest and manage data",
        "Get started"
      ],
      "external_id": "1b20f81fa22784c5d22e4e51eb7c0bf26cbdb0b6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/get-started/introduction-new-relic-data-ingest-apis-sdks/",
      "published_at": "2021-07-01T17:17:17Z",
      "updated_at": "2021-07-01T17:17:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are many ways to get data into your New Relic account. Any New Relic user can use any of our data ingest methods to report data to our Telemetry Data Platform. New Relic-built agents and integrations When you enable New Relic solutions like APM, browser monitoring, mobile monitoring, infrastructure monitoring, or any of our wide array of integrations, by default you'll receive data from your monitored applications, hosts, services, or other entities. Some options for getting started: Log into one.newrelic.com and click Add more data to get some guidance on setting up New Relic solutions. To browse our solutions, see New Relic integrations. Report custom data If you need to report data that our agents and integrations don't provide, we have tools that will allow you to bring in any type of data you need. To learn more, see Intro to custom data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.27829,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Get</em> data into New Relic",
        "sections": "New Relic-built agents and <em>integrations</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": ", infrastructure monitoring, or any of our wide array of <em>integrations</em>, by default you&#x27;ll receive data from your monitored applications, hosts, services, or other entities. Some options for getting <em>started</em>: Log into one.newrelic.com and click Add more data to <em>get</em> some guidance on setting up New Relic solutions"
      },
      "id": "603eae7b196a671ea3a83dc7"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-07-02T00:54:04Z",
      "updated_at": "2021-07-02T00:54:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.16 Red Hat Enterprise Linux (RHEL) Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, and 12.4 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 (only the infrastructure agent is supported). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 104.170105,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Before installing our infrastructure agent, make sure your system and any on-host <em>integrations</em> you configure meet the requirements. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    }
  ],
  "/docs/integrations/grafana-integrations/set-configure/configure-new-relic-prometheus-data-source-grafana": [
    {
      "sections": [
        "Grafana support with Prometheus and PromQL",
        "Use existing Grafana dashboards with New Relic",
        "Compatibility and requirements",
        "Support for PromQL",
        "Get data flowing in Grafana",
        "What’s next?"
      ],
      "title": "Grafana support with Prometheus and PromQL",
      "type": "docs",
      "tags": [
        "Integrations",
        "Grafana integrations",
        "Get started"
      ],
      "external_id": "52addf26732e0146545ae8dee6540d3bd7cab2ff",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/grafana-integrations/get-started/grafana-support-prometheus-promql/",
      "published_at": "2021-07-02T15:59:37Z",
      "updated_at": "2021-04-22T13:30:25Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In Grafana, you can configure New Relic as a Prometheus data source. Not only that, within Grafana you can query metrics stored in New Relic using the PromQL query language. Use existing Grafana dashboards with New Relic When you integrate Prometheus metrics with New Relic via Remote Write or the OpenMetrics Integration (2.0+) and configure New Relic as a Prometheus data source in Grafana, you can use existing Grafana dashboards and seamlessly tap into the additional monitoring, reliability, and scale we provide. Compatibility and requirements Before you begin, make sure you’ve finished integrating Prometheus metrics and are running a recent enough version of Grafana. You should have either the Remote Write or the OpenMetrics Integration ( v2.0+) set up before you can configure New Relic Prometheus data sources in Grafana. You can only configure New Relic Prometheus data sources using this method in Grafana versions 6.7.0 or newer. You will need to configure custom headers in the UI, and this isn’t possible with earlier versions. For details, see Configure New Relic as a Prometheus data source for Grafana. Support for PromQL Our Prometheus API emulates Prometheus' query APIs. We support the Prometheus query language (PromQL) through our PromQL-style query mode. We do our best to automatically translate PromQL syntax queries into the closest NRQL approximation. For more information on how this works and differences you may observe between Prometheus and New Relic, see Supported PromQL features. Get data flowing in Grafana To make your New Relic data available in Grafana, you can configure a new or existing Prometheus data source in just a couple of simple steps: In the Grafana UI, add and configure a new data source. Save the new data source and start viewing your data. What’s next? Ready to configure a Grafana data source? Read the how-to documentation for setting up the Prometheus remote write integration or the Prometheus OpenMetrics Integration. Read the how-to documentation for configuring Prometheus data sources in Grafana.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.28983,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Grafana</em> support with Prometheus <em>and</em> PromQL",
        "sections": "<em>Grafana</em> support with Prometheus <em>and</em> PromQL",
        "tags": "<em>Grafana</em> <em>integrations</em>",
        "body": " integrating Prometheus metrics and are running a recent enough version of <em>Grafana</em>. You should have either the Remote Write or the OpenMetrics Integration ( v2.0+) <em>set</em> <em>up</em> before you can <em>configure</em> New Relic Prometheus data sources in <em>Grafana</em>. You can only <em>configure</em> New Relic Prometheus data sources using"
      },
      "id": "603e94de64441f9a804e8843"
    },
    {
      "sections": [
        "NerdGraph tutorial: Configure cloud integrations",
        "Requirements",
        "Access the NerdGraph GraphiQL explorer",
        "Query examples",
        "Available provider accounts",
        "Specific provider account information",
        "Specific integration data from a specific cloud provider",
        "List of enabled cloud accounts",
        "Specific linked account data",
        "Enabled cloud integrations for all linked accounts",
        "Specific cloud integration data for a specific linked account",
        "Mutation examples",
        "Link an account",
        "Link an Amazon AWS account",
        "Link an Amazon AWS account using CloudWatch Metric Streams",
        "Link a Microsoft Azure account",
        "Link a Google Cloud Platform (GCP) project",
        "Rename one or more cloud accounts",
        "Enable an integration in a cloud account",
        "Enable an integration in multiple cloud accounts",
        "Enable multiple integrations in multiple cloud accounts",
        "Modify an integration's configuration (regions, polling intervals, etc.)",
        "Disable (remove) an integration",
        "Unlink account",
        "Caution",
        "Enable an Amazon AWS integration",
        "Send query to fetch account data",
        "Link AWS provider account",
        "Enable Amazon AWS SQS integration",
        "Enable integration in multiple provider accounts",
        "Change polling interval for Amazon AWS integration",
        "Update the polling interval",
        "Disable Amazon AWS integration",
        "Disable the SQS integration"
      ],
      "title": "NerdGraph tutorial: Configure cloud integrations",
      "type": "docs",
      "tags": [
        "APIs",
        "NerdGraph",
        "Examples"
      ],
      "external_id": "9b0b3a78186946732433d21aa149fc36e14bb2d8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apis/nerdgraph/examples/nerdgraph-cloud-integrations-api-tutorial/",
      "published_at": "2021-07-02T09:29:30Z",
      "updated_at": "2021-07-02T09:29:30Z",
      "document_type": "page",
      "popularity": 1,
      "body": "This document provides examples of how to use New Relic NerdGraph to query and modify your cloud integration configuration data, including Amazon AWS, Microsoft Azure, and Google Cloud Platform (GCP). Using the NerdGraph GraphiQL explorer, you can also query NRQL data. These examples for querying cloud integration configuration data use GraphQL queries and mutations: Queries: requests that are intended to only fetch data Mutations: requests that create or update data on the server Requirements Before querying cloud integration data with NerdGraph, ensure you have: Followed the instructions to connect cloud integrations with New Relic. Created an API key. Access the NerdGraph GraphiQL explorer To access the NerdGraph GraphiQL explorer: Go to api.newrelic.com/graphiql. Add any of the following examples. Query examples Queries are requests that are intended to only fetch data (no side effects). Queries in NerdGraph are not static, meaning that you can ask for more or less data depending on your needs. For each query, you can specify exactly what data you want to retrieve, as long as it is supported by the schema. Available provider accounts This query returns a list of all provider accounts available in your infrastructure data. Depending on the provider, additional properties can be requested. For example, for GCP, you can also ask for the serviceAccountId property, which is needed when linking a new GCP project to New Relic. Anonymous: { actor { account(id: <NR_ACCOUNT_ID>) { cloud { providers { id name slug ... on CloudGcpProvider { serviceAccountId } } } } } } Copy Named: query cloudProviders { actor { account(id: <NR_ACCOUNT_ID>) { cloud { providers { id name slug } } } } } Copy Specific provider account information This query returns information about a specific provider account for your Amazon AWS integration. The properties id, name, slug are requested, along with a list of integrations available to be monitored. { actor { account(id: <NR_ACCOUNT_ID>) { cloud { provider(slug: \"aws\") { id slug name services { id slug name } } } } } } Copy Specific integration data from a specific cloud provider This query returns information about a specific cloud service integration of a provider. In this example, the integration is the Amazon AWS ALB monitoring integration and the provider is AWS. The properties id, name, slug, and isAllowed are requested with the available configuration parameters. { actor { account(id: <NR_ACCOUNT_ID>) { cloud { provider(slug: \"aws\") { service(slug: \"alb\") { id name slug isEnabled } } } } } } Copy List of enabled cloud accounts This query returns the list of cloud accounts enabled with your New Relic account. (Your cloud account associates your New Relic account and a specific provider account with your integration.) You can enable multiple cloud provider accounts in the same New Relic account, even with the same cloud provider. { actor { account(id: <NR_ACCOUNT_ID>) { cloud { linkedAccounts { id name createdAt provider { id name } } } } } } Copy Specific linked account data This query returns information about a linked account, including the properties name, providerId, and a list of the cloud integrations enabled for monitoring. { actor { account(id: <NR_ACCOUNT_ID>) { cloud { linkedAccount(id: <LINKED_CLOUD_ACCOUNT_ID>) { name provider { id name } integrations { id name createdAt updatedAt } } } } } } Copy Enabled cloud integrations for all linked accounts This query returns all monitored integrations for all the provider cloud accounts. { actor { account(id: <NR_ACCOUNT_ID>) { cloud { linkedAccounts { name provider { id name } integrations { id name service { id name } createdAt updatedAt } } } } } } Copy Specific cloud integration data for a specific linked account This query returns information about a specific integration from a specific linked account. { actor { account(id: <NR_ACCOUNT_ID>) { cloud { linkedAccount(id: <LINKED_CLOUD_ACCOUNT_ID>) { name provider { id name } integration(id: <INTEGRATION_ID>) { id name service { id name } createdAt updatedAt } } } } } } Copy Mutation examples Mutations are requests that are intended to have side effects, such as creating or updating data on the server. Mutations require the keyword mutation and the name of the mutation. NerdGraph mutations are restricted to a subset of all possible mutations. Link an account This mutation allows linking cloud provider accounts to a New Relic account, creating one or more linked accounts. It can link one specific cloud provider account (for example aws) to the New Relic account or multiple cloud provider accounts to one New Relic account. Required: The parameter <PROVIDER_ACCOUNT_NAME> is required and cannot be empty. It must be unique in your New Relic account. Other parameters are specific to the provider (AWS, GCP, and Azure) and are also required. In the following sections, you can see which parameters are required for each provider account. After linking an account the createdAt and updatedAt values are equal. mutation { cloudLinkAccount( accounts: { accountId: <NR_ACCOUNT_ID>, aws: [{ name: <PROVIDER_ACCOUNT_NAME>, <other_params> }] azure: [{ name: <PROVIDER_ACCOUNT_NAME>, <other_params> }] gcp: [{ name: <PROVIDER_ACCOUNT_NAME>, <other_params> }] } ) { linkedAccounts { id name authLabel createdAt updatedAt } } } } Copy Link an Amazon AWS account This mutation links an Amazon AWS provider account to your New Relic account. mutation { cloudLinkAccount( accountId: <NR_ACCOUNT_ID>, accounts: { aws: [{ name: <PROVIDER_ACCOUNT_NAME>, arn: <AWS_ROLE_ARN> }] } ) { linkedAccounts { id name authLabel createdAt updatedAt } } } } Copy Link an Amazon AWS account using CloudWatch Metric Streams This mutation links an Amazon AWS account sending data through CloudWatch Metric Streams to your New Relic account. mutation { cloudLinkAccount( accountId: <NR_ACCOUNT_ID>, accounts: { aws: [{ name: <PROVIDER_ACCOUNT_NAME>, arn: <AWS_ROLE_ARN>, metricCollectionMode: PUSH }] } ) { linkedAccounts { id name authLabel createdAt updatedAt } } } } Copy Link a Microsoft Azure account This mutation links a Microsoft Azure cloud subscription to the New Relic account. mutation { cloudLinkAccount( accountId: <NR_ACCOUNT_ID>, accounts: { azure: [{ name: <PROVIDER_ACCOUNT_NAME>, applicationId: <azure_application_id>, clientSecret: <azure_application_key>, tenantId: <azure_tenant_id>, subscriptionId: <azure_subscription_id> }] } ) { linkedAccounts { id name authLabel createdAt updatedAt } } } Copy Link a Google Cloud Platform (GCP) project This mutation links a GCP project to the New Relic account. mutation { cloudLinkAccount( accountId: <NR_ACCOUNT_ID>, accounts: { gcp: [{ name: <PROVIDER_ACCOUNT_NAME>, projectId: <GCP_PROJECT_ID> }] } ) { linkedAccounts { id name authLabel createdAt updatedAt } } } Copy Rename one or more cloud accounts This mutation allows you to rename one or more linked provider accounts. The name parameter is required, cannot be empty, and must be unique within your New Relic account. mutation { cloudRenameAccount( accountId: <NR_ACCOUNT_ID>, accounts: [ { id: <linked_cloud_account_id_1>, name: <new_provider_account_name> }, { id: <linked_cloud_account_id_2>, name: <new_provider_account_name> } ] ) { linkedAccounts { id name } } } Copy Enable an integration in a cloud account This mutation allows you to enable the monitoring of one or more specific cloud integrations in an existing cloud account. With this mutation, New Relic records data for the enabled integration from the provider account. For each provider account you have access to different input parameters, matching each available service. mutation { cloudConfigureIntegration ( accountId: <NR_ACCOUNT_ID>, integrations: { <provider_slug> : { <integration_slug>: [{ linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID>, <other_parameters> }] } } ) { integrations { id name integration { id slug } ... on SqsIntegration { awsRegions } } } } Copy Enable an integration in multiple cloud accounts If you have many provider accounts linked, you can enable the same integration in the many cloud accounts at the same time. For the output of the operation, you can use GraphQL fragments for integration specific configuration parameters. mutation { cloudConfigureIntegration ( accountId: <NR_ACCOUNT_ID>, integrations: { <provider_slug> : { <integration_slug> : [ { linkedAccountId: <linked_cloud_account_id_1> }, { linkedAccountId: <linked_cloud_account_id_2> } ] } } ) { integrations { id name integration { id name } ... on SqsIntegration { awsRegions } } } } Copy Enable multiple integrations in multiple cloud accounts If you have multiple cloud accounts linked, you can also enable multiple integrations in multiple linked cloud accounts at the same time. For the output of the operation, you can use GraphQL fragments to ask for integration specific configuration parameters. mutation { cloudConfigureIntegration ( accountId: <NR_ACCOUNT_ID>, integrations: { <provider_slug_1>: { <integration_slug_1>: [ { linkedAccountId: <linked_cloud_account_id_1> } ] <integration_slug_2>: [ { linkedAccountId: <linked_cloud_account_id_2> } ] }, <provider_slug_2>: { <integration_slug_3>: [ { linkedAccountId: <linked_cloud_account_id_3>}, { linkedAccountId: <linked_cloud_account_id_4>} ] } } ) { integrations { id name service { id name } ... on SqsIntegration { awsRegions } } } } Copy Modify an integration's configuration (regions, polling intervals, etc.) This mutation also allows you to modify one or more cloud integrations and change one or more configuration parameters. Each service will have specific parameters that you can modify. For parameters of a type list (for example, awsRegion) supply the full list. For the output of the operation, you can use GraphQL fragments to ask for integration specific configuration parameters. mutation { cloudConfigureIntegration ( accountId: <NR_ACCOUNT_ID>, integrations: { <provider_slug>: { <integration_slug>: [{ linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID>, metricsPollingInterval: <new_polling_interval>, <parameter_1>: <value_1>, <parameter_N>: <value_N>, }] } } ) { integrations { id name service { id slug } ... on SqsIntegration { metricsPollingInterval, <parameter_1>, <parameter_N> } } errors { type message } } } Copy Disable (remove) an integration This mutation allows you to disable an integration and stop data collection for the specific cloud integration. mutation { cloudDisableIntegration ( accountId: <NR_ACCOUNT_ID>, integrations: { : { : [ { linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID> } ] } } ) { disabledIntegrations { id name authLabel provider { id } } errors { type message } } } Copy Unlink account This mutation allows you to unlink cloud provider accounts from New Relic account. Caution This action can not be undone. However, you can link the account again, but account history will still be lost. mutation { cloudUnlinkAccount ( accountId: <NR_ACCOUNT_ID>, accounts: { { linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID> } } ) { unlinkedAccounts { id name } errors { type message } } } Copy Enable an Amazon AWS integration This example uses an Amazon AWS SQS integration and assumes you have connected an AWS account to New Relic. To enable an Amazon AWS integration: Send query to fetch account data Send a query to fetch data about the account, specifically available providers and already created provider accounts: { actor { account(id: <NR_ACCOUNT_ID>) { cloud { providers { id name slug } linkedAccounts { name integrations { id name } } } } } } Copy Link AWS provider account Link an AWS provider account, if there is not one already linked or if you want to link another AWS account: Use your New Relic account identifier in the <NR_ACCOUNT_ID> parameter. Provide a name for the provider account in the <PROVIDER_ACCOUNT_NAME>. Include the ARN of the AWS role used to fetch data from your AWS account. mutation { cloudLinkAccount( accountId: <NR_ACCOUNT_ID>, accounts: { aws: [{ name: <PROVIDER_ACCOUNT_NAME>, arn: <AWS_ROLE_ARN> }] } ) { linkedAccounts { id name authLabel createdAt updatedAt } errors { type message } } } Copy Enable Amazon AWS SQS integration Use your New Relic account ID in the <NR_ACCOUNT_ID> parameter and the ID of the provider account in the <LINKED_CLOUD_ACCOUNT_ID> parameter value. mutation { cloudConfigureIntegration ( accountId: <NR_ACCOUNT_ID>, integrations: { aws: { sqs: [ { linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID> } ] } } ) { integrations { id name service { id name } } errors { type message } } } Copy Enable integration in multiple provider accounts If you have multiple accounts with the same provider account, you can enable the same integration in multiple provider accounts at the same time. Use your New Relic account ID in the <NR_ACCOUNT_ID> parameter and the ID of the provider accounts in the <LINKED_CLOUD_ACCOUNT_ID_n> parameter value. mutation { cloudConfigureIntegration ( accountId: <NR_ACCOUNT_ID>, integrations: { aws: { sqs: [ { linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID_1> }, { linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID_2>, configuration_param_1: value_1, configuration_param_2: value_2 } ] } } }) { integrations { id name service { id name } } errors { type message } } } Copy Change polling interval for Amazon AWS integration This example uses an Amazon AWS SQS integration and assumes you have connected an AWS account to New Relic. To change the polling interval of an AWS integration: Update the polling interval To update the polling interval for an Amazon AWS SQS integration, use your New Relic account ID in the <NR_ACCOUNT_ID> parameter and the id of the linked provider account in the <LINKED_ACCOUNT_ID> parameter value: mutation { cloudConfigureIntegration( accountId: <NR_ACCOUNT_ID>, integrations: { aws : { sqs: [ { linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID>, metricsPollingInterval: 300 } ] } } ) { integrations { id name service { id slug } ... on SqsIntegration { metricsPollingInterval } } errors { type message } } } Copy Disable Amazon AWS integration This example uses an Amazon AWS SQS integration and assumes you have connected an AWS account to New Relic. To disable an AWS integration: Disable the SQS integration Use your New Relic account identifier in the <NR_ACCOUNT_ID> parameter and the ID of the linked cloud account the <LINKED_ACCOUNT_ID> parameter value. mutation { cloudDisableIntegration ( accountId: <NR_ACCOUNT_ID>, integrations: { aws: { sqs : [ { linkedAccountId: <LINKED_CLOUD_ACCOUNT_ID> } ] } } ) { disabledIntegrations { id accountId name } errors { type message } } } Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 49.90139,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "NerdGraph tutorial: <em>Configure</em> cloud <em>integrations</em>",
        "sections": "NerdGraph tutorial: <em>Configure</em> cloud <em>integrations</em>",
        "body": " integration from the provider account. For each provider account you have access to different input parameters, matching each available service. mutation { cloud<em>Configure</em>Integration ( accountId: &lt;NR_ACCOUNT_ID&gt;, <em>integrations</em>: { &lt;provider_slug&gt; : { &lt;integration_slug&gt;: [{ linkedAccountId"
      },
      "id": "6044293864441f1bdc378f05"
    },
    {
      "sections": [
        "Get data into New Relic",
        "New Relic-built agents and integrations",
        "Report custom data"
      ],
      "title": "Get data into New Relic",
      "type": "docs",
      "tags": [
        "Telemetry Data Platform",
        "Ingest and manage data",
        "Get started"
      ],
      "external_id": "1b20f81fa22784c5d22e4e51eb7c0bf26cbdb0b6",
      "image": "",
      "url": "https://docs.newrelic.com/docs/telemetry-data-platform/get-started/introduction-new-relic-data-ingest-apis-sdks/",
      "published_at": "2021-07-01T17:17:17Z",
      "updated_at": "2021-07-01T17:17:17Z",
      "document_type": "page",
      "popularity": 1,
      "body": "There are many ways to get data into your New Relic account. Any New Relic user can use any of our data ingest methods to report data to our Telemetry Data Platform. New Relic-built agents and integrations When you enable New Relic solutions like APM, browser monitoring, mobile monitoring, infrastructure monitoring, or any of our wide array of integrations, by default you'll receive data from your monitored applications, hosts, services, or other entities. Some options for getting started: Log into one.newrelic.com and click Add more data to get some guidance on setting up New Relic solutions. To browse our solutions, see New Relic integrations. Report custom data If you need to report data that our agents and integrations don't provide, we have tools that will allow you to bring in any type of data you need. To learn more, see Intro to custom data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 47.087914,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "New Relic-built agents <em>and</em> <em>integrations</em>",
        "tags": "Ingest <em>and</em> manage data",
        "body": ", infrastructure monitoring, or any of our wide array of <em>integrations</em>, by default you&#x27;ll receive data from your monitored applications, hosts, services, or other entities. Some options for getting started: Log into one.newrelic.com and click Add more data to get some guidance on setting <em>up</em> New Relic solutions"
      },
      "id": "603eae7b196a671ea3a83dc7"
    }
  ],
  "/docs/integrations/host-integrations/get-started/introduction-host-integrations": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 181.48578,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " agent. Ready to <em>get</em> <em>started</em>? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-07-02T00:54:04Z",
      "updated_at": "2021-07-02T00:54:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.16 Red Hat Enterprise Linux (RHEL) Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, and 12.4 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 (only the infrastructure agent is supported). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 176.4509,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Unique <em>hostname</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "Before installing our infrastructure agent, make sure your system and any on-<em>host</em> <em>integrations</em> you configure meet the requirements. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 161.12848,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to <em>get</em> <em>started</em>? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/apache-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3053,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.15024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/cassandra-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11658,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3053,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.15024,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/collectd-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11636,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3051,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.15012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/couchbase-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11636,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3051,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.15012,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/elasticsearch-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.15,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/f5-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11615,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.15,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/flex-integration-tool-build-your-own-integration": [
    {
      "sections": [
        "Introduction to New Relic integrations",
        "Tip",
        "Choose what's right for you",
        "Create your own solutions"
      ],
      "title": "Introduction to New Relic integrations",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Instrument everything",
        "Get started"
      ],
      "external_id": "03217983a29af22737c1163da9ef0811b29c2bcd",
      "image": "",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/instrument-everything/get-started-new-relic-instrumentation/introduction-new-relic-integrations/",
      "published_at": "2021-07-02T00:47:42Z",
      "updated_at": "2021-03-16T07:30:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "We provide hundreds of solutions to get your data into New Relic so you can analyze the data in one place. They give you a steady flow of useful data to fix problems quickly, maintain complex systems, improve your code, and accelerate your digital transformation. You can bring in data from hundreds of applications, frameworks, services, operating systems, and other technologies. Our integrations gather the data, and the agents send it to New Relic. The solution you need may require you to install both an integration and an agent. In some cases, you can just install our agents that contain integrations, such as our APM agents. Whatever data you need to bring in, chances are that we have options for your environment. If you prefer to make your own solutions, we also offer tools to get you started. Tip To use integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Choose what's right for you We offer a wide range of solutions so you can easily collect data across your environment. You may only need one of our solutions to get the data you need, or you can choose a variety of options to capture a broader range of data types. Go to New Relic Integrations to find solutions that fit your environment. Here is a sample of what you’ll find there: Application performance monitoring (APM): C, Go, Java, Node, .NET, PHP, Python, and Ruby Mobile apps: Android and iOS Browser monitoring: Google Chrome, Mozilla Firefox, Microsoft Internet Explorer, and Apple Safari Host monitoring: Linux and Microsoft Windows Cloud platform monitoring: Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP) Core infrastructure services: Kubernetes, NGINX, MySQL, and more Open source telemetry integrations: Prometheus, Micrometer, OpenTelemetry, and more Create your own solutions If you are looking for custom options, we have tools to help you create your own: Use New Relic Flex to create lightweight monitoring solutions using infrastructure monitoring. Use New Relic Telemetry SDKs to build custom solutions for sending metrics, traces, and more. Build your own New Relic One applications that you can share with your colleagues, or edit open source applications in our catalog.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 179.42186,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to New Relic <em>integrations</em>",
        "sections": "Introduction to New Relic <em>integrations</em>",
        "tags": "<em>Full</em>-<em>Stack</em> <em>Observability</em>",
        "body": " <em>integrations</em>, such as our APM agents. Whatever data you need to bring in, chances are that we have options for <em>your</em> environment. If you prefer to make <em>your</em> <em>own</em> solutions, we also offer tools to get you started. Tip To use <em>integrations</em> and infrastructure monitoring, as well as the rest of our"
      },
      "id": "603e817f28ccbc4857eba798"
    },
    {
      "sections": [
        "Mobile monitoring best practices guide",
        "1. Start collecting data",
        "How to do it",
        "Add your mobile app to New Relic",
        "Install and configure our mobile SDK",
        "2. Explore your data",
        "Analyze, resolve, and prevent crashes",
        "Monitor your key workflows",
        "Get actionable session data",
        "3. Take preventive steps",
        "Metric-based alerts",
        "Event-based alerts",
        "4. Dig deeper into crashes",
        "Crash analysis",
        "Breadcrumbs",
        "Custom attributes",
        "5. Focus on KPIs",
        "Track and query feature use",
        "Measure page load times",
        "Examine data about webpage interactions"
      ],
      "title": "Mobile monitoring best practices guide",
      "type": "docs",
      "tags": [
        "New Relic solutions",
        "Best practices guides",
        "Full-stack observability"
      ],
      "external_id": "32f5d3919c54c90173721a2cda556d8fd57744f1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/mobile-monitoring-best-practices-guide/",
      "published_at": "2021-07-02T20:13:14Z",
      "updated_at": "2021-07-02T20:13:14Z",
      "document_type": "page",
      "popularity": 1,
      "body": "By eliminating crashes and increasing speed across the stack, you can build better performance into every mobile app release. Here are some best practices to take full advantage of mobile monitoring with New Relic. 1. Start collecting data Start collecting data in production. You'll see immediate value by adding our mobile monitoring SDK to your app for its next release to the app store. We recommend installing the iOS or Android agent to your production release even if you're simply testing New Relic's capabilities. This will ensure you'll get an adequate amount of data to really understand all of our mobile monitoring capabilities and your end users' experience. How to do it Add your mobile app to New Relic First, add a new app in New Relic's user interface (full steps): Go to one.newrelic.com and click Mobile. From the list of monitored apps, select Add more. Select the relevant platform. Type a name for your mobile app, and select Continue. Use one app and the associated app token for the development releases of your iOS app, another app and its associated app token for the production releases of that iOS app, and another pair of app tokens for development and production releases of your Android app. You'll be able to compare data from across the four app tokens using our query builder. Install and configure our mobile SDK Next, install and configure the mobile agent: Download the latest version of New Relic's SDK for iOS or Android, and add it to your mobile app. (Full steps for iOS and Android) Configure your installation as needed. For example: Enable the feature flag to capture MobileRequest events to use our full network analysis capabilities for iOS or Android. Automate dSYM uploads for your production builds. To avoid surprises, follow the standard pattern of where you start our mobile agent. In addition, start our agent before you initiate any other SDKs. For more information, see our documentation for Android installation and configuration and for iOS installation and configuration. Deploy a new release of your application. 2. Explore your data Immediately be able to explore your data. As soon as New Relic starts reporting data, take the time to explore the wealth of information about your mobile apps. To get started, go to one.newrelic.com and select Mobile. How to do it Analyze, resolve, and prevent crashes Find the cause of crashes so you can fix them. Then, uncover trends behind crashes so you can prevent them: From the summary UI page for a monitored mobile app, click Crash analysis. Analyze crash data so you can see and fix the most impactful crashes. Follow the breadcrumbs in the crash event trail to fix crashes and resolve critical errors more easily: From your mobile app's Crash analysis page in the UI, select a Crash type. From the crash type's Summary page, select the Crash trail tab. For more information, see our blog post about crash analysis. Monitor your key workflows Create custom breadcrumbs to monitor key workflows (such as your app's login or checkout process), track user clicks, optimize timing, and identify crash locations for faster MTTR. Get actionable session data Borrow from our example queries to: See how much of your user base has upgraded to your latest app version. Track adoption over time. Get a count of new installs as compared to upgrades from an earlier version. See the distribution of usage across geographical locations, carriers, ASN owners (wi-fi providers), devices, connection types, and more. 3. Take preventive steps Use alert notifications to help uncover the causes behind crashes and errors. Once you are running our mobile monitoring capabilities in production and have explored some of the key features, you can use New Relic to uncover critical issues with your mobile application. In particular, focus on crashes and errors. Use metric-based alerts as a starting point to gain high-level visibility into problems. Then, as new services or functionalities are added, use New Relic’s more targeted, event-based (NRQL) alerts to make sure that the most critical issues are handled swiftly. Use these alerts to determine whether a crash is impacting a large number of users. If it is, the relevant people (for example, both the mobile app team’s on-call member and the owner of the related back-end service) will be alerted. Make sure that your team knows how to respond to changes in crash rate (crashes per sessions) and the percentage of users impacted by crashes of your mobile app. How to do it Metric-based alerts Leverage our metric-based alerts and New Relic Mobile UI. Ensure that key members of your mobile team have opted in to receive emails for new crashes. These emails will take you to the crash type in the Mobile UI page for your mobile app. Create an alert for your crash rate threshold that key members of your team can view in Slack or any other Alerts notification channel you choose. Your alert notification will include a link to our UI, where you can examine a chart with the exceeded threshold. From there, a link will take you to the relevant mobile monitoring page, where you can get additional details. Event-based alerts Combine the metric-based workflow with event-based alerts and dashboards specific to your mobile app and system. Create your NRQL alert that focuses on crashes of your most recently released production version. Create an additional NRQL alert that focuses on the percentage of users impacted by crashes in your latest app version (to check the overall impact on your user base). 4. Dig deeper into crashes Take your crash reporting to the next level. Now it’s time to tackle some of those harder-to-reproduce crashes by: Applying additional instrumentation to your application. Leveraging crash event trails, NRQL queries, and dashboards to visualize your data. How to do it Crash analysis Crashes are an inevitable part of running mobile applications at scale. We provide tools to help you understand your highest-impact crashes. Use the Crash analysis UI to see which crashes are occurring most often, the percentage of crash-free users, which files and methods are associated with perhaps 80 percent of your crashes, which crashes a particular user just experienced, and more. Go after high-impact crashes with crash analysis: Add custom attributes to categorize the highest-value customers, and then use them to segment crashes according to your most valuable audiences. Add breadcrumbs and custom events to produce a detailed trail of events leading up to every crash occurrence (over the last 90 days). Then, view this crash event trail in our mobile monitoring UI. Use our mobile monitoring's Versions trends page to make sure you’re improving the crash rate over subsequent releases and avoiding regressions. Breadcrumbs Use breadcrumbs and custom attributes to better reproduce and debug crashes. For example, use our recordBreadrumb API for Android or iOS to track mid-session changes in state that can help debug crashes, such as: Change of connection type Change of orientation CPU and memory state at key points in the app code Custom attributes Add custom attributes to existing events, so you can ask even more precise questions of your mobile app. Add dimensions such as: User ID: Use to react to specific user concerns and to better understand which customers and segments are most impacted. Store ID: Use to address problems with out-of-date devices, bad wi-fi, and so on. User segments: Use to better understand which customers and segments are most impacted; for example, logged in vs. non-logged in. Money in the cart at session end Origin or attribution of entry into the app Standardize custom attribute names across your mobile apps, and align with your website (if monitored by New Relic Browser), so that you can compare and contrast performance across end-user channels. New Relic Mobile tracks the last interaction of crashed and non-crashed sessions to provide visibility into what the user viewed before exiting your app (either intentionally or due to a crash). 5. Focus on KPIs Bring your key performance indicators to life. Create custom interactions and events to hone in on the most important signals, including user activity for the business-critical aspects of your app. Using these powerful APIs, you can add custom instrumentation to just about anything. The following are some example use cases. How to do it Track and query feature use Use custom events to track feature use. For example: Use custom events to track user flow between app and website. Use custom events or mobile breadcrumbs to optimize the performance of key user flows (log in, shopping cart, etc.). use custom events to provide faster, contextualized support experiences for your digital customers. Use the recordCustomEvent API. Then compare the use of different features using: SELECT count(*) FROM MyNewMobileEventType FACET name Copy Measure page load times Use custom events to measure page load time: Create an app-launch timer to measure the time that elapses between a user-tap to launch your app and the point in your app code where the first screen is available. Record the timer value in New Relic using something like the following: recordCustomEvent(<myMobileTimers>, <appLaunch>, {attributes}) Copy Define start and stop timers to measure spinner durations, and then record this time in New Relic using something like the following: recordCustomEvent(<myMobileTimers>, <spinnerOnScreenA>, {attributes}) Copy Track specific user actions or funnel steps in the app (like \"add to cart\"), and include the price as an attribute on that event. Measure flows through the application by viewing the related funnel steps with custom events in Insights. For example, create a timer to track the start and end times of a subflow or an entire flow across multiple funnel steps to understand how long it took users to get through the process. Examine data about webpage interactions Use custom interactions to see traces associated with the same webpages. Use the agent API to disable default interactions, and focus on custom interactions so that you can review the page loads that are most crucial to your primary funnel. Define the start and stop times of these custom interactions to trace activities associated with individual steps of that funnel (for example, a specific user action or a page load). Track the last interactions of crashed and non-crashed sessions so that you can see what the user viewed before exiting your app (either intentionally or from a crash). Example query for non-crashed sessions: SELECT count(*) FROM Mobile WHERE sessionCrashed is null FACET lastInteraction SINCE 90 days ago Copy Example query for crashed sessions: SELECT count(*) FROM Mobile WHERE sessionCrashed is true FACET lastInteraction SINCE 90 days ago Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.5445,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Add <em>your</em> mobile app to New Relic",
        "tags": "<em>Full</em>-<em>stack</em> <em>observability</em>",
        "body": "By eliminating crashes and increasing speed across the <em>stack</em>, you can build better performance into every mobile app release. Here are some best practices to take <em>full</em> advantage of mobile monitoring with New Relic. 1. Start collecting data Start collecting data in production. You&#x27;ll see immediate"
      },
      "id": "6044151e28ccbc19ab2c60d8"
    },
    {
      "sections": [
        "Cloud services integrations",
        "AWS integrations",
        "GCP integrations",
        "Azure integrations"
      ],
      "title": "Cloud services integrations",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Instrument everything",
        "Instrument core services and applications"
      ],
      "external_id": "71020c70edfb43072cbf081b3eccd3b18f9e6289",
      "image": "https://docs.newrelic.com/static/78ac85c1fc41f94776fce7235e327f01/69538/img-integration-aws%25402x.png",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/instrument-everything/instrument-core-services-applications/cloud-services-integrations/",
      "published_at": "2021-07-02T00:48:36Z",
      "updated_at": "2021-03-16T06:35:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic you can easily instrument your services in AWS, Google Cloud Platform, and Azure. AWS integrations Introduction to AWS integrations List of AWS integrations GCP integrations Introduction to GCP integrations List of GCP integrations Azure integrations Introduction to Azure integrations List of Azure integrations",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.31061,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Cloud services <em>integrations</em>",
        "sections": "Cloud services <em>integrations</em>",
        "tags": "<em>Full</em>-<em>Stack</em> <em>Observability</em>",
        "body": "With New Relic you can easily <em>instrument</em> <em>your</em> services in AWS, Google Cloud Platform, and Azure. AWS <em>integrations</em> Introduction to AWS <em>integrations</em> List of AWS <em>integrations</em> GCP <em>integrations</em> Introduction to GCP <em>integrations</em> List of GCP <em>integrations</em> Azure <em>integrations</em> Introduction to Azure <em>integrations</em> List of Azure <em>integrations</em>"
      },
      "id": "603e829ae7b9d20bb12a080c"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/go-insights-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11597,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14987,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/haproxy-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30457,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/hashicorp-consul-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11575,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30457,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14975,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration": [
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30438,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14966,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    },
    {
      "sections": [
        "Redis monitoring integration",
        "Compatibility and requirements",
        "Important",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Connect with Unix socket",
        "Connect with TCP",
        "Windows",
        "Configure the integration",
        "metrics",
        "inventory",
        "keyspace",
        "Activate remote monitoring",
        "Environment variable passthroughs",
        "HOSTNAME",
        "PORT",
        "UNIX_SOCKET_PATH",
        "KEYS",
        "KEYS_LIMIT",
        "PASSWORD",
        "Find and use data",
        "Metric data",
        "Redis sample metrics",
        "Keyspace metrics",
        "Inventory data",
        "Other system data",
        "Check the source code"
      ],
      "title": "Redis monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "c5a045bcc13b23efb6000e7c30c47cae9b502f7f",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration/",
      "published_at": "2021-07-04T01:55:38Z",
      "updated_at": "2021-06-24T01:56:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Redis integration reports critical performance data from your Redis server to New Relic products. You can view this metric data and inventory data in pre-built dashboards, create alert policies, and create custom queries and charts. You can also specify keys that are important to your application and get information about their length. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Redis versions 3.0 or higher. Before installing the integration, make sure that you meet the following requirements: If Redis is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running Redis. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. The integration obtains data by executing Redis commands: INFO command: Data from the INFO command populates metric data and some inventory data. CONFIG GET command: Most inventory data comes from this command. In managed Redis installations without permissions to execute the CONFIG command (for example, AWS ElastiCache), the execution of this command can be disabled with the config_inventory: false configuration option. Key length acquisition: Depending on the type of key, these commands are used: LLEN for list SCARD for set ZCOUNT for zset HLEN for hash type. For key length data collection, the agent uses pipelining to minimize the impact on your Redis performance. However, if you are collecting the length of many keys, your Redis performance may be affected. For this reason, the agent includes a default key limit (but this limit can be overwritten). Important If you edited the names of the Redis commands mentioned above, the integration will not be able to retrieve the Redis data. Quick start Instrument your Redis server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these buttons to try it out. Guided install EU Guided install Install and activate To install the Redis integration, follow the instructions for your environment: Additional notes: Advanced: Integrations are also available in tarball format to allow installation outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-redis. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp redis-config.yml.sample redis-config.yml Copy Edit the redis-config.yml file based on your Redis server connection methods: Connect with Unix socket If you connect using Unix socket, specify the unix_socket_path in the configuration file. If there are more than one Redis instance using Unix sockets, make sure to set use_unix_socket to true in the configuration file. Be sure that the user executing the Redis integration has correct permissions for accessing that Unix socket. The permissions of the Unix socket are set in the Redis configuration (value of unixsocketperm). Connect with TCP If you connect via TCP, the config file is by default set to localhost and port 6379. You can change this by specifying hostname and/or the port argument. If you use this method, the unix_socket_path parameter cannot be set. If required, set other configuration file settings based on your Redis setup, as described in Configuration. Restart the infrastructure agent. Windows Download the nri-redis .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-redis/nri-redis-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-redis-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: copy redis-win-config.yml.sample redis-win-config.yml Copy Edit the redis-win-config.yml file as described in the configuration settings. Restart the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file. (The install process includes setting some of these.) Config commands include: metrics metrics reports the metric data and accepts the following arguments: hostname: Redis server hostname. Default value: localhost. port: Port where Redis server is listening. Default value: 6379. unix_socket_path: Unix socket path on which Redis server is listening (if set). Default value: None. use_unix_socket: uses the unix_socket_path value to help you to uniquely identify the Redis instances when there are more than one on the same host using Unix sockets. Default value: false. keys: list of the keys for retrieving their lengths. Default value: None. See keyspace config for more information. keys_limit: max number of the keys to retrieve their lengths. Default value: 30. For more information, see About this integration and Keyspace metrics configuration. password: password to use when connecting to the Redis server. Use only if your Redis server is password-protected. Default value: None. config_inventory: set it to false to avoid invoking the CONFIG GET Redis command. This option is useful in managed environments without permissions to execute the CONFIG command (for example, AWS ElastiCache). Default value: true inventory inventory captures all the Redis configuration parameters, with the exception of requirepass. To disable collection of inventory data, delete the inventory command from the config file. keyspace If you want to see metrics related to the length of selected keys, specify the keys parameter in single-line JSON format in redis-config.yml. For example: keys: '{\"0\":[\"KEY_1\"],\"1\":[\"KEY_2\"]}' Copy If your selected keys are stored only in Redis database 0, then you can set the keys parameter as follows: keys: '[\"KEY_1\",\"KEY_2\"]' Copy The keys_limit parameter defaults to 30 for performance reasons. Be aware that increasing this number could have a substantial impact on your Redis server performance. To see the keyspace metric data that is collected, see RedisKeyspaceSample. Activate remote monitoring The remote_monitoring parameter enables remote monitoring and multi-tenancy for this integration. Activating remote_monitoring may change some attributes and/or affect your configured alerts. For more information, see remote monitoring in on-host integrations. Important Infrastructure agent version 1.2.25 or higher is required to use remote_monitoring. Environment variable passthroughs Environment variables can be used to control config settings, and are then passed through to the infrastructure agent. For instructions on how to use this feature, see Configure the infrastructure agent. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. HOSTNAME Redis server hostname. Type String Default localhost Example: HOSTNAME='Redis DB' Copy PORT The port where Redis server is listening. Type Integer Default 6379 Example: PORT=7199 Copy UNIX_SOCKET_PATH Unix socket path on which Redis server is listening (if set). Type String Default (none) Example: UNIX_SOCKET_PATH='tpf_unix_sock.server' Copy KEYS List of the keys for retrieving their lengths. Type JSON Default (none) Example: KEYS='{\"0\":[\"KEY_1\"],\"1\":[\"KEY_2\"]}' Copy KEYS_LIMIT Max number of the keys to retrieve their lengths. Type Integer Default 30 Example: KEYS_LIMIT=50 Copy PASSWORD Password to use when connecting to the Redis server. Type String Default (none) Example: PASSWORD='Hhv*$jIV' Copy For more about the general structure of on-host integration configuration, see Configuration. Important If you want to monitor several Redis instances from a single host you will need to duplicate the name block, adding arguments for your extra instances. For more information, see our configuration file examples. Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the RedisSample and RedisKeyspaceSample event types. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The Redis integration collects the following metric data attributes: Redis sample metrics These attributes are attached to the RedisSample event type: Name Description cluster.connectedSlaves Number of connected slaves. db.aofLastRewriteTimeInMilliseconds Duration of the last AOF rewrite operation in milliseconds. db.aofLastBgrewriteStatus Boolean representing status of the last AOF background rewrite operation. db.aofLastWriteStatus Boolean representing status of the last AOF write operation. db.evictedKeysPerSecond Number of evicted keys due to maxmemory limit per second. db.expiredKeysPerSecond Number of key expiration events per second. db.keyspaceHitsPerSecond Number of successful lookups of keys in the main dictionary per second. db.keyspaceMissesPerSecond Number of failed lookup of keys in the main dictionary per second. db.latestForkUsecMilliseconds Duration of the latest fork operation in milliseconds. db.rdbBgsaveInProgress Boolean. A flag indicating a RDB save is ongoing. db.rdbChangesSinceLastSave Number of changes since the last dump. db.rdbLastBgsaveStatus Boolean representing the status of the last RDB save operation. db.rdbLastBgsaveTimeMilliseconds Duration of the last RDB save operation in milliseconds. db.rdbLastSaveTime Epoch-based timestamp of last successful RDB save in seconds. db.syncFull Count of the number times slaves have fully synchronized with this master. db.syncPartialErr Count of the number of times partial syncs have failed to complete. db.syncPartialOk Count of the number of times partial syncs have completed. net.blockedClients Number of clients pending on a blocking call (BLPOP, BRPOP, BRPOPLPUSH). net.clientBiggestInputBufBytes The biggest input buffer among current client connections. net.clientLongestOutputList The longest output list among current client connections. net.commandsProcessedPerSecond Number of commands processed by the server per second. net.connectedClients Number of client connections (excluding connections from slaves). net.connectionsReceivedPerSecond Number of connections accepted by the server per second. net.inputBytesPerSecond Total number of bytes input per second. net.outputBytesPerSecond Total number of bytes output per second. net.pubsubChannels Global number of pub/sub channels with client subscriptions. net.pubsubPatterns Global number of pub/sub pattern with client subscriptions. net.rejectedConnectionsPerSecond Number of connections per second rejected because of maxclients limit. software.uptimeMilliseconds Number of milliseconds since Redis server start. system.memFragmentationRatio Ratio between used_memory_rss and used_memory. system.totalSystemMemoryBytes The amount of memory in bytes available in the instance where Redis is running. system.usedCpuSysMilliseconds System CPU consumed by the Redis server in milliseconds. system.usedCpuSysChildrenMilliseconds System CPU consumed by the background processes in milliseconds. system.usedCpuUserMilliseconds User CPU consumed by the Redis server in milliseconds. system.usedCpuUserChildrenMilliseconds User CPU consumed by the background processes in milliseconds. system.usedMemoryBytes The total number of bytes allocated by Redis using its allocator (either standard libc, jemalloc, or an alternative allocator such as tcmalloc). system.usedMemoryLuaBytes Number of bytes used by the Lua engine. system.usedMemoryPeakBytes The peak memory consumed by Redis in bytes. system.usedMemoryRssBytes Number of bytes that Redis allocated as seen by the operating system (also known as resident set size). This is the number reported by tools such as top(1) and ps(1). Keyspace metrics The Redis integration collects the following keyspace metadata and metrics. These attributes are attached to the RedisKeyspaceSample event type: Name Description db.avgTtl The average time to live (TTL) in milliseconds of keys that have an expiration set in the database being reported on. db.keys Number of keys in the database being reported on. db.keyspace Redis database index, which is the integer number (usually a number between 0 and 15). Format: db followed by the database index. For example: db0, db1, db2, etc. db.expires Number of keys with an expiration in the database being reported on. Inventory data Inventory data includes everything reported by the Redis CONFIG GET command, with the exception of requirepass, which stores the password to the Redis server. For more on inventory data, see Understand inventory data. Other system data The Redis integration collects these additional attributes about your Redis service: Name Description software.version The version of the Redis server. Example: 3.2.3. cluster.role Either master or slave, depending on the role of the Redis node being monitored. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.57483,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis monitoring <em>integration</em>",
        "sections": "Redis monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing"
      },
      "id": "6043ccde196a679fae960f68"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/kafka-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11554,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30438,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14966,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/memcached-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11536,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14954,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11536,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Redis monitoring integration",
        "Compatibility and requirements",
        "Important",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Connect with Unix socket",
        "Connect with TCP",
        "Windows",
        "Configure the integration",
        "metrics",
        "inventory",
        "keyspace",
        "Activate remote monitoring",
        "Environment variable passthroughs",
        "HOSTNAME",
        "PORT",
        "UNIX_SOCKET_PATH",
        "KEYS",
        "KEYS_LIMIT",
        "PASSWORD",
        "Find and use data",
        "Metric data",
        "Redis sample metrics",
        "Keyspace metrics",
        "Inventory data",
        "Other system data",
        "Check the source code"
      ],
      "title": "Redis monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "c5a045bcc13b23efb6000e7c30c47cae9b502f7f",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration/",
      "published_at": "2021-07-04T01:55:38Z",
      "updated_at": "2021-06-24T01:56:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Redis integration reports critical performance data from your Redis server to New Relic products. You can view this metric data and inventory data in pre-built dashboards, create alert policies, and create custom queries and charts. You can also specify keys that are important to your application and get information about their length. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Redis versions 3.0 or higher. Before installing the integration, make sure that you meet the following requirements: If Redis is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running Redis. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. The integration obtains data by executing Redis commands: INFO command: Data from the INFO command populates metric data and some inventory data. CONFIG GET command: Most inventory data comes from this command. In managed Redis installations without permissions to execute the CONFIG command (for example, AWS ElastiCache), the execution of this command can be disabled with the config_inventory: false configuration option. Key length acquisition: Depending on the type of key, these commands are used: LLEN for list SCARD for set ZCOUNT for zset HLEN for hash type. For key length data collection, the agent uses pipelining to minimize the impact on your Redis performance. However, if you are collecting the length of many keys, your Redis performance may be affected. For this reason, the agent includes a default key limit (but this limit can be overwritten). Important If you edited the names of the Redis commands mentioned above, the integration will not be able to retrieve the Redis data. Quick start Instrument your Redis server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these buttons to try it out. Guided install EU Guided install Install and activate To install the Redis integration, follow the instructions for your environment: Additional notes: Advanced: Integrations are also available in tarball format to allow installation outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-redis. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp redis-config.yml.sample redis-config.yml Copy Edit the redis-config.yml file based on your Redis server connection methods: Connect with Unix socket If you connect using Unix socket, specify the unix_socket_path in the configuration file. If there are more than one Redis instance using Unix sockets, make sure to set use_unix_socket to true in the configuration file. Be sure that the user executing the Redis integration has correct permissions for accessing that Unix socket. The permissions of the Unix socket are set in the Redis configuration (value of unixsocketperm). Connect with TCP If you connect via TCP, the config file is by default set to localhost and port 6379. You can change this by specifying hostname and/or the port argument. If you use this method, the unix_socket_path parameter cannot be set. If required, set other configuration file settings based on your Redis setup, as described in Configuration. Restart the infrastructure agent. Windows Download the nri-redis .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-redis/nri-redis-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-redis-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: copy redis-win-config.yml.sample redis-win-config.yml Copy Edit the redis-win-config.yml file as described in the configuration settings. Restart the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file. (The install process includes setting some of these.) Config commands include: metrics metrics reports the metric data and accepts the following arguments: hostname: Redis server hostname. Default value: localhost. port: Port where Redis server is listening. Default value: 6379. unix_socket_path: Unix socket path on which Redis server is listening (if set). Default value: None. use_unix_socket: uses the unix_socket_path value to help you to uniquely identify the Redis instances when there are more than one on the same host using Unix sockets. Default value: false. keys: list of the keys for retrieving their lengths. Default value: None. See keyspace config for more information. keys_limit: max number of the keys to retrieve their lengths. Default value: 30. For more information, see About this integration and Keyspace metrics configuration. password: password to use when connecting to the Redis server. Use only if your Redis server is password-protected. Default value: None. config_inventory: set it to false to avoid invoking the CONFIG GET Redis command. This option is useful in managed environments without permissions to execute the CONFIG command (for example, AWS ElastiCache). Default value: true inventory inventory captures all the Redis configuration parameters, with the exception of requirepass. To disable collection of inventory data, delete the inventory command from the config file. keyspace If you want to see metrics related to the length of selected keys, specify the keys parameter in single-line JSON format in redis-config.yml. For example: keys: '{\"0\":[\"KEY_1\"],\"1\":[\"KEY_2\"]}' Copy If your selected keys are stored only in Redis database 0, then you can set the keys parameter as follows: keys: '[\"KEY_1\",\"KEY_2\"]' Copy The keys_limit parameter defaults to 30 for performance reasons. Be aware that increasing this number could have a substantial impact on your Redis server performance. To see the keyspace metric data that is collected, see RedisKeyspaceSample. Activate remote monitoring The remote_monitoring parameter enables remote monitoring and multi-tenancy for this integration. Activating remote_monitoring may change some attributes and/or affect your configured alerts. For more information, see remote monitoring in on-host integrations. Important Infrastructure agent version 1.2.25 or higher is required to use remote_monitoring. Environment variable passthroughs Environment variables can be used to control config settings, and are then passed through to the infrastructure agent. For instructions on how to use this feature, see Configure the infrastructure agent. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. HOSTNAME Redis server hostname. Type String Default localhost Example: HOSTNAME='Redis DB' Copy PORT The port where Redis server is listening. Type Integer Default 6379 Example: PORT=7199 Copy UNIX_SOCKET_PATH Unix socket path on which Redis server is listening (if set). Type String Default (none) Example: UNIX_SOCKET_PATH='tpf_unix_sock.server' Copy KEYS List of the keys for retrieving their lengths. Type JSON Default (none) Example: KEYS='{\"0\":[\"KEY_1\"],\"1\":[\"KEY_2\"]}' Copy KEYS_LIMIT Max number of the keys to retrieve their lengths. Type Integer Default 30 Example: KEYS_LIMIT=50 Copy PASSWORD Password to use when connecting to the Redis server. Type String Default (none) Example: PASSWORD='Hhv*$jIV' Copy For more about the general structure of on-host integration configuration, see Configuration. Important If you want to monitor several Redis instances from a single host you will need to duplicate the name block, adding arguments for your extra instances. For more information, see our configuration file examples. Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the RedisSample and RedisKeyspaceSample event types. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The Redis integration collects the following metric data attributes: Redis sample metrics These attributes are attached to the RedisSample event type: Name Description cluster.connectedSlaves Number of connected slaves. db.aofLastRewriteTimeInMilliseconds Duration of the last AOF rewrite operation in milliseconds. db.aofLastBgrewriteStatus Boolean representing status of the last AOF background rewrite operation. db.aofLastWriteStatus Boolean representing status of the last AOF write operation. db.evictedKeysPerSecond Number of evicted keys due to maxmemory limit per second. db.expiredKeysPerSecond Number of key expiration events per second. db.keyspaceHitsPerSecond Number of successful lookups of keys in the main dictionary per second. db.keyspaceMissesPerSecond Number of failed lookup of keys in the main dictionary per second. db.latestForkUsecMilliseconds Duration of the latest fork operation in milliseconds. db.rdbBgsaveInProgress Boolean. A flag indicating a RDB save is ongoing. db.rdbChangesSinceLastSave Number of changes since the last dump. db.rdbLastBgsaveStatus Boolean representing the status of the last RDB save operation. db.rdbLastBgsaveTimeMilliseconds Duration of the last RDB save operation in milliseconds. db.rdbLastSaveTime Epoch-based timestamp of last successful RDB save in seconds. db.syncFull Count of the number times slaves have fully synchronized with this master. db.syncPartialErr Count of the number of times partial syncs have failed to complete. db.syncPartialOk Count of the number of times partial syncs have completed. net.blockedClients Number of clients pending on a blocking call (BLPOP, BRPOP, BRPOPLPUSH). net.clientBiggestInputBufBytes The biggest input buffer among current client connections. net.clientLongestOutputList The longest output list among current client connections. net.commandsProcessedPerSecond Number of commands processed by the server per second. net.connectedClients Number of client connections (excluding connections from slaves). net.connectionsReceivedPerSecond Number of connections accepted by the server per second. net.inputBytesPerSecond Total number of bytes input per second. net.outputBytesPerSecond Total number of bytes output per second. net.pubsubChannels Global number of pub/sub channels with client subscriptions. net.pubsubPatterns Global number of pub/sub pattern with client subscriptions. net.rejectedConnectionsPerSecond Number of connections per second rejected because of maxclients limit. software.uptimeMilliseconds Number of milliseconds since Redis server start. system.memFragmentationRatio Ratio between used_memory_rss and used_memory. system.totalSystemMemoryBytes The amount of memory in bytes available in the instance where Redis is running. system.usedCpuSysMilliseconds System CPU consumed by the Redis server in milliseconds. system.usedCpuSysChildrenMilliseconds System CPU consumed by the background processes in milliseconds. system.usedCpuUserMilliseconds User CPU consumed by the Redis server in milliseconds. system.usedCpuUserChildrenMilliseconds User CPU consumed by the background processes in milliseconds. system.usedMemoryBytes The total number of bytes allocated by Redis using its allocator (either standard libc, jemalloc, or an alternative allocator such as tcmalloc). system.usedMemoryLuaBytes Number of bytes used by the Lua engine. system.usedMemoryPeakBytes The peak memory consumed by Redis in bytes. system.usedMemoryRssBytes Number of bytes that Redis allocated as seen by the operating system (also known as resident set size). This is the number reported by tools such as top(1) and ps(1). Keyspace metrics The Redis integration collects the following keyspace metadata and metrics. These attributes are attached to the RedisKeyspaceSample event type: Name Description db.avgTtl The average time to live (TTL) in milliseconds of keys that have an expiration set in the database being reported on. db.keys Number of keys in the database being reported on. db.keyspace Redis database index, which is the integer number (usually a number between 0 and 15). Format: db followed by the database index. For example: db0, db1, db2, etc. db.expires Number of keys with an expiration in the database being reported on. Inventory data Inventory data includes everything reported by the Redis CONFIG GET command, with the exception of requirepass, which stores the password to the Redis server. For more on inventory data, see Understand inventory data. Other system data The Redis integration collects these additional attributes about your Redis service: Name Description software.version The version of the Redis server. Example: 3.2.3. cluster.role Either master or slave, depending on the role of the Redis node being monitored. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.57477,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis monitoring <em>integration</em>",
        "sections": "Redis monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing"
      },
      "id": "6043ccde196a679fae960f68"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/mongodb-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11514,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30402,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1494,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11514,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1494,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    },
    {
      "sections": [
        "Redis monitoring integration",
        "Compatibility and requirements",
        "Important",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Connect with Unix socket",
        "Connect with TCP",
        "Windows",
        "Configure the integration",
        "metrics",
        "inventory",
        "keyspace",
        "Activate remote monitoring",
        "Environment variable passthroughs",
        "HOSTNAME",
        "PORT",
        "UNIX_SOCKET_PATH",
        "KEYS",
        "KEYS_LIMIT",
        "PASSWORD",
        "Find and use data",
        "Metric data",
        "Redis sample metrics",
        "Keyspace metrics",
        "Inventory data",
        "Other system data",
        "Check the source code"
      ],
      "title": "Redis monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "c5a045bcc13b23efb6000e7c30c47cae9b502f7f",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration/",
      "published_at": "2021-07-04T01:55:38Z",
      "updated_at": "2021-06-24T01:56:20Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Redis integration reports critical performance data from your Redis server to New Relic products. You can view this metric data and inventory data in pre-built dashboards, create alert policies, and create custom queries and charts. You can also specify keys that are important to your application and get information about their length. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Redis versions 3.0 or higher. Before installing the integration, make sure that you meet the following requirements: If Redis is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a Linux OS host that's running Redis. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. The integration obtains data by executing Redis commands: INFO command: Data from the INFO command populates metric data and some inventory data. CONFIG GET command: Most inventory data comes from this command. In managed Redis installations without permissions to execute the CONFIG command (for example, AWS ElastiCache), the execution of this command can be disabled with the config_inventory: false configuration option. Key length acquisition: Depending on the type of key, these commands are used: LLEN for list SCARD for set ZCOUNT for zset HLEN for hash type. For key length data collection, the agent uses pipelining to minimize the impact on your Redis performance. However, if you are collecting the length of many keys, your Redis performance may be affected. For this reason, the agent includes a default key limit (but this limit can be overwritten). Important If you edited the names of the Redis commands mentioned above, the integration will not be able to retrieve the Redis data. Quick start Instrument your Redis server quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these buttons to try it out. Guided install EU Guided install Install and activate To install the Redis integration, follow the instructions for your environment: Additional notes: Advanced: Integrations are also available in tarball format to allow installation outside of a package manager. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-redis. Change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp redis-config.yml.sample redis-config.yml Copy Edit the redis-config.yml file based on your Redis server connection methods: Connect with Unix socket If you connect using Unix socket, specify the unix_socket_path in the configuration file. If there are more than one Redis instance using Unix sockets, make sure to set use_unix_socket to true in the configuration file. Be sure that the user executing the Redis integration has correct permissions for accessing that Unix socket. The permissions of the Unix socket are set in the Redis configuration (value of unixsocketperm). Connect with TCP If you connect via TCP, the config file is by default set to localhost and port 6379. You can change this by specifying hostname and/or the port argument. If you use this method, the unix_socket_path parameter cannot be set. If required, set other configuration file settings based on your Redis setup, as described in Configuration. Restart the infrastructure agent. Windows Download the nri-redis .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-redis/nri-redis-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-redis-amd64.msi Copy or double-click the file in Explorer. In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: copy redis-win-config.yml.sample redis-win-config.yml Copy Edit the redis-win-config.yml file as described in the configuration settings. Restart the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file. (The install process includes setting some of these.) Config commands include: metrics metrics reports the metric data and accepts the following arguments: hostname: Redis server hostname. Default value: localhost. port: Port where Redis server is listening. Default value: 6379. unix_socket_path: Unix socket path on which Redis server is listening (if set). Default value: None. use_unix_socket: uses the unix_socket_path value to help you to uniquely identify the Redis instances when there are more than one on the same host using Unix sockets. Default value: false. keys: list of the keys for retrieving their lengths. Default value: None. See keyspace config for more information. keys_limit: max number of the keys to retrieve their lengths. Default value: 30. For more information, see About this integration and Keyspace metrics configuration. password: password to use when connecting to the Redis server. Use only if your Redis server is password-protected. Default value: None. config_inventory: set it to false to avoid invoking the CONFIG GET Redis command. This option is useful in managed environments without permissions to execute the CONFIG command (for example, AWS ElastiCache). Default value: true inventory inventory captures all the Redis configuration parameters, with the exception of requirepass. To disable collection of inventory data, delete the inventory command from the config file. keyspace If you want to see metrics related to the length of selected keys, specify the keys parameter in single-line JSON format in redis-config.yml. For example: keys: '{\"0\":[\"KEY_1\"],\"1\":[\"KEY_2\"]}' Copy If your selected keys are stored only in Redis database 0, then you can set the keys parameter as follows: keys: '[\"KEY_1\",\"KEY_2\"]' Copy The keys_limit parameter defaults to 30 for performance reasons. Be aware that increasing this number could have a substantial impact on your Redis server performance. To see the keyspace metric data that is collected, see RedisKeyspaceSample. Activate remote monitoring The remote_monitoring parameter enables remote monitoring and multi-tenancy for this integration. Activating remote_monitoring may change some attributes and/or affect your configured alerts. For more information, see remote monitoring in on-host integrations. Important Infrastructure agent version 1.2.25 or higher is required to use remote_monitoring. Environment variable passthroughs Environment variables can be used to control config settings, and are then passed through to the infrastructure agent. For instructions on how to use this feature, see Configure the infrastructure agent. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. HOSTNAME Redis server hostname. Type String Default localhost Example: HOSTNAME='Redis DB' Copy PORT The port where Redis server is listening. Type Integer Default 6379 Example: PORT=7199 Copy UNIX_SOCKET_PATH Unix socket path on which Redis server is listening (if set). Type String Default (none) Example: UNIX_SOCKET_PATH='tpf_unix_sock.server' Copy KEYS List of the keys for retrieving their lengths. Type JSON Default (none) Example: KEYS='{\"0\":[\"KEY_1\"],\"1\":[\"KEY_2\"]}' Copy KEYS_LIMIT Max number of the keys to retrieve their lengths. Type Integer Default 30 Example: KEYS_LIMIT=50 Copy PASSWORD Password to use when connecting to the Redis server. Type String Default (none) Example: PASSWORD='Hhv*$jIV' Copy For more about the general structure of on-host integration configuration, see Configuration. Important If you want to monitor several Redis instances from a single host you will need to duplicate the name block, adding arguments for your extra instances. For more information, see our configuration file examples. Find and use data Data from this service is reported to an integration dashboard. Metrics are attached to the RedisSample and RedisKeyspaceSample event types. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The Redis integration collects the following metric data attributes: Redis sample metrics These attributes are attached to the RedisSample event type: Name Description cluster.connectedSlaves Number of connected slaves. db.aofLastRewriteTimeInMilliseconds Duration of the last AOF rewrite operation in milliseconds. db.aofLastBgrewriteStatus Boolean representing status of the last AOF background rewrite operation. db.aofLastWriteStatus Boolean representing status of the last AOF write operation. db.evictedKeysPerSecond Number of evicted keys due to maxmemory limit per second. db.expiredKeysPerSecond Number of key expiration events per second. db.keyspaceHitsPerSecond Number of successful lookups of keys in the main dictionary per second. db.keyspaceMissesPerSecond Number of failed lookup of keys in the main dictionary per second. db.latestForkUsecMilliseconds Duration of the latest fork operation in milliseconds. db.rdbBgsaveInProgress Boolean. A flag indicating a RDB save is ongoing. db.rdbChangesSinceLastSave Number of changes since the last dump. db.rdbLastBgsaveStatus Boolean representing the status of the last RDB save operation. db.rdbLastBgsaveTimeMilliseconds Duration of the last RDB save operation in milliseconds. db.rdbLastSaveTime Epoch-based timestamp of last successful RDB save in seconds. db.syncFull Count of the number times slaves have fully synchronized with this master. db.syncPartialErr Count of the number of times partial syncs have failed to complete. db.syncPartialOk Count of the number of times partial syncs have completed. net.blockedClients Number of clients pending on a blocking call (BLPOP, BRPOP, BRPOPLPUSH). net.clientBiggestInputBufBytes The biggest input buffer among current client connections. net.clientLongestOutputList The longest output list among current client connections. net.commandsProcessedPerSecond Number of commands processed by the server per second. net.connectedClients Number of client connections (excluding connections from slaves). net.connectionsReceivedPerSecond Number of connections accepted by the server per second. net.inputBytesPerSecond Total number of bytes input per second. net.outputBytesPerSecond Total number of bytes output per second. net.pubsubChannels Global number of pub/sub channels with client subscriptions. net.pubsubPatterns Global number of pub/sub pattern with client subscriptions. net.rejectedConnectionsPerSecond Number of connections per second rejected because of maxclients limit. software.uptimeMilliseconds Number of milliseconds since Redis server start. system.memFragmentationRatio Ratio between used_memory_rss and used_memory. system.totalSystemMemoryBytes The amount of memory in bytes available in the instance where Redis is running. system.usedCpuSysMilliseconds System CPU consumed by the Redis server in milliseconds. system.usedCpuSysChildrenMilliseconds System CPU consumed by the background processes in milliseconds. system.usedCpuUserMilliseconds User CPU consumed by the Redis server in milliseconds. system.usedCpuUserChildrenMilliseconds User CPU consumed by the background processes in milliseconds. system.usedMemoryBytes The total number of bytes allocated by Redis using its allocator (either standard libc, jemalloc, or an alternative allocator such as tcmalloc). system.usedMemoryLuaBytes Number of bytes used by the Lua engine. system.usedMemoryPeakBytes The peak memory consumed by Redis in bytes. system.usedMemoryRssBytes Number of bytes that Redis allocated as seen by the operating system (also known as resident set size). This is the number reported by tools such as top(1) and ps(1). Keyspace metrics The Redis integration collects the following keyspace metadata and metrics. These attributes are attached to the RedisKeyspaceSample event type: Name Description db.avgTtl The average time to live (TTL) in milliseconds of keys that have an expiration set in the database being reported on. db.keys Number of keys in the database being reported on. db.keyspace Redis database index, which is the integer number (usually a number between 0 and 15). Format: db followed by the database index. For example: db0, db1, db2, etc. db.expires Number of keys with an expiration in the database being reported on. Inventory data Inventory data includes everything reported by the Redis CONFIG GET command, with the exception of requirepass, which stores the password to the Redis server. For more on inventory data, see Understand inventory data. Other system data The Redis integration collects these additional attributes about your Redis service: Name Description software.version The version of the Redis server. Example: 3.2.3. cluster.role Either master or slave, depending on the role of the Redis node being monitored. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 220.57472,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Redis monitoring <em>integration</em>",
        "sections": "Redis monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " manager. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package and the infrastructure agent. ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing"
      },
      "id": "6043ccde196a679fae960f68"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/mysql-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11514,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30402,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1494,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/nagios-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3038,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/nfs-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3038,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/nginx-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30362,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/oracle-database-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11475,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30362,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14917,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/perfmon-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30344,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/port-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11453,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30344,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/postgresql-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14893,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/rabbitmq-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14893,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/redis-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11432,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30322,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14893,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/snmp-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11414,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/statsd-monitoring-integration-version-2": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11414,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14883,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/statsd-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11392,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/unix-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11392,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30286,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1487,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/varnish-cache-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.1137,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30267,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/vmware-tanzu-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.1137,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.30267,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.1486,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/vmware-vsphere-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11353,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3025,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14847,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/host-integrations-list/zookeeper-monitoring-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 301.11353,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 294.3025,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 261.14847,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em> <em>list</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/installation/container-auto-discovery-host-integrations": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.02916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.3133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Step 1: Enable EC2 to <em>install</em> the infrastructure agent",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.60428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/installation/install-infrastructure-host-integrations": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.02916,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.3133,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Step 1: Enable EC2 to <em>install</em> the infrastructure agent",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.60428,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/installation/secrets-management": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.02904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.31317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Step 1: Enable EC2 to <em>install</em> the infrastructure agent",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.6042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/installation/update-infrastructure-host-integration-package": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 175.02904,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.31317,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Step 1: Enable EC2 to <em>install</em> the infrastructure agent",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 154.6042,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/open-source-host-integrations-list/f5-open-source-integration": [
    {
      "sections": [
        "On-host integrations metrics",
        "New Relic Integrations Metrics"
      ],
      "title": "On-host integrations metrics",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Manage your data",
        "Data and instrumentation"
      ],
      "external_id": "fe96c0c4950380504b1a33c3ad861bcb17507cba",
      "image": "",
      "url": "https://docs.newrelic.com/docs/infrastructure/manage-your-data/data-instrumentation/host-integrations-metrics/",
      "published_at": "2021-07-02T19:48:47Z",
      "updated_at": "2021-06-15T01:04:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic Integrations Metrics The following table contains the metrics we collect for our infrastructure integrations. Integration Dimensional Metric Name (new) Sample Metric Name (previous) Agent host.cpuIdlePercent cpuIdlePercent Agent host.cpuIoWaitPercent cpuIOWaitPercent Agent host.cpuPercent cpuPercent Agent host.cpuStealPercent cpuStealPercent Agent host.cpuSystemPercent cpuSystemPercent Agent host.cpuUserPercent cpuUserPercent Agent host.disk.avgQueueLen avgQueueLen Agent host.disk.avgReadQueueLen avgReadQueueLen Agent host.disk.avgWriteQueueLen avgWriteQueueLen Agent host.disk.currentQueueLen currentQueueLen Agent host.disk.freeBytes diskFreeBytes Agent host.disk.freePercent diskFreePercent Agent host.disk.inodesFree inodesFree Agent host.disk.inodesTotal inodesTotal Agent host.disk.inodesUsed inodesUsed Agent host.disk.inodesUsedPercent inodesUsedPercent Agent host.disk.readBytesPerSecond readBytesPerSecond Agent host.disk.readIoPerSecond readIoPerSecond Agent host.disk.readUtilizationPercent readUtilizationPercent Agent host.disk.readWriteBytesPerSecond readWriteBytesPerSecond Agent host.disk.totalBytes diskTotalBytes Agent host.disk.totalUtilizationPercent totalUtilizationPercent Agent host.disk.usedBytes diskUsedBytes Agent host.disk.usedPercent diskUsedPercent Agent host.disk.writeBytesPerSecond writeBytesPerSecond Agent host.disk.writeIoPerSecond writeIoPerSecond Agent host.disk.writeUtilizationPercent writeUtilizationPercent Agent host.diskFreeBytes diskFreeBytes Agent host.diskFreePercent diskFreePercent Agent host.diskReadsPerSecond diskReadsPerSecond Agent host.diskReadUtilizationPercent diskReadUtilizationPercent Agent host.diskTotalBytes diskTotalBytes Agent host.diskUsedBytes diskUsedBytes Agent host.diskUsedPercent diskUsedPercent Agent host.diskUtilizationPercent diskUtilizationPercent Agent host.diskWritesPerSecond diskWritesPerSecond Agent host.diskWriteUtilizationPercent diskWriteUtilizationPercent Agent host.loadAverageFifteenMinute loadAverageFifteenMinute Agent host.loadAverageFiveMinute loadAverageFiveMinute Agent host.loadAverageOneMinute loadAverageOneMinute Agent host.memoryFreeBytes memoryFreeBytes Agent host.memoryFreePercent memoryFreePercent Agent host.memoryTotalBytes memoryTotalBytes Agent host.memoryUsedBytes memoryUsedBytes Agent host.memoryUsedPercent memoryUsedPercent Agent host.net.receiveBytesPerSecond receiveBytesPerSecond Agent host.net.receiveDroppedPerSecond receiveDroppedPerSecond Agent host.net.receiveErrorsPerSecond receiveErrorsPerSecond Agent host.net.receivePacketsPerSecond receivePacketsPerSecond Agent host.net.transmitBytesPerSecond transmitBytesPerSecond Agent host.net.transmitDroppedPerSecond transmitDroppedPerSecond Agent host.net.transmitErrorsPerSecond transmitErrorsPerSecond Agent host.net.transmitPacketsPerSecond transmitPacketsPerSecond Agent host.process.cpuPercent cpuPercent Agent host.process.cpuSystemPercent cpuSystemPercent Agent host.process.cpuUserPercent cpuUserPercent Agent host.process.fileDescriptorCount fileDescriptorCount Agent host.process.ioReadBytesPerSecond ioReadBytesPerSecond Agent host.process.ioReadCountPerSecond ioReadCountPerSecond Agent host.process.ioTotalReadBytes ioTotalReadBytes Agent host.process.ioTotalReadCount ioTotalReadCount Agent host.process.ioTotalWriteBytes ioTotalWriteBytes Agent host.process.ioTotalWriteCount ioTotalWriteCount Agent host.process.ioWriteBytesPerSecond ioWriteBytesPerSecond Agent host.process.ioWriteCountPerSecond ioWriteCountPerSecond Agent host.process.memoryResidentSizeBytes memoryResidentSizeBytes Agent host.process.memoryVirtualSizeBytes memoryVirtualSizeBytes Agent host.process.threadCount threadCount Agent host.swapFreeBytes swapFreeBytes Agent host.swapTotalBytes swapTotalBytes Agent host.swapUsedBytes swapUsedBytes Apache apache.server.busyWorkers server.busyWorkers Apache apache.server.idleWorkers server.idleWorkers Apache apache.server.net.bytesPerSecond net.bytesPerSecond Apache apache.server.net.requestsPerSecond net.requestsPerSecond Apache apache.server.scoreboard.closingWorkers server.scoreboard.closingWorkers Apache apache.server.scoreboard.dnsLookupWorkers server.scoreboard.dnsLookupWorkers Apache apache.server.scoreboard.finishingWorkers server.scoreboard.finishingWorkers Apache apache.server.scoreboard.idleCleanupWorkers server.scoreboard.idleCleanupWorkers Apache apache.server.scoreboard.keepAliveWorkers server.scoreboard.keepAliveWorkers Apache apache.server.scoreboard.loggingWorkers server.scoreboard.loggingWorkers Apache apache.server.scoreboard.readingWorkers server.scoreboard.readingWorkers Apache apache.server.scoreboard.startingWorkers server.scoreboard.startingWorkers Apache apache.server.scoreboard.totalWorkers server.scoreboard.totalWorkers Apache apache.server.scoreboard.writingWorkers server.scoreboard.writingWorkers Cassandra cassandra.node.allMemtablesOffHeapSizeBytes db.allMemtablesOffHeapSizeBytes Cassandra cassandra.node.allMemtablesOnHeapSizeBytes db.allMemtablesOnHeapSizeBytes Cassandra cassandra.node.client.connectedNativeClients client.connectedNativeClients Cassandra cassandra.node.commitLogCompletedTasksPerSecond db.commitLogCompletedTasksPerSecond Cassandra cassandra.node.commitLogPendingTasks db.commitLogPendindTasks Cassandra cassandra.node.commitLogTotalSizeBytes db.commitLogTotalSizeBytes Cassandra cassandra.node.droppedBatchRemoveMessagesPerSecond db.droppedBatchRemoveMessagesPerSecond Cassandra cassandra.node.droppedBatchStoreMessagesPerSecond db.droppedBatchStoreMessagesPerSecond Cassandra cassandra.node.droppedCounterMutationMessagesPerSecond db.droppedCounterMutationMessagesPerSecond Cassandra cassandra.node.droppedHintMessagesPerSecond db.droppedHintMessagesPerSecond Cassandra cassandra.node.droppedMutationMessagesPerSecond db.droppedMutationMessagesPerSecond Cassandra cassandra.node.droppedPagedRangeMessagesPerSecond db.droppedPagedRangeMessagesPerSecond Cassandra cassandra.node.droppedRangeSliceMessagesPerSecond db.droppedRangeSliceMessagesPerSecond Cassandra cassandra.node.droppedReadMessagesPerSecond db.droppedReadMessagesPerSecond Cassandra cassandra.node.droppedReadRepairMessagesPerSecond db.droppedReadRepairMessagesPerSecond Cassandra cassandra.node.droppedRequestResponseMessagesPerSecond db.droppedRequestResponseMessagesPerSecond Cassandra cassandra.node.droppedTraceMessagesPerSecond db.droppedTraceMessagesPerSecond Cassandra cassandra.node.keyCacheCapacityBytes db.keyCacheCapacityBytes Cassandra cassandra.node.keyCacheHitRate db.keyCacheHitRate Cassandra cassandra.node.keyCacheHitsPerSecond db.keyCacheHitsPerSecond Cassandra cassandra.node.keyCacheRequestsPerSecond db.keyCacheRequestsPerSecond Cassandra cassandra.node.keyCacheSizeBytes db.keyCacheSizeBytes Cassandra cassandra.node.liveSsTableCount db.liveSSTableCount Cassandra cassandra.node.loadBytes db.loadBytes Cassandra cassandra.node.query.casReadRequestsPerSecond query.CASReadRequestsPerSecond Cassandra cassandra.node.query.casWriteRequestsPerSecond query.CASWriteRequestsPerSecond Cassandra cassandra.node.query.rangeSliceRequestsPerSecond query.rangeSliceRequestsPerSecond Cassandra cassandra.node.query.rangeSliceTimeoutsPerSecond query.rangeSliceTimeoutsPerSecond Cassandra cassandra.node.query.rangeSliceUnavailablesPerSecond query.rangeSliceUnavailablesPerSecond Cassandra cassandra.node.query.readLatency50ThPercentileMilliseconds query.readLatency50thPercentileMilliseconds Cassandra cassandra.node.query.readLatency75ThPercentileMilliseconds query.readLatency75thPercentileMilliseconds Cassandra cassandra.node.query.readLatency95ThPercentileMilliseconds query.readLatency95thPercentileMilliseconds Cassandra cassandra.node.query.readLatency98ThPercentileMilliseconds query.readLatency98thPercentileMilliseconds Cassandra cassandra.node.query.readLatency999ThPercentileMilliseconds query.readLatency999thPercentileMilliseconds Cassandra cassandra.node.query.readLatency99ThPercentileMilliseconds query.readLatency99thPercentileMilliseconds Cassandra cassandra.node.query.readRequestsPerSecond query.readRequestsPerSecond Cassandra cassandra.node.query.readTimeoutsPerSecond query.readTimeoutsPerSecond Cassandra cassandra.node.query.readUnavailablesPerSecond query.readUnavailablesPerSecond Cassandra cassandra.node.query.viewWriteRequestsPerSecond query.viewWriteRequestsPerSecond Cassandra cassandra.node.query.writeLatency50ThPercentileMilliseconds query.writeLatency50thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency75ThPercentileMilliseconds query.writeLatency75thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency95ThPercentileMilliseconds query.writeLatency95thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency98ThPercentileMilliseconds query.writeLatency98thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency999ThPercentileMilliseconds query.writeLatency999thPercentileMilliseconds Cassandra cassandra.node.query.writeLatency99ThPercentileMilliseconds query.writeLatency99thPercentileMilliseconds Cassandra cassandra.node.query.writeRequestsPerSecond query.writeRequestsPerSecond Cassandra cassandra.node.query.writeTimeoutsPerSecond query.writeTimeoutsPerSecond Cassandra cassandra.node.query.writeUnavailablesPerSecond query.writeUnavailablesPerSecond Cassandra cassandra.node.rowCacheCapacityBytes db.rowCacheCapacityBytes Cassandra cassandra.node.rowCacheHitRate db.rowCacheHitRate Cassandra cassandra.node.rowCacheHitsPerSecond db.rowCacheHitsPerSecond Cassandra cassandra.node.rowCacheRequestsPerSecond db.rowCacheRequestsPerSecond Cassandra cassandra.node.rowCacheSizeBytes db.rowCacheSizeBytes Cassandra cassandra.node.storage.exceptionCount storage.exceptionCount Cassandra cassandra.node.threadPool.antiEntropyStage.activeTasks db.threadpool.internalAntiEntropyStageActiveTasks Cassandra cassandra.node.threadPool.antiEntropyStage.completedTasks db.threadpool.internalAntiEntropyStageCompletedTasks Cassandra cassandra.node.threadPool.antiEntropyStage.currentlyBlockedTasks db.threadpool.internalAntiEntropyStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.antiEntropyStage.pendingTasks db.threadpool.internalAntiEntropyStagePendingTasks Cassandra cassandra.node.threadPool.cacheCleanupExecutor.activeTasks db.threadpool.internalCacheCleanupExecutorActiveTasks Cassandra cassandra.node.threadPool.cacheCleanupExecutor.completedTasks db.threadpool.internalCacheCleanupExecutorCompletedTasks Cassandra cassandra.node.threadPool.cacheCleanupExecutor.currentlyBlockedTasks db.threadpool.internalCacheCleanupExecutorCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.cacheCleanupExecutor.pendingTasks db.threadpool.internalCacheCleanupExecutorPendingTasks Cassandra cassandra.node.threadPool.compactionExecutor.activeTasks db.threadpool.internalCompactionExecutorActiveTasks Cassandra cassandra.node.threadPool.compactionExecutor.completedTasks db.threadpool.internalCompactionExecutorCompletedTasks Cassandra cassandra.node.threadPool.compactionExecutor.currentlyBlockedTasks db.threadpool.internalCompactionExecutorCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.compactionExecutor.pendingTasks db.threadpool.internalCompactionExecutorPendingTasks Cassandra cassandra.node.threadPool.counterMutationStage.activeTasks db.threadpool.requestCounterMutationStageActiveTasks Cassandra cassandra.node.threadPool.counterMutationStage.completedTasks db.threadpool.requestCounterMutationStageCompletedTasks Cassandra cassandra.node.threadPool.counterMutationStage.currentlyBlockedTasks db.threadpool.requestCounterMutationStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.counterMutationStage.pendingTasks db.threadpool.requestCounterMutationStagePendingTasks Cassandra cassandra.node.threadPool.gossipStage.activeTasks db.threadpool.internalGossipStageActiveTasks Cassandra cassandra.node.threadPool.gossipStage.completedTasks db.threadpool.internalGossipStageCompletedTasks Cassandra cassandra.node.threadPool.gossipStage.currentlyBlockedTasks db.threadpool.internalGossipStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.gossipStage.pendingTasks db.threadpool.internalGossipStagePendingTasks Cassandra cassandra.node.threadPool.hintsDispatcher.activeTasks db.threadpool.internalHintsDispatcherActiveTasks Cassandra cassandra.node.threadPool.hintsDispatcher.completedTasks db.threadpool.internalHintsDispatcherCompletedTasks Cassandra cassandra.node.threadPool.hintsDispatcher.currentlyBlockedTasks db.threadpool.internalHintsDispatcherCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.hintsDispatcher.pendingTasks db.threadpool.internalHintsDispatcherPendingTasks Cassandra cassandra.node.threadPool.internalResponseStage.activeTasks db.threadpool.internalInternalResponseStageActiveTasks Cassandra cassandra.node.threadPool.internalResponseStage.completedTasks db.threadpool.internalInternalResponseStageCompletedTasks Cassandra cassandra.node.threadPool.internalResponseStage.pCurrentlyBlockedTasks db.threadpool.internalInternalResponseStagePCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.internalResponseStage.pendingTasks db.threadpool.internalInternalResponseStagePendingTasks Cassandra cassandra.node.threadPool.memtableFlushWriter.activeTasks db.threadpool.internalMemtableFlushWriterActiveTasks Cassandra cassandra.node.threadPool.memtableFlushWriter.completedTasks db.threadpool.internalMemtableFlushWriterCompletedTasks Cassandra cassandra.node.threadPool.memtableFlushWriter.currentlyBlockedTasks db.threadpool.internalMemtableFlushWriterCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.memtableFlushWriter.pendingTasks db.threadpool.internalMemtableFlushWriterPendingTasks Cassandra cassandra.node.threadPool.memtablePostFlush.activeTasks db.threadpool.internalMemtablePostFlushActiveTasks Cassandra cassandra.node.threadPool.memtablePostFlush.completedTasks db.threadpool.internalMemtablePostFlushCompletedTasks Cassandra cassandra.node.threadPool.memtablePostFlush.currentlyBlockedTasks db.threadpool.internalMemtablePostFlushCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.memtablePostFlush.pendingTasks db.threadpool.internalMemtablePostFlushPendingTasks Cassandra cassandra.node.threadPool.memtableReclaimMemory.activeTasks db.threadpool.internalMemtableReclaimMemoryActiveTasks Cassandra cassandra.node.threadPool.memtableReclaimMemory.completedTasks db.threadpool.internalMemtableReclaimMemoryCompletedTasks Cassandra cassandra.node.threadPool.memtableReclaimMemory.currentlyBlockedTasks db.threadpool.internalMemtableReclaimMemoryCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.memtableReclaimMemory.pendingTasks db.threadpool.internalMemtableReclaimMemoryPendingTasks Cassandra cassandra.node.threadPool.migrationStage.activeTasks db.threadpool.internalMigrationStageActiveTasks Cassandra cassandra.node.threadPool.migrationStage.completedTasks db.threadpool.internalMigrationStageCompletedTasks Cassandra cassandra.node.threadPool.migrationStage.currentlyBlockedTasks db.threadpool.internalMigrationStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.migrationStage.pendingTasks db.threadpool.internalMigrationStagePendingTasks Cassandra cassandra.node.threadPool.miscStage.activeTasks db.threadpool.internalMiscStageActiveTasks Cassandra cassandra.node.threadPool.miscStage.completedTasks db.threadpool.internalMiscStageCompletedTasks Cassandra cassandra.node.threadPool.miscStage.currentlyBlockedTasks db.threadpool.internalMiscStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.miscStage.pendingTasks db.threadpool.internalMiscStagePendingTasks Cassandra cassandra.node.threadPool.mutationStage.activeTasks db.threadpool.requestMutationStageActiveTasks Cassandra cassandra.node.threadPool.mutationStage.completedTasks db.threadpool.requestMutationStageCompletedTasks Cassandra cassandra.node.threadPool.mutationStage.currentlyBlockedTasks db.threadpool.requestMutationStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.mutationStage.pendingTasks db.threadpool.requestMutationStagePendingTasks Cassandra cassandra.node.threadPool.pendingRangeCalculator.activeTasks db.threadpool.internalPendingRangeCalculatorActiveTasks Cassandra cassandra.node.threadPool.pendingRangeCalculator.completedTasks db.threadpool.internalPendingRangeCalculatorCompletedTasks Cassandra cassandra.node.threadPool.pendingRangeCalculator.currentlyBlockedTasks db.threadpool.internalPendingRangeCalculatorCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.pendingRangeCalculator.pendingTasks db.threadpool.internalPendingRangeCalculatorPendingTasks Cassandra cassandra.node.threadPool.readRepairStage.activeTasks db.threadpool.requestReadRepairStageActiveTasks Cassandra cassandra.node.threadPool.readRepairStage.completedTasks db.threadpool.requestReadRepairStageCompletedTasks Cassandra cassandra.node.threadPool.readRepairStage.currentlyBlockedTasks db.threadpool.requestReadRepairStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.readRepairStage.pendingTasks db.threadpool.requestReadRepairStagePendingTasks Cassandra cassandra.node.threadPool.readStage.activeTasks db.threadpool.requestReadStageActiveTasks Cassandra cassandra.node.threadPool.readStage.completedTasks db.threadpool.requestReadStageCompletedTasks Cassandra cassandra.node.threadPool.readStage.currentlyBlockedTasks db.threadpool.requestReadStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.readStage.pendingTasks db.threadpool.requestReadStagePendingTasks Cassandra cassandra.node.threadPool.requestResponseStage.activeTasks db.threadpool.requestRequestResponseStageActiveTasks Cassandra cassandra.node.threadPool.requestResponseStage.completedTasks db.threadpool.requestRequestResponseStageCompletedTasks Cassandra cassandra.node.threadPool.requestResponseStage.currentlyBlockedTasks db.threadpool.requestRequestResponseStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.requestResponseStage.pendingTasks db.threadpool.requestRequestResponseStagePendingTasks Cassandra cassandra.node.threadPool.sampler.activeTasks db.threadpool.internalSamplerActiveTasks Cassandra cassandra.node.threadPool.sampler.completedTasks db.threadpool.internalSamplerCompletedTasks Cassandra cassandra.node.threadPool.sampler.currentlyBlockedTasks db.threadpool.internalSamplerCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.sampler.pendingTasks db.threadpool.internalSamplerPendingTasks Cassandra cassandra.node.threadPool.secondaryIndexManagement.activeTasks db.threadpool.internalSecondaryIndexManagementActiveTasks Cassandra cassandra.node.threadPool.secondaryIndexManagement.completedTasks db.threadpool.internalSecondaryIndexManagementCompletedTasks Cassandra cassandra.node.threadPool.secondaryIndexManagement.currentlyBlockedTasks db.threadpool.internalSecondaryIndexManagementCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.secondaryIndexManagement.pendingTasks db.threadpool.internalSecondaryIndexManagementPendingTasks Cassandra cassandra.node.threadPool.validationExecutor.activeTasks db.threadpool.internalValidationExecutorActiveTasks Cassandra cassandra.node.threadPool.validationExecutor.completedTasks db.threadpool.internalValidationExecutorCompletedTasks Cassandra cassandra.node.threadPool.validationExecutor.currentlyBlockedTasks db.threadpool.internalValidationExecutorCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.validationExecutor.pendingTasks db.threadpool.internalValidationExecutorPendingTasks Cassandra cassandra.node.threadPool.viewMutationStage.activeTasks db.threadpool.requestViewMutationStageActiveTasks Cassandra cassandra.node.threadPool.viewMutationStage.completedTasks db.threadpool.requestViewMutationStageCompletedTasks Cassandra cassandra.node.threadPool.viewMutationStage.currentlyBlockedTasks db.threadpool.requestViewMutationStageCurrentlyBlockedTasks Cassandra cassandra.node.threadPool.viewMutationStage.pendingTasks db.threadpool.requestViewMutationStagePendingTasks Cassandra cassandra.node.totalHintsInProgress db.totalHintsInProgress Cassandra cassandra.node.totalHintsPerSecond db.totalHintsPerSecond Cassandra cassandra.columnFamily.allMemtablesOffHeapSizeBytes db.allMemtablesOffHeapSizeBytes Cassandra cassandra.columnFamily.allMemtablesOnHeapSizeBytes db.allMemtablesOnHeapSizeBytes Cassandra cassandra.columnFamily.bloomFilterFalseRatio db.bloomFilterFalseRatio Cassandra cassandra.columnFamily.liveDiskSpaceUsedBytes db.liveDiskSpaceUsedBytes Cassandra cassandra.columnFamily.liveSsTableCount db.liveSSTableCount Cassandra cassandra.columnFamily.maxRowSize db.maxRowSize Cassandra cassandra.columnFamily.meanRowSize db.meanRowSize Cassandra cassandra.columnFamily.memtableLiveDataSize db.memtableLiveDataSize Cassandra cassandra.columnFamily.minRowSize db.minRowSize Cassandra cassandra.columnFamily.pendingCompactions db.pendingCompactions Cassandra cassandra.columnFamily.query.readLatency50ThPercentileMilliseconds query.readLatency50thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency75ThPercentileMilliseconds query.readLatency75thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency95ThPercentileMilliseconds query.readLatency95thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency98ThPercentileMilliseconds query.readLatency98thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency999ThPercentileMilliseconds query.readLatency999thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readLatency99ThPercentileMilliseconds query.readLatency99thPercentileMilliseconds Cassandra cassandra.columnFamily.query.readRequestsPerSecond query.readRequestsPerSecond Cassandra cassandra.columnFamily.query.writeLatency50ThPercentileMilliseconds query.writeLatency50thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency75ThPercentileMilliseconds query.writeLatency75thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency95ThPercentileMilliseconds query.writeLatency95thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency98ThPercentileMilliseconds query.writeLatency98thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency999ThPercentileMilliseconds query.writeLatency999thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeLatency99ThPercentileMilliseconds query.writeLatency99thPercentileMilliseconds Cassandra cassandra.columnFamily.query.writeRequestsPerSecond query.writeRequestsPerSecond Cassandra cassandra.columnFamily.speculativeRetries db.speculativeRetries Cassandra cassandra.columnFamily.ssTablesPerRead50ThPercentileMilliseconds db.SSTablesPerRead50thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead75ThPercentileMilliseconds db.SSTablesPerRead75thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead95ThPercentileMilliseconds db.SSTablesPerRead95thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead98ThPercentileMilliseconds db.SSTablesPerRead98thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead999ThPercentileMilliseconds db.SSTablesPerRead999thPercentileMilliseconds Cassandra cassandra.columnFamily.ssTablesPerRead99ThPercentileMilliseconds db.SSTablesPerRead99thPercentileMilliseconds Cassandra cassandra.columnFamily.tombstoneScannedHistogram50ThPercentile db.tombstoneScannedHistogram50thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram75ThPercentile db.tombstoneScannedHistogram75thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram95ThPercentile db.tombstoneScannedHistogram95thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram98ThPercentile db.tombstoneScannedHistogram98thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram999ThPercentile db.tombstoneScannedHistogram999thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogram99ThPercentile db.tombstoneScannedHistogram99thPercentile Cassandra cassandra.columnFamily.tombstoneScannedHistogramCount db.tombstoneScannedHistogramCount Consul consul.datacenter.catalog.criticalNodes catalog.criticalNodes Consul consul.datacenter.catalog.passingNodes catalog.passingNodes Consul consul.datacenter.catalog.registeredNodes catalog.registeredNodes Consul consul.datacenter.catalog.upNodes catalog.upNodes Consul consul.datacenter.catalog.warningNodes catalog.warningNodes Consul consul.datacenter.cluster.flaps cluster.flaps Consul consul.datacenter.cluster.suspects cluster.suspects Consul consul.datacenter.raft.commitTime raft.commitTimes Consul consul.datacenter.raft.commitTimeAvgInMilliseconds raft.commitTimeAvgInMilliseconds Consul consul.datacenter.raft.commitTimeMaxInMilliseconds raft.commitTimeMaxInMilliseconds Consul consul.datacenter.raft.completedLeaderElections raft.completedLeaderElections Consul consul.datacenter.raft.initiatedLeaderElections raft.initiatedLeaderElections Consul consul.datacenter.raft.lastContactAvgInMilliseconds raft.lastContactAvgInMilliseconds Consul consul.datacenter.raft.lastContactMaxInMilliseconds raft.lastContactMaxInMilliseconds Consul consul.datacenter.raft.lastContacts raft.lastContacts Consul consul.datacenter.raft.logDispatchAvgInMilliseconds raft.logDispatchAvgInMilliseconds Consul consul.datacenter.raft.logDispatches raft.logDispatches Consul consul.datacenter.raft.logDispatchMaxInMilliseconds raft.logDispatchMaxInMilliseconds Consul consul.datacenter.raft.txns raft.txns Consul consul.agent.aclCacheHitPerSecond agent.aclCacheHit Consul consul.agent.aclCacheMissPerSecond agent.aclCacheMiss Consul consul.agent.client.rpcFailed client.rpcFailed Consul consul.agent.client.rpcLoad client.rpcLoad Consul consul.agent.kvStores agent.kvStoress Consul consul.agent.kvStoresAvgInMilliseconds agent.kvStoresAvgInMilliseconds Consul consul.agent.kvStoresMaxInMilliseconds agent.kvStoresMaxInMilliseconds Consul consul.agent.net.agent.maxLatencyInMilliseconds net.agent.maxLatencyInMilliseconds Consul consul.agent.net.medianLatencyInMilliseconds net.agent.medianLatencyInMilliseconds Consul consul.agent.net.minLatencyInMilliseconds net.agent.minLatencyInMilliseconds Consul consul.agent.net.p25LatencyInMilliseconds net.agent.p25LatencyInMilliseconds Consul consul.agent.net.p75LatencyInMilliseconds net.agent.p75LatencyInMilliseconds Consul consul.agent.net.p90LatencyInMilliseconds net.agent.p90LatencyInMilliseconds Consul consul.agent.net.p95LatencyInMilliseconds net.agent.p95LatencyInMilliseconds Consul consul.agent.net.p99LatencyInMilliseconds net.agent.p99LatencyInMilliseconds Consul consul.agent.peers agent.peers Consul consul.agent.runtime.allocations runtime.allocations Consul consul.agent.runtime.allocationsInBytes runtime.allocationsInBytes Consul consul.agent.runtime.frees runtime.frees Consul consul.agent.runtime.gcCycles runtime.gcCycles Consul consul.agent.runtime.gcPauseInMilliseconds runtime.gcPauseInMilliseconds Consul consul.agent.runtime.goroutines runtime.goroutines Consul consul.agent.runtime.heapObjects runtime.heapObjects Consul consul.agent.runtime.virtualAddressSpaceInBytes runtime.virtualAddressSpaceInBytes Consul consul.agent.staleQueries agent.staleQueries Consul consul.agent.txnAvgInMilliseconds agent.txnAvgInMilliseconds Consul consul.agent.txnMaxInMilliseconds agent.txnMaxInMilliseconds Consul consul.agent.txns agent.txns Couchbase couchbase.bucket.activeItemsEnteringDiskQueuePerSecond bucket.activeItemsEnteringDiskQueuePerSecond Couchbase couchbase.bucket.activeItemsInMemory bucket.activeItemsInMemory Couchbase couchbase.bucket.activeResidentItemsRatio bucket.activeResidentItemsRatio Couchbase couchbase.bucket.averageDiskCommitTimeInMilliseconds bucket.averageDiskCommitTimeInMilliseconds Couchbase couchbase.bucket.averageDiskUpdateTimeInMilliseconds bucket.averageDiskUpdateTimeInMilliseconds Couchbase couchbase.bucket.cacheMisses bucket.cacheMisses Couchbase couchbase.bucket.cacheMissRatio bucket.cacheMissRatio Couchbase couchbase.bucket.casHits bucket.casHits Couchbase couchbase.bucket.casMisses bucket.casMisses Couchbase couchbase.bucket.couchDocsFragmentationPercent bucket.couchDocsFragmentationPercent Couchbase couchbase.bucket.currentConnections bucket.currentConnections Couchbase couchbase.bucket.dataUsedInBytes bucket.dataUsedInBytes Couchbase couchbase.bucket.decrementHitsPerSecond bucket.decrementHitsPerSecond Couchbase couchbase.bucket.decrementMissesPerSecond bucket.decrementMissesPerSecond Couchbase couchbase.bucket.deleteHitsPerSecond bucket.deleteHitsPerSecond Couchbase couchbase.bucket.deleteMissesPerSecond bucket.deleteMissesPerSecond Couchbase couchbase.bucket.diskCreateOperationsPerSecond bucket.diskCreateOperationsPerSecond Couchbase couchbase.bucket.diskFetchesPerSecond bucket.diskFetchesPerSecond Couchbase couchbase.bucket.diskReadsPerSecond bucket.diskReadsPerSecond Couchbase couchbase.bucket.diskUpdateOperationsPerSecond bucket.diskUpdateOperationsPerSecond Couchbase couchbase.bucket.diskUsedInBytes bucket.diskUsedInBytes Couchbase couchbase.bucket.diskWriteQueue bucket.diskWriteQueue Couchbase couchbase.bucket.drainedItemsInQueue bucket.drainedItemsInQueue Couchbase couchbase.bucket.drainedItemsOnDiskQueue bucket.drainedItemsOnDiskQueue Couchbase couchbase.bucket.drainedPendingItemsInQueue bucket.drainedPendingItemsInQueue Couchbase couchbase.bucket.ejectionsPerSecond bucket.ejectionsPerSecond Couchbase couchbase.bucket.evictionsPerSecond bucket.evictionsPerSecond Couchbase couchbase.bucket.getHitsPerSecond bucket.getHitsPerSecond Couchbase couchbase.bucket.getMissesPerSecond bucket.getMissesPerSecond Couchbase couchbase.bucket.hitRatio bucket.hitRatio Couchbase couchbase.bucket.incrementHitsPerSecond bucket.incrementHitsPerSecond Couchbase couchbase.bucket.incrementMissesPerSecond bucket.incrementMissesPerSecond Couchbase couchbase.bucket.itemCount bucket.itemCount Couchbase couchbase.bucket.itemsBeingWritten bucket.itemsBeingWritten Couchbase couchbase.bucket.itemsEjectedFromMemoryToDisk bucket.itemsEjectedFromMemoryToDisk Couchbase couchbase.bucket.itemsOnDiskQueue bucket.itemsOnDiskQueue Couchbase couchbase.bucket.itemsQueuedForStorage bucket.itemsQueuedForStorage Couchbase couchbase.bucket.maximumMemoryUsage bucket.maximumMemoryUsage Couchbase couchbase.bucket.memoryHighWaterMarkInBytes bucket.memoryHighWaterMarkInBytes Couchbase couchbase.bucket.memoryLowWaterMarkInBytes bucket.memoryLowWaterMarkInBytes Couchbase couchbase.bucket.memoryUsedInBytes bucket.memoryUsedInBytes Couchbase couchbase.bucket.metadataInRamInBytes bucket.metadataInRAMInBytes Couchbase couchbase.bucket.missesPerSecond bucket.missesPerSecond Couchbase couchbase.bucket.outOfMemoryErrorsPerSecond bucket.outOfMemoryErrorsPerSecond Couchbase couchbase.bucket.overheadInBytes bucket.overheadInBytes Couchbase couchbase.bucket.pendingItemsInDiskQueue bucket.pendingItemsInDiskQueue Couchbase couchbase.bucket.pendingResidentItemsRatio bucket.pendingResidentItemsRatio Couchbase couchbase.bucket.quotaUtilization bucket.quotaUtilization Couchbase couchbase.bucket.readOperationsPerSecond bucket.readOperationsPerSecond Couchbase couchbase.bucket.readRatePerSecond bucket.readRatePerSecond Couchbase couchbase.bucket.recoverableOutOfMemoryCount bucket.recoverableOutOfMemoryCount Couchbase couchbase.bucket.replicaIndex bucket.replicaIndex Couchbase couchbase.bucket.replicaNumber bucket.replicaNumber Couchbase couchbase.bucket.replicaResidentItemsRatio bucket.replicaResidentItemsRatio Couchbase couchbase.bucket.residentItemsRatio bucket.residentItemsRatio Couchbase couchbase.bucket.temporaryOutOfMemoryErrorsPerSecond bucket.temporaryOutOfMemoryErrorsPerSecond Couchbase couchbase.bucket.threadsNumber bucket.threadsNumber Couchbase couchbase.bucket.totalItems bucket.totalItems Couchbase couchbase.bucket.totalOperationsPerSecond bucket.totalOperationsPerSecond Couchbase couchbase.bucket.viewFragmentationPercent bucket.viewFragmentationPercent Couchbase couchbase.bucket.writeOperationsPerSecond bucket.writeOperationsPerSecond Couchbase couchbase.bucket.writeRatePerSecond bucket.writeRatePerSecond Couchbase couchbase.cluster.autoFailoverCount cluster.autoFailoverCount Couchbase couchbase.cluster.autoFailoverEnabled cluster.autoFailoverEnabled Couchbase couchbase.cluster.databaseFragmentationThreshold cluster.databaseFragmentationThreshold Couchbase couchbase.cluster.diskFreeInBytes cluster.diskFreeInBytes Couchbase couchbase.cluster.diskQuotaTotalInBytes cluster.diskQuotaTotalInBytes Couchbase couchbase.cluster.diskTotalInBytes cluster.diskTotalInBytes Couchbase couchbase.cluster.diskUsedByDataInBytes cluster.diskUsedByDataInBytes Couchbase couchbase.cluster.diskUsedInBytes cluster.diskUsedInBytes Couchbase couchbase.cluster.indexFragmentationThreshold cluster.indexFragmentationThreshold Couchbase couchbase.cluster.maximumBucketCount cluster.maximumBucketCount Couchbase couchbase.cluster.memoryQuotaTotalInBytes cluster.memoryQuotaTotalInBytes Couchbase couchbase.cluster.memoryQuotaTotalPerNodeInBytes cluster.memoryQuotaTotalPerNodeInBytes Couchbase couchbase.cluster.memoryQuotaUsedInBytes cluster.memoryQuotaUsedInBytes Couchbase couchbase.cluster.memoryQuotaUsedPerNodeInBytes cluster.memoryQuotaUsedPerNodeInBytes Couchbase couchbase.cluster.memoryTotalInBytes cluster.memoryTotalInBytes Couchbase couchbase.cluster.memoryUsedByDataInBytes cluster.memoryUsedByDataInBytes Couchbase couchbase.cluster.memoryUsedInBytes cluster.memoryUsedInBytes Couchbase couchbase.cluster.viewFragmentationThreshold cluster.viewFragmentationThreshold Couchbase couchbase.node.backgroundFetches node.backgroundFetches Couchbase couchbase.node.cmdGet node.cmdGet Couchbase couchbase.node.couchDocsActualDiskSizeInBytes node.couchDocsActualDiskSizeInBytes Couchbase couchbase.node.couchDocsDataSizeInBytes node.couchDocsDataSizeInBytes Couchbase couchbase.node.couchSpatialDataSizeInBytes node.couchSpatialDataSizeInBytes Couchbase couchbase.node.couchSpatialDiskSizeInBytes node.couchSpatialDiskSizeInBytes Couchbase couchbase.node.couchViewsActualDiskSizeInBytes node.couchViewsActualDiskSizeInBytes Couchbase couchbase.node.couchViewsDataSizeInBytes node.couchViewsDataSizeInBytes Couchbase couchbase.node.cpuUtilization node.cpuUtilization Couchbase couchbase.node.currentItems node.currentItems Couchbase couchbase.node.currentItemsTotal node.currentItemsTotal Couchbase couchbase.node.getHits node.getHits Couchbase couchbase.node.memoryFreeInBytes node.memoryFreeInBytes Couchbase couchbase.node.memoryTotalInBytes node.memoryTotalInBytes Couchbase couchbase.node.memoryUsedInBytes node.memoryUsedInBytes Couchbase couchbase.node.ops node.ops Couchbase couchbase.node.swapTotalInBytes node.swapTotalInBytes Couchbase couchbase.node.swapUsedInBytes node.swapUsedInBytes Couchbase couchbase.node.uptimeInMilliseconds node.uptimeInMilliseconds Couchbase couchbase.node.vbucketActiveNonResidentItems node.vbucketActiveNonResidentItems Couchbase couchbase.node.vbucketInMemoryItems node.vbucketInMemoryItems Couchbase couchbase.queryengine.activeRequests queryengine.activeRequests Couchbase couchbase.queryengine.averageRequestTimeInMilliseconds queryengine.averageRequestTimeInMilliseconds Couchbase couchbase.queryengine.completedLimit queryengine.completedLimit Couchbase couchbase.queryengine.completedRequests queryengine.completedRequests Couchbase couchbase.queryengine.completedThresholdInMilliseconds queryengine.completedThresholdInMilliseconds Couchbase couchbase.queryengine.cores queryengine.cores Couchbase couchbase.queryengine.garbageCollectionNumber queryengine.garbageCollectionNumber Couchbase couchbase.queryengine.garbageCollectionPaused queryengine.garbageCollectionPaused Couchbase couchbase.queryengine.garbageCollectionTimePausedInMilliseconds queryengine.garbageCollectionTimePausedInMilliseconds Couchbase couchbase.queryengine.medianRequestTimeInMilliseconds queryengine.medianRequestTimeInMilliseconds Couchbase couchbase.queryengine.preparedStatementUtilization queryengine.preparedStatementUtilization Couchbase couchbase.queryengine.requestsLast15MinutesPerSecond queryengine.requestsLast15MinutesPerSecond Couchbase couchbase.queryengine.requestsLast1MinutesPerSecond queryengine.requestsLast1MinutesPerSecond Couchbase couchbase.queryengine.requestsLast5MinutesPerSecond queryengine.requestsLast5MinutesPerSecond Couchbase couchbase.queryengine.requestTime80thPercentileInMilliseconds queryengine.requestTime80thPercentileInMilliseconds Couchbase couchbase.queryengine.requestTime95thPercentileInMilliseconds queryengine.requestTime95thPercentileInMilliseconds Couchbase couchbase.queryengine.requestTime99thPercentileInMilliseconds queryengine.requestTime99thPercentileInMilliseconds Couchbase couchbase.queryengine.systemCpuUtilization queryengine.systemCPUUtilization Couchbase couchbase.queryengine.systemMemoryInBytes queryengine.systemMemoryInBytes Couchbase couchbase.queryengine.totalMemoryInBytes queryengine.totalMemoryInBytes Couchbase couchbase.queryengine.totalThreads queryengine.totalThreads Couchbase couchbase.queryengine.uptimeInMilliseconds queryengine.uptimeInMilliseconds Couchbase couchbase.queryengine.usedMemoryInBytes queryengine.usedMemoryInBytes Couchbase couchbase.queryengine.userCpuUtilization queryengine.userCPUUtilization Docker docker.container.cpuKernelPercent cpuKernelPercent Docker docker.container.cpuLimitCores cpuLimitCores Docker docker.container.cpuPercent cpuPercent Docker docker.container.cpuThrottlePeriods cpuThrottlePeriods Docker docker.container.cpuThrottleTimeMs cpuThrottleTimeMs Docker docker.container.cpuUsedCores cpuUsedCores Docker docker.container.cpuUsedCoresPercent cpuUsedCoresPercent Docker docker.container.cpuUserPercent cpuUserPercent Docker docker.container.ioReadBytesPerSecond ioReadBytesPerSecond Docker docker.container.ioReadCountPerSecond ioReadCountPerSecond Docker docker.container.ioTotalBytes ioTotalBytes Docker docker.container.ioTotalReadBytes ioTotalReadBytes Docker docker.container.ioTotalReadCount ioTotalReadCount Docker docker.container.ioTotalWriteBytes ioTotalWriteBytes Docker docker.container.ioTotalWriteCount ioTotalWriteCount Docker docker.container.ioWriteBytesPerSecond ioWriteBytesPerSecond Docker docker.container.ioWriteCountPerSecond ioWriteCountPerSecond Docker docker.container.memoryCacheBytes memoryCacheBytes Docker docker.container.memoryResidentSizeBytes memoryResidentSizeBytes Docker docker.container.memorySizeLimitBytes memorySizeLimitBytes Docker docker.container.memoryUsageBytes memoryUsageBytes Docker docker.container.memoryUsageLimitPercent memoryUsageLimitPercent Docker docker.container.networkRxBytes networkRxBytes Docker docker.container.networkRxBytesPerSecond networkRxBytesPerSecond Docker docker.container.networkRxDropped networkRxDropped Docker docker.container.networkRxDroppedPerSecond networkRxDroppedPerSecond Docker docker.container.networkRxErrors networkRxErrors Docker docker.container.networkRxErrorsPerSecond networkRxErrorsPerSecond Docker docker.container.networkRxPackets networkRxPackets Docker docker.container.networkRxPacketsPerSecond networkRxPacketsPerSecond Docker docker.container.networkTxBytes networkTxBytes Docker docker.container.networkTxBytesPerSecond networkTxBytesPerSecond Docker docker.container.networkTxDropped networkTxDropped Docker docker.container.networkTxDroppedPerSecond networkTxDroppedPerSecond Docker docker.container.networkTxErrors networkTxErrors Docker docker.container.networkTxErrorsPerSecond networkTxErrorsPerSecond Docker docker.container.networkTxPackets networkTxPackets Docker docker.container.networkTxPacketsPerSecond networkTxPacketsPerSecond Docker docker.container.pids pids Docker docker.container.processCount processCount Docker docker.container.processCountLimit processCountLimit Docker docker.container.restartCount restartCount Docker docker.container.threadCount threadCount Docker docker.container.threadCountLimit threadCountLimit ElasticSearch elasticsearch.cluster.dataNodes cluster.dataNodes ElasticSearch elasticsearch.cluster.nodes cluster.nodes ElasticSearch elasticsearch.cluster.shards.active shards.active ElasticSearch elasticsearch.cluster.shards.initializing shards.initializing ElasticSearch elasticsearch.cluster.shards.primaryActive shards.primaryActive ElasticSearch elasticsearch.cluster.shards.relocating shards.relocating ElasticSearch elasticsearch.cluster.shards.unassigned shards.unassigned ElasticSearch elasticsearch.cluster.tempData temp-data ElasticSearch elasticsearch.index.docs index.docs ElasticSearch elasticsearch.index.docsDeleted index.docsDeleted ElasticSearch elasticsearch.index.primaryShards index.primaryShards ElasticSearch elasticsearch.index.primaryStoreSizeInBytes index.primaryStoreSizeInBytes ElasticSearch elasticsearch.index.replicaShards index.replicaShards ElasticSearch elasticsearch.index.rollup.docsCount primaries.docsnumber ElasticSearch elasticsearch.index.rollup.docsDeleted primaries.docsDeleted ElasticSearch elasticsearch.index.rollup.flushTotal primaries.flushesTotal ElasticSearch elasticsearch.index.rollup.flushTotalTimeInMilliseconds primaries.flushTotalTimeInMilliseconds ElasticSearch elasticsearch.index.rollup.get.documentsExist primaries.get.documentsExist ElasticSearch elasticsearch.index.rollup.get.documentsExistInMilliseconds primaries.get.documentsExistInMilliseconds ElasticSearch elasticsearch.index.rollup.get.documentsMissing primaries.get.documentsMissing ElasticSearch elasticsearch.index.rollup.get.documentsMissingInMilliseconds primaries.get.documentsMissingInMilliseconds ElasticSearch elasticsearch.index.rollup.get.requests primaries.get.requests ElasticSearch elasticsearch.index.rollup.get.requestsCurrent primaries.get.requestsCurrent ElasticSearch elasticsearch.index.rollup.get.requestsInMilliseconds primaries.get.requestsInMilliseconds ElasticSearch elasticsearch.index.rollup.index.docsCurrentlyDeleted primaries.index.docsCurrentlyDeleted ElasticSearch elasticsearch.index.rollup.index.docsCurrentlyDeletedInMilliseconds primaries.index.docsCurrentlyDeletedInMilliseconds ElasticSearch elasticsearch.index.rollup.index.docsCurrentlyIndexing primaries.index.docsCurrentlyIndexing ElasticSearch elasticsearch.index.rollup.index.docsCurrentlyIndexingInMilliseconds primaries.index.docsCurrentlyIndexingInMilliseconds ElasticSearch elasticsearch.index.rollup.index.docsDeleted primaries.index.docsDeleted ElasticSearch elasticsearch.index.rollup.index.docsTotal primaries.index.docsTotal ElasticSearch elasticsearch.index.rollup.indexRefreshesTotal primaries.indexRefreshesTotal ElasticSearch elasticsearch.index.rollup.indexRefreshesTotalInMilliseconds primaries.indexRefreshesTotalInMilliseconds ElasticSearch elasticsearch.index.rollup.merges.current primaries.merges.current ElasticSearch elasticsearch.index.rollup.merges.docsSegmentsCurrentlyMerged primaries.merges.docsSegmentsCurrentlyMerged ElasticSearch elasticsearch.index.rollup.merges.docsTotal primaries.merges.docsTotal ElasticSearch elasticsearch.index.rollup.merges.segmentsCurrentlyMergedInBytes primaries.merges.segmentsCurrentlyMergedInBytes ElasticSearch elasticsearch.index.rollup.merges.segmentsTotal primaries.merges.segmentsTotal ElasticSearch elasticsearch.index.rollup.merges.segmentsTotalInBytes primaries.merges.segmentsTotalInBytes ElasticSearch elasticsearch.index.rollup.merges.segmentsTotalInMilliseconds primaries.merges.segmentsTotalInMilliseconds ElasticSearch elasticsearch.index.rollup.queriesInMilliseconds primaries.queriesInMilliseconds ElasticSearch elasticsearch.index.rollup.queriesTotal primaries.queriesTotal ElasticSearch elasticsearch.index.rollup.queryActive primaries.queryActive ElasticSearch elasticsearch.index.rollup.queryFetches primaries.queryFetches ElasticSearch elasticsearch.index.rollup.queryFetchesInMilliseconds primaries.queryFetchesInMilliseconds ElasticSearch elasticsearch.index.rollup.queryFetchesTotal primaries.queryFetchesTotal ElasticSearch elasticsearch.index.rollup.sizeInBytes primaries.sizeInBytes ElasticSearch elasticsearch.index.storeSizeInBytes index.storeSizeInBytes ElasticSearch elasticsearch.node.activeSearches activeSearches ElasticSearch elasticsearch.node.activeSearchesInMilliseconds activeSearchesInMilliseconds ElasticSearch elasticsearch.node.breakers.estimatedSizeFieldDataCircuitBreakerInBytes breakers.estimatedSizeFieldDataCircuitBreakerInBytes ElasticSearch elasticsearch.node.breakers.estimatedSizeParentCircuitBreakerInBytes breakers.estimatedSizeParentCircuitBreakerInBytes ElasticSearch elasticsearch.node.breakers.estimatedSizeRequestCircuitBreakerInBytes breakers.estimatedSizeRequestCircuitBreakerInBytes ElasticSearch elasticsearch.node.breakers.fieldDataCircuitBreakerTripped breakers.fieldDataCircuitBreakerTripped ElasticSearch elasticsearch.node.breakers.parentCircuitBreakerTripped breakers.parentCircuitBreakerTripped ElasticSearch elasticsearch.node.breakers.requestCircuitBreakerTripped breakers.requestCircuitBreakerTripped ElasticSearch elasticsearch.node.flush.indexRefreshesTotal flush.indexRefreshesTotal ElasticSearch elasticsearch.node.flush.indexRefreshesTotalInMilliseconds flush.indexRefreshesTotalInMilliseconds ElasticSearch elasticsearch.node.fs.bytesAvailableJvmInBytes fs.bytesAvailableJVMInBytes ElasticSearch elasticsearch.node.fs.dataRead fs.bytesReadsInBytes ElasticSearch elasticsearch.node.fs.dataWritten fs.writesInBytes ElasticSearch elasticsearch.node.fs.ioOperations fs.iOOperations ElasticSearch elasticsearch.node.fs.readOperations fs.reads ElasticSearch elasticsearch.node.fs.totalSizeInBytes fs.totalSizeInBytes ElasticSearch elasticsearch.node.fs.unallocatedBytes fs.unallocatedBytesInBYtes ElasticSearch elasticsearch.node.fs.writeOperations fs.writeOperations ElasticSearch elasticsearch.node.get.currentRequestsRunning get.currentRequestsRunning ElasticSearch elasticsearch.node.get.requestsDocumentExists get.requestsDocumentExists ElasticSearch elasticsearch.node.get.requestsDocumentExistsInMilliseconds get.requestsDocumentExistsInMilliseconds ElasticSearch elasticsearch.node.get.requestsDocumentMissing get.requestsDocumentMissing ElasticSearch elasticsearch.node.get.requestsDocumentMissingInMilliseconds get.requestsDocumentMissingInMilliseconds ElasticSearch elasticsearch.node.get.timeGetRequestsInMilliseconds get.timeGetRequestsInMilliseconds ElasticSearch elasticsearch.node.get.totalGetRequests get.totalGetRequests ElasticSearch elasticsearch.node.http.currentOpenConnections http.currentOpenConnections ElasticSearch elasticsearch.node.http.openedConnections http.openedConnections ElasticSearch elasticsearch.node.index.indexingOperationsFailed indices.indexingOperationsFailed ElasticSearch elasticsearch.node.index.indexingWaitedThrottlingInMilliseconds indices.indexingWaitedThrottlingInMilliseconds ElasticSearch elasticsearch.node.index.memoryQueryCacheInBytes indices.memoryQueryCacheInBytes ElasticSearch elasticsearch.node.index.numberIndices indices.numberIndices ElasticSearch elasticsearch.node.index.queryCacheEvictions indices.queryCacheEvictions ElasticSearch elasticsearch.node.index.queryCacheHits indices.queryCacheHits ElasticSearch elasticsearch.node.index.queryCacheMisses indices.queryCacheMisses ElasticSearch elasticsearch.node.index.recoveryOngoingShardSource indices.recoveryOngoingShardSource ElasticSearch elasticsearch.node.index.recoveryOngoingShardTarget indices.recoveryOngoingShardTarget ElasticSearch elasticsearch.node.index.recoveryWaitedThrottlingInMilliseconds indices.recoveryWaitedThrottlingInMilliseconds ElasticSearch elasticsearch.node.index.requestCacheEvictions indices.requestCacheEvictions ElasticSearch elasticsearch.node.index.requestCacheHits indices.requestCacheHits ElasticSearch elasticsearch.node.index.requestCacheMemoryInBytes indices.requestCacheMemoryInBytes ElasticSearch elasticsearch.node.index.requestCacheMisses indices.requestCacheMisses ElasticSearch elasticsearch.node.index.segmentsIndexShard indices.segmentsIndexShard ElasticSearch elasticsearch.node.index.segmentsMemoryUsedDocValuesInBytes indices.segmentsMemoryUsedDocValuesInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedFixedBitSetInBytes indices.segmentsMemoryUsedFixedBitSetInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedIndexSegmentsInBytes indices.segmentsMemoryUsedIndexSegmentsInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedIndexWriterInBytes indices.segmentsMemoryUsedIndexWriterInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedNormsInBytes indices.segmentsMemoryUsedNormsInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedSegmentVersionMapInBytes indices.segmentsMemoryUsedSegmentVersionMapInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedStoredFieldsInBytes indices.segmentsMemoryUsedStoredFieldsInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedTermsInBytes indices.segmentsMemoryUsedTermsInBytes ElasticSearch elasticsearch.node.index.segmentsMemoryUsedTermVectorsInBytes indices.segmentsMemoryUsedTermVectorsInBytes ElasticSearch elasticsearch.node.index.translogOperations indices.translogOperations ElasticSearch elasticsearch.node.index.translogOperationsInBytes indices.translogOperationsInBytes ElasticSearch elasticsearch.node.indexing.docsCurrentlyDeleted indexing.docsCurrentlyDeleted ElasticSearch elasticsearch.node.indexing.documentsCurrentlyIndexing indexing.documentsCurrentlyIndexing ElasticSearch elasticsearch.node.indexing.documentsIndexed indexing.documentsIndexed ElasticSearch elasticsearch.node.indexing.timeDeletingDocumentsInMilliseconds indexing.timeDeletingDocumentsInMilliseconds ElasticSearch elasticsearch.node.indexing.timeIndexingDocumentsInMilliseconds indexing.timeIndexingDocumentsInMilliseconds ElasticSearch elasticsearch.node.indexing.totalDocumentsDeleted indexing.totalDocumentsDeleted ElasticSearch elasticsearch.node.jvm.gc.majorCollectionsOldGenerationObjects jvm.gc.majorCollectionsOldGenerationObjects ElasticSearch elasticsearch.node.jvm.gc.majorCollectionsOldGenerationObjectsInMilliseconds jvm.gc.majorCollectionsOldGenerationObjectsInMilliseconds ElasticSearch elasticsearch.node.jvm.gc.majorCollectionsYoungGenerationObjects jvm.gc.majorCollectionsYoungGenerationObjects ElasticSearch elasticsearch.node.jvm.gc.majorCollectionsYoungGenerationObjectsInMilliseconds jvm.gc.majorCollectionsYoungGenerationObjectsInMilliseconds ElasticSearch elasticsearch.node.jvm.gc.minorCollectionsYoungGenerationObjects jvm.gc.minorCollectionsYoungGenerationObjects ElasticSearch elasticsearch.node.jvm.gc.minorCollectionsYoungGenerationObjectsInMilliseconds jvm.gc.minorCollectionsYoungGenerationObjectsInMilliseconds ElasticSearch elasticsearch.node.jvm.mem.heapCommittedInBytes jvm.mem.heapCommittedInBytes ElasticSearch elasticsearch.node.jvm.mem.heapMaxInBytes jvm.mem.heapMaxInBytes ElasticSearch elasticsearch.node.jvm.mem.heapUsed jvm.mem.heapUsed ElasticSearch elasticsearch.node.jvm.mem.heapUsedInBytes jvm.mem.heapUsedInBytes ElasticSearch elasticsearch.node.jvm.mem.maxOldGenerationHeapInBytes jvm.mem.maxOldGenerationHeapInBytes ElasticSearch elasticsearch.node.jvm.mem.maxSurvivorSpaceInBytes jvm.mem.maxSurvivorSpaceInBYtes ElasticSearch elasticsearch.node.jvm.mem.maxYoungGenerationHeapInBytes jvm.mem.maxYoungGenerationHeapInBytes ElasticSearch elasticsearch.node.jvm.mem.nonHeapCommittedInBytes jvm.mem.nonHeapCommittedInBytes ElasticSearch elasticsearch.node.jvm.mem.nonHeapUsedInBytes jvm.mem.nonHeapUsedInBytes ElasticSearch elasticsearch.node.jvm.mem.usedOldGenerationHeapInBytes jvm.mem.usedOldGenerationHeapInBytes ElasticSearch elasticsearch.node.jvm.mem.usedSurvivorSpaceInBytes jvm.mem.usedSurvivorSpaceInBytes ElasticSearch elasticsearch.node.jvm.mem.usedYoungGenerationHeapInBytes jvm.mem.usedYoungGenerationHeapInBytes ElasticSearch elasticsearch.node.jvm.threadsActive jvm.ThreadsActive ElasticSearch elasticsearch.node.jvm.threadsPeak jvm.ThreadsPeak ElasticSearch elasticsearch.node.merges.currentActive merges.currentActive ElasticSearch elasticsearch.node.merges.docsSegmentMerges merges.docsSegmentMerges ElasticSearch elasticsearch.node.merges.docsSegmentsMerging merges.docsSegmentsMerging ElasticSearch elasticsearch.node.merges.mergedSegmentsInBytes merges.mergedSegmentsInBytes ElasticSearch elasticsearch.node.merges.segmentMerges merges.segmentMerges ElasticSearch elasticsearch.node.merges.sizeSegmentsMergingInBytes merges.sizeSegmentsMergingInBytes ElasticSearch elasticsearch.node.merges.totalSegmentMergingInMilliseconds merges.totalSegmentMergingInMilliseconds ElasticSearch elasticsearch.node.openFd openFD ElasticSearch elasticsearch.node.queriesTotal queriesTotal ElasticSearch elasticsearch.node.refresh.total refresh.total ElasticSearch elasticsearch.node.refresh.totalInMilliseconds refresh.totalInMilliseconds ElasticSearch elasticsearch.node.searchFetchCurrentlyRunning searchFetchCurrentlyRunning ElasticSearch elasticsearch.node.searchFetches searchFetches ElasticSearch elasticsearch.node.sizeStoreInBytes sizeStoreInBytes ElasticSearch elasticsearch.node.threadpool.activeFetchShardStarted threadpool.activeFetchShardStarted ElasticSearch elasticsearch.node.threadpool.bulkActive threadpool.bulkActive ElasticSearch elasticsearch.node.threadpool.bulkQueue threadpool.bulkQueue ElasticSearch elasticsearch.node.threadpool.bulkRejected threadpool.bulkRejected ElasticSearch elasticsearch.node.threadpool.bulkThreads threadpool.bulkThreads ElasticSearch elasticsearch.node.threadpool.fetchShardStartedQueue threadpool.fetchShardStartedQueue ElasticSearch elasticsearch.node.threadpool.fetchShardStartedRejected threadpool.fetchShardStartedRejected ElasticSearch elasticsearch.node.threadpool.fetchShardStartedThreads threadpool.fetchShardStartedThreads ElasticSearch elasticsearch.node.threadpool.fetchShardStoreActive threadpool.fetchShardStoreActive ElasticSearch elasticsearch.node.threadpool.fetchShardStoreQueue threadpool.fetchShardStoreQueue ElasticSearch elasticsearch.node.threadpool.fetchShardStoreRejected threadpool.fetchShardStoreRejected ElasticSearch elasticsearch.node.threadpool.fetchShardStoreThreads threadpool.fetchShardStoreThreads ElasticSearch elasticsearch.node.threadpool.flushActive threadpool.flushActive ElasticSearch elasticsearch.node.threadpool.flushQueue threadpool.flushQueue ElasticSearch elasticsearch.node.threadpool.flushRejected threadpool.flushRejected ElasticSearch elasticsearch.node.threadpool.flushThreads threadpool.flushThreads ElasticSearch elasticsearch.node.threadpool.forceMergeActive threadpool.forceMergeActive ElasticSearch elasticsearch.node.threadpool.forceMergeQueue threadpool.forceMergeQueue ElasticSearch elasticsearch.node.threadpool.forceMergeRejected threadpool.forceMergeRejected ElasticSearch elasticsearch.node.threadpool.forceMergeThreads threadpool.forceMergeThreads ElasticSearch elasticsearch.node.threadpool.genericActive threadpool.genericActive ElasticSearch elasticsearch.node.threadpool.genericQueue threadpool.genericQueue ElasticSearch elasticsearch.node.threadpool.genericRejected threadpool.genericRejected ElasticSearch elasticsearch.node.threadpool.genericThreads threadpool.genericThreads ElasticSearch elasticsearch.node.threadpool.getActive threadpool.getActive ElasticSearch elasticsearch.node.threadpool.getQueue threadpool.getQueue ElasticSearch elasticsearch.node.threadpool.getRejected threadpool.getRejected ElasticSearch elasticsearch.node.threadpool.getThreads threadpool.getThreads ElasticSearch elasticsearch.node.threadpool.indexActive threadpool.indexActive ElasticSearch elasticsearch.node.threadpool.indexQueue threadpool.indexQueue ElasticSearch elasticsearch.node.threadpool.indexRejected threadpool.indexRejected ElasticSearch elasticsearch.node.threadpool.indexThreads threadpool.indexThreads ElasticSearch elasticsearch.node.threadpool.listenerActive threadpool.listenerActive ElasticSearch elasticsearch.node.threadpool.listenerQueue threadpool.listenerQueue ElasticSearch elasticsearch.node.threadpool.listenerRejected threadpool.listenerRejected ElasticSearch elasticsearch.node.threadpool.listenerThreads threadpool.listenerThreads ElasticSearch elasticsearch.node.threadpool.managementActive threadpool.managementActive ElasticSearch elasticsearch.node.threadpool.managementQueue threadpool.managementQueue ElasticSearch elasticsearch.node.threadpool.managementRejected threadpool.managementRejected ElasticSearch elasticsearch.node.threadpool.managementThreads threadpool.managementThreads ElasticSearch elasticsearch.node.threadpool.refreshActive threadpool.refreshActive ElasticSearch elasticsearch.node.threadpool.refreshQueue threadpool.refreshQueue ElasticSearch elasticsearch.node.threadpool.refreshRejected threadpool.refreshRejected ElasticSearch elasticsearch.node.threadpool.refreshThreads threadpool.refreshThreads ElasticSearch elasticsearch.node.threadpool.searchActive threadpool.searchActive ElasticSearch elasticsearch.node.threadpool.searchQueue threadpool.searchQueue ElasticSearch elasticsearch.node.threadpool.searchRejected threadpool.searchRejected ElasticSearch elasticsearch.node.threadpool.searchThreads threadpool.searchThreads ElasticSearch elasticsearch.node.threadpool.snapshotActive threadpool.snapshotActive ElasticSearch elasticsearch.node.threadpool.snapshotQueue threadpool.snapshotQueue ElasticSearch elasticsearch.node.threadpool.snapshotRejected threadpool.snapshotRejected ElasticSearch elasticsearch.node.threadpool.snapshotThreads threadpool.snapshotThreads ElasticSearch elasticsearch.node.transport.connectionsOpened transport.connectionsOpened ElasticSearch elasticsearch.node.transport.packetsReceived transport.packetsReceived ElasticSearch elasticsearch.node.transport.packetsReceivedInBytes transport.packetsReceivedInBytes ElasticSearch elasticsearch.node.transport.packetsSent transport.packetsSent ElasticSearch elasticsearch.node.transport.packetsSentInBytes transport.packetsSentInBytes F5 f5.node.availabilityState node.availabilityState F5 f5.node.connections node.connections F5 f5.node.connectionsPerSecond node.connectionsPerSecond F5 f5.node.enabled node.enabled F5 f5.node.inDataInBytesPerSecond node.inDataInBytesPerSecond F5 f5.node.monitorStatus node.monitorStatus F5 f5.node.outDataInBytesPerSecond node.outDataInBytesPerSecond F5 f5.node.packetsReceivedPerSecond node.packetsReceivedPerSecond F5 f5.node.packetsSentPerSecond node.packetsSentPerSecond F5 f5.node.requestsPerSecond node.requestsPerSecond F5 f5.node.sessions node.sessions F5 f5.node.sessionStatus node.sessionStatus F5 f5.poolMember.availabilityState member.availabilityState F5 f5.poolMember.connections member.connections F5 f5.poolMember.enabled member.enabled F5 f5.poolMember.inDataInBytesPerSecond member.inDataInBytesPerSecond F5 f5.poolMember.monitorStatus member.monitorStatus F5 f5.poolMember.outDataInBytesPerSecond member.outDataInBytesPerSecond F5 f5.poolMember.packetsReceivedPerSecond member.packetsReceivedPerSecond F5 f5.poolMember.packetsSentPerSecond member.packetsSentPerSecond F5 f5.poolMember.requestsPerSecond member.requestsPerSecond F5 f5.poolMember.sessions member.sessions F5 f5.poolMember.sessionStatus member.sessionStatus F5 f5.pool.activeMembers pool.activeMembers F5 f5.pool.availabilityState pool.availabilityState F5 f5.pool.connections pool.connections F5 f5.pool.connqAgeEdm pool.connqAgeEdm F5 f5.pool.connqAgeEma pool.connqAgeEma F5 f5.pool.connqAgeHead pool.connqAgeHead F5 f5.pool.connqAgeMax pool.connqAgeMax F5 f5.pool.connqAllAgeEdm pool.connqAllAgeEdm F5 f5.pool.connqAllAgeEma pool.connqAllAgeEma F5 f5.pool.connqAllAgeHead pool.connqAllAgeHead F5 f5.pool.connqAllAgeMax pool.connqAllAgeMax F5 f5.pool.connqAllDepth pool.connqAllDepth F5 f5.pool.connqDepth pool.connqDepth F5 f5.pool.currentConnections pool.currentConnections F5 f5.pool.enabled pool.enabled F5 f5.pool.inDataInBytesPerSecond pool.inDataInBytesPerSecond F5 f5.pool.minActiveMembers pool.minActiveMembers F5 f5.pool.outDataInBytesPerSecond pool.outDataInBytesPerSecond F5 f5.pool.packetsReceivedPerSecond pool.packetsReceivedPerSecond F5 f5.pool.packetsSentPerSecond pool.packetsSentPerSecond F5 f5.pool.requestsPerSecond pool.requestsPerSecond F5 f5.pool.sessions pool.sessions F5 f5.system.cpuIdleTicksPerSecond system.cpuIdleTicksPerSecond F5 f5.system.cpuIdleUtilization system.cpuIdleUtilization F5 f5.system.cpuInterruptRequestUtilization system.cpuInterruptRequestUtilization F5 f5.system.cpuIoWaitUtilization system.cpuIOWaitUtilization F5 f5.system.cpuNiceLevelUtilization system.cpuNiceLevelUtilization F5 f5.system.cpuSoftInterruptRequestUtilization system.cpuSoftInterruptRequestUtilization F5 f5.system.cpuStolenUtilization system.cpuStolenUtilization F5 f5.system.cpuSystemTicksPerSecond system.cpuSystemTicksPerSecond F5 f5.system.cpuSystemUtilization system.cpuSystemUtilization F5 f5.system.cpuUserTicksPerSecond system.cpuUserTicksPerSecond F5 f5.system.cpuUserUtilization system.cpuUserUtilization F5 f5.system.memoryFreeInBytes system.memoryFreeInBytes F5 f5.system.memoryTotalInBytes system.memoryTotalInBytes F5 f5.system.memoryUsedInBytes system.memoryUsedInBytes F5 f5.system.otherMemoryFreeInBytes system.otherMemoryFreeInBytes F5 f5.system.otherMemoryTotalInBytes system.otherMemoryTotalInBytes F5 f5.system.otherMemoryUsedInBytes system.otherMemoryUsedInBytes F5 f5.system.swapFreeInBytes system.swapFreeInBytes F5 f5.system.swapTotalInBytes system.swapTotalInBytes F5 f5.system.swapUsedInBytes system.swapUsedInBytes F5 f5.system.tmmMemoryFreeInBytes system.tmmMemoryFreeInBytes F5 f5.system.tmmMemoryTotalInBytes system.tmmMemoryTotalInBytes F5 f5.system.tmmMemoryUsedInBytes system.tmmMemoryUsedInBytes F5 f5.virtualserver.availabilityState virtualserver.availabilityState F5 f5.virtualserver.clientsideConnectionsPerSecond virtualserver.clientsideConnectionsPerSecond F5 f5.virtualserver.connections virtualserver.connections F5 f5.virtualserver.csMaxConnDur virtualserver.csMaxConnDur F5 f5.virtualserver.csMeanConnDur virtualserver.csMeanConnDur F5 f5.virtualserver.csMinConnDur virtualserver.csMinConnDur F5 f5.virtualserver.enabled virtualserver.enabled F5 f5.virtualserver.ephemeralBytesInPerSecond virtualserver.ephemeralBytesInPerSecond F5 f5.virtualserver.ephemeralBytesOutPerSecond virtualserver.ephemeralBytesOutPerSecond F5 f5.virtualserver.ephemeralConnectionsPerSecond virtualserver.ephemeralConnectionsPerSecond F5 f5.virtualserver.ephemeralCurrentConnections virtualserver.ephemeralCurrentConnections F5 f5.virtualserver.ephemeralEvictedConnectionsPerSecond virtualserver.ephemeralEvictedConnectionsPerSecond F5 f5.virtualserver.ephemeralMaxConnections virtualserver.ephemeralMaxConnections F5 f5.virtualserver.ephemeralPacketsReceivedPerSecond virtualserver.ephemeralPacketsReceivedPerSecond F5 f5.virtualserver.ephemeralPacketsSentPerSecond virtualserver.ephemeralPacketsSentPerSecond F5 f5.virtualserver.ephemeralSlowKilledPerSecond virtualserver.ephemeralSlowKilledPerSecond F5 f5.virtualserver.evictedConnsPerSecond virtualserver.evictedConnsPerSecond F5 f5.virtualserver.inDataInBytesPerSecond virtualserver.inDataInBytesPerSecond F5 f5.virtualserver.outDataInBytesPerSecond virtualserver.outDataInBytesPerSecond F5 f5.virtualserver.packetsReceivedPerSecond virtualserver.packetsReceivedPerSecond F5 f5.virtualserver.packetsSentPerSecond virtualserver.packetsSentPerSecond F5 f5.virtualserver.requestsPerSecond virtualserver.requestsPerSecond F5 f5.virtualserver.slowKilledPerSecond virtualserver.slowKilledPerSecond F5 f5.virtualserver.usageRatio virtualserver.usageRatio HAProxy haproxy.backend.activeServers backend.activeServers HAProxy haproxy.backend.averageConnectTimeInSeconds backend.averageConnectTimeInSeconds HAProxy haproxy.backend.averageQueueTimeInSeconds backend.averageQueueTimeInSeconds HAProxy haproxy.backend.averageResponseTimeInSeconds backend.averageResponseTimeInSeconds HAProxy haproxy.backend.averageTotalSessionTimeInSeconds backend.averageTotalSessionTimeInSeconds HAProxy haproxy.backend.backupServers backend.backupServers HAProxy haproxy.backend.bytesInPerSecond backend.bytesInPerSecond HAProxy haproxy.backend.bytesOutPerSecond backend.bytesOutPerSecond HAProxy haproxy.backend.bytesThatBypassedCompressorPerSecond backend.bytesThatBypassedCompressorPerSecond HAProxy haproxy.backend.connectingRequestErrorsPerSecond backend.connectingRequestErrorsPerSecond HAProxy haproxy.backend.connectionRetriesPerSecond backend.connectionRetriesPerSecond HAProxy haproxy.backend.currentQueuedRequestsWithoutServer backend.currentQueuedRequestsWithoutServer HAProxy haproxy.backend.currentSessions backend.currentSessions HAProxy haproxy.backend.dataTransfersAbortedByClientPerSecond backend.dataTransfersAbortedByClientPerSecond HAProxy haproxy.backend.dataTransfersAbortedByServerPerSecond backend.dataTransfersAbortedByServerPerSecond HAProxy haproxy.backend.downtimeInSeconds backend.downtimeInSeconds HAProxy haproxy.backend.http100ResponsesPerSecond backend.http100ResponsesPerSecond HAProxy haproxy.backend.http200ResponsesPerSecond backend.http200ResponsesPerSecond HAProxy haproxy.backend.http300ResponsesPerSecond backend.http300ResponsesPerSecond HAProxy haproxy.backend.http400ResponsesPerSecond backend.http400ResponsesPerSecond HAProxy haproxy.backend.http500ResponsesPerSecond backend.http500ResponsesPerSecond HAProxy haproxy.backend.httpOtherResponsesPerSecond backend.httpOtherResponsesPerSecond HAProxy haproxy.backend.httpRequestsPerSecond backend.httpRequestsPerSecond HAProxy haproxy.backend.httpResponseBytesEmittedByCompressorPerSecond backend.httpResponseBytesEmittedByCompressorPerSecond HAProxy haproxy.backend.httpResponseBytesFedToCompressorPerSecond backend.httpResponseBytesFedToCompressorPerSecond HAProxy haproxy.backend.httpResponsesCompressedPerSecond backend.httpResponsesCompressedPerSecond HAProxy haproxy.backend.interceptedRequestsPerSecond backend.interceptedRequestsPerSecond HAProxy haproxy.backend.maxQueuedRequestsWithoutServer backend.maxQueuedRequestsWithoutServer HAProxy haproxy.backend.maxSessions backend.maxSessions HAProxy haproxy.backend.maxSessionsPerSecond backend.maxSessionsPerSecond HAProxy haproxy.backend.requestRedispatchPerSecond backend.requestRedispatchPerSecond HAProxy haproxy.backend.requestsDenied.securityConcernsPerSecond backend.requestsDenied.securityConcernsPerSecond HAProxy haproxy.backend.responseErrorsPerSecond backend.responseErrorsPerSecond HAProxy haproxy.backend.responsesDenied.securityConcernsPerSecond backend.responsesDenied.securityConcernsPerSecond HAProxy haproxy.backend.serverSelectedPerSecond backend.serverSelectedPerSecond HAProxy haproxy.backend.sessionsPerSecond backend.sessionsPerSecond HAProxy haproxy.backend.timeSinceLastSessionAssignedInSeconds backend.timeSinceLastSessionAssignedInSeconds HAProxy haproxy.backend.timeSinceLastUpDownTransitionInSeconds backend.timeSinceLastUpDownTransitionInSeconds HAProxy haproxy.backend.totalWeight backend.totalWeight HAProxy haproxy.backend.type backend.type HAProxy haproxy.backend.upToDownTransitionsPerSecond backend.upToDownTransitionsPerSecond HAProxy haproxy.frontend.bytesInPerSecond frontend.bytesInPerSecond HAProxy haproxy.frontend.bytesOutPerSecond frontend.bytesOutPerSecond HAProxy haproxy.frontend.connectionsPerSecond frontend.connectionsPerSecond HAProxy haproxy.frontend.currentSessions frontend.currentSessions HAProxy haproxy.frontend.http100ResponsesPerSecond frontend.http100ResponsesPerSecond HAProxy haproxy.frontend.http200ResponsesPerSecond frontend.http200ResponsesPerSecond HAProxy haproxy.frontend.http300ResponsesPerSecond frontend.http300ResponsesPerSecond HAProxy haproxy.frontend.http400ResponsesPerSecond frontend.http400ResponsesPerSecond HAProxy haproxy.frontend.http500ResponsesPerSecond frontend.http500ResponsesPerSecond HAProxy haproxy.frontend.httpOtherResponsesPerSecond frontend.httpOtherResponsesPerSecond HAProxy haproxy.frontend.httpRequests.maxPerSecond frontend.httpRequests.maxPerSecond HAProxy haproxy.frontend.httpRequestsPerSecond frontend.httpRequestsPerSecond HAProxy haproxy.frontend.interceptedRequestsPerSecond frontend.interceptedRequestsPerSecond HAProxy haproxy.frontend.maxConnectionsPerSecond frontend.maxConnectionsPerSecond HAProxy haproxy.frontend.maxSessions frontend.maxSessions HAProxy haproxy.frontend.maxSessionsPerSecond frontend.maxSessionsPerSecond HAProxy haproxy.frontend.requestErrorsPerSecond frontend.requestErrorsPerSecond HAProxy haproxy.frontend.requestsDenied.securityConcernsPerSecond frontend.requestsDenied.securityConcernsPerSecond HAProxy haproxy.frontend.requestsDenied.tcpRequestConnectionRulesPerSecond frontend.requestsDenied.tcpRequestConnectionRulesPerSecond HAProxy haproxy.frontend.requestsDenied.tcpRequestSessionRulesPerSecond frontend.requestsDenied.tcpRequestSessionRulesPerSecond HAProxy haproxy.frontend.responsesDenied.securityConcernsPerSecond frontend.responsesDenied.securityConcernsPerSecond HAProxy haproxy.frontend.sessionsPerSecond frontend.sessionsPerSecond HAProxy haproxy.server.averageConnectTimeInSeconds server.averageConnectTimeInSeconds HAProxy haproxy.server.averageQueueTimeInSeconds server.averageQueueTimeInSeconds HAProxy haproxy.server.averageResponseTimeInSeconds server.averageResponseTimeInSeconds HAProxy haproxy.server.averageTotalSessionTimeInSeconds server.averageTotalSessionTimeInSeconds HAProxy haproxy.server.bytesInPerSecond server.bytesInPerSecond HAProxy haproxy.server.bytesOutPerSecond server.bytesOutPerSecond HAProxy haproxy.server.connectingRequestErrorsPerSecond server.connectingRequestErrorsPerSecond HAProxy haproxy.server.connectionRetriesPerSecond server.connectionRetriesPerSecond HAProxy haproxy.server.currentQueuedRequestsWithoutServer server.currentQueuedRequestsWithoutServer HAProxy haproxy.server.currentSessions server.currentSessions HAProxy haproxy.server.dataTransfersAbortedByClientPerSecond server.dataTransfersAbortedByClientPerSecond HAProxy haproxy.server.dataTransfersAbortedByServerPerSecond server.dataTransfersAbortedByServerPerSecond HAProxy haproxy.server.downtimeInSeconds server.downtimeInSeconds HAProxy haproxy.server.failedChecksPerSecond server.failedChecksPerSecond HAProxy haproxy.server.healthCheckDurationInMilliseconds server.healthCheckDurationInMilliseconds HAProxy haproxy.server.http100ResponsesPerSecond server.http100ResponsesPerSecond HAProxy haproxy.server.http200ResponsesPerSecond server.http200ResponsesPerSecond HAProxy haproxy.server.http300ResponsesPerSecond server.http300ResponsesPerSecond HAProxy haproxy.server.http400ResponsesPerSecond server.http400ResponsesPerSecond HAProxy haproxy.server.http500ResponsesPerSecond server.http500ResponsesPerSecond HAProxy haproxy.server.httpOtherResponsesPerSecond server.httpOtherResponsesPerSecond HAProxy haproxy.server.isActive server.isActive HAProxy haproxy.server.isBackup server.isBackup HAProxy haproxy.server.maxQueuedRequestsWithoutServer server.maxQueuedRequestsWithoutServer HAProxy haproxy.server.maxSessions server.maxSessions HAProxy haproxy.server.maxSessionsPerSecond server.maxSessionsPerSecond HAProxy haproxy.server.requestRedispatchPerSecond server.requestRedispatchPerSecond HAProxy haproxy.server.requestsDenied.securityConcernsPerSecond server.requestsDenied.securityConcernsPerSecond HAProxy haproxy.server.responseErrorsPerSecond server.responseErrorsPerSecond HAProxy haproxy.server.responsesDenied.securityConcernsPerSecond server.responsesDenied.securityConcernsPerSecond HAProxy haproxy.server.serverSelectedPerSecond server.serverSelectedPerSecond HAProxy haproxy.server.serverWeight server.serverWeight HAProxy haproxy.server.sessionsPerSecond server.sessionsPerSecond HAProxy haproxy.server.throttlePercentage server.throttlePercentage HAProxy haproxy.server.timeSinceLastSessionAssignedInSeconds server.timeSinceLastSessionAssignedInSeconds HAProxy haproxy.server.timeSinceLastUpDownTransitionInSeconds server.timeSinceLastUpDownTransitionInSeconds HAProxy haproxy.server.type server.type HAProxy haproxy.server.upToDownTransitionsPerSecond server.upToDownTransitionsPerSecond Kafka kafka.broker.bytesWrittenToTopicPerSecond broker.bytesWrittenToTopicPerSecond Kafka kafka.broker.consumer.requestsExpiredPerSecond consumer.requestsExpiredPerSecond Kafka kafka.broker.follower.requestExpirationPerSecond follower.requestExpirationPerSecond Kafka kafka.broker.ioInPerSecond broker.IOInPerSecond Kafka kafka.broker.ioOutPerSecond broker.IOOutPerSecond Kafka kafka.broker.logFlushPerSecond broker.logFlushPerSecond Kafka kafka.broker.messagesInPerSecond broker.messagesInPerSecond Kafka kafka.broker.net.bytesRejectedPerSecond net.bytesRejectedPerSecond Kafka kafka.broker.replication.isrExpandsPerSecond replication.isrExpandsPerSecond Kafka kafka.broker.replication.isrShrinksPerSecond replication.isrShrinksPerSecond Kafka kafka.broker.replication.leaderElectionPerSecond replication.leaderElectionPerSecond Kafka kafka.broker.replication.uncleanLeaderElectionPerSecond replication.uncleanLeaderElectionPerSecond Kafka kafka.broker.replication.unreplicatedPartitions replication.unreplicatedPartitions Kafka kafka.broker.request.avgTimeFetch request.avgTimeFetch Kafka kafka.broker.request.avgTimeMetadata request.avgTimeMetadata Kafka kafka.broker.request.avgTimeMetadata99Percentile request.avgTimeMetadata99Percentile Kafka kafka.broker.request.avgTimeOffset request.avgTimeOffset Kafka kafka.broker.request.avgTimeOffset99Percentile request.avgTimeOffset99Percentile Kafka kafka.broker.request.avgTimeProduceRequest request.avgTimeProduceRequest Kafka kafka.broker.request.avgTimeUpdateMetadata request.avgTimeUpdateMetadata Kafka kafka.broker.request.avgTimeUpdateMetadata99Percentile request.avgTimeUpdateMetadata99Percentile Kafka kafka.broker.request.clientFetchesFailedPerSecond request.clientFetchesFailedPerSecond Kafka kafka.broker.request.fetchConsumerRequestsPerSecond request.fetchConsumerRequestsPerSecond Kafka kafka.broker.request.fetchFollowerRequestsPerSecond request.fetchFollowerRequestsPerSecond Kafka kafka.broker.request.fetchTime99Percentile request.fetchTime99Percentile Kafka kafka.broker.request.handlerIdle request.handlerIdle Kafka kafka.broker.request.listGroupsRequestsPerSecond request.listGroupsRequestsPerSecond Kafka kafka.broker.request.metadataRequestsPerSecond request.metadataRequestsPerSecond Kafka kafka.broker.request.offsetCommitRequestsPerSecond request.offsetCommitRequestsPerSecond Kafka kafka.broker.request.produceRequestsFailedPerSecond request.produceRequestsFailedPerSecond Kafka kafka.broker.request.produceRequestsPerSecond request.produceRequestsPerSecond Kafka kafka.broker.request.produceTime99Percentile request.produceTime99Percentile Kafka kafka.broker.topic.diskSize topic.diskSize Kafka kafka.topic.bytesInPerSec topic.BytesInPerSec Kafka kafka.topic.bytesOutPerSec topic.BytesOutPerSec Kafka kafka.topic.messagesInPerSec topic.MessagesInPerSec Kafka kafka.topic.partitionsWithNonPreferredLeader topic.partitionsWithNonPreferredLeader Kafka kafka.topic.respondsToMetadataRequests topic.respondsToMetadataRequests Kafka kafka.topic.retentionBytesOrTime topic.retentionBytesOrTime Kafka kafka.topic.underReplicatedPartitions topic.underReplicatedPartitions Kafka kafka.producer.ageMetadataUsedInMilliseconds producer.ageMetadataUsedInMilliseconds Kafka kafka.producer.availableBufferInBytes producer.availableBufferInBytes Kafka kafka.producer.avgBytesSentPerRequestInBytes producer.avgBytesSentPerRequestInBytes Kafka kafka.producer.avgCompressionRateRecordBatches producer.avgCompressionRateRecordBatches Kafka kafka.producer.avgRecordAccumulatorsInMilliseconds producer.avgRecordAccumulatorsInMilliseconds Kafka kafka.producer.avgRecordSizeInBytes producer.avgRecordSizeInBytes Kafka kafka.producer.avgRecordsSentPerSecond producer.avgRecordsSentPerSecond Kafka kafka.producer.avgRecordsSentPerTopicPerSecond producer.avgRecordsSentPerTopicPerSecond Kafka kafka.producer.avgRequestLatency producer.avgRequestLatencyPerSecond Kafka kafka.producer.avgThrottleTime producer.avgThrottleTime Kafka kafka.producer.bufferMemoryAvailableInBytes producer.bufferMemoryAvailableInBytes Kafka kafka.producer.bufferpoolWaitTime producer.bufferpoolWaitTime Kafka kafka.producer.bytesOutPerSecond producer.bytesOutPerSecond Kafka kafka.producer.compressionRateRecordBatches producer.compressionRateRecordBatches Kafka kafka.producer.ioWaitTime producer.ioWaitTime Kafka kafka.producer.maxBytesSentPerRequestInBytes producer.maxBytesSentPerRequestInBytes Kafka kafka.producer.maxRecordSizeInBytes producer.maxRecordSizeInBytes Kafka kafka.producer.maxRequestLatencyInMilliseconds producer.maxRequestLatencyInMilliseconds Kafka kafka.producer.maxThrottleTime producer.maxThrottleTime Kafka kafka.producer.requestPerSecond producer.requestPerSecond Kafka kafka.producer.requestsWaitingResponse producer.requestsWaitingResponse Kafka kafka.producer.responsePerSecond producer.responsePerSecond Kafka kafka.producer.threadsWaiting producer.threadsWaiting Kafka kafka.consumer.avgFetchSizeInBytes consumer.avgFetchSizeInBytes Kafka kafka.consumer.avgRecordConsumedPerTopic consumer.avgRecordConsumedPerTopic Kafka kafka.consumer.avgRecordConsumedPerTopicPerSecond consumer.avgRecordConsumedPerTopicPerSecond Kafka kafka.consumer.bytesInPerSecond consumer.bytesInPerSecond Kafka kafka.consumer.fetchPerSecond consumer.fetchPerSecond Kafka kafka.consumer.hwm consumer.hwm Kafka kafka.consumer.lag consumer.lag Kafka kafka.consumer.maxFetchSizeInBytes consumer.maxFetchSizeInBytes Kafka kafka.consumer.maxLag consumer.maxLag Kafka kafka.consumer.messageConsumptionPerSecond consumer.messageConsumptionPerSecond Kafka kafka.consumer.offset consumer.offset Kafka kafka.consumer.totalLag consumer.totalLag Kafka kafka.consumerGroup.maxLag consumerGroup.maxLag Kafka kafka.consumerGroup.totalLag consumerGroup.totalLag Kubernetes k8s.apiserver.goGoroutines goGoroutines Kubernetes k8s.apiserver.goThreads goThreads Kubernetes k8s.apiserver.process.cpuSecondsDelta processCpuSecondsDelta Kubernetes k8s.apiserver.process.residentMemoryBytes processResidentMemoryBytes Kubernetes k8s.controllermanager.goGoroutines goGoroutines Kubernetes k8s.controllermanager.goThreads goThreads Kubernetes k8s.controllermanager.leaderElectionMasterStatus leaderElectionMasterStatus Kubernetes k8s.controllermanager.process.cpuSecondsDelta processCpuSecondsDelta Kubernetes k8s.controllermanager.process.residentMemoryBytes processResidentMemoryBytes Kubernetes k8s.etcd.goGoroutines goGoroutines Kubernetes k8s.etcd.goThreads goThreads Kubernetes k8s.etcd.mvccDbTotalSizeInBytes etcdMvccDbTotalSizeInBytes Kubernetes k8s.etcd.networkClientGrpcReceivedBytesRate etcdNetworkClientGrpcReceivedBytesRate Kubernetes k8s.etcd.networkClientGrpcSentBytesRate etcdNetworkClientGrpcSentBytesRate Kubernetes k8s.etcd.process.cpuSecondsDelta processCpuSecondsDelta Kubernetes k8s.etcd.process.maxFds processMaxFds Kubernetes k8s.etcd.process.openFds processOpenFds Kubernetes k8s.etcd.process.processFdsUtilization processFdsUtilization Kubernetes k8s.etcd.process.residentMemoryBytes processResidentMemoryBytes Kubernetes k8s.etcd.serverHasLeader etcdServerHasLeader Kubernetes k8s.etcd.serverLeaderChangesSeenDelta etcdServerLeaderChangesSeenDelta Kubernetes k8s.etcd.serverProposalsAppliedDelta etcdServerProposalsAppliedDelta Kubernetes k8s.etcd.serverProposalsAppliedRate etcdServerProposalsAppliedRate Kubernetes k8s.etcd.serverProposalsCommittedDelta etcdServerProposalsCommittedDelta Kubernetes k8s.etcd.serverProposalsCommittedRate etcdServerProposalsCommittedRate Kubernetes k8s.etcd.serverProposalsFailedDelta etcdServerProposalsFailedDelta Kubernetes k8s.etcd.serverProposalsFailedRate etcdServerProposalsFailedRate Kubernetes k8s.etcd.serverProposalsPending etcdServerProposalsPending Kubernetes k8s.scheduler.goGoroutines goGoroutines Kubernetes k8s.scheduler.goThreads goThreads Kubernetes k8s.scheduler.leaderElectionMasterStatus leaderElectionMasterStatus Kubernetes k8s.scheduler.podPreemptionVictims schedulerPodPreemptionVictims Kubernetes k8s.scheduler.preemptionAttemptsDelta schedulerPreemptionAttemptsDelta Kubernetes k8s.scheduler.process.cpuSecondsDelta processCpuSecondsDelta Kubernetes k8s.scheduler.process.residentMemoryBytes processResidentMemoryBytes Kubernetes k8s.container.cpuCfsPeriodsDelta containerCpuCfsPeriodsDelta Kubernetes k8s.container.cpuCfsPeriodsTotal containerCpuCfsPeriodsTotal Kubernetes k8s.container.cpuCfsThrottledPeriodsDelta containerCpuCfsThrottledPeriodsDelta Kubernetes k8s.container.cpuCfsThrottledPeriodsTotal containerCpuCfsThrottledPeriodsTotal Kubernetes k8s.container.cpuCfsThrottledSecondsDelta containerCpuCfsThrottledSecondsDelta Kubernetes k8s.container.cpuCfsThrottledSecondsTotal containerCpuCfsThrottledSecondsTotal Kubernetes k8s.container.cpuCoresUtilization cpuCoresUtilization Kubernetes k8s.container.cpuLimitCores cpuLimitCores Kubernetes k8s.container.cpuRequestedCores cpuRequestedCores Kubernetes k8s.container.cpuUsedCores cpuUsedCores Kubernetes k8s.container.fsAvailableBytes fsAvailableBytes Kubernetes k8s.container.fsCapacityBytes fsCapacityBytes Kubernetes k8s.container.fsInodes fsInodes Kubernetes k8s.container.fsInodesFree fsInodesFree Kubernetes k8s.container.fsInodesUsed fsInodesUsed Kubernetes k8s.container.fsUsedBytes fsUsedBytes Kubernetes k8s.container.fsUsedPercent fsUsedPercent Kubernetes k8s.container.isReady isReady Kubernetes k8s.container.memoryLimitBytes memoryLimitBytes Kubernetes k8s.container.memoryMappedFileBytes containerMemoryMappedFileBytes Kubernetes k8s.container.memoryRequestedBytes memoryRequestedBytes Kubernetes k8s.container.memoryUsedBytes memoryUsedBytes Kubernetes k8s.container.memoryUtilization memoryUtilization Kubernetes k8s.container.memoryWorkingSetBytes memoryWorkingSetBytes Kubernetes k8s.container.requestedCpuCoresUtilization requestedCpuCoresUtilization Kubernetes k8s.container.requestedMemoryUtilization requestedMemoryUtilization Kubernetes k8s.container.restartCount restartCount Kubernetes k8s.daemonset.createdAt createdAt Kubernetes k8s.daemonset.metadataGeneration metadataGeneration Kubernetes k8s.daemonset.podsAvailable podsAvailable Kubernetes k8s.daemonset.podsDesired podsDesired Kubernetes k8s.daemonset.podsMisscheduled podsMisscheduled Kubernetes k8s.daemonset.podsReady podsReady Kubernetes k8s.daemonset.podsScheduled podsScheduled Kubernetes k8s.daemonset.podsUnavailable podsUnavailable Kubernetes k8s.daemonset.podsUpdatedScheduled podsUpdatedScheduled Kubernetes k8s.deployment.createdAt createdAt Kubernetes k8s.deployment.podsAvailable podsAvailable Kubernetes k8s.deployment.podsDesired podsDesired Kubernetes k8s.deployment.podsMaxUnavailable podsMaxUnavailable Kubernetes k8s.deployment.podsTotal podsTotal Kubernetes k8s.deployment.podsUnavailable podsUnavailable Kubernetes k8s.deployment.podsUpdated podsUpdated Kubernetes k8s.endpoint.addressAvailable addressAvailable Kubernetes k8s.endpoint.addressNotReady addressNotReady Kubernetes k8s.endpoint.createdAt createdAt Kubernetes k8s.namespace.createdAt createdAt Kubernetes k8s.node.allocatableAttachableVolumes* allocatableAttachableVolumes* Kubernetes k8s.node.allocatableCpuCores allocatableCpuCores Kubernetes k8s.node.allocatableCpuCoresUtilization allocatableCpuCoresUtilization Kubernetes k8s.node.allocatableEphemeralStorageBytes allocatableEphemeralStorageBytes Kubernetes k8s.node.allocatableHugepages* allocatableHugepages* Kubernetes k8s.node.allocatableMemoryBytes allocatableMemoryBytes Kubernetes k8s.node.allocatableMemoryUtilization allocatableMemoryUtilization Kubernetes k8s.node.allocatablePods allocatablePods Kubernetes k8s.node.capacityAttachableVolumes* capacityAttachableVolumes* Kubernetes k8s.node.capacityCpuCores capacityCpuCores Kubernetes k8s.node.capacityEphemeralStorageBytes capacityEphemeralStorageBytes Kubernetes k8s.node.capacityHugepages* capacityHugepages* Kubernetes k8s.node.capacityMemoryBytes capacityMemoryBytes Kubernetes k8s.node.capacityPods capacityPods Kubernetes k8s.node.cpuUsedCoreMilliseconds cpuUsedCoreMilliseconds Kubernetes k8s.node.cpuUsedCores cpuUsedCores Kubernetes k8s.node.fsAvailableBytes fsAvailableBytes Kubernetes k8s.node.fsCapacityBytes fsCapacityBytes Kubernetes k8s.node.fsCapacityUtilization fsCapacityUtilization Kubernetes k8s.node.fsInodes fsInodes Kubernetes k8s.node.fsInodesFree fsInodesFree Kubernetes k8s.node.fsInodesUsed fsInodesUsed Kubernetes k8s.node.fsUsedBytes fsUsedBytes Kubernetes k8s.node.memoryAvailableBytes memoryAvailableBytes Kubernetes k8s.node.memoryMajorPageFaultsPerSecond memoryMajorPageFaultsPerSecond Kubernetes k8s.node.memoryPageFaults memoryPageFaults Kubernetes k8s.node.memoryRssBytes memoryRssBytes Kubernetes k8s.node.memoryUsedBytes memoryUsedBytes Kubernetes k8s.node.memoryWorkingSetBytes memoryWorkingSetBytes Kubernetes k8s.node.netErrorsPerSecond net.errorsPerSecond Kubernetes k8s.node.netRxBytesPerSecond net.rxBytesPerSecond Kubernetes k8s.node.netTxBytesPerSecond net.txBytesPerSecond Kubernetes k8s.node.runtimeAvailableBytes runtimeAvailableBytes Kubernetes k8s.node.runtimeCapacityBytes runtimeCapacityBytes Kubernetes k8s.node.runtimeInodes runtimeInodes Kubernetes k8s.node.runtimeInodesFree runtimeInodesFree Kubernetes k8s.node.runtimeInodesUsed runtimeInodesUsed Kubernetes k8s.node.runtimeUsedBytes runtimeUsedBytes Kubernetes k8s.pod.createdAt createdAt Kubernetes k8s.pod.isReady isReady Kubernetes k8s.pod.isScheduled isScheduled Kubernetes k8s.pod.netErrorsPerSecond net.errorsPerSecond Kubernetes k8s.pod.netRxBytesPerSecond net.rxBytesPerSecond Kubernetes k8s.pod.netTxBytesPerSecond net.txBytesPerSecond Kubernetes k8s.pod.startTime startTime Kubernetes k8s.replicaset.createdAt createdAt Kubernetes k8s.replicaset.observedGeneration observedGeneration Kubernetes k8s.replicaset.podsDesired podsDesired Kubernetes k8s.replicaset.podsFullyLabeled podsFullyLabeled Kubernetes k8s.replicaset.podsMissing podsMissing Kubernetes k8s.replicaset.podsReady podsReady Kubernetes k8s.replicaset.podsTotal podsTotal Kubernetes k8s.service.createdAt createdAt Kubernetes k8s.statefulset.createdAt createdAt Kubernetes k8s.statefulset.currentRevision currentRevision Kubernetes k8s.statefulset.metadataGeneration metadataGeneration Kubernetes k8s.statefulset.observedGeneration observedGeneration Kubernetes k8s.statefulset.podsCurrent podsCurrent Kubernetes k8s.statefulset.podsDesired podsDesired Kubernetes k8s.statefulset.podsReady podsReady Kubernetes k8s.statefulset.podsTotal podsTotal Kubernetes k8s.statefulset.podsUpdated podsUpdated Kubernetes k8s.statefulset.updateRevision updateRevision Kubernetes k8s.volume.fsAvailableBytes fsAvailableBytes Kubernetes k8s.volume.fsCapacityBytes fsCapacityBytes Kubernetes k8s.volume.fsInodes fsInodes Kubernetes k8s.volume.fsInodesFree fsInodesFree Kubernetes k8s.volume.fsInodesUsed fsInodesUsed Kubernetes k8s.volume.fsUsedBytes fsUsedBytes Kubernetes k8s.volume.fsUsedPercent fsUsedPercent Memcached memcached.server.activeSlabs activeSlabs Memcached memcached.server.avgItemSizeInBytes avgItemSizeInBytes Memcached memcached.server.bytesReadServerPerSecond bytesReadServerPerSecond Memcached memcached.server.bytesUsedServerInBytes bytesUsedServerInBytes Memcached memcached.server.bytesWrittenServerPerSecond bytesWrittenServerPerSecond Memcached memcached.server.casHitRatePerSecond casHitRatePerSecond Memcached memcached.server.casMissRatePerSecond casMissRatePerSecond Memcached memcached.server.casWrongRatePerSecond casWrongRatePerSecond Memcached memcached.server.cmdFlushRatePerSecond cmdFlushRatePerSecond Memcached memcached.server.cmdGetRatePerSecond cmdGetRatePerSecond Memcached memcached.server.cmdSetRatePerSecond cmdSetRatePerSecond Memcached memcached.server.connectionRateServerPerSecond connectionRateServerPerSecond Memcached memcached.server.connectionStructuresAllocated connectionStructuresAllocated Memcached memcached.server.currentItemsStoredServer currentItemsStoredServer Memcached memcached.server.deleteCmdNoneRemovedPerSecond deleteCmdNoneRemovedPerSecond Memcached memcached.server.deleteCmdRemovedPerSecond deleteCmdRemovedPerSecond Memcached memcached.server.evictionsPerSecond evictionsPerSecond Memcached memcached.server.getHitPercent getHitPercent Memcached memcached.server.getHitPerSecond getHitPerSecond Memcached memcached.server.getMissPerSecond getMissPerSecond Memcached memcached.server.itemsStoredPerSecond itemsStoredPerSecond Memcached memcached.server.limitBytesStorage limitBytesStorage Memcached memcached.server.limitMaxBytes limitMaxBytes Memcached memcached.server.maxConnectionLimitPerSecond serverMaxConnectionLimitPerSecond Memcached memcached.server.memAllocatedSlabsInBytes memAllocatedSlabsInBytes Memcached memcached.server.openConnectionsServer openConnectionsServer Memcached memcached.server.pointerSize pointerSize Memcached memcached.server.rusageSystem usageRate Memcached memcached.server.rusageUser executionTime Memcached memcached.server.storingItemsPercentMemory storingItemsPercentMemory Memcached memcached.server.threads threads Memcached memcached.server.uptimeInMilliseconds uptimeInMilliseconds Memcached memcached.slab.activeItemsBumpedPerSecond activeItemsBumpedPerSecond Memcached memcached.slab.casBadValPerSecond casBadValPerSecond Memcached memcached.slab.casModifiedSlabPerSecond casModifiedSlabPerSecond Memcached memcached.slab.chunkSizeInBytes chunkSizeInBytes Memcached memcached.slab.chunksPerPage chunksPerPage Memcached memcached.slab.cmdSetRateSlabPerSecond cmdSetRateSlabPerSecond Memcached memcached.slab.decrsModifySlabPerSecond decrsModifySlabPerSecond Memcached memcached.slab.deleteRateSlabPerSecond deleteRateSlabPerSecond Memcached memcached.slab.entriesReclaimedPerSecond entriesReclaimedPerSecond Memcached memcached.slab.evictionsBeforeExpirationPerSecond evictionsBeforeExpirationPerSecond Memcached memcached.slab.evictionsBeforeExplicitExpirationPerSecond evictionsBeforeExplicitExpirationPerSecond Memcached memcached.slab.expiredItemsReclaimedPerSecond expiredItemsReclaimedPerSecond Memcached memcached.slab.freedChunks freedChunks Memcached memcached.slab.freedChunksEnd freedChunksEnd Memcached memcached.slab.getHitRateSlabPerSecond getHitRateSlabPerSecond Memcached memcached.slab.incrsModifySlabPerSecond incrsModifySlabPerSecond Memcached memcached.slab.itemsCold itemsCold Memcached memcached.slab.itemsColdPerSecond itemsColdPerSecond Memcached memcached.slab.itemsDirectReclaimedPerSecond itemsDirectReclaimedPerSecond Memcached memcached.slab.itemsFreedCrawlerPerSecond itemsFreedCrawlerPerSecond Memcached memcached.slab.itemsHot itemsHot Memcached memcached.slab.itemsOldestInMilliseconds itemsOldestInMilliseconds Memcached memcached.slab.itemsRefcountLockedPerSecond itemsRefcountLockedPerSecond Memcached memcached.slab.itemsSlabClass itemsSlabClass Memcached memcached.slab.itemsTimeSinceEvictionInMilliseconds itemsTimeSinceEvictionInMilliseconds Memcached memcached.slab.itemsWarm itemsWarm Memcached memcached.slab.itemsWarmPerSecond itemsWarmPerSecond Memcached memcached.slab.memRequestedSlabInBytesPerSecond memRequestedSlabInBytesPerSecond Memcached memcached.slab.outOfMemoryPerSecond outOfMemoryPerSecond Memcached memcached.slab.selfHealedSlabPerSecond selfHealedSlabPerSecond Memcached memcached.slab.totalChunksSlab totalChunksSlab Memcached memcached.slab.totalPagesSlab totalPagesSlab Memcached memcached.slab.touchHitSlabPerSecond touchHitSlabPerSecond Memcached memcached.slab.usedChunksItems usedChunksItems Memcached memcached.slab.usedChunksPerSecond usedChunksPerSecond Memcached memcached.slab.validItemsEvictedPerSecond validItemsEvictedPerSecond MongoDB mongo.index.accesses collection.indexAccesses MongoDB mongo.index.sizeInBytes collection.indexSizeInBytes MongoDB mongo.collection.avgObjSizeInBytes collection.avgObjSizeInBytes MongoDB mongo.collection.capped collection.capped MongoDB mongo.collection.count collection.count MongoDB mongo.collection.max collection.max MongoDB mongo.collection.maxSizeInBytes collection.maxSizeInBytes MongoDB mongo.collection.nindexes collection.nindexes MongoDB mongo.collection.sizeInBytes collection.sizeInBytes MongoDB mongo.collection.storageSizeInBytes collection.storageSizeInBytes MongoDB mongo.configServer.asserts.messagesPerSecond asserts.messagesPerSecond MongoDB mongo.configServer.asserts.regularPerSecond asserts.regularPerSecond MongoDB mongo.configServer.asserts.rolloversPerSecond asserts.rolloversPerSecond MongoDB mongo.configServer.asserts.userPerSecond asserts.userPerSecond MongoDB mongo.configServer.asserts.warningPerSecond asserts.warningPerSecond MongoDB mongo.configServer.commands.countFailedPerSecond commands.countFailedPerSecond MongoDB mongo.configServer.commands.countPerSecond commands.countPerSecond MongoDB mongo.configServer.commands.createIndexesFailedPerSecond commands.createIndexesFailedPerSecond MongoDB mongo.configServer.commands.createIndexesPerSecond commands.createIndexesPerSecond MongoDB mongo.configServer.commands.deleteFailedPerSecond commands.deleteFailedPerSecond MongoDB mongo.configServer.commands.deletePerSecond commands.deletePerSecond MongoDB mongo.configServer.commands.evalFailedPerSecond commands.evalFailedPerSecond MongoDB mongo.configServer.commands.evalPerSecond commands.evalPerSecond MongoDB mongo.configServer.commands.findAndModifyFailedPerSecond commands.findAndModifyFailedPerSecond MongoDB mongo.configServer.commands.findAndModifyPerSecond commands.findAndModifyPerSecond MongoDB mongo.configServer.commands.insertFailedPerSecond commands.insertFailedPerSecond MongoDB mongo.configServer.commands.insertPerSecond commands.insertPerSecond MongoDB mongo.configServer.commands.updateFailedPerSecond commands.updateFailedPerSecond MongoDB mongo.configServer.commands.updatePerSecond commands.updatePerSecond MongoDB mongo.configServer.connections.available connections.available MongoDB mongo.configServer.connections.current connections.current MongoDB mongo.configServer.connections.totalCreated connections.totalCreated MongoDB mongo.configServer.cursor.openNoTimeout cursor.openNoTimeout MongoDB mongo.configServer.cursor.openPinned cursor.openPinned MongoDB mongo.configServer.cursor.openTotal cursor.openTotal MongoDB mongo.configServer.cursor.timedOutPerSecond cursor.timedOutPerSecond MongoDB mongo.configServer.document.deletedPerSecond document.deletedPerSecond MongoDB mongo.configServer.document.insertedPerSecond document.insertedPerSecond MongoDB mongo.configServer.document.returnedPerSecond document.returnedPerSecond MongoDB mongo.configServer.document.updatedPerSecond document.updatedPerSecond MongoDB mongo.configServer.dur.commits dur.commits MongoDB mongo.configServer.dur.commitsInWriteLock dur.commitsInWriteLock MongoDB mongo.configServer.dur.compression dur.compression MongoDB mongo.configServer.dur.earlyCommits dur.earlyCommits MongoDB mongo.configServer.dur.preparingInMilliseconds dur.preparingInMilliseconds MongoDB mongo.configServer.dur.remappingInMilliseconds dur.remappingInMilliseconds MongoDB mongo.configServer.dur.timeCollectedCommitsInMilliseconds dur.timeCollectedCommitsInMilliseconds MongoDB mongo.configServer.dur.writingDataFilesInMilliseconds dur.writingDataFilesInMilliseconds MongoDB mongo.configServer.dur.writingJournalInMilliseconds dur.writingJournalInMilliseconds MongoDB mongo.configServer.flush.averageInMilliseconds flush.averageInMilliseconds MongoDB mongo.configServer.flush.flushesDisk flush.flushesDisk MongoDB mongo.configServer.flush.lastInMilliseconds flush.lastInMilliseconds MongoDB mongo.configServer.flush.totalInMilliseconds flush.totalInMilliseconds MongoDB mongo.configServer.getlasterror.wtimeMillisPerSecond getlasterror.wtimeMillisPerSecond MongoDB mongo.configServer.getlasterror.wtimeoutsPerSecond getlasterror.wtimeoutsPerSecond MongoDB mongo.configServer.globallock.activeClientsReaders globallock.activeClientsReaders MongoDB mongo.configServer.globallock.activeClientsTotal globallock.activeClientsTotal MongoDB mongo.configServer.globallock.activeClientsWriters globallock.activeClientsWriters MongoDB mongo.configServer.globallock.currentQueueReaders globallock.currentQueueReaders MongoDB mongo.configServer.globallock.currentQueueTotal globallock.currentQueueTotal MongoDB mongo.configServer.globallock.currentQueueWriters globallock.currentQueueWriters MongoDB mongo.configServer.globallock.totalTime globallock.totaltime MongoDB mongo.configServer.locks.collectionAcquireExclusive locks.collectionAcquireExclusive MongoDB mongo.configServer.locks.collectionAcquireIntentExclusive locks.collectionAcquireIntentExclusive MongoDB mongo.configServer.locks.collectionAcquireIntentShared locks.collectionAcquireIntentShared MongoDB mongo.configServer.locks.collectionAcquireWaitCountExclusive locks.collectionAcquireWaitCountExclusive MongoDB mongo.configServer.locks.collectionTimeAcquiringMicrosExclusive locks.collectionTimeAcquiringMicrosExclusive MongoDB mongo.configServer.locks.databaseAcquireExclusive locks.databaseAcquireExclusive MongoDB mongo.configServer.locks.databaseAcquireIntentExclusive locks.databaseAcquireIntentExclusive MongoDB mongo.configServer.locks.databaseAcquireIntentShared locks.databaseAcquireIntentShared MongoDB mongo.configServer.locks.databaseAcquireShared locks.databaseAcquireShared MongoDB mongo.configServer.locks.databaseAcquireWaitExclusive locks.databaseAcquireWaitExclusive MongoDB mongo.configServer.locks.databaseAcquireWaitIntentExclusive locks.databaseAcquireWaitIntentExclusive MongoDB mongo.configServer.locks.databaseAcquireWaitIntentShared locks.databaseAcquireWaitIntentShared MongoDB mongo.configServer.locks.databaseAcquireWaitShared locks.databaseAcquireWaitShared MongoDB mongo.configServer.locks.databaseTimeAcquiringMicrosExclusive locks.databaseTimeAcquiringMicrosExclusive MongoDB mongo.configServer.locks.databaseTimeAcquiringMicrosIntentExclusive locks.databaseTimeAcquiringMicrosIntentExclusive MongoDB mongo.configServer.locks.databaseTimeAcquiringMicrosIntentShared locks.databaseTimeAcquiringMicrosIntentShared MongoDB mongo.configServer.locks.databaseTimeAcquiringMicrosShared locks.databaseTimeAcquiringMicrosShared MongoDB mongo.configServer.locks.globalAcquireExclusive locks.globalAcquireExclusive MongoDB mongo.configServer.locks.globalAcquireIntentExclusive locks.globalAcquireIntentExclusive MongoDB mongo.configServer.locks.globalAcquireIntentShared locks.globalAcquireIntentShared MongoDB mongo.configServer.locks.globalAcquireShared locks.globalAcquireShared MongoDB mongo.configServer.locks.globalAcquireWaitExclusive locks.globalAcquireWaitExclusive MongoDB mongo.configServer.locks.globalAcquireWaitIntentExclusive locks.globalAcquireWaitIntentExclusive MongoDB mongo.configServer.locks.globalAcquireWaitIntentShared locks.globalAcquireWaitIntentShared MongoDB mongo.configServer.locks.globalAcquireWaitShared locks.globalAcquireWaitShared MongoDB mongo.configServer.locks.globalTimeAcquiringMicrosExclusive locks.globalTimeAcquiringMicrosExclusive MongoDB mongo.configServer.locks.globalTimeAcquiringMicrosIntentExclusive locks.globalTimeAcquiringMicrosIntentExclusive MongoDB mongo.configServer.locks.globalTimeAcquiringMicrosIntentShared locks.globalTimeAcquiringMicrosIntentShared MongoDB mongo.configServer.locks.globalTimeAcquiringMicrosShared locks.globalTimeAcquiringMicrosShared MongoDB mongo.configServer.locks.metadataAcquireExclusive locks.metadataAcquireExclusive MongoDB mongo.configServer.locks.oplogAcquireExclusive locks.oplogAcquireExclusive MongoDB mongo.configServer.locks.oplogAcquireIntentExclusive locks.oplogAcquireIntentExclusive MongoDB mongo.configServer.locks.oplogAcquireIntentShared locks.oplogAcquireIntentShared MongoDB mongo",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 243.3001,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integrations</em> metrics",
        "sections": "On-host <em>integrations</em> metrics",
        "body": " elasticsearch.node.transport.packetsReceivedInBytes transport.packetsReceivedInBytes ElasticSearch elasticsearch.node.transport.packetsSent transport.packetsSent ElasticSearch elasticsearch.node.transport.packetsSentInBytes transport.packetsSentInBytes <em>F5</em> <em>f5</em>.node.availabilityState node.availabilityState <em>F5</em> <em>f5</em>.node.connections"
      },
      "id": "603e8a8a64441f69a34e8841"
    },
    {
      "sections": [
        "F5 monitoring integration",
        "Compatibility and requirements",
        "F5 BIG-IP users and privileges",
        "Tip",
        "Install and activate",
        "Linux installation",
        "Windows installation",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Example configuration",
        "Find and use data",
        "Metric data",
        "System sample metrics",
        "Virtual server sample metrics",
        "Pool sample metrics",
        "Pool member sample metrics",
        "Node sample metrics",
        "Inventory data",
        "Pool Inventory",
        "Node inventory",
        "Pool Member Inventory",
        "Virtual Server Inventory",
        "System Inventory",
        "Application Inventory",
        "Check the source code"
      ],
      "title": "F5 monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "86250de7e0529371148dab5e96960893b88288b8",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/f5-monitoring-integration/",
      "published_at": "2021-07-02T16:01:56Z",
      "updated_at": "2021-05-15T23:51:31Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our F5 BIG-IP integration collects and sends inventory and metrics from your F5 BIG-IP instance to our platform, where you can aggregate and visualize key performance metrics. We collect data at the system, application, pool, pool member, virtual server, and node levels. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with F5 BIG-IP 11.6 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Linux distribution or Windows version compatible with the infrastructure agent. F5 BIG-IP user account with Access Auditor-level user privileges and iControl REST API access permissions. F5 BIG-IP users and privileges To create a new user and assign user permissions: Create a user account with, at minimum, Access Auditor-level permissions. For instructions, see the F5 official documentation. Once the user has been created, assign the user iControl REST user permissions. Tip Administrator-level permissions may be required to collect some system sample metrics or system inventory configuration data. For more information on user permission levels, see User role access descriptions. Tip For detailed information on iControl users and permission, download and review the iControl REST User Guide. Install and activate To install the F5 BIG-IP integration, choose your setup: Linux installation Follow the instructions for installing an integration, using the file name nri-f5. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy of the sample configuration file: sudo cp f5-config.yml.sample f5-config.yml Copy Edit the f5-config.yml file as described in the configuration settings. Restart the infrastructure agent. Windows installation Download the nri-f5 MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-f5/nri-f5-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-f5-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: copy f5-config.yml.sample f5-config.yml Copy Edit the f5-config.yml file as described in the configuration settings. Restart the infrastructure agent. Additional notes: We recommend you install the integration on a separate server and monitor F5 remotely. Advanced: It's also possible to install the integration from a tarball file. This gives you full control over the installation and configuration process. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example of the configuration file, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The f5-config.yml file accepts the following commands: all_data: collects both inventory and metrics for the BIG-IP instance. inventory: collects only the inventory (configuration) data for the BIG-IP instance. metrics: collects only the metrics data for the BIG-IP instance. Arguments The f5-config.yml commands accept the following arguments: username: The username for the F5 BIG-IP connection. This field is required. password: The password for the F5 BIG-IP connection. This field is required. hostname: The hostname for the F5 BIG-IP connection. Default: f5-host. port: The port on which F5 BIG-IP instance is running. Default: 443. timeout: The number of seconds to wait before a request times out. Default: 30. ca_bundle_file: Alternative certificate authority bundle file. ca_bundle_dir: Alternative certificate authority bundle directory. partition_filter: An array of the partitions to collect from, in JSON. Default: '[\"Common\"]'. Example configuration Example f5-config.yml file configuration: Example configuration integration_name: com.newrelic.f5 instances: - name: nri-f5 # command can be all_data, metrics, or inventory command: all_data arguments: # Username of the F5 instance username: admin # Password of the F5 instance password: admin # Hostname of the F5 instance hostname: f5-host # Port of the F5 instance port: 443 # CA certificate file ca_bundle_file: /etc/ca_certificate.crt # A JSON array of BIG-IP partitions to collect from. # The partition name should have no leading slash. # Defaults to '[\"Common\"]' partition_filter: '[\"Common\",\"MyOtherPartition\"]' # The number of seconds to wait before a request times out # Defaults to 30 timeout: 10 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data, go to one.newrelic.com > Infrastructure > Third-party services and select one of the F5 BIG-IP integration links. In New Relic Insights, F5 BIG-IP data is attached to the following Insights event types: F5BigIpSystemSample F5BigIpVirtualServerSample F5BigIpPoolSample F5BigIpPoolMemberSample F5BigIpNodeSample For more on how to find and use your data, see Understand integration data. Metric data The F5 BIG-IP integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as system., virtualserver., or pool.. System sample metrics These attributes can be found by querying the F5BigIpSystemSample event types. Metric Description system.cpuIdleTicksPerSecond Amount of CPU ticks that the CPU was idle per second. Requires Administrator-level user permissions to collect. system.cpuIdleUtilization Average percentage of time the CPU is idle. system.cpuInterruptRequestUtilization Average percentage of time the CPU is handling interrupt requests. system.cpuIOWaitUtilization Average percentage of time the CPU is waiting on IO. system.cpuNiceLevelUtilization Average percentage of time the CPU is handling nice level processes. system.cpuSoftInterruptRequestUtilization Average percentage of time the CPU is handling soft interrupt requests. system.cpuStolenUtilization Average percentage of time the CPU is handling reclaimed cycles by the hypervisor. system.cpuSystemTicksPerSecond Amount of CPU ticks used by the kernel processes per second. Requires Administrator-level user permissions to collect. system.cpuSystemUtilization Average percentage of time the CPU is used by the kernel. system.cpuUserTicksPerSecond Amount of CPU ticks used by user processes per second. Requires Administrator-level user permissions to collect. system.cpuUserUtilization Average percentage of time the CPU is used by user processes. system.memoryFreeInBytes Total amount of memory free, in bytes. system.memoryTotalInBytes Total amount of memory, in bytes. Requires Administrator-level user permissions to collect. system.memoryUsedInBytes Total amount of memory used, in bytes. Requires Administrator-level user permissions to collect. system.otherMemoryFreeInBytes Free memory reserved for control plane processes, in bytes. system.otherMemoryTotalInBytes Total memory reserved for control plane processes, in bytes. system.otherMemoryUsedInBytes Used memory reserved for control plane processes, in bytes. system.swapFreeInBytes Swap space free, in bytes. system.swapTotalInBytes Swap space total, in bytes. system.swapUsedInBytes Swap space used, in bytes. system.tmmMemoryFreeInBytes Free memory reserved for Traffic Management Microkernel (TMM), in bytes. system.tmmMemoryTotalInBytes Total memory reserved for Traffic Management Microkernel (TMM), in bytes. system.tmmMemoryUsedInBytes Used memory reserved for Traffic Management Microkernel (TMM), in bytes. Virtual server sample metrics These attributes can be found by querying the F5BigIpVirtualServerSample event types in Insights. Metric Description virtualserver.avaibilityState The BIG-IP defined availability. Options: 0 = Offline 1 = Unknown 2 = Online virtualserver.clientsideConnectionsPerSecond The rate of connections created through the client side of the object per second. virtualserver.cmpEnabled Indicates whether or not Cluster Multiprocessing (CMP) is enabled. virtualserver.cmpEnableMode Shows the Cluster Multiprocessing (CMP) mode indicators. Options: CMP disabled = none, disable, or single. CMP enabled = enable or all. virtualserver.connections The current number of connections from BIG-IP. virtualserver.csMaxConnDur Maximum connection duration from the client side of the object. virtualserver.csMinConnDur Minimum connection duration from the client side of the object. virtualserver.enabled The current enabled state. Options: 0 = Disabled 1 = Enabled virtualserver.ephemeralBytesInPerSecond Total number of bytes in through the ephemeral port per second. virtualserver.ephemeralBytesOutPerSecond Total number of bytes out through the ephemeral port per second. virtualserver.ephemeralConnectionsPerSecond The rate of connection creation through the ephemeral port per second. virtualserver.ephemeralCurrentConnections The current number of connections through the ephemeral port. virtualserver.ephemeralEvictedConnectionsPerSecond The number of connections that are evicted through the ephemeral port per second. virtualserver.ephemeralMaxConnections Maximum number of connections through the ephemeral port. virtualserver.ephemeralPacketsReceivedPerSecond The number of packets in through the ephemeral port per second. virtualserver.ephemeralPacketsSentPerSecond The number of packets out through the ephemeral port per second. virtualserver.ephemeralSlowKilledPerSecond The number of slow connections that are killed through the ephemeral port per second. virtualserver.evictedConnsPerSecond The rate of connections evicted per second. virtualserver.inDataInBytes The amount of data received from the BIG-IP virtual server, in bytes. virtualserver.outDataInBytes The amount of data sent to the BIG-IP virtual server, in bytes. virtualserver.packetsReceived The number of packets received from the BIG-IP virtual server. virtualserver.packetsSent The number of packets sent to the BIG-IP virtual server. virtualserver.requests The number of requests in the last collection interval to BIG-IP. virtualserver.slowKilledPerSecond The number of slow connections killed through the client side of the object per second. virtualserver.statusReason An explanation of the current status. virtualserver.usageRatio The usage ratio for the virtual server. Pool sample metrics These attributes can be found by querying the F5BigIpPoolSample event types in Insights. Metric Description pool.activeMembers The number of active pool members. pool.availabilityState The current availability state. Options: 0 = Offline 1 = Unknown 2 = Online pool.connections The current number of connections. pool.connqAgeEdm The queue age exponential-decaying max. pool.connqAgeEma The queue age exponential-moving average. pool.connqAgeHead The current queue age head. pool.connqAgeMax The queue age all-time max. pool.connqAllAgeEdm The sum of pool member queue age exponential-decaying max. pool.connqAllAgeEma The sum of pool member queue age exponential-moving average. pool.connqAllAgeHead The sum of pool member queue age head. pool.connqAllAgeMax The sum of pool member queue age all-time max. pool.connqAllDepth The sum of pool member depth. pool.connqDepth The queue depth. pool.currentConnections The current connections. pool.enabled The current enabled state, can be user defined. Options: 0 = Disabled 1 = Enabled pool.inDataInBytes The amount of data received from the BIG-IP pool, in bytes. pool.minActiveMembers Pool minimum active members. pool.outDataInBytes The amount of data sent to the BIG-IP pool, in bytes. pool.packetsReceived The number of packets received from the BIG-IP pool. pool.packetsSent The number of packets sent to the BIG-IP pool. pool.requests The total number of requests to the pool. pool.statusReason Textual property explaining the overall health reason. Pool member sample metrics These attributes can be found by querying the F5BigIpPoolMemberSample event types in Insights. Metric Description member.availabilityState The current availability from the BIG-IP system. Options: 0 = Offline 1 = Unknown 2 = Online member.connections The current connections. member.enabled Enabled state of the pool member with regards to the parent pool. Options: 0 = Disabled 1 = Enabled member.inDataInBytes The amount of data received from the BIG-IP pool member, in bytes. member.monitorStatus The status of the monitor. Options: 0 = Down 1 = Unchecked 2 = Any other status member.outDataInBytes The amount of data sent to the BIG-IP pool member, in bytes. member.packetsReceived The number of packets received from the BIG-IP pool member. member.packetsSent The number of packets sent to the BIG-IP pool member. member.requests The current number of requests over the last collection interval. member.sessions The current session count. member.sessionStatus The current session health status. Options: 0 = Disabled 1 = Enabled member.state The current state. Options: 0 = Down 1 = Up member.statusReason Explanation of the current status. Node sample metrics These attributes can be found by querying the F5BigIpNodeSample event types in Insights. Metric Description node.availabilityState The current BIG-IP availability state to the node. Options: 0 = Offline 1 = Unknown 2 = Online node.connections The current number of network connections from BIG-IP. node.connectionsPerSecond The number of connections made per second. node.enabled The current BIG-IP enabled state. Options: 0 = Disabled 1 = Enabled , node.inDataInBytes The amount of data received from the BIG-IP node, in bytes. node.monitorStatus The current health monitor rule status. Options: 0 = Down 1 = Unchecked 2 = Any other status node.outDataInBytes The amount of data sent to the BIG-IP node, in bytes. node.packetsReceived The number of packets received from the BIG-IP node. node.packetsSent The number of packets sent to the BIG-IP node. node.requests The current number of requests over the last collection from BIG-IP. node.sessions The current number of sessions. node.sessionStatus The current status of the session. Options: 0 = Disabled 1 = Enabled node.statusReason BIG-IP reason for the current status. Inventory data The F5 BIG-IP integration also collects configuration data at system, application, pool, pool member, virtual server, and node levels. The data is available on the Infrastructure Inventory page, under the config/f5 source. For more about inventory data, see Understand integration data. The integration captures data for the following F5 BIG-IP configuration parameters: Pool Inventory Metric Description currentLoadMode Current load balancing mode. description User defined description. kind Kind of pool. maxConnections Current max number of connections seen at one point. monitorRule Current health monitoring rule applied. Node inventory Metric Description address BIG-IP network address to send to the node. fqdn FQDN of node. kind Type of Node in BIG-IP. maxConnections Current highest number of network connections reported from BIG-IP. monitorRule BIG-IP Health Monitor rule. Pool Member Inventory Metric Description kind Type of Pool member. maxConnections Current highest number of network connections reported from BIG-IP. monitorRule BIG-IP health monitor rule. nodeName Name of the node the pool member is using. poolName Name of the pool the pool member belongs. port Port the pool member listens on. Virtual Server Inventory Metric Description applicationService Current application service assigned. destination Destination address picked up by BIG-IP. kind Type of virtual server. maxConnections Current highest number of network connections reported from BIG-IP. name User defined name. pool Pool the virtual server uses for load balancing. System Inventory Metric Description chassisSerialNumber Chassis Serial Number for the current device. Requires Access Administrator-level user permissions to collect. platform Platform of the current device. Requires Access Administrator-level user permissions to collect. product Product Name for the current device. Requires Access Administrator-level user permissions to collect. Application Inventory Metric Description deviceGroup Device group running application service. kind BIG-IP Defined type. name User defined name. poolToUse Server side pool load balancing requests. template Template applied to application including security and monitoring rules. templateModified Indicator of modifications made to out of the box template. trafficGroup Current traffic group to which service is applied. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 240.20938,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>F5</em> monitoring <em>integration</em>",
        "sections": "<em>F5</em> monitoring <em>integration</em>",
        "tags": "<em>Integrations</em>",
        "body": " for the current status. Inventory data The <em>F5</em> BIG-IP <em>integration</em> also collects configuration data at system, application, pool, pool member, virtual server, and node levels. The data is available on the Infrastructure Inventory page, under the config&#x2F;<em>f5</em> <em>source</em>. For more about inventory data, see"
      },
      "id": "6044e41ce7b9d2f0975799b4"
    },
    {
      "sections": [
        "Request queue server configuration examples",
        "Apache",
        "Nginx",
        "F5 load balancers",
        "Network timing"
      ],
      "title": "Request queue server configuration examples",
      "type": "docs",
      "tags": [
        "APM",
        "APM UI pages",
        "Features"
      ],
      "external_id": "c7a069b8875af411530a34aaef67155d20d7fb19",
      "image": "",
      "url": "https://docs.newrelic.com/docs/apm/applications-menu/features/request-queue-server-configuration-examples/",
      "published_at": "2021-07-02T12:46:10Z",
      "updated_at": "2021-03-16T07:13:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "In order to report request queuing, New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or F5). These examples use the X-Request-Start header, since it is has broader support across platforms. If this does not work with your server configuration for request queuing, try using the X-Queue-Start header. The syntax should otherwise be the same. Apache Apache's mod_headers module includes a %t variable that is formatted correctly. To enable request queue reporting, add this code to your Apache config: RequestHeader set X-Request-Start \"%t\" Copy Nginx If you are using Nginx version 1.2.6 or higher and the latest version of the Ruby, Python, or PHP agent, Nginx can easily be configured to report queue time. (For Nginx versions 1.2.6 or lower, you must recompile Nginx with a module or patch.) Configuring with Nginx 1.2.6 or higher uses the ${msec} variable, which is a number in seconds with milliseconds resolution. For more information, see http://nginx.org/en/docs/http/ngx_http_core_module.html#variables. Add the appropriate information to your Nginx config: Nginx configuration Values General Nginx use proxy_set_header X-Request-Start \"t=${msec}\"; Copy Passenger Version 5 or higher: >passenger_set_header X-REQUEST-START \"t=${msec}\"; Copy Older versions: passenger_set_cgi_param X_REQUEST_START \"t=${msec}\"; Copy fastcgi fastcgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy uWSGI uwsgi_param HTTP_X_REQUEST_START \"t=${msec}\"; Copy F5 load balancers For F5 load balancers, use this configuration snippet: when HTTP_REQUEST_SEND { # TCL 8.4 so we have to calculate the time in millisecond resolution # Calculation from: https://groups.google.com/forum/? fromgroups=#!topic/comp.lang.tcl/tV9H6TDv0t8 set secs [clock seconds] set ms [clock clicks -milliseconds] set base [expr { $secs * 1000 }] set fract [expr { $ms - $base }] if { $fract >= 1000 } { set diff [expr { $fract / 1000 }] incr secs $diff incr fract [expr { -1000 * $diff }] } set micros [format \"%d%03d000\" $secs $fract] # Want this header inserted as if coming from the client clientside { HTTP::header insert X-Request-Start \"t=${micros}\" } } Copy Network timing Even with request queuing configured, the front-end server's setup can still affect network time in your Browser data. This is because the front-end server does not add the queuing time header until after it actually accepts and processes the request. The queuing time headers can never account for backlog in the listener socket used to accept requests. For example, if the front-end server's configuration results in a backlog of requests that queue in the listener socket, page load timing will show an increase in network time.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 168.77058,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "<em>F5</em> load balancers",
        "tags": "<em>Features</em>",
        "body": "In order to report request queuing, New Relic agents depend on an HTTP header set by the front-end web server (such as Apache or Nginx) or load balancer (such as HAProxy or <em>F5</em>). These examples use the X-Request-Start header, since it is has broader support across platforms. If this does not work"
      },
      "id": "603eb84a28ccbc1734eba7a5"
    }
  ],
  "/docs/integrations/host-integrations/open-source-host-integrations-list/memcached-open-source-integration": [
    {
      "sections": [
        "New Relic guided install overview",
        "Supported APM agents",
        "Why it matters",
        "Some technical detail",
        "Important",
        "On-host integration (OHI) recipes",
        "Troubleshoot common problems",
        "MySQL: Incorrect user permissions",
        "NGINX: No status URL"
      ],
      "title": "New Relic guided install overview",
      "type": "docs",
      "tags": [
        "Full-Stack Observability",
        "Observe everything",
        "Get started"
      ],
      "external_id": "2058522f6cb1e82dbbe111a176c22ec4aa515ae5",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/new-relic-guided-install-overview/",
      "published_at": "2021-07-01T22:12:01Z",
      "updated_at": "2021-05-09T18:29:35Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Instrument your systems and send telemetry data to New Relic with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click the Guided install button. If your account reports data through our EU datacenter, click EU Guided install. Guided install EU Guided install Our infrastructure agent discovers the applications and infrastructure and log sources running in your environment, and recommends which ones should be instrumented. The install automates the configuration and deployment of each system you choose to instrument. Supported APM agents If you have a .NET Windows application on IIS, the guided install configures and enables an APM agent. Guided install for .NET EU Guided install for .NET Why it matters With our guided install, you can instrument your applications and infrastructure and start seeing your data in New Relic in minutes. The guided install uses our command line interface (CLI), the infrastructure agent for your host environment, and a library of installation recipes to instrument your applications and infrastructure for you. That means less toil for you. Because our instrumentation recipes are open source, you can modify existing recipes, or build new ones, to suit your needs. Some technical detail The New Relic guided install uses open source installation recipes to instrument on-host integrations. These recipes include installation and setup commands, information about logs, and metadata related to what’s being installed. They're collected in a YAML file for each type of system and have all of the installation details necessary to install the infrastructure agent for a specific integration. Important On Windows, our guided install only supports Microsoft SQL Server, logs, and the infrastructure agent. All other integrations are only supported on Linux. On-host integration (OHI) recipes The guided install automates the discovery, configuration, and installation of OHIs. However, there may be times when you want to instrument them one-by-one using the CLI install command. To install any individual on-host integration, run this command: curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=API_KEY NEW_RELIC_ACCOUNT_ID=ACCOUNT_ID /usr/local/bin/newrelic install -n INTEGRATION-FLAG Copy For example: curl -Ls https://raw.githubusercontent.com/newrelic/newrelic-cli/master/scripts/install.sh | bash && sudo NEW_RELIC_API_KEY=<API_KEY> NEW_RELIC_ACCOUNT_ID=<ACCOUNT_ID> /usr/local/bin/newrelic install -n apache-open-source-integration Copy The table lists the integrations supported by the guided install CLI command. The specific on-host integration commands are provided for your reference. Our open source integrations send performance metrics and inventory data from your servers and applications to the New Relic platform. You can view pre-built dashboards of your metric data, create alert policies, and create your own custom queries and charts. Integration Command Apache newrelic install -n apache-open-source-integration Cassandra newrelic install -n cassandra-open-source-integration Couchbase newrelic install -n couchbase-open-source-integration ElasticSearch newrelic install -n elasticsearch-open-source-integration HAProxy newrelic install -n haproxy-open-source-integration HashiCorp Consul newrelic install -n hashicorp-consul-open-source-integration JMX newrelic install -n jmx-open-source-integration Memcached newrelic install -n memcached-open-source-integration Microsoft SQL Server (Windows only) newrelic install -n mssql-server-integration-installer MongoDB newrelic install -n mongodb-open-source-integration MySQL newrelic install -n mysql-open-source-integration Nagios newrelic install -n nagios-open-source-integration Nginx newrelic install -n nginx-open-source-integration PostgreSQL newrelic install -n postgres-open-source-integration RabbitMQ newrelic install -n rabbitmq-open-source-integration Redis newrelic install -n redis-open-source-integration Varnish Cache newrelic install -n varnish-cache-open-source-integration Troubleshoot common problems As we identify areas where the guided install fails, we'll document them here and provide some troubleshooting guidance. MySQL: Incorrect user permissions To monitor MySQL health data, you need a valid username and password with specific permissions. These commands will create a user and grant the required permissions: Create a user newrelic@localhost with a specific password. sudo mysql -e \"CREATE USER 'newrelic'@'localhost' IDENTIFIED BY 'YOUR_SELECTED_PASSWORD';\" Copy Give replication privileges to newrelic@localhost with a maximum of 5 connections. sudo mysql -e \"GRANT REPLICATION CLIENT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;\" Copy Give select privileges to newrelic@localhost with a maximum of 5 connections. sudo mysql -e \"GRANT SELECT ON *.* TO 'newrelic'@'localhost' WITH MAX_USER_CONNECTIONS 5;\" Copy Once done, your next guided install attempt should work. NGINX: No status URL To monitor your NGINX server, you'll need to configure a valid status URL. status_url: The URL set up to provide the metrics using the status module. If the default value of 127.0.0.1 is incorrect, substitute the address/FQDN/URL for your system. Example: status_url: http://127.0.0.1/status You can read more about the status_url in these NGINX docs: For NGINX Open Source: HTTP stub status module For NGINX Plus: HTTP status module and HTTP API module There are different ways to set status_url, depending on how NGINX was installed: If enabled via Kubernetes: See Monitor services running on Kubernetes. If enabled via Amazon ECS: See Monitor services running on ECS. If installed on-host: Edit the config in the integration's YAML config file, nginx-config.yml.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 418.66922,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "On-host <em>integration</em> (OHI) recipes",
        "body": "-<em>source</em>-<em>integration</em> ElasticSearch newrelic install -n elasticsearch-<em>open</em>-<em>source</em>-<em>integration</em> HAProxy newrelic install -n haproxy-<em>open</em>-<em>source</em>-<em>integration</em> HashiCorp Consul newrelic install -n hashicorp-consul-<em>open</em>-<em>source</em>-<em>integration</em> JMX newrelic install -n jmx-<em>open</em>-<em>source</em>-<em>integration</em> <em>Memcached</em> newrelic"
      },
      "id": "604130a7e7b9d299cb2a07c0"
    },
    {
      "sections": [
        "View your OpenTelemetry data in New Relic",
        "Explorer: Get the big picture along with the details",
        "Summary page",
        "Distributed tracing",
        "Tip",
        "Transactions",
        "Databases",
        "Externals",
        "Errors",
        "Logs",
        "Metrics explorer",
        "Data explorer and query builder"
      ],
      "title": "View your OpenTelemetry data in New Relic",
      "type": "docs",
      "tags": [
        "Integrations",
        "Open source telemetry integrations",
        "OpenTelemetry"
      ],
      "external_id": "a5213cb2206f4c161dd97c015a7c6679b08e867b",
      "image": "https://docs.newrelic.com/static/2f8a3baa6793edf958ecb9db5346efa7/c1b63/explorer_otel_services.png",
      "url": "https://docs.newrelic.com/docs/integrations/open-source-telemetry-integrations/opentelemetry/view-your-opentelemetry-data-new-relic/",
      "published_at": "2021-07-02T16:40:39Z",
      "updated_at": "2021-06-20T10:17:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "After you import OpenTelemetry data into New Relic, you can use a variety of tools to analyze it. Take a look at these UI options: Explorer Data explorer and query builder Explorer: Get the big picture along with the details The New Relic explorer is a good place to get overview information about your applications, as well as detailed information, such as distributed tracing. To get started with the explorer: Go to one.newrelic.com and click Explorer. In the left sidebar, click Services - OpenTelemetry: Click the service you want to know more about. If you need help understanding the data, see the explanations which follow. Summary page The opening page of the explorer is the Summary page listing various golden signals about your entity. Golden signals are key monitoring details such as response time, throughput, and error rate. By using this information, you can quickly decide if you need to dig deeper. Distributed tracing When you access distributed tracing through the explorer, you are looking at traces that include that service. Once you’re in that service, you can filter spans to find the ones you want. For example, to query service.name or trace.id, you can use the following: service.name = YOUR_SERVICE_NAME trace.id = YOUR_TRACE_ID For more ways to filter and analyze your spans, see our distributed tracing UI page. Tip If you prefer to search traces across all New Relic accounts in your organization, you can go outside explorer: one.newrelic.com > Apps > Favorites > Distributed tracing. Transactions Use Transactions to identify slow or error transactions that might be causing a spike in your application's response time. To get a list of transactions: From the Transaction Summary page, select the transactions table. Databases The Databases page shows an application's database and cache data. The page shows individual database transactions as a sortable table, and shows operations, throughput, and response time as charts. Externals Externals capture calls to out-of-process services such as web services, resources in the cloud, and other network entities. Errors On the Errors page, you can see total errors as well as charts showing error count and error rate. Logs The Logs page displays logs from your application. For more information about how to associate log data to your application in New Relic, see our OpenTelemetry and logging documentation. Metrics explorer For selected OpenTelemetry languages, you can see information about your metrics in this section. Also, if you are using the Prometheus exporter with OpenTelemetry, you can view your metric data here. Data explorer and query builder Explore your metrics and traces using the data explorer, or write your own queries in query builder using NRQL. For more on how to query your data once it's in New Relic, see Query your data and Introduction to NRQL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 147.16235,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "View your <em>OpenTelemetry</em> data in New Relic",
        "sections": "View your <em>OpenTelemetry</em> data in New Relic",
        "tags": "<em>Open</em> <em>source</em> telemetry <em>integrations</em>",
        "body": "After you import <em>Open</em>Telemetry data into New Relic, you can use a variety of tools to analyze it. Take a look at these UI options: Explorer Data explorer and query builder Explorer: Get the big picture along with the details The New Relic explorer is a good place to get overview information about"
      },
      "id": "6044e5dfe7b9d283d3579a04"
    },
    {
      "sections": [
        "OpenTelemetry: Endpoint configuration",
        "EU region",
        "Tip",
        "Infinite Tracing"
      ],
      "title": "OpenTelemetry: Endpoint configuration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Open source telemetry integrations",
        "OpenTelemetry"
      ],
      "external_id": "770eb7e4d89b3e05ef34c3f8a4b7d731cba14b33",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/open-source-telemetry-integrations/opentelemetry/opentelemetry-endpoints/",
      "published_at": "2021-07-02T16:39:27Z",
      "updated_at": "2021-06-19T23:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can change the New Relic endpoints where you send your data. By default, New Relic OpenTelemetry exporters send data to these US data centers: Spans: https://trace-api.newrelic.com/trace/v1 Metrics: https://metric-api.newrelic.com/metric/v1 You may need to override these default endpoints to send data to the EU region or to use Infinite Tracing. EU region To send telemetry data to New Relic’s endpoints in the EU region, use the following: Tip These URLs don't apply to Infinite Tracing Spans: https://trace-api.eu.newrelic.com/trace/v1 Metrics: https://metric-api.eu.newrelic.com/trace/v1 Infinite Tracing If you are setting up Infinite Tracing, you need to override the default span endpoint and send telemetry data to the New Relic trace observer: Follow the steps in Set up the trace observer to get the value for YOUR_TRACE_OBSERVER_URL. Use the value of YOUR_TRACE_OBSERVER_URL to configure your integration. Since you want New Relic to analyze all your traces, make sure to verify that your OpenTelemetry integrations use the AlwaysOn sampler.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 146.20078,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>OpenTelemetry</em>: Endpoint configuration",
        "sections": "<em>OpenTelemetry</em>: Endpoint configuration",
        "tags": "<em>Open</em> <em>source</em> telemetry <em>integrations</em>",
        "body": " to configure your <em>integration</em>. Since you want New Relic to analyze all your traces, make sure to verify that your <em>Open</em>Telemetry integrations use the AlwaysOn sampler."
      },
      "id": "60ce822964441f4ff391f8dd"
    }
  ],
  "/docs/integrations/host-integrations/troubleshooting/not-seeing-host-integration-data": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.08644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.85924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.38626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/troubleshooting/pass-infrastructure-agent-parameters-host-integration": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.08644,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.85924,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.38626,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/troubleshooting/run-integrations-manually": [
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 212.0863,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "JMX monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin. The java binary must be in one of those paths. On-<em>host</em> <em>integrations</em> do not automatically update. For best results, regularly update the integration package"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 172.85913,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the <em>host</em> running the infrastructure agent. Via the command line, change the directory to the <em>integrations</em> configuration folder: cd &#x2F;etc&#x2F;newrelic-infra"
      },
      "id": "60450959e7b9d2475c579a0f"
    },
    {
      "sections": [
        "Microsoft SQL Server monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Microsoft SQL users and privileges",
        "Install and activate",
        "32-bit Windows",
        "64-bit Windows",
        "Configure the integration",
        "Important",
        "Commands",
        "Arguments",
        "Tip",
        "Example configurations",
        "Configuration for one query",
        "Configuration for multiple queries",
        "Find and use data",
        "Metric data",
        "Database metrics",
        "Instance metrics",
        "Wait metrics",
        "Inventory data",
        "Check the source code"
      ],
      "title": "Microsoft SQL Server monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "67275d2c4aca22f026b50f733e6a804a3cb5a111",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/microsoft-sql-server-monitoring-integration/",
      "published_at": "2021-07-04T01:54:30Z",
      "updated_at": "2021-06-30T01:53:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our Microsoft SQL Server integration collects and sends inventory and metrics from your MS SQL Server environment to our platform, where you can see the health of your MS SQL Server environment. We collect both database and instance-level metrics so that you can pinpoint the source of any problems. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Microsoft SQL Server 2008 R2 SP3 or higher. Before installing the integration, make sure that you meet the following requirements: Install the infrastructure agent. Windows distribution compatible with the infrastructure agent. Microsoft SQL Server user or Domain user with user privileges for both CONNECT and VIEW SERVER STATE, and READ access permissions. Quick start Instrument your MS SQL Server environment quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the Microsoft SQL Server integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your MS SQL Server environment. Microsoft SQL users and privileges In the Microsoft SQL Server that is to be monitored, execute the following script to create a new user and grant CONNECT, VIEW SERVER STATE, and read access permissions to that user. See the Microsoft documentation for details on creating logins and users in Microsoft SQL Server. Use the following statements to create a new login and to grant CONNECT and VIEW SERVER STATE permissions to the login. USE master; CREATE LOGIN newrelic WITH PASSWORD = 'tmp_password'; --insert new password here GRANT CONNECT SQL TO newrelic; GRANT VIEW SERVER STATE TO newrelic; GRANT VIEW ANY DEFINITION TO newrelic; Copy Use the following statements to grant read access privileges to the user. DECLARE @name SYSNAME DECLARE db_cursor CURSOR READ_ONLY FORWARD_ONLY FOR SELECT NAME FROM master.sys.databases WHERE NAME NOT IN ('master','msdb','tempdb','model','rdsadmin','distribution') OPEN db_cursor FETCH NEXT FROM db_cursor INTO @name WHILE @@FETCH_STATUS = 0 BEGIN EXECUTE('USE \"' + @name + '\"; CREATE USER newrelic FOR LOGIN newrelic;' ); FETCH next FROM db_cursor INTO @name END CLOSE db_cursor DEALLOCATE db_cursor Copy Run the following command to verify that the user was successfully created. sqlcmd -U user_name -S host_name Copy Install and activate To install the Microsoft SQL Server integration: Download the latest .MSI installer image from: 32-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/386/nri-mssql-386.msi Copy 64-bit Windows http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-mssql/nri-mssql-amd64.msi Copy In an admin account, run the install script using an absolute path. 32-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd386.msi Copy 64-bit Windows msiexec.exe /qn /i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. For an example configuration, see the example config file. Important With secrets management, you can configure on-host integrations with New Relic Infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Commands The mssql-config.yml file accepts the following commands: all_data: collects both inventory and metric data from the Microsoft SQL Server environment. Arguments The all_data command accepts the following arguments: username: username used to authenticate the MS SQL Server. To use Windows Authentication, specify this argument in the DOMAIN\\username form. This field is required. password: password used to authenticate the MS SQL Server. This field is required. hostname: hostname or IP of the MS SQL Server installation. Default: 127.0.0.1. port: port number on which the MS SQL Server is listening. This is only required when instance is not specified. instance: instance the Microsoft SQL Server is connected to. instance can be used in place of port by enabling SQL Browser; if enabled, do not include port in the argument. enable_ssl: indicates whether SSL is used to connect to the MS SQL Server. Default: false. trust_server_certificate: if set to true, server certificate is not verified for SSL. If set to false, certificate will be verified against supplied certificate. certificate_location: certificate file to verify SSL encryption against. timeout: timeout for queries, in seconds. Default: 30. enable_buffer_metrics: enables the collection of buffer pool metrics. These can be resource intensive for large systems. Default: true. enable_database_reserve_metrics: enables the collection of database partition reserve space. These can be resource intensive for large systems. Default: true. custom_metrics_query: an SQL query with the required columns metric_name, metric_type, and metric_value. The metric_type can be gauge, rate, delta, or attribute. Additional columns collected with the query are added to the metric set as attributes. Custom queries metrics will be attached to the MssqlCustomQuerySample event type. custom_metrics_config: full path and file name for an external queries YAML file. Use this instead of custom_metrics_query if you need execute multiple custom queries. For an example configuration, see the example config file. extra_connection_url_args: appends additional parameters to connection URL. Ex. 'applicationintent=readonly&foo=bar' Tip If both port and instance are omitted, the default port of 1433 is used. Example configurations Example mssql-config.yml file configuration: Configuration for one query integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_query: >- SELECT 'instance_buffer_pool_size' AS metric_name, Count_big(*) * (8*1024) AS metric_value, 'gauge' as metric_type, database_id FROM sys.dm_os_buffer_descriptors WITH (nolock) GROUP BY database_id labels: env: production role: mssql Copy Configuration for multiple queries If you need multiple SQL queries, add them to mssql-custom-query.yml, and then reference that file. integration_name: com.newrelic.mssql instances: - name: mssql-server command: all_data arguments: hostname: mssql.localnet username: mssql_user password: mssql_password port: 1433 custom_metrics_config: full_path_to_file labels: env: production role: mssql Copy Here's an example mssql-custom-query.yml. queries: # Example for metric_name / metric_type specified in this config - query: SELECT count(*) AS 'metric_value' FROM sys.databases metric_name: dbCount metric_type: gauge # Example for metric_name from query, metric_type auto-detected, additional attribute 'category_type' - query: SELECT CONCAT('category_', category_id) AS metric_name, name AS metric_value, category_type FROM syscategories database: msdb # Example for stored procedure 'exec dbo.sp_server_info @attribute_id = 2' - query: dbo.sp_server_info @attribute_id = 2 Copy For more about the general structure of on-host integration configuration, see Configuration. Find and use data To find your integration data go to one.newrelic.com > Infrastructure > Third-party services and select one of the Microsoft SQL Server integration links. Microsoft SQL Server data is attached to the following event types: MssqlDatabaseSample MssqlInstanceSample MssqlWaitSample MssqlCustomQuerySample (if you running custom queries) For more on how to find and use your data, see Understand integration data. Metric data The Microsoft SQL Server integration collects the following metric data attributes. Some metric name are prefixed with a category indicator and a period, such as asserts. or flush.. Database metrics These attributes can be found by querying the MssqlDatabaseSample event. Metric Description bufferpool.sizePerDatabaseInBytes The size of the buffer pool per database. io.stallInMilliseconds Wait time of stall since last restart, in milliseconds. log.transactionGrowth Total number of times the transaction log for the database has been expanded since the last restart. pageFileAvailable Available page file size, in bytes. pageFileTotal Total page file size, in bytes. Instance metrics The Microsoft SQL Server integration collects the following instance metrics. These attributes can be found by querying the MssqlInstanceSample event. Metric Description access.pageSplitsPerSecond The number of page splits per second. activeConnections The number of active connections. buffer.checkpointPagesPerSecond The number of pages flushed to disk per second by a checkpoint or other operation that require all dirty pages to be flushed. bufferpool.batchRequestsPerSecond The number of batch requests per second on the buffer pool. bufferpool.pageLifeExptancyInMilliseconds The life expectancy of a page in the buffer pool, in milliseconds. bufferpool.sizeInBytes The size of the buffer pool, in bytes. instance.backgroundProcessesCount The number of background processes on the instance. instance.blockedProcessesCount The number of blocked processes on the instance. instance.diskInBytes The amount of disk space on the instance, in bytes. instance.dormantProcessesCount The number of dormant processes on the instance. instance.forcedParameterizationsPerSecond The number of forced parameterizations per second on the instance. instance.preconnectProcessesCount The number of preconnect processes on the instance. instance.runnableProcessesCount The number of runnable processes on the instance. instance.runnableTasks The number of runnable tasks on the instance. instance.runningProcessesCount The number of running processes on the instance. instance.sleepingProcessesCount The number of sleeping processes on the instance. instance.suspendedProcessesCount The number of suspended processes on the instance. instance.transactionsPerSecond The number of transactions per second on the instance. memoryAvailable The available physical memory, in bytes. memoryTotal The total physical memory, in bytes. memoryUtilization The percentage of memory utilization. stats.connections The number of user connections. stats.deadlocksPerSecond The number of lock requests per second that resulted in a deadlock since the last restart. stats.killConnectionErrorsPerSecond The number of kill connection errors per second since the last restart. stats.lockWaitsPerSecond The number of times per second that MS SQL Server is unable to retain a lock right away for a resource. stats.sqlCompilations The number of MS SQL compilations per second. stats.sqlRecompilationsPerSecond The number of MS SQL re-compilations per second. stats.userErrorsPerSecond The number of user errors per second since the last restart. system.bufferPoolHitPercent The percentage of buffer pools hits on the instance. system.waitTimeInMillisecondsPerSecond The number of milliseconds per second spent waiting across the instance. Wait metrics These attributes can be found by querying the MssqlWaitSample event. Metric Description system.waitTimeCount Total wait time for this wait type, in milliseconds. This time is inclusive of signal_wait_time_ms. system.waitTimeInMillisecondsPerSecond The number of waits on this wait type, in milliseconds. This counter is incremented at the start of each wait. Inventory data The Microsoft SQL Server integration captures the configuration parameters and current settings of the Microsoft SQL Server environment. It collects the results of the sp_configure stored procedure, as well as current running configuration settings from the sys.configurations table. The data is available on the Inventory page, under the config/mssql source. For more about inventory data, see Understand integration data. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 153.3862,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Microsoft SQL Server monitoring <em>integration</em>",
        "sections": "Microsoft SQL Server monitoring <em>integration</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "-mssql-amd386.msi Copy 64-bit Windows msiexec.exe &#x2F;qn &#x2F;i PATH\\TO\\nri-mssql-amd64.msi Copy Rename C:\\Program Files\\New Relic\\newrelic-infra\\<em>integrations</em>.d\\mssql-config.yml.sample to mssql-config.yml, and edit according to your instance. Restart the infrastructure agent. Additional notes: On-<em>host</em>"
      },
      "id": "6043a676196a67eb76960f7b"
    }
  ],
  "/docs/integrations/host-integrations/understand-use-data/host-integration-data-collection-reporting": [
    {
      "sections": [
        "Remote monitoring in on-host integrations",
        "Important",
        "Effects of activating remote_monitoring",
        "Alert verification",
        "New entity attributes",
        "Changes in recorded metrics",
        "Unrecorded attributes",
        "Updated hostname"
      ],
      "title": "Remote monitoring in on-host integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "Understand and use data"
      ],
      "external_id": "1cfea4c65b855ce9ac5078d2a36ba11b63a6101b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/understand-use-data/remote-monitoring-host-integrations/",
      "published_at": "2021-07-02T17:53:11Z",
      "updated_at": "2021-03-16T06:05:41Z",
      "document_type": "page",
      "popularity": 1,
      "body": "From a New Relic perspective, entity is a broad concept. An entity is anything New Relic can identify that has data you can monitor. Integrations can be configured to create their own entity, called a remote entity, by setting the remote_monitoring option to true. If set to false, an integration will be considered a local entity, and the data related to it will be attached to the host entity that the agent creates. Remote monitoring requires infrastructure agent version 1.2.25 or higher. For the Apache, Cassandra, MySQL, NGINX, and Redis integrations, remote monitoring (and multi-tenancy) is enabled by activating the configuration parameter remote_monitoring. Important If your Apache, Cassandra, MySQL, NGINX, or Redis service is located in the same host as the agent, when you activate remote monitoring the resulting entity will be considered as remote, regardless of its actual location. This may affect alerts, alter attributes, and have other effects, as explained here. Effects of activating remote_monitoring By enabling remote_monitoring, the integration becomes a different entity which is no longer attached to the infrastructure agent. As a result, the following items may be affected: Alert verification Enabling remote monitoring can affect your configured alerts in case they are using any of the values that are affected by this new feature. We strongly recommend checking your existing alerts to make sure they keep on working as expected. New entity attributes These attributes are modified in the resulting entity: Display name: New entity unique key (instead of using the display name) Entity GUID: New entity GUID Entity ID: New entity ID Entity key: New entity unique key (instead of using the display name) External key: Using integration entity name (instead of using the agent display) Changes in recorded metrics When remote monitoring is enabled, we will add the hostname and port values to all metrics. If the nricluster name or nriservice are defined in the integration configuration file, they will also be decorated. Unrecorded attributes Since the integration is now an independent entity which is not attached to the agent, the following agent attributes are not collected: agentName agentVersion coreCount criticalViolationCount fullHostname instanceType kernelVersion linuxDistribution entityType operatingSystem processorCount systemMemoryBytes warningViolationCount Your custom attributes Updated hostname For the ApacheSample, RedisSample, CassandraSample, and NginxSample integration metrics, we will use the integration configuration hostname instead of the short hostname from the agent. When the integration hostname is a loopback address, the agent will replace it in order to guarantee uniqueness.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 178.68427,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Remote monitoring in <em>on</em>-<em>host</em> <em>integrations</em>",
        "sections": "Remote monitoring in <em>on</em>-<em>host</em> <em>integrations</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": " will be considered a local entity, and the <em>data</em> related to it will be attached to the <em>host</em> entity that the agent creates. Remote monitoring requires infrastructure agent version 1.2.25 or higher. For the Apache, Cassandra, MySQL, NGINX, and Redis <em>integrations</em>, remote monitoring (and multi-tenancy"
      },
      "id": "603ec000e7b9d216732a07ef"
    },
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.46603,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "Find <em>and</em> <em>use</em> <em>data</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". trust_store_password: the password for the trust store. Important With secrets management, you can configure on-<em>host</em> <em>integrations</em> with New Relic infrastructure&#x27;s agent to <em>use</em> sensitive <em>data</em> (such as passwords) without having to write them as plain text into the integration&#x27;s configuration file. For more information"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.31287,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can <em>use</em> New Relic to report <em>data</em> from those services, from the <em>host</em>, and from the containers. Requirements To monitor services running on ECS, you must meet"
      },
      "id": "60450959e7b9d2475c579a0f"
    }
  ],
  "/docs/integrations/host-integrations/understand-use-data/remote-monitoring-host-integrations": [
    {
      "sections": [
        "On-host integration data collection and reporting",
        "Data collection and reporting process",
        "File structure and specifications"
      ],
      "title": "On-host integration data collection and reporting",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "Understand and use data"
      ],
      "external_id": "76942c8b7c37f1eaf368770c80177e3a43d8ca4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/understand-use-data/host-integration-data-collection-reporting/",
      "published_at": "2021-07-02T17:52:26Z",
      "updated_at": "2021-03-16T06:04:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how New Relic on-host integrations collect and report data to New Relic. Data collection and reporting process This is how an infrastructure on-host integration sends data to New Relic: On startup, the infrastructure agent scans the directory that contains the integration's definition files. The infrastructure agent registers every integration executable defined in the definition file. The agent scans a dedicated directory for integration configuration files. If those config files specify integrations that have been registered with the infrastructure agent, the agent sets up and schedules the integrations. At the scheduled interval (the default is 15 seconds), the agent harvests the data from the integration and prepares it for transmission. Every 60 seconds, it sends that data to New Relic, along with any other infrastructure data. After a successful collection pass, the integration executable exits. File structure and specifications Understanding the file structure of New Relic on-host integrations can help you customize your integration, understand and use your data, and troubleshoot problems. On-host integrations adhere to a set of open source specifications, allowing anyone to build their own infrastructure on-host integration. For an explanation of these file specifications, see File specs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 192.94707,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>On</em>-<em>host</em> <em>integration</em> <em>data</em> collection <em>and</em> reporting",
        "sections": "<em>On</em>-<em>host</em> <em>integration</em> <em>data</em> collection <em>and</em> reporting",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ", the integration executable exits. File structure and specifications Understanding the file structure of New Relic on-<em>host</em> <em>integrations</em> can help you customize your integration, <em>understand</em> and <em>use</em> your <em>data</em>, and troubleshoot problems. On-<em>host</em> <em>integrations</em> adhere to a set of open source specifications, allowing anyone to build their own infrastructure on-<em>host</em> integration. For an explanation of these file specifications, see File specs."
      },
      "id": "603e8553196a67ca20a83dd5"
    },
    {
      "sections": [
        "JMX monitoring integration",
        "Compatibility and requirements",
        "Quick start",
        "Install and activate",
        "ECS",
        "Kubernetes",
        "Linux",
        "Important",
        "Windows",
        "Configure the integration",
        "Integration configuration files",
        "Metrics collection files",
        "Tip",
        "Optional: Custom connector",
        "Example configurations",
        "Example host connection file",
        "Example metrics collection file",
        "Tips for naming your data",
        "Find and use data",
        "Metric data",
        "Example NRQL query",
        "Metrics data attributes",
        "Inventory data",
        "Troubleshooting",
        "Search logs for errors",
        "Metrics limit exceeded",
        "Missing metrics",
        "Dashboard not appearing in Infrastructure monitoring",
        "Troubleshooting via jmxterm",
        "Check the source code"
      ],
      "title": "JMX monitoring integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "e324733f10b7695dbebae46573e183aabf9079ae",
      "image": "https://docs.newrelic.com/static/6bf45ccf002250f7ebaa69cbe3ff706c/c1b63/guided-install-cli.png",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/jmx-monitoring-integration/",
      "published_at": "2021-07-03T01:47:53Z",
      "updated_at": "2021-07-03T01:47:53Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our JMX integration allows users to monitor any application that exposes metrics with JMX. The integration includes a default collection file that automatically collects key metrics from the JVM. You can also customize your metric collection with YAML files to collect any subset of metrics. Read on to install the integration, and to see what data we collect. Compatibility and requirements Our integration is compatible with Java 8 or higher. If you need to use a different Java version than the one configured in PATH, follow New Relic's configuration documentation on GitHub. Before installing the integration, make sure that you meet the following requirements: If JMX is not running on Kubernetes or Amazon ECS, you must install the infrastructure agent on a host that's running JMX. Otherwise: If running on Kubernetes, see these requirements. If running on ECS, see these requirements. This integration does not support the IIOP protocol. Quick start Instrument your JMX-enabled application quickly and send your telemetry data with guided install. Our guided install creates a customized CLI command for your environment that downloads and installs the New Relic CLI and the infrastructure agent. Ready to get started? Click one of these button to try it out. Guided install EU Guided install Our guided install uses the infrastructure agent to set up the JMX integration. Not only that, it discovers other applications and log sources running in your environment and then recommends which ones you should instrument. The guided install works with most setups. But if it doesn't suit your needs, you can find other methods below to get started monitoring your JMX-enabled application. Install and activate To install the JMX integration, follow the instructions for your environment: ECS See Monitor service running on ECS. Kubernetes See Monitor service running on Kubernetes. Linux Follow the instructions for installing an integration, using the file name nri-jmx. Change the directory to the integrations folder: cd /etc/newrelic-infra/integrations.d Copy Copy the sample configuration file: sudo cp jmx-config.yml.sample jmx-config.yml Copy Copy the JVM configuration file: sudo cp jvm-metrics.yml.sample jvm-metrics.yml Copy Optional: If you're interested in monitoring Tomcat, use this sample metrics file: sudo cp tomcat-metrics.yml.sample tomcat-metrics.yml Copy Edit the jmx-config.yml file as described in the configuration settings. Restart the infrastructure agent. Important If the sample files are not present in your installation, you can download them directly from the GitHub repository. Windows Download the nri-jmx .MSI installer image from: http://download.newrelic.com/infrastructure_agent/windows/integrations/nri-jmx/nri-jmx-amd64.msi To install from the Windows command prompt, run: msiexec.exe /qn /i PATH\\TO\\nri-jmx-amd64.msi Copy In the Integrations directory, C:\\Program Files\\New Relic\\newrelic-infra\\integrations.d\\, create a copy of the sample configuration file by running: cp jmx-config.yml.sample jmx-config.yml Copy Edit the jmx-config.yml configuration file using the configuration settings. Restart the infrastructure agent. Additional notes: Advanced: Integrations are also available in tarball format to allow for install outside of a package manager. When the Infrastructure agent executes the nri-jmx binary, it sets the path to PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin. The java binary must be in one of those paths. On-host integrations do not automatically update. For best results, regularly update the integration package and the infrastructure agent. Configure the integration An integration's YAML-format configuration is where you can place required login credentials and configure how data is collected. Which options you change depend on your setup and preference. There are several ways to configure the integration, depending on how it was installed: If enabled via Kubernetes: see Monitor services running on Kubernetes. If enabled via Amazon ECS: see Monitor services running on ECS. If installed on-host: edit the config in the integration's YAML config file, jmx-config.yml. The JMX integration defines and collects integration data using two types of YAML files: the integration configuration options and the metrics collection options. Configuration options are below. For examples, see Example config. Integration configuration files This is where the host connection and collection file information is defined. This configuration accepts the following arguments. For an example, see Host connection file example. collection_files: A comma-separated list of full file paths to the metric collection definition files. For on-host install, the default JVM metrics collection file is at /etc/newrelic-infra/integrations.d/jvm-metrics.yml. Connection arguments: jmx_host: the host JMX is running on. Default: localhost. jmx_pass: the password for the JMX connection. Default: \"\". jmx_port: the port JMX is running on. Default: 9999. jmx_remote: (JBoss specific) whether or not to use the JMX remote URL connection format, connection defaults to JBoss Domain-mode if true. Default: false. jmx_remote_jboss_standlone: (JBoss specific) whether or not to use the JBoss standalone connection format, only relevant if jmx_remote is set. Default: false. connection_url:: full JMX endpoint URL. This replaces all connection arguments (above) by providing all parameters on one line. Example: \"service:jmx:rmi:///jndi/rmi://localhost:7199/jmxrmi\" . jmx_user: the username for the JMX connection. Default: \"\". key_store: the filepath of the keystore containing the JMX client's SSL certificate. key_store_password: the password for the SSL key store. local_entity: collect all metrics on the local entity. Only use when monitoring localhost. Default: false. timeout: the timeout for individual JMX queries, in milliseconds. trust_store: the filepath of the keystore containing the JMX server's SSL certificate. trust_store_password: the password for the trust store. Important With secrets management, you can configure on-host integrations with New Relic infrastructure's agent to use sensitive data (such as passwords) without having to write them as plain text into the integration's configuration file. For more information, see Secrets management. Metrics collection files The metrics collection definition files are structured YAML files which tell the integration what metrics to collect. For an example configuration, see the metrics collection file example. Default JVM metrics collection file: /etc/newrelic-infra/integrations.d/jvm-metrics.yml Tip You can write different collection files to ease organization and maintenance. See configuration file for an example. Domains The integration collects and organizes metrics according to domains. All metrics defined per domain will be sent to New Relic and can be found in a corresponding event type. This event type is either auto-generated or can be set by the user. Each file contains a single collect: block which contains an array of domains. For each domain, the following keys are defined: domain: The JMX domain; for example, java.lang. You can use wildcards to match multiple domains; for example, java.*. If you use a wildcard, event_type is required, and must be unique. This field is required. event_type: The event type name for a collection from this domain. If the domain is wildcarded, this is required, and must be unique. If the domain is not wildcarded and this is undefined by the user, this will be auto generated. For example, the domain java.lang will have event type JavaLangSample. For more information, see Naming tips. beans: An array of beans to collect in this domain. Important There is a limit of 200 metrics per instance in the configuration file. If you exceed the limit for a particular instance, it will not be sent to New Relic. If you're not seeing your data in New Relic, review the troubleshooting procedures to identify if you have exceeded the limit. Beans Each domain contains an array of beans to be collected. For each bean, the following keys are defined: query: The bean name to collect; for example,type=GarbageCollector,name=YoungGen. You can use wildcards; for example, type=GarbageCollector,name=*. This field is required. exclude_regex: An optional list of regex patterns that match beans to exclude from collection; for example, type=GarbageCollector,name=.*. attributes: A list of attributes to collect. If unspecified, collects all attributes. Important The HashMap and ArrayList data types are not supported. Attributes Each bean can contain attributes, an optional list of beans that can be excluded from collection. For each attribute, the following keys are defined: Important For map attributes, you must define either an attr or an attr_regex key. attr: An exact match of the attribute name. Composite attributes can be collected by appending the composite member name to the attribute name with a dot; for example, HeapMemoryUsage.Max. attr_regex: A regex pattern that matches the attributes to be collected. metric_type: The New Relic metric type to collect this attribute as. Options are: gauge: data will be collected as an instantaneous numeric measurement. rate: data will be collected as the change in that metric per second. delta: data will be collected as the change in that metric since the last measurement. attribute: data will be collected as a string literal. If left unspecified, the JMX integration will attempt to infer the metric type based on the value returned. For example, if the metric is a number, it will collect it as gauge. If the metric is a string, it will collect it as attribute. If metrics are collected with an incorrect metric type, you can manually specify the correct metric type in the collection file. metric_name: The name under which the metric will appear in New Relic. If unspecified, it will default to the attribute name. For more information about JMX queries, see the Oracle ObjectName documentation. Optional: Custom connector JMX allows the use of custom connectors to communicate with the application. In order to use a custom connector, you have to include the custom connectors in the nrjmx classpath. By default, the sub-folder connectors is in the classpath. If this folder does not exist, create it under the folder where nrjmx is installed. For example, to add support for JBoss, create a folder named connectors under the default (Linux) library path /usr/lib/nrjmx/ (/usr/lib/nrjmx/connectors/) and copy the custom connector jar ($JBOSS_HOME/bin/client/jboss-cli-client.jar) into it. You can now execute JMX queries against JBoss. Example configurations Example file configurations for an on-host install: Example host connection file integration_name: com.newrelic.jmx instances: - name: jmx command: all_data arguments: jmx_host: jmx-host.localnet jmx_port: 9999 jmx_user: admin jmx_pass: admin collection_files: \"/etc/newrelic-infra/integrations.d/jvm-metrics.yml,/etc/newrelic-infra/integrations.d/tomcat-metrics.yml\" Copy Example metrics collection file collect: # The event type for this domain will be JavaLangSample - domain: java.lang beans: # Collect all beans of type Threading - query: type=Threading # Attributes can be either a string or a map attribute: # When unspecified, the metric_type is inferred # and the metric name is just the attribute name - ThreadCount # If using a map attribute, a custom metric name can be set - attr: TotalStartedThreadCount metric_name: ThreadsStarted # Attributes can be collected with regex matches and # the metric type can be overridden if the integration # can not correctly infer the type - attr_regex: \"ThreadCpu.*Enabled\" metric_type: attribute - query: type=Memory attributes: # Composite attributes can be collected with this syntax - HeapMemoryUsage.Max - NonHeapMemoryUsage.Max # Queries can be wildcarded where - query: type=GarbageCollector,name=* # If a specific bean is unwanted, it can be excluded # with a regex match pattern. Useful if using a wildcard query exclude_regex: # This will match any bean where the name is YoungGen - name=YoungGen attributes: - attr: LastGcInfo.GcThreadCount metric_type: gauge metric_name: GCThreadCount # Domains can be wildcarded - domain: java.util.* # If the domain is wildcarded, a custom event must be defined event_type: JavaUtilSample beans: # If no attributes are defined, all are collected by default - query: type=Logging Copy For more about the general structure of on-host integration configuration, see Configuration. Tips for naming your data Metrics are sent and stored in the form of samples. This is a list of key-value pairs that include metric data and metadata. Each sample is stored as an event in New Relic’s event database. You are responsible for creating and naming the JMX data reported to New Relic. For this reason, New Relic strongly recommends following these conventions when naming your event types. To ensure you have a consistent naming scheme: Use camel case. Use a name that clearly identifies what data it contains. Example: MyorgApplicationSample Recommendation: Use the same naming scheme for similar metrics across different applications. Find and use data Data from this service is reported to an integration dashboard. JMX data is attached to the user-defined event type specified in the configuration file. For example, if you are interested in monitoring Tomcat using the JMX integration, define an event_type called TomcatSample, and query that event type. You can query this data for troubleshooting purposes or to create custom charts and dashboards. For more on how to find and use your data, see Understand integration data. Metric data The metrics generated by the integration include metadata associated with the MBean they are collecting from. You can use this metadata in NRQL queries to filter and facet the data so that the query returns only the data for the desired beans. It can also be used to uniquely identify the metrics, since the metric name is not necessarily unique between all beans. Each event contains the following metadata: Name Description displayName The JMX domain name for these metrics. entityName The JMX domain name for these metrics with the entity type “domain:” prepended. host The JMX host the metrics are being collected from. query The query used to collect these metrics. bean The bean whose attributes these metrics were collected from. key:<mbean_key> For each key in the bean name, an attribute is added to the metric set called “key:<mbean_key> with the value of the bean’s key. Example NRQL query Here's an example NRQL query taking advantage of metadata monitor all the collected JVM garbage collectors: SELECT latest(CollectionTime) FROM JVMSample FACET `key:name` WHERE `key:type` = 'GarbageCollector' Copy Metrics data attributes The JMX integration collects the following metric data attributes: Name Description HeapMemoryUsage.Used The total Java heap memory used. HeapMemoryUsage.Committed The total Java heap memory committed to be used. HeapMemoryUsage.Init The initial Java heap memory allocated. HeapMemoryUsage.Max The maximum Java heap memory available. NonHeapMemoryUsage.Used The total Java non-heap memory used. NonHeapMemoryUsage.Committed The total Java non-heap memory committed to be used. NonHeapMemoryUsage.Init The initial Java non-heap memory allocated. NonHeapMemoryUsage.Max The maximum Java non-heap memory available. ThreadCount The number of live threads. CollectionCount The total number of garbage collections that have occurred. CollectionTime The approximate accumulated garbage collection time elapsed. Inventory data The JMX integration captures the configuration parameters of the JMX integration. The data is available on the Inventory page, under the config/jmx source. For more about inventory data, see Understand integration data. Troubleshooting Troubleshooting tips: Search logs for errors If you are having trouble with the integration, first enable and search the logs for errors. Metrics limit exceeded If you suspect there is a domain sending more than 200 metrics, check the log file for this message: \"Domain x has n metrics, the current limit is 200. This domain will not be reported.\" Copy If you see this error message, lower the number of metrics being sent for the reported domain. Missing metrics If you have missing metrics, ensure that the MBean query is valid by attempting to run it with the nrjmx tool, or use your preferred tool for ensuring the query is valid in the JMXConsole. Dashboard not appearing in Infrastructure monitoring Confirm that the configuration jvm-metrics.yml file has been updated, and that the path to the file is enumerated in the jmx-config.yml file. Troubleshooting via jmxterm JMXTerm is a CLI interactive tool bundled within the package. Docs for JMXTerm can be found at our nrjmx page in GitHub. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or create your own fork and build it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 163.46603,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "JMX monitoring <em>integration</em>",
        "sections": "Find <em>and</em> <em>use</em> <em>data</em>",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": ". trust_store_password: the password for the trust store. Important With secrets management, you can configure on-<em>host</em> <em>integrations</em> with New Relic infrastructure&#x27;s agent to <em>use</em> sensitive <em>data</em> (such as passwords) without having to write them as plain text into the integration&#x27;s configuration file. For more information"
      },
      "id": "6043a8c3196a679722960f3f"
    },
    {
      "sections": [
        "Monitor services running on Amazon ECS",
        "Requirements",
        "How to enable",
        "Step 1: Enable EC2 to install the infrastructure agent",
        "For CentOS 6, RHEL 6, Amazon Linux 1",
        "CentOS 7, RHEL 7",
        "Amazon Linux 2",
        "Step 2: Enable monitoring of services"
      ],
      "title": "Monitor services running on Amazon ECS",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "On-host integrations list"
      ],
      "external_id": "dc178f5c162c1979019d97819db2cc77e0ce220a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/host-integrations-list/monitor-services-running-amazon-ecs/",
      "published_at": "2021-07-02T16:08:12Z",
      "updated_at": "2021-07-02T16:08:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can use New Relic to report data from those services, from the host, and from the containers. Requirements To monitor services running on ECS, you must meet these requirements: An auto-scaling ECS cluster running Amazon Linux, CentOS, or RHEL that meets the infrastructure agent compatibility and requirements. ECS tasks must have network mode set to none or bridge (awsvpc and host not supported). A supported service running on ECS that meets our integration requirements: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP How to enable Before explaining how to enable monitoring of services running in ECS, here's an overview of the process: Enable Amazon EC2 to install our infrastructure agent on your ECS clusters. Enable monitoring of services using a service-specific configuration file. Step 1: Enable EC2 to install the infrastructure agent First, you must enable Amazon EC2 to install our infrastructure agent on ECS clusters. To do this, you'll first need to update your user data to install the infrastructure agent on launch. Here are instructions for changing EC2 launch configuration (taken from Amazon EC2 documentation): Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. Replace user data with one of the following snippets: For CentOS 6, RHEL 6, Amazon Linux 1 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/6/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy CentOS 7, RHEL 7 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/el/7/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Amazon Linux 2 Replace the highlighted fields with relevant values: Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\" MIME-Version: 1.0 --MIMEBOUNDARY Content-Disposition: attachment; filename=\"init.cfg\" Content-Transfer-Encoding: 7bit Content-Type: text/cloud-config Mime-Version: 1.0 yum_repos: newrelic-infra: baseurl: https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64 gpgkey: https://download.newrelic.com/infrastructure_agent/gpg/newrelic-infra.gpg gpgcheck: 1 repo_gpgcheck: 1 enabled: true name: New Relic Infrastructure write_files: - content: | --- # New Relic config file license_key: YOUR_LICENSE_KEY path: /etc/newrelic-infra.yml packages: - newrelic-infra - nri-* runcmd: - [ yum, install, newrelic-infra, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] --MIMEBOUNDARY Content-Transfer-Encoding: 7bit Content-Type: text/x-shellscript Mime-Version: 1.0 #!/bin/bash # ECS config { echo \"ECS_CLUSTER=YOUR_ECS_CLUSTER_NAME\" } >> /etc/ecs/ecs.config start ecs echo \"Done\" --MIMEBOUNDARY-- Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop-down menu for Launch configuration, select the new launch configuration created. Click Save. To test if the agent is automatically detecting instances, terminate an EC2 instance in the auto scaling group: the replacement instance will now be launched with the new user data. After five minutes, you should see data from the new host on the Hosts page. Next, move on to enabling the monitoring of services. Step 2: Enable monitoring of services Once you've enabled EC2 to run the infrastructure agent, the agent starts monitoring the containers running on that host. Next, we'll explain how to monitor services deployed on ECS. For example, you can monitor an ECS task containing an NGINX instance that sits in front of your application server. Here's a brief overview of how you'd monitor a supported service deployed on ECS: Create a YAML configuration file for the service you want to monitor. This will eventually be placed in the EC2 user data section via the AWS console. But before doing that, you can test that the config is working by placing that file in the infrastructure agent folder (etc/newrelic-infra/integrations.d) in EC2. That config file must use our container auto-discovery format, which allows it to automatically find containers. The exact config options will depend on the specific integration. Check to see that data from the service is being reported to New Relic. If you are satisfied with the data you see, you can then use the EC2 console to add that configuration to the appropriate launch configuration, in the write_files section, and then update the auto scaling group. In the runcmd section, add the yum command to install the integration to the appropriate launch configuration. Here's a detailed example of doing the above procedure for NGINX: Ensure you have SSH access to the server or access to AWS Systems Manager Session Manager. Log in to the host running the infrastructure agent. Via the command line, change the directory to the integrations configuration folder: cd /etc/newrelic-infra/integrations.d Copy Create a file called nginx-config.yml and add the following snippet: --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 Copy This configuration causes the infrastructure agent to look for containers in ECS that contain nginx. Once a container matches, it then connects to the NGINX status page. For details on how the discovery.ip snippet works, see auto-discovery. For details on general NGINX configuration, see the NGINX integration. If your NGINX status page is set to serve requests from the STATUS_URL on port 80, the infrastructure agent starts monitoring it. After five minutes, verify that NGINX data is appearing in the Infrastructure UI (either: one.newrelic.com > Infrastructure > Third party services, or one.newrelic.com > Explorer > On-host). If the configuration works, place it in the EC2 launch configuration: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Launch configurations. On the next page, select the launch configuration you want to update. Right click and select Copy launch configuration. On the Launch configuration details tab, click Edit details. In the User data section, edit the write_files section (in the part marked text/cloud-config). Add a new file/content entry: - content: | --- discovery: docker: match: image: /nginx/ integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}:/status REMOTE_MONITORING: true METRICS: 1 path: /etc/newrelic-infra/integrations.d/nginx-config.yml Copy Also edit the runcmd section to include the yum command to install nri-nginx: runcmd: - [ yum, install, newrelic-infra, -y ] - [ yum, install, nri-nginx, -y ] - [ systemctl, daemon-reload ] - [ systemctl, enable, newrelic-infra.service ] - [ systemctl, start, --no-block, newrelic-infra.service ] Copy Choose Skip to review. Choose Create launch configuration. Next, update the auto scaling group: Open the Amazon EC2 console. On the navigation pane, under Auto scaling, choose Auto scaling groups. Select the auto scaling group you want to update. From the Actions menu, choose Edit. In the drop down menu for Launch configuration, select the new launch configuration created. Click Save. When an EC2 instance is terminated, it is replaced with a new one that automatically looks for new NGINX containers.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.31287,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor services running <em>on</em> Amazon ECS",
        "sections": "Monitor services running <em>on</em> Amazon ECS",
        "tags": "<em>On</em>-<em>host</em> <em>integrations</em>",
        "body": "If you have services that run on Docker containers in Amazon ECS (like Cassandra, Redis, MySQL, and other supported services), you can <em>use</em> New Relic to report <em>data</em> from those services, from the <em>host</em>, and from the containers. Requirements To monitor services running on ECS, you must meet"
      },
      "id": "60450959e7b9d2475c579a0f"
    }
  ],
  "/docs/integrations/infrastructure-integrations/cloud-integrations/cloud-integrations-account-status-dashboard": [
    {
      "sections": [
        "Configure polling frequency and data collection for cloud integrations",
        "Tip",
        "Overview of settings",
        "Caution",
        "Change polling frequency",
        "Specify data to be fetched",
        "Data collection",
        "Filters",
        "Potential impact on alerts and charts"
      ],
      "title": "Configure polling frequency and data collection for cloud integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "b900b7545f9032201c212449be114e10176bf789",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/configure-polling-frequency-data-collection-cloud-integrations/",
      "published_at": "2021-07-02T17:54:01Z",
      "updated_at": "2021-06-15T13:00:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our cloud integrations get data from cloud provider APIs. In New Relic, you can change some of the data collection-related settings for your cloud integrations. Read on to see what changes you can make and the reasons for making them. Tip To use integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Overview of settings New Relic cloud integrations get data from cloud providers' APIs. Data is generally collected from monitoring APIs such as AWS CloudWatch, Azure Monitor, and GCP Stackdriver, and inventory metadata is collected from the specific services' APIs. You can use the account status dashboard to see how your cloud integrations are handling data from a cloud service provider. If you want to report more or less data from your cloud integrations, or if you need to control the use of the cloud providers' APIs to prevent reaching rate and throttling limits in your cloud account, you can change the configuration settings to modify the amount of data they report. The two main controls are: Change polling frequency Change what data is reported Examples of business reasons for wanting to change your polling frequency include: Billing: If you need to manage your AWS CloudWatch bill, you may want to decrease the polling frequency. Before you do this, make sure that any alert conditions set for your cloud integrations are not affected by this reduction. New services: If you are deploying a new service or configuration and you want to collect data more often, you may want to increase the polling frequency temporarily. Caution Changing the configuration settings for your integrations may impact alert conditions and chart trends. Change polling frequency The polling frequency configuration determines how often New Relic reports data from your cloud provider for each service. By default, the polling frequency is set to the maximum frequency that is available for each service. To change the polling frequency for a cloud integration: Go to one.newrelic.com > Infrastructure. Select the tab that corresponds to your cloud service provider. Select Configure next to the integration. Use the dropdowns next to Data polling interval every to select how frequently you want New Relic to capture your cloud integration data. Specify data to be fetched You can specify which information you want captured for your cloud integration by enabling the collection of additional data and by applying multiple filters to each integration. To change this settings for your cloud integration: Go to one.newrelic.com > Infrastructure. Select the tab that corresponds to your cloud service provider. Select Configure next to the integration. Under Data collections and filters, turn the toggles you want On. For filters, select or enter the values that you want included in your reported data. Data collection For some cloud integrations, an additional number of calls to the cloud provider APIs are needed in order to collect data. For example, to fetch tags for AWS Elastic Map Reduce clusters, an additional call to the service API is required. To better control the amount of API calls that are sent to your cloud account for these integrations, you can specify when you need these types of data to be collected. Different data collection toggles are available, depending on the integration. Toggle Description Collect tags Some integrations require additional API calls to the cloud provider to report tags. Tag collection is enabled by default. Switch this to Off if you don't want the integration to collect your cloud resource tags and thus reduce the volume of API calls. Collect extended inventory Some integrations can collect extended inventory metadata about your cloud resources by making additional API calls to the cloud provider. The metadata included within the extended inventory for each cloud integration is described in the integration documentation. Extended inventory collection is disabled by default. Switch this to On if you want to monitor extended inventory. This will increase the volume of API calls. Collect shards data Available for AWS Kinesis Streams integration. By default, we don't report shard metrics. Switch this to On if you want to monitor shard metrics in addition to data stream metrics. Collect Lambda@Edge data Available for AWS CloudFront integration. By default, we don't report Lambda@Edge data. Switch this to On if you're using Lambda@Edge in AWS CloudFront and want to get Lambda execution location metadata. Collect node data Available for AWS Elasticsearch integration. By default, we don't report Elasticsearch node metrics. Switch this to On if you want to monitor node metrics in addition to cluster metrics. Collect NAT Gateway data and Collect VPN data Available for AWS VPC integration. By default, we don't report NAT Gateway nor VPN metrics. Switch these to On if you want to monitor NAT Gateway and VPN metrics and inventory, in addition to other VPC related entities inventory. Collect IP addresses Available for AWS EC2 integration. By default, we collect EC2 instance metadata that includes public and private IP addresses, and network interface details. Switch this to Off if you don't want New Relic to store and display these IP data. Filters When a filter is On, you specify the data that you want to be collected; for example, if the Limit to AWS region is On, the regions that you select will be the ones that data will be collected for. There are different filters available, depending on the integration: Filter Description Region Select the regions that include the resources that you want to monitor. Queue prefixes Available for AWS SQS integration. Enter each name or prefix for the queues that you want to monitor. Filter values are case-sensitive. Load balancer prefixes Available for AWS ALB integration. Enter each name or prefix for the application load balancers that you want to monitor. Filter values are case-sensitive. Stage name prefixes Available for AWS API Gateway integration. Enter each name or prefix for the stages that you want to monitor. Filter values are case-sensitive. Tag key Enter one tag key that is associated with the resources that you want to monitor. Filter values are case-sensitive, and you can use this filter in combination with tag value filter. Tag value Enter one tag value that is associated with the resources that you want to monitor. Filter values are case-sensitive, and you can use this filter in combination with tag key. Resource group Select the resource groups that are associated with the resources that you want to monitor. Potential impact on alerts and charts If you change an integration's configuration, it can impact alert conditions and charts. Here are some things to consider: If you change this setting... It may have this impact... Any configuration setting When you change the configuration settings, the data that New Relic displays in infrastructure charts, on the inventory page, and in the events feed changes as well. Any filters When you create alert conditions after you set filters, make sure that your alerts are not triggered by resources that you filtered out. Filter for regions If you filter for specific regions, it may lower the amount of data reported to New Relic, which could trigger an alert. If you create an alert condition for a specific region and then filter that region out, the region would no longer report data and would never trigger the alert. Polling frequency When you create an alert, make sure that you define the threshold for a time period that is longer than the polling frequency. Tags and extended inventory If you turn on tags and/or extended inventory, New Relic makes more API calls to the cloud provider, which could increase your cloud provider API usage bill.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.54181,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure polling frequency and data collection for <em>cloud</em> <em>integrations</em>",
        "sections": "Configure polling frequency and data collection for <em>cloud</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "Our <em>cloud</em> <em>integrations</em> get data from <em>cloud</em> provider APIs. In New Relic, you can change some of the data collection-related settings for your <em>cloud</em> <em>integrations</em>. Read on to see what changes you can make and the reasons for making them. Tip To use <em>integrations</em> and the rest of our observability"
      },
      "id": "603e8eef64441fcc7e4e8853"
    },
    {
      "sections": [
        "Metric data gaps with cloud integrations",
        "Problem",
        "Solution",
        "Amazon (AWS)",
        "Microsoft Azure",
        "Google Cloud Platform (GCP)",
        "Tip",
        "Cause"
      ],
      "title": "Metric data gaps with cloud integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "ee3473d0cbc9059b6b36503949d08d1e76c7fc06",
      "image": "https://docs.newrelic.com/static/dfa79b9e3086b81f216d306ba0afe557/c1b63/screen-metric-gap.png",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/metric-data-gaps-cloud-integrations/",
      "published_at": "2021-07-02T13:56:47Z",
      "updated_at": "2021-03-29T21:18:28Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You've set up your AWS, Azure, or GCP integration and are monitoring your metrics. However, you notice gaps in your metric data charts. This screenshot shows a metric data chart with gaps. Solution Here’s a list of metrics which might show gaps in your metric data. If possible, avoid setting up alerts for these metrics because we know they can generate false positives. Amazon (AWS) Integration Provider Event Type Metric SNS SnsTopic QueueSample provider.subscriptionsConfirmed SnsTopic QueueSample provider.subscriptionsPending SnsTopic QueueSample provider.subscriptionsDeleted EFS EfsFileSystem BlockDeviceSample provider.lastKnownSizeInBytes ECS EcsCluster ComputeSample provider.registeredContainerInstancesCount EcsCluster ComputeSample provider.activeServicesCount EcsCluster ComputeSample provider.pendingTasksCount EcsCluster ComputeSample provider.runningTasksCount EcsService ComputeSample provider.pendingCount EcsService ComputeSample provider.runningCount EcsService ComputeSample provider.desiredCount DynamoDB DynamoDbTable DatastoreSample provider.itemCount DynamoDbTable DatastoreSample provider.tableSizeBytes AutoScaling AutoScalingInstance AutoScalingInstanceSample healthStatus Billing BillingBudget FinanceSample provider.actualAmount Billingbudget FinanceSample provider.forecastedAmount BillingBudget FinanceSample provider.limitAmount Microsoft Azure Integration Provider Event Type Metric SQL AzureSqlDatabase AzureSqlDatabaseSample databaseSizeCurrentBytes AzureSqlDatabase AzureSqlDatabaseSample databaseSizeLimitBytes AzureSqlServer AzureSqlServerSample dtuCurrent AzureSqlServer AzureSqlServerSample dtuLimit Google Cloud Platform (GCP) Tip We're currently reviewing the GCP metrics that can cause data gaps. Tip This list isn't complete. We're currently reviewing the full list of metrics that can cause data gaps. Cause Some metrics aren’t present in the usual cloud provider APIs (CloudWatch, Stackdriver, Azure Monitor) and are fetched from the service APIs instead. Each cloud service provider has a unique service API that processes data and interacts with the service. For example, if a metric isn’t present in AWS CloudWatch, New Relic will fetch the metric from the AWS ECS service API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data gaps with <em>cloud</em> <em>integrations</em>",
        "sections": "Metric data gaps with <em>cloud</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " AzureSqlDatabase AzureSqlDatabaseSample databaseSizeLimitBytes AzureSqlServer AzureSqlServerSample dtuCurrent AzureSqlServer AzureSqlServerSample dtuLimit Google <em>Cloud</em> Platform (GCP) Tip We&#x27;re currently reviewing the GCP metrics that can cause data gaps. Tip This list isn&#x27;t complete. We&#x27;re currently"
      },
      "id": "603e821e196a67a042a83df3"
    },
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Tip",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-07-02T14:22:06Z",
      "updated_at": "2021-03-13T03:24:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Tip To use integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are what we call integrations that you can run directly on your host or server. They typically connect to core services in your servers: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including Kubernetes, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures SDK integrations: Procedures to create a custom integration Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.16661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of <em>infrastructure</em> <em>integrations</em> New Relic has two main categories of <em>infrastructure</em> <em>integrations</em>: <em>cloud</em> and on-host. <em>Cloud</em> <em>integrations</em> <em>Cloud</em> <em>integrations</em> collect data from <em>cloud</em> services and accounts"
      },
      "id": "60450a39e7b9d2de845799cd"
    }
  ],
  "/docs/integrations/infrastructure-integrations/cloud-integrations/configure-polling-frequency-data-collection-cloud-integrations": [
    {
      "sections": [
        "Metric data gaps with cloud integrations",
        "Problem",
        "Solution",
        "Amazon (AWS)",
        "Microsoft Azure",
        "Google Cloud Platform (GCP)",
        "Tip",
        "Cause"
      ],
      "title": "Metric data gaps with cloud integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "ee3473d0cbc9059b6b36503949d08d1e76c7fc06",
      "image": "https://docs.newrelic.com/static/dfa79b9e3086b81f216d306ba0afe557/c1b63/screen-metric-gap.png",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/metric-data-gaps-cloud-integrations/",
      "published_at": "2021-07-02T13:56:47Z",
      "updated_at": "2021-03-29T21:18:28Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You've set up your AWS, Azure, or GCP integration and are monitoring your metrics. However, you notice gaps in your metric data charts. This screenshot shows a metric data chart with gaps. Solution Here’s a list of metrics which might show gaps in your metric data. If possible, avoid setting up alerts for these metrics because we know they can generate false positives. Amazon (AWS) Integration Provider Event Type Metric SNS SnsTopic QueueSample provider.subscriptionsConfirmed SnsTopic QueueSample provider.subscriptionsPending SnsTopic QueueSample provider.subscriptionsDeleted EFS EfsFileSystem BlockDeviceSample provider.lastKnownSizeInBytes ECS EcsCluster ComputeSample provider.registeredContainerInstancesCount EcsCluster ComputeSample provider.activeServicesCount EcsCluster ComputeSample provider.pendingTasksCount EcsCluster ComputeSample provider.runningTasksCount EcsService ComputeSample provider.pendingCount EcsService ComputeSample provider.runningCount EcsService ComputeSample provider.desiredCount DynamoDB DynamoDbTable DatastoreSample provider.itemCount DynamoDbTable DatastoreSample provider.tableSizeBytes AutoScaling AutoScalingInstance AutoScalingInstanceSample healthStatus Billing BillingBudget FinanceSample provider.actualAmount Billingbudget FinanceSample provider.forecastedAmount BillingBudget FinanceSample provider.limitAmount Microsoft Azure Integration Provider Event Type Metric SQL AzureSqlDatabase AzureSqlDatabaseSample databaseSizeCurrentBytes AzureSqlDatabase AzureSqlDatabaseSample databaseSizeLimitBytes AzureSqlServer AzureSqlServerSample dtuCurrent AzureSqlServer AzureSqlServerSample dtuLimit Google Cloud Platform (GCP) Tip We're currently reviewing the GCP metrics that can cause data gaps. Tip This list isn't complete. We're currently reviewing the full list of metrics that can cause data gaps. Cause Some metrics aren’t present in the usual cloud provider APIs (CloudWatch, Stackdriver, Azure Monitor) and are fetched from the service APIs instead. Each cloud service provider has a unique service API that processes data and interacts with the service. For example, if a metric isn’t present in AWS CloudWatch, New Relic will fetch the metric from the AWS ECS service API.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 123.20345,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Metric data gaps with <em>cloud</em> <em>integrations</em>",
        "sections": "Metric data gaps with <em>cloud</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " AzureSqlDatabase AzureSqlDatabaseSample databaseSizeLimitBytes AzureSqlServer AzureSqlServerSample dtuCurrent AzureSqlServer AzureSqlServerSample dtuLimit Google <em>Cloud</em> Platform (GCP) Tip We&#x27;re currently reviewing the GCP metrics that can cause data gaps. Tip This list isn&#x27;t complete. We&#x27;re currently"
      },
      "id": "603e821e196a67a042a83df3"
    },
    {
      "sections": [
        "Cloud integrations: Account status dashboard",
        "Why it matters",
        "Understand dashboard data",
        "Find account status dashboard"
      ],
      "title": "Cloud integrations: Account status dashboard",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "3457b96bec1ab5f0252c061f4ef82bc15f9b61e7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/cloud-integrations-account-status-dashboard/",
      "published_at": "2021-07-02T17:53:11Z",
      "updated_at": "2021-03-16T06:05:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Each cloud account you link to New Relic infrastructure monitoring (for example, AWS or Azure) has an account status dashboard that shows how our platform is handling data from that cloud service provider. Why it matters Reasons to monitor this dashboard include: Understand API call usage. We use cloud APIs to collect metrics and inventory data. The dashboards show counts and frequencies for those API calls. You may want to monitor these for two reasons: API calls can cost money, and your API usage may be throttled at certain usage levels. To decrease usage, you can configure integration settings to reduce the number of components you monitor or how frequently they're monitored. Troubleshoot missing data or other data issues. The dashboard displays information that affects how integrations report data, including: Errors that affect New Relic collecting data, like permission errors or quota exhaustion errors. Changes to integration configuration, like polling interval changes, or tag-collection being disabled or enabled. Understand dashboard data The specific data displayed on the account status dashboard will differ by cloud service provider. Common charts include: Data updates: Shows updates to metric data or inventory data (updates shown as a 1 value). Account changes: Actions affecting how the integration works. For example: renaming or unlinking a cloud account, changing polling intervals, and other configuration options. Data freshness: Timestamp of the last data point collected for each integration. Fetching errors: These indicate issues with collecting data. (This may be a problem on the cloud-provider side.) Options for better understanding chart data include: Mouse over a chart’s icon to see a chart description (if available). View the chart's underlying NRQL query. Find account status dashboard To find the account status dashboard for a cloud service provider: From one.newrelic.com > Infrastructure, and select a cloud service provider (for example, AWS). Select Account status dashboard for the cloud account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.849304,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Cloud</em> <em>integrations</em>: Account status dashboard",
        "sections": "<em>Cloud</em> <em>integrations</em>: Account status dashboard",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "Each <em>cloud</em> account you link to New Relic <em>infrastructure</em> monitoring (for example, AWS or Azure) has an account status dashboard that shows how our platform is handling data from that <em>cloud</em> service provider. Why it matters Reasons to monitor this dashboard include: Understand API call usage. We use"
      },
      "id": "603eb14764441f1cda4e8874"
    },
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Tip",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-07-02T14:22:06Z",
      "updated_at": "2021-03-13T03:24:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Tip To use integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are what we call integrations that you can run directly on your host or server. They typically connect to core services in your servers: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including Kubernetes, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures SDK integrations: Procedures to create a custom integration Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.16661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of <em>infrastructure</em> <em>integrations</em> New Relic has two main categories of <em>infrastructure</em> <em>integrations</em>: <em>cloud</em> and on-host. <em>Cloud</em> <em>integrations</em> <em>Cloud</em> <em>integrations</em> collect data from <em>cloud</em> services and accounts"
      },
      "id": "60450a39e7b9d2de845799cd"
    }
  ],
  "/docs/integrations/infrastructure-integrations/cloud-integrations/metric-data-gaps-cloud-integrations": [
    {
      "sections": [
        "Configure polling frequency and data collection for cloud integrations",
        "Tip",
        "Overview of settings",
        "Caution",
        "Change polling frequency",
        "Specify data to be fetched",
        "Data collection",
        "Filters",
        "Potential impact on alerts and charts"
      ],
      "title": "Configure polling frequency and data collection for cloud integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "b900b7545f9032201c212449be114e10176bf789",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/configure-polling-frequency-data-collection-cloud-integrations/",
      "published_at": "2021-07-02T17:54:01Z",
      "updated_at": "2021-06-15T13:00:43Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Our cloud integrations get data from cloud provider APIs. In New Relic, you can change some of the data collection-related settings for your cloud integrations. Read on to see what changes you can make and the reasons for making them. Tip To use integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Overview of settings New Relic cloud integrations get data from cloud providers' APIs. Data is generally collected from monitoring APIs such as AWS CloudWatch, Azure Monitor, and GCP Stackdriver, and inventory metadata is collected from the specific services' APIs. You can use the account status dashboard to see how your cloud integrations are handling data from a cloud service provider. If you want to report more or less data from your cloud integrations, or if you need to control the use of the cloud providers' APIs to prevent reaching rate and throttling limits in your cloud account, you can change the configuration settings to modify the amount of data they report. The two main controls are: Change polling frequency Change what data is reported Examples of business reasons for wanting to change your polling frequency include: Billing: If you need to manage your AWS CloudWatch bill, you may want to decrease the polling frequency. Before you do this, make sure that any alert conditions set for your cloud integrations are not affected by this reduction. New services: If you are deploying a new service or configuration and you want to collect data more often, you may want to increase the polling frequency temporarily. Caution Changing the configuration settings for your integrations may impact alert conditions and chart trends. Change polling frequency The polling frequency configuration determines how often New Relic reports data from your cloud provider for each service. By default, the polling frequency is set to the maximum frequency that is available for each service. To change the polling frequency for a cloud integration: Go to one.newrelic.com > Infrastructure. Select the tab that corresponds to your cloud service provider. Select Configure next to the integration. Use the dropdowns next to Data polling interval every to select how frequently you want New Relic to capture your cloud integration data. Specify data to be fetched You can specify which information you want captured for your cloud integration by enabling the collection of additional data and by applying multiple filters to each integration. To change this settings for your cloud integration: Go to one.newrelic.com > Infrastructure. Select the tab that corresponds to your cloud service provider. Select Configure next to the integration. Under Data collections and filters, turn the toggles you want On. For filters, select or enter the values that you want included in your reported data. Data collection For some cloud integrations, an additional number of calls to the cloud provider APIs are needed in order to collect data. For example, to fetch tags for AWS Elastic Map Reduce clusters, an additional call to the service API is required. To better control the amount of API calls that are sent to your cloud account for these integrations, you can specify when you need these types of data to be collected. Different data collection toggles are available, depending on the integration. Toggle Description Collect tags Some integrations require additional API calls to the cloud provider to report tags. Tag collection is enabled by default. Switch this to Off if you don't want the integration to collect your cloud resource tags and thus reduce the volume of API calls. Collect extended inventory Some integrations can collect extended inventory metadata about your cloud resources by making additional API calls to the cloud provider. The metadata included within the extended inventory for each cloud integration is described in the integration documentation. Extended inventory collection is disabled by default. Switch this to On if you want to monitor extended inventory. This will increase the volume of API calls. Collect shards data Available for AWS Kinesis Streams integration. By default, we don't report shard metrics. Switch this to On if you want to monitor shard metrics in addition to data stream metrics. Collect Lambda@Edge data Available for AWS CloudFront integration. By default, we don't report Lambda@Edge data. Switch this to On if you're using Lambda@Edge in AWS CloudFront and want to get Lambda execution location metadata. Collect node data Available for AWS Elasticsearch integration. By default, we don't report Elasticsearch node metrics. Switch this to On if you want to monitor node metrics in addition to cluster metrics. Collect NAT Gateway data and Collect VPN data Available for AWS VPC integration. By default, we don't report NAT Gateway nor VPN metrics. Switch these to On if you want to monitor NAT Gateway and VPN metrics and inventory, in addition to other VPC related entities inventory. Collect IP addresses Available for AWS EC2 integration. By default, we collect EC2 instance metadata that includes public and private IP addresses, and network interface details. Switch this to Off if you don't want New Relic to store and display these IP data. Filters When a filter is On, you specify the data that you want to be collected; for example, if the Limit to AWS region is On, the regions that you select will be the ones that data will be collected for. There are different filters available, depending on the integration: Filter Description Region Select the regions that include the resources that you want to monitor. Queue prefixes Available for AWS SQS integration. Enter each name or prefix for the queues that you want to monitor. Filter values are case-sensitive. Load balancer prefixes Available for AWS ALB integration. Enter each name or prefix for the application load balancers that you want to monitor. Filter values are case-sensitive. Stage name prefixes Available for AWS API Gateway integration. Enter each name or prefix for the stages that you want to monitor. Filter values are case-sensitive. Tag key Enter one tag key that is associated with the resources that you want to monitor. Filter values are case-sensitive, and you can use this filter in combination with tag value filter. Tag value Enter one tag value that is associated with the resources that you want to monitor. Filter values are case-sensitive, and you can use this filter in combination with tag key. Resource group Select the resource groups that are associated with the resources that you want to monitor. Potential impact on alerts and charts If you change an integration's configuration, it can impact alert conditions and charts. Here are some things to consider: If you change this setting... It may have this impact... Any configuration setting When you change the configuration settings, the data that New Relic displays in infrastructure charts, on the inventory page, and in the events feed changes as well. Any filters When you create alert conditions after you set filters, make sure that your alerts are not triggered by resources that you filtered out. Filter for regions If you filter for specific regions, it may lower the amount of data reported to New Relic, which could trigger an alert. If you create an alert condition for a specific region and then filter that region out, the region would no longer report data and would never trigger the alert. Polling frequency When you create an alert, make sure that you define the threshold for a time period that is longer than the polling frequency. Tags and extended inventory If you turn on tags and/or extended inventory, New Relic makes more API calls to the cloud provider, which could increase your cloud provider API usage bill.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 159.5418,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Configure polling frequency and data collection for <em>cloud</em> <em>integrations</em>",
        "sections": "Configure polling frequency and data collection for <em>cloud</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "Our <em>cloud</em> <em>integrations</em> get data from <em>cloud</em> provider APIs. In New Relic, you can change some of the data collection-related settings for your <em>cloud</em> <em>integrations</em>. Read on to see what changes you can make and the reasons for making them. Tip To use <em>integrations</em> and the rest of our observability"
      },
      "id": "603e8eef64441fcc7e4e8853"
    },
    {
      "sections": [
        "Cloud integrations: Account status dashboard",
        "Why it matters",
        "Understand dashboard data",
        "Find account status dashboard"
      ],
      "title": "Cloud integrations: Account status dashboard",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Cloud integrations"
      ],
      "external_id": "3457b96bec1ab5f0252c061f4ef82bc15f9b61e7",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/cloud-integrations/cloud-integrations-account-status-dashboard/",
      "published_at": "2021-07-02T17:53:11Z",
      "updated_at": "2021-03-16T06:05:40Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Each cloud account you link to New Relic infrastructure monitoring (for example, AWS or Azure) has an account status dashboard that shows how our platform is handling data from that cloud service provider. Why it matters Reasons to monitor this dashboard include: Understand API call usage. We use cloud APIs to collect metrics and inventory data. The dashboards show counts and frequencies for those API calls. You may want to monitor these for two reasons: API calls can cost money, and your API usage may be throttled at certain usage levels. To decrease usage, you can configure integration settings to reduce the number of components you monitor or how frequently they're monitored. Troubleshoot missing data or other data issues. The dashboard displays information that affects how integrations report data, including: Errors that affect New Relic collecting data, like permission errors or quota exhaustion errors. Changes to integration configuration, like polling interval changes, or tag-collection being disabled or enabled. Understand dashboard data The specific data displayed on the account status dashboard will differ by cloud service provider. Common charts include: Data updates: Shows updates to metric data or inventory data (updates shown as a 1 value). Account changes: Actions affecting how the integration works. For example: renaming or unlinking a cloud account, changing polling intervals, and other configuration options. Data freshness: Timestamp of the last data point collected for each integration. Fetching errors: These indicate issues with collecting data. (This may be a problem on the cloud-provider side.) Options for better understanding chart data include: Mouse over a chart’s icon to see a chart description (if available). View the chart's underlying NRQL query. Find account status dashboard To find the account status dashboard for a cloud service provider: From one.newrelic.com > Infrastructure, and select a cloud service provider (for example, AWS). Select Account status dashboard for the cloud account.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 121.8493,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Cloud</em> <em>integrations</em>: Account status dashboard",
        "sections": "<em>Cloud</em> <em>integrations</em>: Account status dashboard",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "Each <em>cloud</em> account you link to New Relic <em>infrastructure</em> monitoring (for example, AWS or Azure) has an account status dashboard that shows how our platform is handling data from that <em>cloud</em> service provider. Why it matters Reasons to monitor this dashboard include: Understand API call usage. We use"
      },
      "id": "603eb14764441f1cda4e8874"
    },
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Tip",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-07-02T14:22:06Z",
      "updated_at": "2021-03-13T03:24:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Tip To use integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are what we call integrations that you can run directly on your host or server. They typically connect to core services in your servers: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including Kubernetes, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures SDK integrations: Procedures to create a custom integration Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.16661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of <em>infrastructure</em> <em>integrations</em> New Relic has two main categories of <em>infrastructure</em> <em>integrations</em>: <em>cloud</em> and on-host. <em>Cloud</em> <em>integrations</em> <em>Cloud</em> <em>integrations</em> collect data from <em>cloud</em> services and accounts"
      },
      "id": "60450a39e7b9d2de845799cd"
    }
  ],
  "/docs/integrations/infrastructure-integrations/get-started/infrastructure-integration-dashboards-charts": [
    {
      "sections": [
        "Use integration data in New Relic dashboards",
        "Get started with integration data",
        "Example NRQL queries",
        "AWS EBS query example",
        "Azure Service Bus query example",
        "Azure Functions query example",
        "Azure VMs query example",
        "NGINX query example",
        "MySQL query example",
        "Inventory change query example",
        "Tip",
        "Tips for using different data types",
        "Metric data tips",
        "Event data tips",
        "Inventory data tips"
      ],
      "title": "Use integration data in New Relic dashboards",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "b236b0fae29853de085d0430fdec27fba74c15d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/use-integration-data-new-relic-dashboards/",
      "published_at": "2021-07-02T17:01:23Z",
      "updated_at": "2021-06-20T19:34:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Most data generated by integrations is available in New Relic One dashboards, where you can query your data using NRQL and build custom dashboards. The following tips and sample queries were created for New Relic-built integrations, but most will also apply to integrations built with the Integrations SDK. For a general look at how to find and use integration data, see New Relic data types. Get started with integration data Here are some tips for finding and exploring your integration data in New Relic: From the one.newrelic.com > Infrastructure > Third-party services page, select an integration dashboard. There, you can view the NRQL queries that generated a chart. For examples of NRQL queries for integration data, see the example queries. Use the data explorer or the dashboards to explore and understand the available data. Read the documentation for a specific integration to learn about the reported data. When you create a useful query you'd like to add to your Insights dashboard, select Add to dashboard. Example NRQL queries Here are some examples of NRQL queries that use integration data: AWS EBS query example Here's a NRQL query for the AWS EBS service, showing the total write time metric, faceted by entityName: SELECT sum('provider.volumeTotalWriteTime.Sum') FROM BlockDeviceSample WHERE provider = 'EbsVolume' FACET entityName Copy Azure Service Bus query example Here's an Insights NRQL query for the maximum number of messages in an Azure Service Bus topic queue, faceted by resource group: SELECT max(activeMessages.Maximum) FROM AzureServiceBusTopicSample FACET resourceGroupName Copy Azure Functions query example Here's an Insights NRQL query for Azure Functions, showing the count of executed functions over the past six hours by region over time: SELECT sum(functionExecutionCount.Total) FROM AzureFunctionsAppSample FACET regionName TIMESERIES SINCE 6 hours ago Copy Azure VMs query example Here's an Insights NRQL query for Azure VMs that compares the count of VM events over the past thirty minutes with the same time a week ago: SELECT uniqueCount(vMName) FROM AzureVirtualMachineScaleSetSample FACET name SINCE 30 minutes ago COMPARE WITH 1 week ago Copy NGINX query example Here's an example of a query that you might run on your NGINX integration data and place in an Insights dashboard. This query creates a chart showing the average value of NGINX requests per second over time: SELECT average(net.requestsPerSecond) FROM NginxSample TIMESERIES Copy For more on how to create queries, see NRQL syntax. MySQL query example Here's an example of a query that you might run on your MySQL integration data. This query generates a chart showing the maximum number of used MySQL connections: SELECT max(net.maxUsedConnections) FROM MysqlSample Copy For more on how to create queries, see NRQL syntax. Inventory change query example Here's an example of a query that groups inventory change events from the last day by the type of change: SELECT count(*) FROM InfrastructureEvent WHERE format='inventoryChange' FACET changeType SINCE 1 DAY AGO Copy Tip You can also perform these queries using dimensional metrics. Tips for using different data types Integrations can generate metric, event, and inventory data, all of which are available for querying in New Relic Insights. Here are some tips for using the different types of integration data in Insights: Metric data tips Tips for finding and using integration metric data in Insights: All integration data is attached to a data type known as an event (not to be confused with events reported by integrations, which represent important activity in your host/service). This means that all integration data can be found via the data explorer. For more about these two basic New Relic data types, see New Relic data collection. Metric values are treated as attributes: key-value pairs attached to an event. For example, the MySQL integration has an 'active connections' metric; this would be found by querying the connectionsActive attribute of the MysqlSample event. For general information about metrics, see Integration metric data. Event data tips Here are some tips for finding and using integration event data in Insights: Most integration events are inventory change events. When inventory is changed, it generates an InfrastructureEvent with a format value of inventoryChange. Integration data can be found via the data explorer. For general information about events, see Event data. Inventory data tips Here are some tips for finding and using integration inventory data in Insights: For general information about inventory data, see Integration inventory data. Some inventory data is added as attributes (key-value pairs) to Insights data. For example, the AWS EC2 integration collects awsRegion as inventory data; this would be found in Insights by querying the awsRegion attribute of the ComputeSample event type and provider Ec2Instance. When inventory data changes, an Insights InfrastructureEvent event type is generated with a format value of inventoryChange. See the query examples for an example of querying this data. For more on using NRQL queries, see Intro to NRQL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.59766,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use <em>integration</em> data in New Relic dashboards",
        "sections": "<em>Get</em> <em>started</em> with <em>integration</em> data",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " with the <em>Integrations</em> SDK. For a general look at how to find and use integration data, see New Relic data types. <em>Get</em> <em>started</em> with integration data Here are some tips for finding and exploring your integration data in New Relic: From the one.newrelic.com &gt; <em>Infrastructure</em> &gt; Third-party services page, select"
      },
      "id": "60450a39196a67d7dc960f7c"
    },
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Tip",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-07-02T14:22:06Z",
      "updated_at": "2021-03-13T03:24:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Tip To use integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are what we call integrations that you can run directly on your host or server. They typically connect to core services in your servers: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including Kubernetes, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures SDK integrations: Procedures to create a custom integration Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.77613,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "New Relic offers various <em>integrations</em> for reporting data to our platform. One category of <em>integrations</em> is our <em>Infrastructure</em> <em>integrations</em>. Tip To use <em>integrations</em> and <em>infrastructure</em> monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free"
      },
      "id": "60450a39e7b9d2de845799cd"
    },
    {
      "sections": [
        "Activate Azure integrations",
        "Tip",
        "Requirements",
        "Step 1: Get Azure subscription and tenant IDs",
        "Step 2: Register your app and get ID",
        "Step 3: Create a client secret in Azure",
        "Step 4: Provide permissions to services",
        "Step 5: Add app to New Relic",
        "Update application details and rotate client secrets",
        "Explore app data in New Relic Infrastructure's UI"
      ],
      "title": "Activate Azure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Microsoft Azure integrations",
        "Get started"
      ],
      "external_id": "f65679179e13aa1b503b4b95010e296cbe269c29",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/microsoft-azure-integrations/get-started/activate-azure-integrations/",
      "published_at": "2021-07-02T16:26:01Z",
      "updated_at": "2021-06-20T12:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations allow you to report data from specific systems and supplement infrastructure's default, automatic monitoring. The Microsoft Azure integrations report data from various Azure platform services to your New Relic account. This document explains how to activate Azure integrations. Tip To use Azure integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements The Azure integration activation process requires you to: Create a New Relic application and key in Azure. Grant this application access to the Azure services you want to monitor. Place required information in the New Relic's Integrations UI. To use these integration activation instructions directly from the Infrastructure UI, go to one.newrelic.com > Infrastructure > Azure > Add an Azure account. Step 1: Get Azure subscription and tenant IDs To get your Azure account's subscription id and tenantId, use your local terminal if you have Azure's tools installed, or use Azure's Cloud Shell terminal in the Azure portal. Open a terminal with access to your Azure account. Type the following: az account show Copy Copy and save the subscription id and tenantID from the output response for later use. The response should look similar to the response below. The subscription id and tenantID are highlighted. @Azure:~$ az account show { \"environmentName\": \"AzureCloud\", \"id\": \"9ffe9512-f4a2-42dd-1230-518aec34be21\" , \"isDefault\": true, \"name\": \"Beyond Team Sandbox\", \"state\": \"Enabled\", \"tenantId\": \"ac6692da-1231-422f-22a8-9eed6dbe83f1\" , \"user\": { \"name\": \"youremail@domain\", \"type\": \"user\" } Copy Step 2: Register your app and get ID You must have Azure permissions to register your application and copy its Application ID. To register your app in Azure: Sign in to the Azure portal and go to the Azure Active Directory. From Manage, select App registrations > New registration. Enter a name for the application. We recommend that you name your app NewRelic-Integrations. In Redirect URI select Weband add https://www.newrelic.com as the sign-on URI. Create the application by clicking Register. From the Overview of your app, copy the Application (client) ID, and save it for later use. Step 3: Create a client secret in Azure To create a client secret associated with your application: In Azure, under the application you've just created, select Certificates & secrets. Under Client secrets, click on New client secret and then on Add. Copy the value of Client Secret and save it for later use. Step 4: Provide permissions to services Your app must provide Reader permissions for each Azure service you want New Relic to monitor: In the Azure Subscriptions section, select the subscriptions that you want New Relic to monitor. Select Access control (IAM) > Add > Add role assignment. From the Role dropdown, select Reader. From the Select dropdown, select the app's name; for example, NewRelic-Integrations. From Selected members, verify your app name appears, then select Save. Some Azure services, including Azure CosmosDB and Azure VMs, require additional steps. See the Azure integration documentation for the services you want to enable. Step 5: Add app to New Relic Now you can activate the Azure integration in the Infrastructure UI. The UI will require the information you have saved in the previous steps, including: Your Azure account's subscription id and tenantId The application's application ID The application's client secret To add your Azure app to New Relic: Go to one.newrelic.com > Infrastructure > Azure and select the Azure Service you wish to add. Follow the steps in the UI to activate the integration in New Relic. If you have already completed the Azure account steps, skip to the end of the steps to fill out the form. (For Azure account name, enter the name you want to use to identify the account in your Integrations dashboard.) Update application details and rotate client secrets It's possible to update the application's name and authentication credentials using the Infrastructure UI or the Cloud Integrations API at any time. Follow these steps to rotate the Azure client secret in the Infratructure UI: Go to one.newrelic.com > Infrastructure > Azure and click on Manage Services on the Azure account you wish to edit. Select the edit action next to Account Name to see and edit any application value. Edit the Client Secret field with the new value and confirm with Save Changes. Explore app data in New Relic Infrastructure's UI After you activate an Azure integration, New Relic will start monitoring your Azure data at regular polling intervals. To find and use your data, use the data explorer or go to one.newrelic.com > Infrastructure > Azure",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.904236,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Activate Azure <em>integrations</em>",
        "sections": "Activate Azure <em>integrations</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "New Relic <em>infrastructure</em> <em>integrations</em> allow you to report data from specific systems and supplement <em>infrastructure</em>&#x27;s default, automatic monitoring. The Microsoft Azure <em>integrations</em> report data from various Azure platform services to your New Relic account. This document explains how to activate"
      },
      "id": "6044e5a9196a671bfa960f79"
    }
  ],
  "/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations": [
    {
      "sections": [
        "Use integration data in New Relic dashboards",
        "Get started with integration data",
        "Example NRQL queries",
        "AWS EBS query example",
        "Azure Service Bus query example",
        "Azure Functions query example",
        "Azure VMs query example",
        "NGINX query example",
        "MySQL query example",
        "Inventory change query example",
        "Tip",
        "Tips for using different data types",
        "Metric data tips",
        "Event data tips",
        "Inventory data tips"
      ],
      "title": "Use integration data in New Relic dashboards",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "b236b0fae29853de085d0430fdec27fba74c15d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/use-integration-data-new-relic-dashboards/",
      "published_at": "2021-07-02T17:01:23Z",
      "updated_at": "2021-06-20T19:34:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Most data generated by integrations is available in New Relic One dashboards, where you can query your data using NRQL and build custom dashboards. The following tips and sample queries were created for New Relic-built integrations, but most will also apply to integrations built with the Integrations SDK. For a general look at how to find and use integration data, see New Relic data types. Get started with integration data Here are some tips for finding and exploring your integration data in New Relic: From the one.newrelic.com > Infrastructure > Third-party services page, select an integration dashboard. There, you can view the NRQL queries that generated a chart. For examples of NRQL queries for integration data, see the example queries. Use the data explorer or the dashboards to explore and understand the available data. Read the documentation for a specific integration to learn about the reported data. When you create a useful query you'd like to add to your Insights dashboard, select Add to dashboard. Example NRQL queries Here are some examples of NRQL queries that use integration data: AWS EBS query example Here's a NRQL query for the AWS EBS service, showing the total write time metric, faceted by entityName: SELECT sum('provider.volumeTotalWriteTime.Sum') FROM BlockDeviceSample WHERE provider = 'EbsVolume' FACET entityName Copy Azure Service Bus query example Here's an Insights NRQL query for the maximum number of messages in an Azure Service Bus topic queue, faceted by resource group: SELECT max(activeMessages.Maximum) FROM AzureServiceBusTopicSample FACET resourceGroupName Copy Azure Functions query example Here's an Insights NRQL query for Azure Functions, showing the count of executed functions over the past six hours by region over time: SELECT sum(functionExecutionCount.Total) FROM AzureFunctionsAppSample FACET regionName TIMESERIES SINCE 6 hours ago Copy Azure VMs query example Here's an Insights NRQL query for Azure VMs that compares the count of VM events over the past thirty minutes with the same time a week ago: SELECT uniqueCount(vMName) FROM AzureVirtualMachineScaleSetSample FACET name SINCE 30 minutes ago COMPARE WITH 1 week ago Copy NGINX query example Here's an example of a query that you might run on your NGINX integration data and place in an Insights dashboard. This query creates a chart showing the average value of NGINX requests per second over time: SELECT average(net.requestsPerSecond) FROM NginxSample TIMESERIES Copy For more on how to create queries, see NRQL syntax. MySQL query example Here's an example of a query that you might run on your MySQL integration data. This query generates a chart showing the maximum number of used MySQL connections: SELECT max(net.maxUsedConnections) FROM MysqlSample Copy For more on how to create queries, see NRQL syntax. Inventory change query example Here's an example of a query that groups inventory change events from the last day by the type of change: SELECT count(*) FROM InfrastructureEvent WHERE format='inventoryChange' FACET changeType SINCE 1 DAY AGO Copy Tip You can also perform these queries using dimensional metrics. Tips for using different data types Integrations can generate metric, event, and inventory data, all of which are available for querying in New Relic Insights. Here are some tips for using the different types of integration data in Insights: Metric data tips Tips for finding and using integration metric data in Insights: All integration data is attached to a data type known as an event (not to be confused with events reported by integrations, which represent important activity in your host/service). This means that all integration data can be found via the data explorer. For more about these two basic New Relic data types, see New Relic data collection. Metric values are treated as attributes: key-value pairs attached to an event. For example, the MySQL integration has an 'active connections' metric; this would be found by querying the connectionsActive attribute of the MysqlSample event. For general information about metrics, see Integration metric data. Event data tips Here are some tips for finding and using integration event data in Insights: Most integration events are inventory change events. When inventory is changed, it generates an InfrastructureEvent with a format value of inventoryChange. Integration data can be found via the data explorer. For general information about events, see Event data. Inventory data tips Here are some tips for finding and using integration inventory data in Insights: For general information about inventory data, see Integration inventory data. Some inventory data is added as attributes (key-value pairs) to Insights data. For example, the AWS EC2 integration collects awsRegion as inventory data; this would be found in Insights by querying the awsRegion attribute of the ComputeSample event type and provider Ec2Instance. When inventory data changes, an Insights InfrastructureEvent event type is generated with a format value of inventoryChange. See the query examples for an example of querying this data. For more on using NRQL queries, see Intro to NRQL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.59763,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use <em>integration</em> data in New Relic dashboards",
        "sections": "<em>Get</em> <em>started</em> with <em>integration</em> data",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " with the <em>Integrations</em> SDK. For a general look at how to find and use integration data, see New Relic data types. <em>Get</em> <em>started</em> with integration data Here are some tips for finding and exploring your integration data in New Relic: From the one.newrelic.com &gt; <em>Infrastructure</em> &gt; Third-party services page, select"
      },
      "id": "60450a39196a67d7dc960f7c"
    },
    {
      "sections": [
        "Activate Azure integrations",
        "Tip",
        "Requirements",
        "Step 1: Get Azure subscription and tenant IDs",
        "Step 2: Register your app and get ID",
        "Step 3: Create a client secret in Azure",
        "Step 4: Provide permissions to services",
        "Step 5: Add app to New Relic",
        "Update application details and rotate client secrets",
        "Explore app data in New Relic Infrastructure's UI"
      ],
      "title": "Activate Azure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Microsoft Azure integrations",
        "Get started"
      ],
      "external_id": "f65679179e13aa1b503b4b95010e296cbe269c29",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/microsoft-azure-integrations/get-started/activate-azure-integrations/",
      "published_at": "2021-07-02T16:26:01Z",
      "updated_at": "2021-06-20T12:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations allow you to report data from specific systems and supplement infrastructure's default, automatic monitoring. The Microsoft Azure integrations report data from various Azure platform services to your New Relic account. This document explains how to activate Azure integrations. Tip To use Azure integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements The Azure integration activation process requires you to: Create a New Relic application and key in Azure. Grant this application access to the Azure services you want to monitor. Place required information in the New Relic's Integrations UI. To use these integration activation instructions directly from the Infrastructure UI, go to one.newrelic.com > Infrastructure > Azure > Add an Azure account. Step 1: Get Azure subscription and tenant IDs To get your Azure account's subscription id and tenantId, use your local terminal if you have Azure's tools installed, or use Azure's Cloud Shell terminal in the Azure portal. Open a terminal with access to your Azure account. Type the following: az account show Copy Copy and save the subscription id and tenantID from the output response for later use. The response should look similar to the response below. The subscription id and tenantID are highlighted. @Azure:~$ az account show { \"environmentName\": \"AzureCloud\", \"id\": \"9ffe9512-f4a2-42dd-1230-518aec34be21\" , \"isDefault\": true, \"name\": \"Beyond Team Sandbox\", \"state\": \"Enabled\", \"tenantId\": \"ac6692da-1231-422f-22a8-9eed6dbe83f1\" , \"user\": { \"name\": \"youremail@domain\", \"type\": \"user\" } Copy Step 2: Register your app and get ID You must have Azure permissions to register your application and copy its Application ID. To register your app in Azure: Sign in to the Azure portal and go to the Azure Active Directory. From Manage, select App registrations > New registration. Enter a name for the application. We recommend that you name your app NewRelic-Integrations. In Redirect URI select Weband add https://www.newrelic.com as the sign-on URI. Create the application by clicking Register. From the Overview of your app, copy the Application (client) ID, and save it for later use. Step 3: Create a client secret in Azure To create a client secret associated with your application: In Azure, under the application you've just created, select Certificates & secrets. Under Client secrets, click on New client secret and then on Add. Copy the value of Client Secret and save it for later use. Step 4: Provide permissions to services Your app must provide Reader permissions for each Azure service you want New Relic to monitor: In the Azure Subscriptions section, select the subscriptions that you want New Relic to monitor. Select Access control (IAM) > Add > Add role assignment. From the Role dropdown, select Reader. From the Select dropdown, select the app's name; for example, NewRelic-Integrations. From Selected members, verify your app name appears, then select Save. Some Azure services, including Azure CosmosDB and Azure VMs, require additional steps. See the Azure integration documentation for the services you want to enable. Step 5: Add app to New Relic Now you can activate the Azure integration in the Infrastructure UI. The UI will require the information you have saved in the previous steps, including: Your Azure account's subscription id and tenantId The application's application ID The application's client secret To add your Azure app to New Relic: Go to one.newrelic.com > Infrastructure > Azure and select the Azure Service you wish to add. Follow the steps in the UI to activate the integration in New Relic. If you have already completed the Azure account steps, skip to the end of the steps to fill out the form. (For Azure account name, enter the name you want to use to identify the account in your Integrations dashboard.) Update application details and rotate client secrets It's possible to update the application's name and authentication credentials using the Infrastructure UI or the Cloud Integrations API at any time. Follow these steps to rotate the Azure client secret in the Infratructure UI: Go to one.newrelic.com > Infrastructure > Azure and click on Manage Services on the Azure account you wish to edit. Select the edit action next to Account Name to see and edit any application value. Edit the Client Secret field with the new value and confirm with Save Changes. Explore app data in New Relic Infrastructure's UI After you activate an Azure integration, New Relic will start monitoring your Azure data at regular polling intervals. To find and use your data, use the data explorer or go to one.newrelic.com > Infrastructure > Azure",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.90422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Activate Azure <em>integrations</em>",
        "sections": "Activate Azure <em>integrations</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "New Relic <em>infrastructure</em> <em>integrations</em> allow you to report data from specific systems and supplement <em>infrastructure</em>&#x27;s default, automatic monitoring. The Microsoft Azure <em>integrations</em> report data from various Azure platform services to your New Relic account. This document explains how to activate"
      },
      "id": "6044e5a9196a671bfa960f79"
    },
    {
      "sections": [
        "Understand and use data from infrastructure integrations",
        "Explore your infrastructure integration's data",
        "Types of integration data",
        "Create alert conditions"
      ],
      "title": "Understand and use data from infrastructure integrations ",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "305bd846fb6232dff32dceaacc5d1f0a9f400969",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/understand-use-data-infrastructure-integrations/",
      "published_at": "2021-07-02T14:21:08Z",
      "updated_at": "2021-03-13T03:28:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic infrastructure integrations, you can monitor the performance of popular services, including AWS, Azure, Google Cloud Platform, Kubernetes, Redis, MySQL, and more. Here are some tips on how to find, understand, and use data reported from infrastructure integrations. Explore your infrastructure integration's data The best way to understand infrastructure integrations's data and see what you can do with it is to enable an integration and explore the data in the New Relic UI. Some recommendations for exploring: View dashboards: You can find your dashboards in New Relic One. For details, see Integration dashboards. Query data: You can run custom queries and charts of your integration data. For more information, see Query New Relic data. Create alert conditions: See Alert conditions. Learn more about what metrics and inventory data an integration reports: See an integration's documentation: cloud integrations and on-host integrations. Types of integration data New Relic infrastructure integrations are separated into two main categories: Cloud integrations: Integrations for cloud platform services, including AWS, Azure, and GCP. On-host integrations: \"On-host\" refers to core services integrations that you can install directly on a host. Examples: MySQL, NGINX, Kubernetes, Redis. An infrastructure integration can generate four types of data: Metrics: Numeric measurement data. Examples: message counts, error counts, and CPU used percentage. Metric data appears in an integration's charts. For details about what metrics are reported and how to query them, see the documentation for a specific integration. For details about data structure, see Data types. Inventory: Information about the state and configuration of a service or host. Examples of inventory data: configuration settings, the name of the host the service is on, the AWS region, the port being used. Inventory data appears in the Inventory UI page. Inventory data also appears in integration dashboards. Changes to inventory data generates event data. Events: Events represent important activity on a system. Examples of event data: an admin logging in; a package install or uninstall; a service starting; a table being created. Most events represent changes to inventory data. Attributes: Some integrations will generate other non-metric attributes (key-value pairs) that can be queried in New Relic. Create alert conditions To create an alert condition for integration data in infrastructure, Go to one.newrelic.com > Infrastructure, choose an integration, and then select an available alert option. For more information, see Infrastructure and alerts. For on-host integrations, you can also create alert conditions using NRQL queries. (NRQL alerts are not supported or recommended for cloud integrations, due to issues related to data latency.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.88827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Understand and use data from <em>infrastructure</em> <em>integrations</em> ",
        "sections": "Understand and use data from <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "With New Relic <em>infrastructure</em> <em>integrations</em>, you can monitor the performance of popular services, including AWS, Azure, Google Cloud Platform, Kubernetes, Redis, MySQL, and more. Here are some tips on how to find, understand, and use data reported from <em>infrastructure</em> <em>integrations</em>. Explore your"
      },
      "id": "60450a3928ccbc2d9b2c60c8"
    }
  ],
  "/docs/integrations/infrastructure-integrations/get-started/understand-use-data-infrastructure-integrations": [
    {
      "sections": [
        "Use integration data in New Relic dashboards",
        "Get started with integration data",
        "Example NRQL queries",
        "AWS EBS query example",
        "Azure Service Bus query example",
        "Azure Functions query example",
        "Azure VMs query example",
        "NGINX query example",
        "MySQL query example",
        "Inventory change query example",
        "Tip",
        "Tips for using different data types",
        "Metric data tips",
        "Event data tips",
        "Inventory data tips"
      ],
      "title": "Use integration data in New Relic dashboards",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "b236b0fae29853de085d0430fdec27fba74c15d4",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/use-integration-data-new-relic-dashboards/",
      "published_at": "2021-07-02T17:01:23Z",
      "updated_at": "2021-06-20T19:34:58Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Most data generated by integrations is available in New Relic One dashboards, where you can query your data using NRQL and build custom dashboards. The following tips and sample queries were created for New Relic-built integrations, but most will also apply to integrations built with the Integrations SDK. For a general look at how to find and use integration data, see New Relic data types. Get started with integration data Here are some tips for finding and exploring your integration data in New Relic: From the one.newrelic.com > Infrastructure > Third-party services page, select an integration dashboard. There, you can view the NRQL queries that generated a chart. For examples of NRQL queries for integration data, see the example queries. Use the data explorer or the dashboards to explore and understand the available data. Read the documentation for a specific integration to learn about the reported data. When you create a useful query you'd like to add to your Insights dashboard, select Add to dashboard. Example NRQL queries Here are some examples of NRQL queries that use integration data: AWS EBS query example Here's a NRQL query for the AWS EBS service, showing the total write time metric, faceted by entityName: SELECT sum('provider.volumeTotalWriteTime.Sum') FROM BlockDeviceSample WHERE provider = 'EbsVolume' FACET entityName Copy Azure Service Bus query example Here's an Insights NRQL query for the maximum number of messages in an Azure Service Bus topic queue, faceted by resource group: SELECT max(activeMessages.Maximum) FROM AzureServiceBusTopicSample FACET resourceGroupName Copy Azure Functions query example Here's an Insights NRQL query for Azure Functions, showing the count of executed functions over the past six hours by region over time: SELECT sum(functionExecutionCount.Total) FROM AzureFunctionsAppSample FACET regionName TIMESERIES SINCE 6 hours ago Copy Azure VMs query example Here's an Insights NRQL query for Azure VMs that compares the count of VM events over the past thirty minutes with the same time a week ago: SELECT uniqueCount(vMName) FROM AzureVirtualMachineScaleSetSample FACET name SINCE 30 minutes ago COMPARE WITH 1 week ago Copy NGINX query example Here's an example of a query that you might run on your NGINX integration data and place in an Insights dashboard. This query creates a chart showing the average value of NGINX requests per second over time: SELECT average(net.requestsPerSecond) FROM NginxSample TIMESERIES Copy For more on how to create queries, see NRQL syntax. MySQL query example Here's an example of a query that you might run on your MySQL integration data. This query generates a chart showing the maximum number of used MySQL connections: SELECT max(net.maxUsedConnections) FROM MysqlSample Copy For more on how to create queries, see NRQL syntax. Inventory change query example Here's an example of a query that groups inventory change events from the last day by the type of change: SELECT count(*) FROM InfrastructureEvent WHERE format='inventoryChange' FACET changeType SINCE 1 DAY AGO Copy Tip You can also perform these queries using dimensional metrics. Tips for using different data types Integrations can generate metric, event, and inventory data, all of which are available for querying in New Relic Insights. Here are some tips for using the different types of integration data in Insights: Metric data tips Tips for finding and using integration metric data in Insights: All integration data is attached to a data type known as an event (not to be confused with events reported by integrations, which represent important activity in your host/service). This means that all integration data can be found via the data explorer. For more about these two basic New Relic data types, see New Relic data collection. Metric values are treated as attributes: key-value pairs attached to an event. For example, the MySQL integration has an 'active connections' metric; this would be found by querying the connectionsActive attribute of the MysqlSample event. For general information about metrics, see Integration metric data. Event data tips Here are some tips for finding and using integration event data in Insights: Most integration events are inventory change events. When inventory is changed, it generates an InfrastructureEvent with a format value of inventoryChange. Integration data can be found via the data explorer. For general information about events, see Event data. Inventory data tips Here are some tips for finding and using integration inventory data in Insights: For general information about inventory data, see Integration inventory data. Some inventory data is added as attributes (key-value pairs) to Insights data. For example, the AWS EC2 integration collects awsRegion as inventory data; this would be found in Insights by querying the awsRegion attribute of the ComputeSample event type and provider Ec2Instance. When inventory data changes, an Insights InfrastructureEvent event type is generated with a format value of inventoryChange. See the query examples for an example of querying this data. For more on using NRQL queries, see Intro to NRQL.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 149.59763,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use <em>integration</em> data in New Relic dashboards",
        "sections": "<em>Get</em> <em>started</em> with <em>integration</em> data",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": " with the <em>Integrations</em> SDK. For a general look at how to find and use integration data, see New Relic data types. <em>Get</em> <em>started</em> with integration data Here are some tips for finding and exploring your integration data in New Relic: From the one.newrelic.com &gt; <em>Infrastructure</em> &gt; Third-party services page, select"
      },
      "id": "60450a39196a67d7dc960f7c"
    },
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Tip",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-07-02T14:22:06Z",
      "updated_at": "2021-03-13T03:24:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Tip To use integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are what we call integrations that you can run directly on your host or server. They typically connect to core services in your servers: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including Kubernetes, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures SDK integrations: Procedures to create a custom integration Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.77613,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "New Relic offers various <em>integrations</em> for reporting data to our platform. One category of <em>integrations</em> is our <em>Infrastructure</em> <em>integrations</em>. Tip To use <em>integrations</em> and <em>infrastructure</em> monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free"
      },
      "id": "60450a39e7b9d2de845799cd"
    },
    {
      "sections": [
        "Activate Azure integrations",
        "Tip",
        "Requirements",
        "Step 1: Get Azure subscription and tenant IDs",
        "Step 2: Register your app and get ID",
        "Step 3: Create a client secret in Azure",
        "Step 4: Provide permissions to services",
        "Step 5: Add app to New Relic",
        "Update application details and rotate client secrets",
        "Explore app data in New Relic Infrastructure's UI"
      ],
      "title": "Activate Azure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Microsoft Azure integrations",
        "Get started"
      ],
      "external_id": "f65679179e13aa1b503b4b95010e296cbe269c29",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/microsoft-azure-integrations/get-started/activate-azure-integrations/",
      "published_at": "2021-07-02T16:26:01Z",
      "updated_at": "2021-06-20T12:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations allow you to report data from specific systems and supplement infrastructure's default, automatic monitoring. The Microsoft Azure integrations report data from various Azure platform services to your New Relic account. This document explains how to activate Azure integrations. Tip To use Azure integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements The Azure integration activation process requires you to: Create a New Relic application and key in Azure. Grant this application access to the Azure services you want to monitor. Place required information in the New Relic's Integrations UI. To use these integration activation instructions directly from the Infrastructure UI, go to one.newrelic.com > Infrastructure > Azure > Add an Azure account. Step 1: Get Azure subscription and tenant IDs To get your Azure account's subscription id and tenantId, use your local terminal if you have Azure's tools installed, or use Azure's Cloud Shell terminal in the Azure portal. Open a terminal with access to your Azure account. Type the following: az account show Copy Copy and save the subscription id and tenantID from the output response for later use. The response should look similar to the response below. The subscription id and tenantID are highlighted. @Azure:~$ az account show { \"environmentName\": \"AzureCloud\", \"id\": \"9ffe9512-f4a2-42dd-1230-518aec34be21\" , \"isDefault\": true, \"name\": \"Beyond Team Sandbox\", \"state\": \"Enabled\", \"tenantId\": \"ac6692da-1231-422f-22a8-9eed6dbe83f1\" , \"user\": { \"name\": \"youremail@domain\", \"type\": \"user\" } Copy Step 2: Register your app and get ID You must have Azure permissions to register your application and copy its Application ID. To register your app in Azure: Sign in to the Azure portal and go to the Azure Active Directory. From Manage, select App registrations > New registration. Enter a name for the application. We recommend that you name your app NewRelic-Integrations. In Redirect URI select Weband add https://www.newrelic.com as the sign-on URI. Create the application by clicking Register. From the Overview of your app, copy the Application (client) ID, and save it for later use. Step 3: Create a client secret in Azure To create a client secret associated with your application: In Azure, under the application you've just created, select Certificates & secrets. Under Client secrets, click on New client secret and then on Add. Copy the value of Client Secret and save it for later use. Step 4: Provide permissions to services Your app must provide Reader permissions for each Azure service you want New Relic to monitor: In the Azure Subscriptions section, select the subscriptions that you want New Relic to monitor. Select Access control (IAM) > Add > Add role assignment. From the Role dropdown, select Reader. From the Select dropdown, select the app's name; for example, NewRelic-Integrations. From Selected members, verify your app name appears, then select Save. Some Azure services, including Azure CosmosDB and Azure VMs, require additional steps. See the Azure integration documentation for the services you want to enable. Step 5: Add app to New Relic Now you can activate the Azure integration in the Infrastructure UI. The UI will require the information you have saved in the previous steps, including: Your Azure account's subscription id and tenantId The application's application ID The application's client secret To add your Azure app to New Relic: Go to one.newrelic.com > Infrastructure > Azure and select the Azure Service you wish to add. Follow the steps in the UI to activate the integration in New Relic. If you have already completed the Azure account steps, skip to the end of the steps to fill out the form. (For Azure account name, enter the name you want to use to identify the account in your Integrations dashboard.) Update application details and rotate client secrets It's possible to update the application's name and authentication credentials using the Infrastructure UI or the Cloud Integrations API at any time. Follow these steps to rotate the Azure client secret in the Infratructure UI: Go to one.newrelic.com > Infrastructure > Azure and click on Manage Services on the Azure account you wish to edit. Select the edit action next to Account Name to see and edit any application value. Edit the Client Secret field with the new value and confirm with Save Changes. Explore app data in New Relic Infrastructure's UI After you activate an Azure integration, New Relic will start monitoring your Azure data at regular polling intervals. To find and use your data, use the data explorer or go to one.newrelic.com > Infrastructure > Azure",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.90422,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Activate Azure <em>integrations</em>",
        "sections": "Activate Azure <em>integrations</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "New Relic <em>infrastructure</em> <em>integrations</em> allow you to report data from specific systems and supplement <em>infrastructure</em>&#x27;s default, automatic monitoring. The Microsoft Azure <em>integrations</em> report data from various Azure platform services to your New Relic account. This document explains how to activate"
      },
      "id": "6044e5a9196a671bfa960f79"
    }
  ],
  "/docs/integrations/infrastructure-integrations/get-started/use-integration-data-new-relic-dashboards": [
    {
      "sections": [
        "Introduction to infrastructure integrations",
        "Tip",
        "Types of infrastructure integrations",
        "Cloud integrations",
        "On-host integrations",
        "Install instructions",
        "Features",
        "Types of integration data"
      ],
      "title": "Introduction to infrastructure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "98b6a0d19418b67c315b3757a1acc905b2fc53bf",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/introduction-infrastructure-integrations/",
      "published_at": "2021-07-02T14:22:06Z",
      "updated_at": "2021-03-13T03:24:28Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic offers various integrations for reporting data to our platform. One category of integrations is our Infrastructure integrations. Tip To use integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Types of infrastructure integrations New Relic has two main categories of infrastructure integrations: cloud and on-host. Cloud integrations Cloud integrations collect data from cloud services and accounts. There's no installation process for cloud integrations, you simply connect your New Relic account to your cloud provider account. Integrations Description Amazon Web Services (AWS) cloud-based integrations Connect your Amazon Web Services (AWS) account to monitor and report data to New Relic. See the list of AWS integrations. Microsoft Azure cloud-based integrations Connect your Microsoft Azure account to monitor and report data to New Relic. See the list of Azure integrations. Google Cloud Platform (GCP) cloud-based integrations Connect your Google Cloud Platform (GCP) account to monitor and report data to New Relic. See the list of GCP integrations. On-host integrations On-host integrations are what we call integrations that you can run directly on your host or server. They typically connect to core services in your servers: Integrations Description Kubernetes integration Connect your account to gain visibility of your Kubernetes environment, explore your clusters, and manage alerts. On-host integrations Monitor and report data from many popular services, including Kubernetes, Redis, Apache, RabbitMQ, and many more. Build your own To create your own lightweight integration, use our Flex integration tool. Install instructions To enable cloud integrations or install on-host integrations, see: Cloud integrations: AWS procedures, Azure procedures, Google Cloud Platform procedures Kubernetes: Kubernetes procedures On-host integrations: See an integration's documentation for install procedures SDK integrations: Procedures to create a custom integration Features After an infrastructure integration is activated, you can: Filter and analyze the metrics and configuration data in our Infrastructure UI. Query your data and create custom charts and dashboards. Create alert conditions to monitor problems with your services' performance. For cloud integrations, configure data collection settings. Types of integration data Infrastructure integrations generate some basic types of data that you can use in New Relic. Integration data Description Metrics Numeric measurement data. Examples: Number of requests in a queue Number of hits on a database per minute Percentage of CPU being used Cloud-based and on-host integrations include pre-built dashboards that display important metrics. Inventory Live system state and configuration information. Examples: Host name AWS region or availability zone Port being used Changes in inventory generate events in New Relic, so you can easily figure out when performance issues were caused by a change in the system. Events Important activity on a system. Examples: Service starting Version update New table being created Changes to inventory are a type of event. Attributes Key-value pairs generated by some integrations. Examples: Certain inventory data Additional data attached to events Any data that is not considered metrics or inventory Depending on the integration, other types of information may be reported as attributes. Our integrations are data agnostic; they have no knowledge of whether reported data contains personal information. For more information about New Relic's security measures, see our security and privacy documentation, or visit the New Relic security website.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 114.77613,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "sections": "Introduction to <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "New Relic offers various <em>integrations</em> for reporting data to our platform. One category of <em>integrations</em> is our <em>Infrastructure</em> <em>integrations</em>. Tip To use <em>integrations</em> and <em>infrastructure</em> monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free"
      },
      "id": "60450a39e7b9d2de845799cd"
    },
    {
      "sections": [
        "Activate Azure integrations",
        "Tip",
        "Requirements",
        "Step 1: Get Azure subscription and tenant IDs",
        "Step 2: Register your app and get ID",
        "Step 3: Create a client secret in Azure",
        "Step 4: Provide permissions to services",
        "Step 5: Add app to New Relic",
        "Update application details and rotate client secrets",
        "Explore app data in New Relic Infrastructure's UI"
      ],
      "title": "Activate Azure integrations",
      "type": "docs",
      "tags": [
        "Integrations",
        "Microsoft Azure integrations",
        "Get started"
      ],
      "external_id": "f65679179e13aa1b503b4b95010e296cbe269c29",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/microsoft-azure-integrations/get-started/activate-azure-integrations/",
      "published_at": "2021-07-02T16:26:01Z",
      "updated_at": "2021-06-20T12:42:18Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic infrastructure integrations allow you to report data from specific systems and supplement infrastructure's default, automatic monitoring. The Microsoft Azure integrations report data from various Azure platform services to your New Relic account. This document explains how to activate Azure integrations. Tip To use Azure integrations and the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Requirements The Azure integration activation process requires you to: Create a New Relic application and key in Azure. Grant this application access to the Azure services you want to monitor. Place required information in the New Relic's Integrations UI. To use these integration activation instructions directly from the Infrastructure UI, go to one.newrelic.com > Infrastructure > Azure > Add an Azure account. Step 1: Get Azure subscription and tenant IDs To get your Azure account's subscription id and tenantId, use your local terminal if you have Azure's tools installed, or use Azure's Cloud Shell terminal in the Azure portal. Open a terminal with access to your Azure account. Type the following: az account show Copy Copy and save the subscription id and tenantID from the output response for later use. The response should look similar to the response below. The subscription id and tenantID are highlighted. @Azure:~$ az account show { \"environmentName\": \"AzureCloud\", \"id\": \"9ffe9512-f4a2-42dd-1230-518aec34be21\" , \"isDefault\": true, \"name\": \"Beyond Team Sandbox\", \"state\": \"Enabled\", \"tenantId\": \"ac6692da-1231-422f-22a8-9eed6dbe83f1\" , \"user\": { \"name\": \"youremail@domain\", \"type\": \"user\" } Copy Step 2: Register your app and get ID You must have Azure permissions to register your application and copy its Application ID. To register your app in Azure: Sign in to the Azure portal and go to the Azure Active Directory. From Manage, select App registrations > New registration. Enter a name for the application. We recommend that you name your app NewRelic-Integrations. In Redirect URI select Weband add https://www.newrelic.com as the sign-on URI. Create the application by clicking Register. From the Overview of your app, copy the Application (client) ID, and save it for later use. Step 3: Create a client secret in Azure To create a client secret associated with your application: In Azure, under the application you've just created, select Certificates & secrets. Under Client secrets, click on New client secret and then on Add. Copy the value of Client Secret and save it for later use. Step 4: Provide permissions to services Your app must provide Reader permissions for each Azure service you want New Relic to monitor: In the Azure Subscriptions section, select the subscriptions that you want New Relic to monitor. Select Access control (IAM) > Add > Add role assignment. From the Role dropdown, select Reader. From the Select dropdown, select the app's name; for example, NewRelic-Integrations. From Selected members, verify your app name appears, then select Save. Some Azure services, including Azure CosmosDB and Azure VMs, require additional steps. See the Azure integration documentation for the services you want to enable. Step 5: Add app to New Relic Now you can activate the Azure integration in the Infrastructure UI. The UI will require the information you have saved in the previous steps, including: Your Azure account's subscription id and tenantId The application's application ID The application's client secret To add your Azure app to New Relic: Go to one.newrelic.com > Infrastructure > Azure and select the Azure Service you wish to add. Follow the steps in the UI to activate the integration in New Relic. If you have already completed the Azure account steps, skip to the end of the steps to fill out the form. (For Azure account name, enter the name you want to use to identify the account in your Integrations dashboard.) Update application details and rotate client secrets It's possible to update the application's name and authentication credentials using the Infrastructure UI or the Cloud Integrations API at any time. Follow these steps to rotate the Azure client secret in the Infratructure UI: Go to one.newrelic.com > Infrastructure > Azure and click on Manage Services on the Azure account you wish to edit. Select the edit action next to Account Name to see and edit any application value. Edit the Client Secret field with the new value and confirm with Save Changes. Explore app data in New Relic Infrastructure's UI After you activate an Azure integration, New Relic will start monitoring your Azure data at regular polling intervals. To find and use your data, use the data explorer or go to one.newrelic.com > Infrastructure > Azure",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.904205,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Activate Azure <em>integrations</em>",
        "sections": "Activate Azure <em>integrations</em>",
        "tags": "<em>Get</em> <em>started</em>",
        "body": "New Relic <em>infrastructure</em> <em>integrations</em> allow you to report data from specific systems and supplement <em>infrastructure</em>&#x27;s default, automatic monitoring. The Microsoft Azure <em>integrations</em> report data from various Azure platform services to your New Relic account. This document explains how to activate"
      },
      "id": "6044e5a9196a671bfa960f79"
    },
    {
      "sections": [
        "Understand and use data from infrastructure integrations",
        "Explore your infrastructure integration's data",
        "Types of integration data",
        "Create alert conditions"
      ],
      "title": "Understand and use data from infrastructure integrations ",
      "type": "docs",
      "tags": [
        "Integrations",
        "Infrastructure integrations",
        "Get started"
      ],
      "external_id": "305bd846fb6232dff32dceaacc5d1f0a9f400969",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/infrastructure-integrations/get-started/understand-use-data-infrastructure-integrations/",
      "published_at": "2021-07-02T14:21:08Z",
      "updated_at": "2021-03-13T03:28:12Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic infrastructure integrations, you can monitor the performance of popular services, including AWS, Azure, Google Cloud Platform, Kubernetes, Redis, MySQL, and more. Here are some tips on how to find, understand, and use data reported from infrastructure integrations. Explore your infrastructure integration's data The best way to understand infrastructure integrations's data and see what you can do with it is to enable an integration and explore the data in the New Relic UI. Some recommendations for exploring: View dashboards: You can find your dashboards in New Relic One. For details, see Integration dashboards. Query data: You can run custom queries and charts of your integration data. For more information, see Query New Relic data. Create alert conditions: See Alert conditions. Learn more about what metrics and inventory data an integration reports: See an integration's documentation: cloud integrations and on-host integrations. Types of integration data New Relic infrastructure integrations are separated into two main categories: Cloud integrations: Integrations for cloud platform services, including AWS, Azure, and GCP. On-host integrations: \"On-host\" refers to core services integrations that you can install directly on a host. Examples: MySQL, NGINX, Kubernetes, Redis. An infrastructure integration can generate four types of data: Metrics: Numeric measurement data. Examples: message counts, error counts, and CPU used percentage. Metric data appears in an integration's charts. For details about what metrics are reported and how to query them, see the documentation for a specific integration. For details about data structure, see Data types. Inventory: Information about the state and configuration of a service or host. Examples of inventory data: configuration settings, the name of the host the service is on, the AWS region, the port being used. Inventory data appears in the Inventory UI page. Inventory data also appears in integration dashboards. Changes to inventory data generates event data. Events: Events represent important activity on a system. Examples of event data: an admin logging in; a package install or uninstall; a service starting; a table being created. Most events represent changes to inventory data. Attributes: Some integrations will generate other non-metric attributes (key-value pairs) that can be queried in New Relic. Create alert conditions To create an alert condition for integration data in infrastructure, Go to one.newrelic.com > Infrastructure, choose an integration, and then select an available alert option. For more information, see Infrastructure and alerts. For on-host integrations, you can also create alert conditions using NRQL queries. (NRQL alerts are not supported or recommended for cloud integrations, due to issues related to data latency.)",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 113.88827,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Understand and use data from <em>infrastructure</em> <em>integrations</em> ",
        "sections": "Understand and use data from <em>infrastructure</em> <em>integrations</em>",
        "tags": "<em>Infrastructure</em> <em>integrations</em>",
        "body": "With New Relic <em>infrastructure</em> <em>integrations</em>, you can monitor the performance of popular services, including AWS, Azure, Google Cloud Platform, Kubernetes, Redis, MySQL, and more. Here are some tips on how to find, understand, and use data reported from <em>infrastructure</em> <em>integrations</em>. Explore your"
      },
      "id": "60450a3928ccbc2d9b2c60c8"
    }
  ],
  "/docs/integrations/kubernetes-integration/get-started/introduction-kubernetes-integration": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.24207,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " collector itself, install the New Relic Prometheus OpenMetrics <em>integration</em>. To <em>get</em> <em>started</em>: Install the New Relic Prometheus OpenMetrics <em>integration</em>. Label the deployment of your <em>Kubernetes</em> events <em>integration</em> with your configured scrape label (default is prometheus.io&#x2F;scrape=true). Optional: Define"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 144.78635,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-07-02T00:54:04Z",
      "updated_at": "2021-07-02T00:54:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.16 Red Hat Enterprise Linux (RHEL) Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, and 12.4 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 (only the infrastructure agent is supported). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.94562,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host <em>integrations</em> are also supported (with the exception of the Oracle <em>integration</em>). Built-in log"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    }
  ],
  "/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 157.24197,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " collector itself, install the New Relic Prometheus OpenMetrics <em>integration</em>. To <em>get</em> <em>started</em>: Install the New Relic Prometheus OpenMetrics <em>integration</em>. Label the deployment of your <em>Kubernetes</em> events <em>integration</em> with your configured scrape label (default is prometheus.io&#x2F;scrape=true). Optional: Define"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Requirements for the infrastructure agent",
        "Processor architectures",
        "Operating systems",
        "Unique hostname",
        "Permissions",
        "Libraries",
        "Network access",
        "Container software",
        "CPU, memory, and disk usage",
        "Configuration management tools"
      ],
      "title": "Requirements for the infrastructure agent",
      "type": "docs",
      "tags": [
        "Infrastructure",
        "Install the infrastructure agent",
        "Get started"
      ],
      "external_id": "517b5d94efa0139aa3ef5238569d5b04d28fb932",
      "image": "https://docs.newrelic.com/static/8de19e871ebba1c3d12258efc569dc6f/103b3/amazon-linux.png",
      "url": "https://docs.newrelic.com/docs/infrastructure/install-infrastructure-agent/get-started/requirements-infrastructure-agent/",
      "published_at": "2021-07-02T00:54:04Z",
      "updated_at": "2021-07-02T00:54:04Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Before installing our infrastructure agent, make sure your system and any on-host integrations you configure meet the requirements. Processor architectures The infrastructure agent supports these processor architectures: Linux: 64-bit for x86 processor architectures (also requires 64-bit package manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host integrations are also supported (with the exception of the Oracle integration). Built-in log forwarding is not yet available. Operating systems The infrastructure agent supports these operating systems up to their manufacturer's end-of-life. Operating system Supported by the infrastructure agent Amazon Linux All versions CentOS Version 7 or higher Debian Version 8 (\"Jessie\") or higher Docker Docker 1.12 Kubernetes Tested with versions 1.10 to 1.16 Red Hat Enterprise Linux (RHEL) Version 6 or higher SUSE Linux Enterprise Server (SLES) Versions 11.4, 12.1, 12.2, 12.3, and 12.4 Ubuntu LTS versions 16.04.x, 18.04.x, 20.04.x Windows Windows Server 2012, 2016, and 2019, and their service packs. Windows 10 (only the infrastructure agent is supported). You can also monitor Amazon BottleRocket workloads: When running EC2 instances, use the containerized agent. On EKS, install the Kubernetes integration. For ECS clusters, deploy the ECS integration. Unique hostname The infrastructure agent uses the hostname to uniquely identify each server. To avoid inaccurate metrics from combining multiple servers under a single hostname, make sure that each monitored server has a unique hostname. You can use the optional display_name setting to override the default hostname. Servers named localhost are not reported because this is a default name and inherently non-unique. Permissions The infrastructure agent requires these permissions: Linux: By default, the agent runs and installs as root. You can also select privileged or unprivileged run modes. Windows: The agent must be installed from an Administrator account and requires Administrator privileges to run. Libraries For agent versions 1.1.19 or higher, you need the libcap library in order to install Infrastructure. It's available in the official repositories of your distribution. Network access In order to report data to New Relic, our infrastructure agent must have outbound access to certain domains and ports. If your system needs a proxy to connect to these domains, use the proxy setting. Container software The infrastructure agent instruments Docker containers when installed on the host server. We support Docker versions 1.12 or higher. CPU, memory, and disk usage The infrastructure agent is fairly lightweight. For typical CPU, memory, and disk usage, see our page on agent performance overhead. For more information on supported file systems, see Storage sample attributes. Configuration management tools The infrastructure agent can be deployed programmatically using several config management and deploy tools: Ansible Chef Elastic Beanstalk Puppet",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 133.94553,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Get</em> <em>started</em>",
        "body": " manager and dependencies) Windows: both 32 and 64-bit for x86 processor architectures ARM: arm64 architecture including AWS Graviton 2 processor is supported on compatible Linux operating sytems. On-host <em>integrations</em> are also supported (with the exception of the Oracle <em>integration</em>). Built-in log"
      },
      "id": "60440aca28ccbc8ce02c60cf"
    },
    {
      "sections": [
        "Introduction to the Kubernetes integration",
        "Get started: Install the Kubernetes integration",
        "Tip",
        "Why it matters",
        "Navigate all your Kubernetes events",
        "Bring your cluster logs to New Relic",
        "Check the source code"
      ],
      "title": "Introduction to the Kubernetes integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "c641d1367f1f8fd2b589a2707112759becae609b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/introduction-kubernetes-integration/",
      "published_at": "2021-07-04T01:54:29Z",
      "updated_at": "2021-06-02T01:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration gives you full observability into the health and performance of your environment, no matter whether you run Kubernetes on-premises or in the cloud. With our cluster explorer, you can cut through layers of complexity to see how your cluster is performing, from the heights of the control plane down to applications running on a single pod. one.newrelic.com > Kubernetes cluster explorer: The cluster explorer is our powerful, fully visual answer to the challenges associated with running Kubernetes at a large scale. You can see the power of the Kubernetes integration in the cluster explorer, where the full picture of a cluster is made available on a single screen: nodes and pods are visualized according to their health and performance, with pending and alerting nodes in the innermost circles. Predefined alert conditions help you troubleshoot issues right from the start. Clicking each node reveals its status and how each app is performing. Get started: Install the Kubernetes integration We have an automated installer to help you with many types of installations: servers, virtual machines, and unprivileged environments. It can also help you with installations in managed services or platforms, but you'll need to review a few preliminary notes before getting started. Here's what the automated installer does: Asks for the cluster name and namespace of the integration. Asks for additional setup options, such as Kube state metrics. Asks for the installation method: manifest file or Helm. Generates either the manifest or Helm chart. Read the install docs Start the installer Tip If your New Relic account is in the EU region, access the automated installer from one.eu.newrelic.com. Why it matters Governing the complexity of Kubernetes can be challenging; there's so much going on at any given moment, with containers being created and deleted in a matter of minutes, applications crashing, and resources being consumed unexpectedly. Our integration helps you navigate Kubernetes abstractions across on-premises, cloud, and hybrid deployments. In New Relic, you can build your own charts and query all your Kubernetes data, which our integration collects by instrumenting the container orchestration layer. This gives you additional insight into nodes, namespaces, deployments, replica sets, pods, and containers. one.newrelic.com > Dashboards: Using the query builder you can turn any query on Kubernetes data to clear visuals. With the Kubernetes integration you can also: Link your APM data to Kubernetes to measure the performance of your web and mobile applications, with metrics such as request rate, throughput, error rate, and availability. Monitor services running on Kubernetes, such as Apache, NGINX, Cassandra, and many more (see our tutorial for monitoring Redis on Kubernetes). Create new alert policies and alert conditions based on your Kubernetes data, or extend the predefined alert conditions. These features are in addition to the data New Relic already reports for containerized processes running on instrumented hosts. Navigate all your Kubernetes events The Kubernetes events integration, which is installed separately, watches for events happening in your Kubernetes clusters and sends those events to New Relic. Events data is then visualized in the cluster explorer. To set it up, check the Kubernetes events box in step 3 of our install wizard, or follow the instructions. one.newrelic.com > Kubernetes cluster explorer > Events: Browse and filter all your Kubernetes events, and dig into application logs and infrastructure data. Bring your cluster logs to New Relic Our Kubernetes plugin for log monitoring can collect all your cluster's logs and send them to our platform, so that you can set up new alerts and charts. To set it up, check the Log data box in step 3 of our install wizard, or follow the instructions. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or you can create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 130.69295,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to the <em>Kubernetes</em> <em>integration</em>",
        "sections": "<em>Get</em> <em>started</em>: Install the <em>Kubernetes</em> <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " from the <em>start</em>. Clicking each node reveals its status and how each app is performing. <em>Get</em> <em>started</em>: Install the <em>Kubernetes</em> <em>integration</em> We have an automated installer to help you with many types of installations: servers, virtual machines, and unprivileged environments. It can also help you"
      },
      "id": "6043a212196a678d86960f46"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/configure-control-plane-monitoring": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.32361,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "sections": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.83665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Tip"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.478065,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/configure-kubernetes-proxy": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.32361,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "sections": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.83665,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Tip"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.478065,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/install-fargate-integration": [
    {
      "image": "",
      "url": "https://docs.newrelic.com/whats-new/",
      "sections": [
        "What's new in New RelicRSS"
      ],
      "published_at": "2021-07-04T01:45:19Z",
      "title": "What's new in New Relic",
      "updated_at": "2021-07-03T01:41:40Z",
      "type": "docs",
      "external_id": "49467ca3d09d7a4f1c1c69fd16be4e20050a7686",
      "document_type": "views_page_content",
      "popularity": 1,
      "body": "July 1 Monitor Amazon EKS on AWS Fargate integration with our public beta Receive telemetry from Kube State Metrics, Kubelet, and cAdvisor for full observability for Kubernetes clusters running on EKS in Fargate. June 30 Control data ingest costs with ingest drill-down Analyze the data that you send to New Relic June 23 Errors Inbox: Error tracking across your entire stack Track and triage your errors from a single screen May 28 NRQL Alert Conditions, with no NRQL required Now create alert conditions directly from the Query Builder May 27 Diagnose Issues Faster with AIOps Issue Maps and More! Introducing Issue Maps, Incident Analysis, and Relevant Dashboards New observability specialist certification for developers! Get certified in programmability with this certification course May 26 Instant Kubernetes observability with Pixie Without updating code or sampling data May 25 Dynamic Baselines for all your services and infrastructure Easily apply intelligent alerting to all of your services May 21 Keep track of What's New, security bulletins, and more with RSS! Get What's New posts, security bulletins, agent release notes, and Nerdlog and Nerd Bytes videos with RSS. May 14 Nerdlog Roundup - April Check out our monthly recap of some of the new products and features we released in April May 12 Level up at FutureStack May 25-27! Attend the observability event of the year! May 7 Attend FutureStack May 25-27, the observability event of the year! Level up at the observability event of the year! May 4 Pixie is now open source!! Instantly troubleshoot your Kubernetes applications without code changes April 27 Lightning fast search response with data partitions for log data Control how you segment your log data April 23 PHP agent now supports PHP version 8.0!! Monitor your PHP(v8.0) application with New Relic One April 21 Create synthetic monitors without code Synthetic monitors have never been easier to build! April 16 Native support for OpenTelemetry (Early access available now!!) Ingest OpenTelemetry data without adding any New Relic software into your services April 14 Distributed tracing for Mobile Get visibility to the entire journey of requests, originating in your mobile app as they travel through distributed systems April 12 A simpler, more intuitive log analytics experience Check out the changes we've made to the UI to help you see details and debug faster! Create alert conditions from any chart Now you can create an alert condition from just about anywhere in New Relic! Detect patterns and outliers in log data Create queries, alerts, and dashboards using log patterns and outliers April 9 Level up at FutureStack on May 25-27! Connect with Nerds from across the globe to learn, share, and get inspired at our free, virtual event April 8 Aggregated health and activity for your Workloads New Relic Workloads are now easier to read. April 5 Guided install for Java and .NET APM agents We’ve made it simple to set up APM (Java and .NET) using our recently-launched guided installation flow, so you can instrument your systems and start analyzing your telemetry data in 5 minutes - no instrumentation expertise required. April 1 NRQL Updates You can now use Regex within your NRQL queries, and sliding time windows March 31 Amazon CloudWatch Metric Streams More metrics, more often - fill gaps in your observability with Amazon CloudWatch Metric Streams and New Relic One. FedRAMP: Logs and Metrics now certified Protecting your data is our highest priority, which is why we achieved the US Government’s rigorous FedRAMP Moderate certification in 2020. And now we’re adding support for Logs and Metrics to our long list of supported services. March 30 Kubernetes: Metric Update Moving to container_memory_working_set_bytes and away from container_memory_usage_bytes metric Slow transactions on the service Summary Quickly dive into the most time-consuming requests to your application or service March 25 Nerdlog Roundup: New Relic Lookout, Guided Install, and Open Source Docs Get real-time visibility into your stack, simplify your instrumentation, and edit our docs March 18 Nerdlog Roundup: Root Cause Analysis, Topology (Relationship-Based) Correlation, and more! Reduce your MTTR with free Automatic Proactive Anomaly Detection, find problems fast with root cause analysis, and increase context for issues using topology correlation. March 17 AIOps Made Easy: Get to root cause and respond faster Automatically find root cause and respond faster than ever March 16 Heroku cloud integration for log management Detailed log data made easier than ever Visualize log details in Dashboards with our new Logs Table Widget More flexibility and control for log message visualizations March 15 AIOps Made Easy: Cut down on alert noise Reduce alert fatigue and prioritize what’s important March 10 AIOps Made Easy: Detect unusual changes instantly Automatic proactive anomaly detection for free Nerdlog Roundup: See hosts, services, containers, and more in one view with New Relic Navigator See hundreds of entities in a compact, high-level view March 8 Nerdlog Roundup: Muting Rules, Custom Data Visualizations, and more AIOps fun! Smarter incident intelligence and custom data visualizations February 25 Nerdlog Roundup: Ingesting OpenTelemetry Data, RUM, and more Ingest OpenTelemery data and logs, drop your data, and monitor your browser performance February 24 New Relic Explorer: Say goodbye to blindspots Gain unprecedented visibility into your entire system February 19 Nerdlog Roundup: K6 Load Testing and the ServiceNow and Snowflake Integrations Keep your issues in sync, view your Snowflake and k6 performance data in New Relic One. February 11 Data Dropping update: Now, drop entire dimensional metrics Filter sensitive or low-value data February 8 Check out the Nerdlog We have a new live-stream changelog on Twitch! January 28 Agentless syslog onboarding for New Relic log management Host-based log ingestion using rsyslog or syslog-ng with a new TCP endpoint January 21 New Python agent features Python agent now auto instruments HTTPX and Django ASGI January 19 New Anomalies feed as part of AI overview page View all your anomalies in a single place January 13 New Relic Snowflake Integration New Relic now integrates with Snowflake. January 6 Schedule recurring muting rules Suppress or mute notifications with ease December 7, 2020 Recap: Top 10 new observability features you need to know Our engineers and product managers share their favorite features, capabilities, and integrations to help you be more productive and collaborative. December 1, 2020 Alerts and Applied Intelligence new landing page Surface insights with a new landing page. Percentiles now available in events-to-metrics service For the events-to-metrics service, return an attribute's approximate value at a given percentile. November 12, 2020 API keys app There's a new app for managing your API keys. New Relic Lambda extension Our new extension improves observability of your Lambda data. Share dashboards and curated views with permalinks Sharing what you’re seeing just got easier. November 10, 2020 Invite a teammate See how easy it is to invite your team to New Relic. November 9, 2020 Enhanced errors experience in New Relic One We've improved the new errors experience. November 3, 2020 Troubleshoot performance and crash issues faster with New Relic's real-time Java profiling New Relic is excited to announce the availability of real-time Java profiling using Java Flight Recorder (JFR). October 30, 2020 Build high-resolution charts using sliding windows Increase your chart resolution with rolling aggregates, powered by sliding windows. Kafka Connect: Unlock open source and alternative instrumentation sources Build observability pipelines from open source tools and alternative instrumentation sources with the New Relic connector for Kafka Connect. Veneur sink: Your pipeline to 3rd party metrics Send metrics to New Relic using our Veneur sink. October 29, 2020 Three big updates for your native mobile apps Three big updates: The New Relic iOS and tvOS agents will now be distributed as the New Relic XCFramework Agent 7.0.0. For instrumenting React Native applications, we have an experimental open source React Native Module. Plus, we’ve improved reliability from our Android service and changed the way our service handles Android stack deobfuscation. October 27, 2020 Monitor ASGI apps using the Python agent The Python agent now supports monitoring Uvicorn, Starlette, and FastAPI ASGI applications. Monitor Apollo Server GraphQL Node applications Use our Node.js agent plugin to capture executed GraphQL queries. October 15, 2020 Applied Intelligence: Better, smarter webhooks Webhooks now automatically deliver anomaly charts. October 14, 2020 New Relic One now has a new UI for OpenTelemetry Check out our APM functionality for your OpenTelemetry data. October 13, 2020 Store data in an encrypted storage solution with NerdStorageVault Store and receive sensitive third-party secrets data. October 12, 2020 Saved views for log management Save your table column, time range, etc. in the logs UI October 9, 2020 Alerting: Loss of signal detection and configurable gap-filling strategies Specify how long the system should wait before a signal is considered lost. October 7, 2020 New Relic achieves AWS Outposts Ready designation New Relic has achieved the AWS Outposts Ready designation, part of the Amazon Web Services (AWS) Service Ready Program. October 1, 2020 Applied Intelligence now features accelerated suggested decisions Reduce alert noise by using our suggested correlation decisions. September 30, 2020 Applied Intelligence: Deployment events in the issue feed Applied Intelligence now includes any relevant APM deployment data. September 29, 2020 New Relic Edge with Infinite Tracing New Relic users with Pro or Enterprise Full-Stack Observability can now access and benefit from New Relic Edge. September 11, 2020 Anomalies visible in the activity stream The activity stream shows recent events so you can quickly see what's happening in your system. September 9, 2020 Windows Logs supported Support for Windows Logs with New Relic's infrastructure agent September 4, 2020 New Relic One has dark mode! We now have dark mode! New Relic Support for Amazon Web Services (AWS) Bottlerocket Gain full visibility into your workloads and infrastructure running on AWS Bottlerocket. What's new? Your in-product destination for New Relic One updates! September 1, 2020 Issue summary and analysis in Applied Intelligence Rely on the issue summary to help you identify and resolve relevant issues. Visual issue timeline in Applied Intelligence Use our Gantt-style timeline chart to see your related events. August 26, 2020 Real-user monitoring support for W3C trace context and Google Core Web Vitals We've added support for W3C trace context and Google Core Web Vitals! August 18, 2020 Alert analysis for Applied Intelligence Alert analysis gives you greater context for your alert violations and notifications. August 16, 2020 Ingest New Relic Logs directly with Amazon Web Services (AWS) Kinesis Data Firehose New Relic can ingest data from Amazon's Kinesis Data Firehose. Tracing the gap: AWS X-Ray integration Use New Relic with AWS X-Ray, a critical distributed tracing tool for getting visibility across your AWS services. August 10, 2020 Create Grafana dashboards with Prometheus data stored in New Relic You can create Grafana dashboards with Prometheus data stored in New Relic! July 30, 2020 Overall New Relic One experience updates We've made updates across all of New Relic One! Scheduled alert muting Schedule when you want to mute alerts to avoid messages during maintenance or deployments.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 415.87744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": "July 1 Monitor Amazon <em>EKS</em> on AWS <em>Fargate</em> integration with our public beta Receive telemetry from Kube State Metrics, Kubelet, and cAdvisor for full observability for Kubernetes clusters running on <em>EKS</em> in <em>Fargate</em>. June 30 Control data ingest costs with ingest drill-down Analyze the data that you"
      },
      "id": "60422917196a677e2fa83ddf"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 378.46494,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Amazon <em>EKS</em> <em>Fargate</em>",
        "body": " worker nodes. In Amazon <em>EKS</em>, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon <em>EKS</em>, make sure you are using the version of kubectl provided by AWS. Amazon <em>EKS</em> <em>Fargate</em> For help"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 343.99377,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "body": ", depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster <em>EKS</em> (EC2 nodes or <em>Fargate</em>) Compatible with version 1.11 or higher"
      },
      "id": "603e92dc64441f3a974e8891"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-using-helm": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.32352,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "sections": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.83664,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Tip"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.47806,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/install-kubernetes-integration-windows": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.32343,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "sections": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.83662,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Tip"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.47804,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.32343,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "sections": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.47804,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    },
    {
      "sections": [
        "Kubernetes integration: Predefined alert policy",
        "Predefined alert conditions",
        "Container CPU usage % is too high",
        "Container memory usage % is too high",
        "Pod was unable to be scheduled",
        "Pod is not ready",
        "Container is running out of space",
        "ReplicaSet doesn't have desired amount of pods",
        "ETCD open file descriptors",
        "Create new alert conditions"
      ],
      "title": "Kubernetes integration: Predefined alert policy",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "877308483659810ddcc3d364e2978f11eb8624e1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/kubernetes-integration-predefined-alert-policy/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-03-30T21:20:56Z",
      "document_type": "page",
      "popularity": 1,
      "body": "When deploying the New Relic Kubernetes integration for the first time in an account, we deploy a default set of alert conditions to your account. The predefined alert policy, named Kubernetes default alert policy, doesn't have a notification channel by default to avoid unwanted notifications. The alert conditions' thresholds can be customized to your environment and the alert policy updated to send notifications. For more information, see the Infrastructure alerts documentation. Predefined alert conditions Container CPU usage % is too high Setting Value Event type K8sContainerSample SELECT value (cpuUsedCores/cpuLimitCores)*100 Warning threshold > 90% for at least 5 minutes Critical threshold > 95% for at least 5 mins Container memory usage % is too high Setting Value Event type K8sContainerSample SELECT value memoryWorkingSetUtilization Warning threshold > 85% for at least 5 minutes Critical threshold > 95% for at least 5 mins Pod was unable to be scheduled Setting Value Event type K8sPodSample SELECT value isScheduled Warning threshold Critical threshold isScheduled = 0 for at least 7 minutes Pod is not ready Setting Value Event type K8sPodSample SELECT value isReady Warning threshold Critical threshold isReady = 0 for at least 10 minutes Container is running out of space Setting Value Event type K8sContainerSample SELECT value fsUsedPercent Warning threshold > 75% for at least 5 minutes Critical threshold > 90% for at least 5 minutes ReplicaSet doesn't have desired amount of pods Setting Value Event type K8sReplicaSetSample SELECT value podsDesired - podsReady Warning threshold Critical threshold 0 for at least 5 minutes ETCD open file descriptors Setting Value Event type K8sEtcdSample SELECT value (processOpenFds/processMaxFds)*100 Warning threshold > 75% for at least 3 minutes Critical threshold > 90% for at least 5 minutes Create new alert conditions To create new alert conditions based on Kubernetes metric data, see Understand and use data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 107.339714,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: Predefined alert policy",
        "sections": "<em>Kubernetes</em> <em>integration</em>: Predefined alert policy",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "When deploying the New Relic <em>Kubernetes</em> <em>integration</em> for the first time in an account, we deploy a default set of alert conditions to your account. The predefined alert policy, named <em>Kubernetes</em> default alert policy, doesn&#x27;t have a notification channel by default to avoid unwanted notifications"
      },
      "id": "603e92dc64441fd2484e88b6"
    }
  ],
  "/docs/integrations/kubernetes-integration/installation/kubernetes-integration-recommended-alert-policy": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.32333,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "sections": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.83661,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Tip"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.47803,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    }
  ],
  "/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration": [
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 99.50522,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> <em>events</em>, Prometheus OpenMetrics, and New Relic log monitoring. Tip"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 91.21802,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    },
    {
      "sections": [
        "Introduction to the Kubernetes integration",
        "Get started: Install the Kubernetes integration",
        "Tip",
        "Why it matters",
        "Navigate all your Kubernetes events",
        "Bring your cluster logs to New Relic",
        "Check the source code"
      ],
      "title": "Introduction to the Kubernetes integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "c641d1367f1f8fd2b589a2707112759becae609b",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/introduction-kubernetes-integration/",
      "published_at": "2021-07-04T01:54:29Z",
      "updated_at": "2021-06-02T01:43:37Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration gives you full observability into the health and performance of your environment, no matter whether you run Kubernetes on-premises or in the cloud. With our cluster explorer, you can cut through layers of complexity to see how your cluster is performing, from the heights of the control plane down to applications running on a single pod. one.newrelic.com > Kubernetes cluster explorer: The cluster explorer is our powerful, fully visual answer to the challenges associated with running Kubernetes at a large scale. You can see the power of the Kubernetes integration in the cluster explorer, where the full picture of a cluster is made available on a single screen: nodes and pods are visualized according to their health and performance, with pending and alerting nodes in the innermost circles. Predefined alert conditions help you troubleshoot issues right from the start. Clicking each node reveals its status and how each app is performing. Get started: Install the Kubernetes integration We have an automated installer to help you with many types of installations: servers, virtual machines, and unprivileged environments. It can also help you with installations in managed services or platforms, but you'll need to review a few preliminary notes before getting started. Here's what the automated installer does: Asks for the cluster name and namespace of the integration. Asks for additional setup options, such as Kube state metrics. Asks for the installation method: manifest file or Helm. Generates either the manifest or Helm chart. Read the install docs Start the installer Tip If your New Relic account is in the EU region, access the automated installer from one.eu.newrelic.com. Why it matters Governing the complexity of Kubernetes can be challenging; there's so much going on at any given moment, with containers being created and deleted in a matter of minutes, applications crashing, and resources being consumed unexpectedly. Our integration helps you navigate Kubernetes abstractions across on-premises, cloud, and hybrid deployments. In New Relic, you can build your own charts and query all your Kubernetes data, which our integration collects by instrumenting the container orchestration layer. This gives you additional insight into nodes, namespaces, deployments, replica sets, pods, and containers. one.newrelic.com > Dashboards: Using the query builder you can turn any query on Kubernetes data to clear visuals. With the Kubernetes integration you can also: Link your APM data to Kubernetes to measure the performance of your web and mobile applications, with metrics such as request rate, throughput, error rate, and availability. Monitor services running on Kubernetes, such as Apache, NGINX, Cassandra, and many more (see our tutorial for monitoring Redis on Kubernetes). Create new alert policies and alert conditions based on your Kubernetes data, or extend the predefined alert conditions. These features are in addition to the data New Relic already reports for containerized processes running on instrumented hosts. Navigate all your Kubernetes events The Kubernetes events integration, which is installed separately, watches for events happening in your Kubernetes clusters and sends those events to New Relic. Events data is then visualized in the cluster explorer. To set it up, check the Kubernetes events box in step 3 of our install wizard, or follow the instructions. one.newrelic.com > Kubernetes cluster explorer > Events: Browse and filter all your Kubernetes events, and dig into application logs and infrastructure data. Bring your cluster logs to New Relic Our Kubernetes plugin for log monitoring can collect all your cluster's logs and send them to our platform, so that you can set up new alerts and charts. To set it up, check the Log data box in step 3 of our install wizard, or follow the instructions. Check the source code This integration is open source software. That means you can browse its source code and send improvements, or you can create your own fork and build it. For more information, see the README.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 84.457504,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Introduction to the <em>Kubernetes</em> <em>integration</em>",
        "sections": "Introduction to the <em>Kubernetes</em> <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " to the data New Relic already reports for containerized processes running on instrumented hosts. Navigate all your <em>Kubernetes</em> <em>events</em> The <em>Kubernetes</em> <em>events</em> <em>integration</em>, which is installed separately, watches for <em>events</em> happening in your <em>Kubernetes</em> clusters and sends those <em>events</em> to New Relic. <em>Events</em> data"
      },
      "id": "6043a212196a678d86960f46"
    }
  ],
  "/docs/integrations/kubernetes-integration/kubernetes-events/kubernetes-integration-predefined-alert-policy": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 150.32324,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "sections": "<em>Install</em> <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 136.8366,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: <em>install</em> and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "The easiest way to install the <em>Kubernetes</em> <em>integration</em> is to use our automated installer to generate a manifest. It bundles not just the <em>integration</em> DaemonSets, but also other New Relic <em>Kubernetes</em> configurations, like <em>Kubernetes</em> events, Prometheus OpenMetrics, and New Relic log monitoring. Tip"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Kubernetes integration: compatibility and requirements",
        "Compatibility",
        "Requirements",
        "Install using Helm"
      ],
      "title": "Kubernetes integration: compatibility and requirements",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Get started"
      ],
      "external_id": "e9bbd729904fa01739eb91e4f3c74561b51c2ba1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/get-started/kubernetes-integration-compatibility-requirements/",
      "published_at": "2021-07-02T17:01:22Z",
      "updated_at": "2021-06-15T13:04:06Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes integration can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our integration. Compatibility Our Kubernetes integration is compatible with the following versions, depending on the installation mode: Install mode or feature Kubernetes versions Kubernetes cluster Currently tested with versions 1.10 to 1.21 Kubernetes cluster GKE Currently tested with versions 1.10 and 1.17 Kubernetes cluster EKS (EC2 nodes or Fargate) Compatible with version 1.11 or higher Kubernetes cluster AKS Compatible with version 1.11 or higher Kubernetes cluster OpenShift Currently tested with versions 3.7, 3.9, 4.2, 4.3, 4.4, 4.5 and 4.6 Control plane monitoring Compatible with version 1.11 or higher Service monitoring Compatible with version 1.13 or higher Requirements The New Relic Kubernetes integration has the following requirements: Linux distribution compatible with New Relic infrastructure agent. kube-state-metrics version 1.9.5 running on the cluster. When using CRI-O as the container runtime, the processes inside containers are not reported. Performance data is collected at the container level. Install using Helm For compatibility and requirements when installing the Kubernetes integration using Helm, see Alternative install using Helm.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 117.47801,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "sections": "<em>Kubernetes</em> <em>integration</em>: compatibility and requirements",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> can be installed directly on a server or VM, or through several cloud platforms, such as GKE, EKS, AKS, or OpenShift. Each has a different compatibility with our <em>integration</em>. Compatibility Our <em>Kubernetes</em> <em>integration</em> is compatible with the following versions"
      },
      "id": "603e92dc64441f3a974e8891"
    }
  ],
  "/docs/integrations/kubernetes-integration/link-apps-services/monitor-services-running-kubernetes": [
    {
      "sections": [
        "Link your applications to Kubernetes",
        "Tip",
        "Compatibility and requirements",
        "Kubernetes requirements",
        "Network requirements",
        "APM agent compatibility",
        "Openshift requirements",
        "Important",
        "Configure the injection of metadata",
        "Default configuration",
        "Custom configuration",
        "Manage custom certificates",
        "Validate the injection of metadata",
        "Disable the injection of metadata",
        "Troubleshooting"
      ],
      "title": "Link your applications to Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "2ae58989813695b48f4924529d6fd6ea17e5f6c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-your-applications/link-your-applications-kubernetes/",
      "published_at": "2021-07-02T13:59:53Z",
      "updated_at": "2021-05-28T06:30:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can surface Kubernetes metadata and link it to your APM agents as distributed traces to explore performance issues and troubleshoot transaction errors. For more information, see this New Relic blog post. You can quickly start monitoring Kubernetes clusters using Auto-telemetry with Pixie, which is currently a beta release. This Pixie integration into New Relic does not require a language agent. Learn more about Auto-telemetry with Pixie here. Tip Our Kubernetes metadata injection project is open source. Here's the code to link APM and infrastructure data and the code to automatically manage certificates. Compatibility and requirements Before linking Kubernetes metadata to your APM agents, make sure you meet the following requirements: Kubernetes requirements Network requirements APM agent compatibility OpenShift requirements Kubernetes requirements To link your applications and Kubernetes, your cluster must have the MutatingAdmissionWebhook controller enabled, which requires Kubernetes 1.9 or higher. To verify that your cluster is compatible, run the following command: kubectl api-versions | grep admissionregistration.k8s.io/v1beta1 admissionregistration.k8s.io/v1beta1 Copy If you see a different result, follow the Kubernetes documentation to enable admission control in your cluster. Network requirements For Kubernetes to speak to our MutatingAdmissionWebhook, the master node (or the API server container, depending on how the cluster is set up) should be allowed egress for HTTPS traffic on port 443 to pods in all of the other nodes in the cluster. This might require specific configuration depending on how the infrastructure is set up (on-premises, AWS, Google Cloud, etc). Tip Until Kubernetes v1.14, users were only allowed to register admission webhooks on port 443. Since v1.15 it's possible to register them on different ports. To ensure backward compatibility, the webhook is registered by default on port 443 in the YAML config file we distribute. APM agent compatibility The following New Relic agents collect Kubernetes metadata: Go 2.3.0 or higher Java 4.10.0 or higher Node.js 5.3.0 or higher Python 4.14.0 or higher Ruby 6.1.0 or higher .NET 8.17.438 or higher Openshift requirements To link Openshift and Kubernetes you must enable mutating admission webhooks, which requires Openshift 3.9 or higher. During the process, install a resource that requires admin permissions to the cluster. Run this to log in as admin: oc login -u system:admin Copy Check that webhooks are correctly configured. If they are not, update the master-config.yaml file. admissionConfig: pluginConfig: MutatingAdmissionWebhook: configuration: apiVersion: apiserver.config.k8s.io/v1alpha1 kubeConfigFile: /dev/null kind: WebhookAdmission ValidatingAdmissionWebhook: configuration: apiVersion: apiserver.config.k8s.io/v1alpha1 kubeConfigFile: /dev/null kind: WebhookAdmission location: \"\" Copy Important Add kubeConfigFile: /dev/null to address some issues in Openshift. Enable certificate signing by editing the YAML file and updating your configuration: kubernetesMasterConfig: controllerArguments: cluster-signing-cert-file: - \"/etc/origin/master/ca.crt\" cluster-signing-key-file: - \"/etc/origin/master/ca.key\" Copy Restart the Openshift services in the master node. Configure the injection of metadata By default, all the pods you create that include APM agents have the correct environment variables set and the metadata injection applies to the entire cluster. To check that the environment variables have been set, any container that is running must be stopped, and a new instance started (see Validate the injection of metadata). This default configuration also uses the Kubernetes certificates API to automatically manage the certificates required for the injection. If needed, you can limit the injection of metadata to specific namespaces in your cluster or self-manage your certificates. Default configuration To proceed with the default injection of metadata, follow these steps: Download the YAML file: curl -O http://download.newrelic.com/infrastructure_agent/integrations/kubernetes/k8s-metadata-injection-latest.yaml Copy Replace YOUR_CLUSTER_NAME with the name of your cluster in the YAML file. Apply the YAML file to your Kubernetes cluster: kubectl apply -f k8s-metadata-injection-latest.yaml Copy Custom configuration You can limit the injection of metadata only to specific namespaces by using labels. To enable this feature, edit your YAML file by finding and uncommenting the following lines: # namespaceSelector: # matchLabels: # newrelic-metadata-injection: enabled Copy With this option, injection is only applied to those namespaces that have the newrelic-metadata-injection label set to enabled: kubectl label namespace YOUR_NAMESPACE newrelic-metadata-injection=enabled Copy Manage custom certificates To use custom certificates you need a specific YAML file: Download the YAML file without automatic certificate management: curl -O http://download.newrelic.com/infrastructure_agent/integrations/kubernetes/k8s-metadata-injection-custom-certs-latest.yaml Copy Replace YOUR_CLUSTER_NAME with the name of your cluster in the YAML file. Apply the YAML file to your Kubernetes cluster: kubectl apply -f k8s-metadata-injection-custom-certs-latest.yaml Copy Once you have the correct YAML file, you can proceed with the custom certificate management option. You need your certificate, server key, and Certification Authority (CA) bundle encoded in PEM format. If you have them in the standard certificate format (X.509), install openssl, and run the following: openssl x509 -in CERTIFICATE_FILENAME -outform PEM -out CERTIFICATE_FILENAME.pem openssl x509 -in SERVER_KEY_FILENAME -outform PEM -out SERVER_KEY_FILENAME.pem openssl x509 -in CA_BUNDLE_FILENAME -outform PEM -out BUNDLE_FILENAME.pem Copy If your certificate/key pair are in another format, see the Digicert knowledgebase for more help. Create the TLS secret with the signed certificate/key pair, and patch the mutating webhook configuration with the CA using the following commands: kubectl create secret tls newrelic-metadata-injection-secret \\ --key=PEM_ENCODED_SERVER_KEY \\ --cert=PEM_ENCODED_CERTIFICATE \\ --dry-run -o yaml | kubectl -n default apply -f - caBundle=$(cat PEM_ENCODED_CA_BUNDLE | base64 | td -d '\\n') kubectl patch mutatingwebhookconfiguration newrelic-metadata-injection-cfg --type='json' -p \"[{'op': 'replace', 'path': '/webhooks/0/clientConfig/caBundle', 'value':'${caBundle}'}]\" Copy Important Certificates signed by Kubernetes have an expiration of one year. For more information, see the Kubernetes source code in GitHub. Validate the injection of metadata In order to validate that the webhook (responsible for injecting the metadata) was installed correctly, deploy a new pod and check for the New Relic environment variables. Create a dummy pod containing Busybox by running: kubectl create -f https://git.io/vPieo Copy Check if New Relic environment variables were injected: kubectl exec busybox0 -- env | grep NEW_RELIC_METADATA_KUBERNETES NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME=fsi NEW_RELIC_METADATA_KUBERNETES_NODE_NAME=nodea NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME=default NEW_RELIC_METADATA_KUBERNETES_POD_NAME=busybox0 NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME=busybox Copy Disable the injection of metadata To disable/uninstall the injection of metadata, use the following commands: Delete the Kubernetes objects using the yaml file: kubectl delete -f k8s-metadata-injection-latest.yaml Copy Delete the TLS secret containing the certificate/key pair: kubectl delete secret/newrelic-metadata-injection-secret Copy Troubleshooting Follow these troubleshooting tips as needed. No Kubernetes metadata in APM or distributed tracing transactions Problem The creation of the secret by the k8s-webhook-cert-manager job used to fail due to the kubectl version used by the image when running in Kubernetes version 1.19.x, The new version 1.3.2 fixes this issue, therefore it is enough to run again the job using an update version of the image to fix the issue. Solution Update the image k8s-webhook-cert-manager (to a version >= 1.3.2) and re-run the job. The secret will be correctly created and the k8s-metadata-injection pod will be able to start. Note that the new version of the manifest and of the nri-bundle are already updated with the correct version of the image. Problem In OpenShift version 4.x, the CA that is used in order to patch the mutatingwebhookconfiguration resource is not the one used when signing the certificates. This is a known issue currently tracked here. In the logs of the Pod nri-metadata-injection, you'll see the following error message: TLS handshake error from 10.131.0.29:37428: remote error: tls: unknown certificate authority TLS handshake error from 10.129.0.1:49314: remote error: tls: bad certificate Copy Workaround Manually update the certificate stored in the mutatingwebhookconfiguration object. The correct CA locations might change according to the cluster configuration. However, you can usually find the CA in the secret csr-signer in the namespace openshift-kube-controller-manager. Problem There is no Kubernetes metadata included in the transactions' attributes of your APM agent or in distributed tracing. Solution Verify that the environment variables are being correctly injected by following the instructions described in the Validate your installation step. If they are not present, get the name of the metadata injection pod by running: kubectl get pods | grep newrelic-metadata-injection-deployment kubectl logs -f pod/podname Copy In another terminal, create a new pod (for example, see Validate your installation), and inspect the logs of the metadata injection deployment for errors. For every created pod there should be a set of 4 new entries in the logs like: {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.107Z\",\"caller\":\"server/main.go:139\",\"msg\":\"POST https://newrelic-metadata-injection-svc.default.svc:443/mutate?timeout=30s HTTP/2.0\\\" from 10.11.49.2:32836\"} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.110Z\",\"caller\":\"server/webhook.go:168\",\"msg\":\"received admission review\",\"kind\":\"/v1, Kind=Pod\",\"namespace\":\"default\",\"name\":\"\",\"pod\":\"busybox1\",\"UID\":\"6577519b-7a61-11ea-965e-0e46d1c9335c\",\"operation\":\"CREATE\",\"userinfo\":{\"username\":\"admin\",\"uid\":\"admin\",\"groups\":[\"system:masters\",\"system:authenticated\"]}} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.111Z\",\"caller\":\"server/webhook.go:182\",\"msg\":\"admission response created\",\"response\":\"[{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env\\\",\\\"value\\\":[{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME\\\",\\\"value\\\":\\\"adn_kops\\\"}]},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_NODE_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"spec.nodeName\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"metadata.namespace\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_POD_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"metadata.name\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME\\\",\\\"value\\\":\\\"busybox\\\"}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME\\\",\\\"value\\\":\\\"busybox\\\"}}]\"} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.111Z\",\"caller\":\"server/webhook.go:257\",\"msg\":\"writing response\"} Copy If there are no new entries on the logs, it means that the apiserver is not being able to communicate with the webhook service, this could be due to networking rules or security groups rejecting the communication. To check if the apiserver is not being able to communicate with the webhook you should inspect the apiserver logs for errors like: failed calling webhook \"metadata-injection.newrelic.com\": ERROR_REASON Copy To get the apiserver logs: Start a proxy to the Kubernetes API server by the executing the following command in a terminal window and keep it running. kubectl proxy --port=8001 Copy Create a new pod in your cluster, this will make the apiserver try to communicate with the webhook. The following command will create a busybox. kubectl create -f https://git.io/vPieo Copy Retrieve the apiserver logs. curl localhost:8001/logs/kube-apiserver.log > apiserver.log Copy Delete the busybox container. kubectl delete -f https://git.io/vPieo Copy Inspect the logs for errors. grep -E 'failed calling webhook' apiserver.log Copy Remember that one of the requirements for the metadata injection is that the apiserver must be allowed egress to the pods running on the cluster. If you encounter errors regarding connection timeouts or failed connections, make sure to check the security groups and firewall rules of the cluster. If there are no log entries in either the apiserver logs or the metadata injection deployment, it means that the webhook was not properly registered. Ensure the metadata injection setup job ran successfully by inspecting the output of: kubectl get job newrelic-metadata-setup Copy If the job is not completed, investigate the logs of the setup job: kubectl logs job/newrelic-metadata-setup Copy Ensure the CertificateSigningRequest is approved and issued by running: kubectl get csr newrelic-metadata-injection-svc.default Copy Ensure the TLS secret is present by running: kubectl get secret newrelic-metadata-injection-secret Copy Ensure the CA bundle is present in the mutating webhook configuration: kubectl get mutatingwebhookconfiguration newrelic-metadata-injection-cfg -o json Copy Ensure the TargetPort of the Service resource matches the Port of the Deployment's container: kubectl describe service/newrelic-metadata-injection-svc kubectl describe deployment/newrelic-metadata-injection-deployment Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 236.42258,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Link</em> your <em>applications</em> to <em>Kubernetes</em>",
        "sections": "<em>Link</em> your <em>applications</em> to <em>Kubernetes</em>",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": " is currently a beta release. This Pixie <em>integration</em> into New Relic does not require a language agent. Learn more about Auto-telemetry with Pixie here. Tip Our <em>Kubernetes</em> metadata injection project is open source. Here&#x27;s the code to <em>link</em> APM and infrastructure data and the code to automatically"
      },
      "id": "603ebb94196a674fd1a83df3"
    },
    {
      "sections": [
        "Tutorial: Monitor Redis running on Kubernetes",
        "What you need",
        "Step 1: Set up an example Redis application",
        "Step 2: Enable monitoring of Redis instances"
      ],
      "title": "Tutorial: Monitor Redis running on Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "30d0c7b52a792c21a50f98931d05a0665ff19fa1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/tutorial-monitor-redis-running-kubernetes/",
      "published_at": "2021-07-02T13:58:48Z",
      "updated_at": "2021-03-16T04:18:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have a service running on Kubernetes, and it's a service we support, you can enable monitoring of that service by adding a configuration section for that integration to the Kubernetes integration's config. This tutorial shows how to enable monitoring for a Redis service running on the Kubernetes PHP Guestbook. For the general procedure, see Monitor a Kubernetes-running service. What you need See the general requirements for this feature, including supported services. The kubectl command-line tool must be configured to communicate with your cluster. If you don't have a cluster, you can create one using Minikube. Step 1: Set up an example Redis application This tutorial builds on the Kubernetes tutorial Deploying a PHP Guestbook application with Redis. Skip the Kubernetes tutorial and run the following command to set up the application needed for our tutorial: kubectl create -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook/all-in-one/guestbook-all-in-one.yaml Copy If you'd like to first complete the Kubernetes tutorial, follow their tutorial instructions but do not follow the instructions in the Cleaning up section. Step 2: Enable monitoring of Redis instances The PHP Guestbook application has three Redis instances: one master and two slave instances. Each instance is tagged with a label where app=redis. For this example, we're using our Redis monitoring integration. It can monitor both master and slave instances of Redis, so we don’t have to distinguish between them. In the Kubernetes integration's YAML config file (newrelic-infrastructure-k8s-latest.yaml), you need to update the nri-integration-cfg section. From the list of integration configs, get the Redis integration YAML and add it to the Kubernetes config. The Redis YAML is highlighted below. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: redis-config.yml: | --- # Run auto discovery to find pods with label \"app=redis\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: redis integrations: - name: nri-redis env: # using the discovered IP as the hostname address HOSTNAME: ${discovery.ip} PORT: 6379 KEYS: '{\"0\":[\"<KEY_1>\"],\"1\":[\"<KEY_2>\"]}' REMOTE_MONITORING: true labels: env: production Copy Deploy the updated service: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy You should be able to see the following in the logs for the pod newrelic-infra: time=\"2019-12-23T17:37:07Z\" level=info msg=\"Integration health check starting\" instance=redis-metrics integration=com.newrelic.redis prefix=integration/com.newrelic.redis working-dir=/var/db/newrelic-infra/newrelic-integrations time=\"2019-12-23T17:37:07Z\" level=info msg=\"Integration health check finished with success\" instance=redis-metrics integration=com.newrelic.redis prefix=integration/com.newrelic.redis working-dir=/var/db/newrelic-infra/newrelic-integrations Copy If there are no errors, you should see Redis data in the Infrastructure UI. To find the Redis dashboards, go to one.newrelic.com > Infrastructure > Third party services, and select the Redis dashboard. For the general procedure of how to monitor services running on Kubernetes, including more detail about how configuration works, see Monitor a Kubernetes-running service.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.56831,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Monitor Redis running on <em>Kubernetes</em>",
        "sections": "Tutorial: Monitor Redis running on <em>Kubernetes</em>",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": " is highlighted below. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-<em>integration</em>-cfg namespace: default data: redis-config.yml: | --- # Run auto discovery to find pods with label &quot;<em>app</em>=redis&quot; # https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>integrations</em>&#x2F;host-<em>integrations</em>&#x2F;installation&#x2F;container-auto-discovery discovery"
      },
      "id": "603e7e8264441f332a4e8879"
    },
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.20544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " events <em>integration</em> requires you to: Install and activate the New Relic <em>Kubernetes</em> <em>integration</em>. Configure a <em>Kubernetes</em> pod with the label <em>app.kubernetes</em>.io&#x2F;name=nri-kube-events and two containers, one used to capture events in the <em>Kubernetes</em> cluster and the other to forward the events to New Relic"
      },
      "id": "603eae45196a67b26ba83d8f"
    }
  ],
  "/docs/integrations/kubernetes-integration/link-apps-services/tutorial-monitor-redis-running-kubernetes": [
    {
      "sections": [
        "Link your applications to Kubernetes",
        "Tip",
        "Compatibility and requirements",
        "Kubernetes requirements",
        "Network requirements",
        "APM agent compatibility",
        "Openshift requirements",
        "Important",
        "Configure the injection of metadata",
        "Default configuration",
        "Custom configuration",
        "Manage custom certificates",
        "Validate the injection of metadata",
        "Disable the injection of metadata",
        "Troubleshooting"
      ],
      "title": "Link your applications to Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "2ae58989813695b48f4924529d6fd6ea17e5f6c5",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-your-applications/link-your-applications-kubernetes/",
      "published_at": "2021-07-02T13:59:53Z",
      "updated_at": "2021-05-28T06:30:54Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can surface Kubernetes metadata and link it to your APM agents as distributed traces to explore performance issues and troubleshoot transaction errors. For more information, see this New Relic blog post. You can quickly start monitoring Kubernetes clusters using Auto-telemetry with Pixie, which is currently a beta release. This Pixie integration into New Relic does not require a language agent. Learn more about Auto-telemetry with Pixie here. Tip Our Kubernetes metadata injection project is open source. Here's the code to link APM and infrastructure data and the code to automatically manage certificates. Compatibility and requirements Before linking Kubernetes metadata to your APM agents, make sure you meet the following requirements: Kubernetes requirements Network requirements APM agent compatibility OpenShift requirements Kubernetes requirements To link your applications and Kubernetes, your cluster must have the MutatingAdmissionWebhook controller enabled, which requires Kubernetes 1.9 or higher. To verify that your cluster is compatible, run the following command: kubectl api-versions | grep admissionregistration.k8s.io/v1beta1 admissionregistration.k8s.io/v1beta1 Copy If you see a different result, follow the Kubernetes documentation to enable admission control in your cluster. Network requirements For Kubernetes to speak to our MutatingAdmissionWebhook, the master node (or the API server container, depending on how the cluster is set up) should be allowed egress for HTTPS traffic on port 443 to pods in all of the other nodes in the cluster. This might require specific configuration depending on how the infrastructure is set up (on-premises, AWS, Google Cloud, etc). Tip Until Kubernetes v1.14, users were only allowed to register admission webhooks on port 443. Since v1.15 it's possible to register them on different ports. To ensure backward compatibility, the webhook is registered by default on port 443 in the YAML config file we distribute. APM agent compatibility The following New Relic agents collect Kubernetes metadata: Go 2.3.0 or higher Java 4.10.0 or higher Node.js 5.3.0 or higher Python 4.14.0 or higher Ruby 6.1.0 or higher .NET 8.17.438 or higher Openshift requirements To link Openshift and Kubernetes you must enable mutating admission webhooks, which requires Openshift 3.9 or higher. During the process, install a resource that requires admin permissions to the cluster. Run this to log in as admin: oc login -u system:admin Copy Check that webhooks are correctly configured. If they are not, update the master-config.yaml file. admissionConfig: pluginConfig: MutatingAdmissionWebhook: configuration: apiVersion: apiserver.config.k8s.io/v1alpha1 kubeConfigFile: /dev/null kind: WebhookAdmission ValidatingAdmissionWebhook: configuration: apiVersion: apiserver.config.k8s.io/v1alpha1 kubeConfigFile: /dev/null kind: WebhookAdmission location: \"\" Copy Important Add kubeConfigFile: /dev/null to address some issues in Openshift. Enable certificate signing by editing the YAML file and updating your configuration: kubernetesMasterConfig: controllerArguments: cluster-signing-cert-file: - \"/etc/origin/master/ca.crt\" cluster-signing-key-file: - \"/etc/origin/master/ca.key\" Copy Restart the Openshift services in the master node. Configure the injection of metadata By default, all the pods you create that include APM agents have the correct environment variables set and the metadata injection applies to the entire cluster. To check that the environment variables have been set, any container that is running must be stopped, and a new instance started (see Validate the injection of metadata). This default configuration also uses the Kubernetes certificates API to automatically manage the certificates required for the injection. If needed, you can limit the injection of metadata to specific namespaces in your cluster or self-manage your certificates. Default configuration To proceed with the default injection of metadata, follow these steps: Download the YAML file: curl -O http://download.newrelic.com/infrastructure_agent/integrations/kubernetes/k8s-metadata-injection-latest.yaml Copy Replace YOUR_CLUSTER_NAME with the name of your cluster in the YAML file. Apply the YAML file to your Kubernetes cluster: kubectl apply -f k8s-metadata-injection-latest.yaml Copy Custom configuration You can limit the injection of metadata only to specific namespaces by using labels. To enable this feature, edit your YAML file by finding and uncommenting the following lines: # namespaceSelector: # matchLabels: # newrelic-metadata-injection: enabled Copy With this option, injection is only applied to those namespaces that have the newrelic-metadata-injection label set to enabled: kubectl label namespace YOUR_NAMESPACE newrelic-metadata-injection=enabled Copy Manage custom certificates To use custom certificates you need a specific YAML file: Download the YAML file without automatic certificate management: curl -O http://download.newrelic.com/infrastructure_agent/integrations/kubernetes/k8s-metadata-injection-custom-certs-latest.yaml Copy Replace YOUR_CLUSTER_NAME with the name of your cluster in the YAML file. Apply the YAML file to your Kubernetes cluster: kubectl apply -f k8s-metadata-injection-custom-certs-latest.yaml Copy Once you have the correct YAML file, you can proceed with the custom certificate management option. You need your certificate, server key, and Certification Authority (CA) bundle encoded in PEM format. If you have them in the standard certificate format (X.509), install openssl, and run the following: openssl x509 -in CERTIFICATE_FILENAME -outform PEM -out CERTIFICATE_FILENAME.pem openssl x509 -in SERVER_KEY_FILENAME -outform PEM -out SERVER_KEY_FILENAME.pem openssl x509 -in CA_BUNDLE_FILENAME -outform PEM -out BUNDLE_FILENAME.pem Copy If your certificate/key pair are in another format, see the Digicert knowledgebase for more help. Create the TLS secret with the signed certificate/key pair, and patch the mutating webhook configuration with the CA using the following commands: kubectl create secret tls newrelic-metadata-injection-secret \\ --key=PEM_ENCODED_SERVER_KEY \\ --cert=PEM_ENCODED_CERTIFICATE \\ --dry-run -o yaml | kubectl -n default apply -f - caBundle=$(cat PEM_ENCODED_CA_BUNDLE | base64 | td -d '\\n') kubectl patch mutatingwebhookconfiguration newrelic-metadata-injection-cfg --type='json' -p \"[{'op': 'replace', 'path': '/webhooks/0/clientConfig/caBundle', 'value':'${caBundle}'}]\" Copy Important Certificates signed by Kubernetes have an expiration of one year. For more information, see the Kubernetes source code in GitHub. Validate the injection of metadata In order to validate that the webhook (responsible for injecting the metadata) was installed correctly, deploy a new pod and check for the New Relic environment variables. Create a dummy pod containing Busybox by running: kubectl create -f https://git.io/vPieo Copy Check if New Relic environment variables were injected: kubectl exec busybox0 -- env | grep NEW_RELIC_METADATA_KUBERNETES NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME=fsi NEW_RELIC_METADATA_KUBERNETES_NODE_NAME=nodea NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME=default NEW_RELIC_METADATA_KUBERNETES_POD_NAME=busybox0 NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME=busybox Copy Disable the injection of metadata To disable/uninstall the injection of metadata, use the following commands: Delete the Kubernetes objects using the yaml file: kubectl delete -f k8s-metadata-injection-latest.yaml Copy Delete the TLS secret containing the certificate/key pair: kubectl delete secret/newrelic-metadata-injection-secret Copy Troubleshooting Follow these troubleshooting tips as needed. No Kubernetes metadata in APM or distributed tracing transactions Problem The creation of the secret by the k8s-webhook-cert-manager job used to fail due to the kubectl version used by the image when running in Kubernetes version 1.19.x, The new version 1.3.2 fixes this issue, therefore it is enough to run again the job using an update version of the image to fix the issue. Solution Update the image k8s-webhook-cert-manager (to a version >= 1.3.2) and re-run the job. The secret will be correctly created and the k8s-metadata-injection pod will be able to start. Note that the new version of the manifest and of the nri-bundle are already updated with the correct version of the image. Problem In OpenShift version 4.x, the CA that is used in order to patch the mutatingwebhookconfiguration resource is not the one used when signing the certificates. This is a known issue currently tracked here. In the logs of the Pod nri-metadata-injection, you'll see the following error message: TLS handshake error from 10.131.0.29:37428: remote error: tls: unknown certificate authority TLS handshake error from 10.129.0.1:49314: remote error: tls: bad certificate Copy Workaround Manually update the certificate stored in the mutatingwebhookconfiguration object. The correct CA locations might change according to the cluster configuration. However, you can usually find the CA in the secret csr-signer in the namespace openshift-kube-controller-manager. Problem There is no Kubernetes metadata included in the transactions' attributes of your APM agent or in distributed tracing. Solution Verify that the environment variables are being correctly injected by following the instructions described in the Validate your installation step. If they are not present, get the name of the metadata injection pod by running: kubectl get pods | grep newrelic-metadata-injection-deployment kubectl logs -f pod/podname Copy In another terminal, create a new pod (for example, see Validate your installation), and inspect the logs of the metadata injection deployment for errors. For every created pod there should be a set of 4 new entries in the logs like: {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.107Z\",\"caller\":\"server/main.go:139\",\"msg\":\"POST https://newrelic-metadata-injection-svc.default.svc:443/mutate?timeout=30s HTTP/2.0\\\" from 10.11.49.2:32836\"} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.110Z\",\"caller\":\"server/webhook.go:168\",\"msg\":\"received admission review\",\"kind\":\"/v1, Kind=Pod\",\"namespace\":\"default\",\"name\":\"\",\"pod\":\"busybox1\",\"UID\":\"6577519b-7a61-11ea-965e-0e46d1c9335c\",\"operation\":\"CREATE\",\"userinfo\":{\"username\":\"admin\",\"uid\":\"admin\",\"groups\":[\"system:masters\",\"system:authenticated\"]}} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.111Z\",\"caller\":\"server/webhook.go:182\",\"msg\":\"admission response created\",\"response\":\"[{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env\\\",\\\"value\\\":[{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CLUSTER_NAME\\\",\\\"value\\\":\\\"adn_kops\\\"}]},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_NODE_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"spec.nodeName\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_NAMESPACE_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"metadata.namespace\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_POD_NAME\\\",\\\"valueFrom\\\":{\\\"fieldRef\\\":{\\\"fieldPath\\\":\\\"metadata.name\\\"}}}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CONTAINER_NAME\\\",\\\"value\\\":\\\"busybox\\\"}},{\\\"op\\\":\\\"add\\\",\\\"path\\\":\\\"/spec/containers/0/env/-\\\",\\\"value\\\":{\\\"name\\\":\\\"NEW_RELIC_METADATA_KUBERNETES_CONTAINER_IMAGE_NAME\\\",\\\"value\\\":\\\"busybox\\\"}}]\"} {\"level\":\"info\",\"ts\":\"2020-04-09T12:55:32.111Z\",\"caller\":\"server/webhook.go:257\",\"msg\":\"writing response\"} Copy If there are no new entries on the logs, it means that the apiserver is not being able to communicate with the webhook service, this could be due to networking rules or security groups rejecting the communication. To check if the apiserver is not being able to communicate with the webhook you should inspect the apiserver logs for errors like: failed calling webhook \"metadata-injection.newrelic.com\": ERROR_REASON Copy To get the apiserver logs: Start a proxy to the Kubernetes API server by the executing the following command in a terminal window and keep it running. kubectl proxy --port=8001 Copy Create a new pod in your cluster, this will make the apiserver try to communicate with the webhook. The following command will create a busybox. kubectl create -f https://git.io/vPieo Copy Retrieve the apiserver logs. curl localhost:8001/logs/kube-apiserver.log > apiserver.log Copy Delete the busybox container. kubectl delete -f https://git.io/vPieo Copy Inspect the logs for errors. grep -E 'failed calling webhook' apiserver.log Copy Remember that one of the requirements for the metadata injection is that the apiserver must be allowed egress to the pods running on the cluster. If you encounter errors regarding connection timeouts or failed connections, make sure to check the security groups and firewall rules of the cluster. If there are no log entries in either the apiserver logs or the metadata injection deployment, it means that the webhook was not properly registered. Ensure the metadata injection setup job ran successfully by inspecting the output of: kubectl get job newrelic-metadata-setup Copy If the job is not completed, investigate the logs of the setup job: kubectl logs job/newrelic-metadata-setup Copy Ensure the CertificateSigningRequest is approved and issued by running: kubectl get csr newrelic-metadata-injection-svc.default Copy Ensure the TLS secret is present by running: kubectl get secret newrelic-metadata-injection-secret Copy Ensure the CA bundle is present in the mutating webhook configuration: kubectl get mutatingwebhookconfiguration newrelic-metadata-injection-cfg -o json Copy Ensure the TargetPort of the Service resource matches the Port of the Deployment's container: kubectl describe service/newrelic-metadata-injection-svc kubectl describe deployment/newrelic-metadata-injection-deployment Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 236.42258,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Link</em> your <em>applications</em> to <em>Kubernetes</em>",
        "sections": "<em>Link</em> your <em>applications</em> to <em>Kubernetes</em>",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": " is currently a beta release. This Pixie <em>integration</em> into New Relic does not require a language agent. Learn more about Auto-telemetry with Pixie here. Tip Our <em>Kubernetes</em> metadata injection project is open source. Here&#x27;s the code to <em>link</em> APM and infrastructure data and the code to automatically"
      },
      "id": "603ebb94196a674fd1a83df3"
    },
    {
      "sections": [
        "Monitor services running on Kubernetes",
        "Get started",
        "What you need",
        "Enable monitoring of services",
        "Get the config YAML for the integration",
        "Example configuration",
        "Configuration options for each integration",
        "Monitor services in our Kubernetes integration installed with Helm",
        "Learn more",
        "Manually configure service monitoring",
        "How the service-specific YAML config works",
        "Add a service YAML to the Kubernetes integration config",
        "Add multiple services to the same config"
      ],
      "title": "Monitor services running on Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "4c67f6272bda36eda4ad7883e89697a203aa2153",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/monitor-services-running-kubernetes/",
      "published_at": "2021-07-02T13:58:48Z",
      "updated_at": "2021-05-16T04:41:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Kubernetes integration you can monitor both Kubernetes and the services running on it, such as Cassandra, Redis, MySQL, and other supported services. Get started Our Kubernetes integration comes bundled with some of our on-host integrations (like Cassandra, MySQL, and Apache). This lets you get data for those supported services by adding a section to the Kubernetes integration's configuration, which lives as a ConfigMap inside a manifest. What you need Enable this feature for a service Details about how configuration works For an example of how to monitor Redis running on a Kubernetes PHP Guestbook, see this tutorial. What you need To monitor services running on Kubernetes, you only need a Kubernetes cluster running the Kubernetes integration, version 1.13.0 or higher (install | check version | update). We support the following services running on Kubernetes: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP Enable monitoring of services To enable our Kubernetes integration to monitor one or more services: Expand this dropdown and get the YAML snippets for the service(s) you want to monitor: Get the config YAML for the integration For the services you want to monitor, follow the links to GitHub to get the YAML snippets you'll need for the next step: Apache Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ Redis SNMP Add the snippet to the Kubernetes integration's ConfigMap, after the data: section: Example configuration This example shows the YAML config for the Apache integration ( highlighted ) added to the Kubernetes integration's config. Respect the indentation levels. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: apache-config.yaml: | --- # Run auto discovery to find pods with label \"app=apache\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Use the optional arguments: # --namespaces: Comma separated namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: apache integrations: - name: nri-apache env: # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/server-status?auto METRICS: 1 Copy You can add snippets for multiple services to the same config file. See an example. Depending on your environment, you may need or want to set additional config options. Expand the dropdown below for links to configuration options. Configuration options for each integration Select a service to see available config options: Apache Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ Redis SNMP Verify monitoring is enabled: Go to one.newrelic.com > Infrastructure, select Third party services, and then select the service's dashboard. You should see data being reported. Additional notes about enabling services: Enabling multiple services may use more resources than what is set in the resource limits of the Kubernetes integration config file. If this becomes an issue, raise the limit in the resources section. The Kubernetes integration does not automatically update. For best results, regularly update. Monitor services in our Kubernetes integration installed with Helm If you installed our Kubernetes integration using Helm, to monitor services you need to update the existing installation with the new configuration, which contains the services to monitor: helm upgrade --reuse-values -f values.yaml [RELEASE] [CHART] Copy If you use nri-bundle charts, you need to update the children's chart values. Find some examples here. Learn more More resources for learning about configuration: Learn technical details about how configuration works. Learn how to configure monitoring of multiple services with the same config file. See a step-by-step tutorial showing how to monitor a Redis service on Kubernetes. Manually configure service monitoring The enable procedure should be all you need to get monitoring working, but if you run into problems, understanding some technical details about configuration can be helpful. This section goes into more detail about how configuration works. For each service you wish to monitor, you must add a configuration file for that integration to our Kubernetes integration's configuration. This document will cover these subjects: How the service-specific configuration YAML snippet works Adding the service-specific YAML in the Kubernetes integration's config file Adding multiple services to the Kubernetes integration's config file How the service-specific YAML config works Our Kubernetes integration's configuration follows the ConfigMap format. Using a ConfigMap allows us to decouple the configuration for the integrations from the Kubernetes image. The other benefit is that a ConfigMap can be updated automatically without reloading the running container. Because the infrastructure agent uses YAML to configure its associated integrations, ConfigMaps are a good choice for storing YAML. (For more information on config file format, see the Integration config file format.) The Kubernetes integration image comes with an auto-discovery feature that simplifies the configuration of multiple instances of services using a single configuration file. For example, if you have several NGINX instances running, creating an NGINX integration configuration file for every instance would be hard to implement and hard to update. With our auto-discovery option, you can discover and monitor all your NGINX instances with a single configuration file. Each integration has its own specific configuration YAML. Our NGINX integration default config file looks like this: nginx-config.yml: | --- discovery: command: # Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --port: Port used to connect to the kubelet. Default is 10255 # --tls: Use secure (TLS) connection # Custom Example: # exec: /var/db/newrelic-infra/nri-discovery-kubernetes --namespaces namespace1,namespace2 --port 10250 --tls # Default exec: /var/db/newrelic-infra/nri-discovery-kubernetes match: label.app: nginx integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}/status STATUS_MODULE: discover METRICS: 1 Copy The above config enables the following: Runs nri-discovery-kubernetes to query the data for the node we are currently on. Parses the data that comes back and looks for any Kubernetes pod that has a Kubernetes container with an app= label with value nginx. For any matches, it attempts to run the NGINX integration. The status URL is built from: The pod's IP address The status page is pulled from the label on K8s pod called status_url This automatic discovery works the same as the container auto-discovery used by the infrastructure agent. For more advanced options, see Container auto-discovery. Add a service YAML to the Kubernetes integration config It's best practice to configure enabled integrations alongside the Kubernetes integration configuration. This is easier than maintaining configuration files for every single service/integration instance. Below is an example of a Kubernetes integration's ConfigMap. The highlighted section shows where an integration configuration YAML (in this case, NGINX) is placed. For more information on discovery:, see Container auto-discovery for on-host integrations. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: nginx-config.yml: | --- # Run auto discovery to find pods with label \"app=nginx\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: nginx integrations: - name: nri-nginx env: # If you're using ngx_http_api_module be certain to use the full path up to and including the version number # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/status # Comma separated list of ngx_http_api_module, NON PARAMETERIZED, Endpoints # endpoints: /nginx,/processes,/connections,/ssl,/slabs,/http,/http/requests,/http/server_zones,/http/caches,/http/upstreams,/http/keyvals,/stream,/stream/server_zones,/stream/upstreams,/stream/keyvals,/stream/zone_sync # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module STATUS_MODULE: discover METRICS: 1 Copy This configuration map can then be referenced in the DaemonSet, the same as the one that was generated via the command line. Make sure the namespace used is the same one used by the Kubernetes integration manifest. If you haven't changed it in the downloaded manifest file, the value is default. Add multiple services to the same config You can monitor several services using the same Kubernetes integration config file. To do this, add another integration configuration YAML to the same Kubernetes integration config file. Below is the Kubernetes config created in the last section, with a new section for the Cassandra integration's config (highlighted). --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: nginx-config.yml: | --- # Run auto discovery to find pods with label \"app=nginx\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: nginx integrations: - name: nri-nginx env: # If you're using ngx_http_api_module be certain to use the full path up to and including the version number # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/status # Comma separated list of ngx_http_api_module, NON PARAMETERIZED, Endpoints # endpoints: /nginx,/processes,/connections,/ssl,/slabs,/http,/http/requests,/http/server_zones,/http/caches,/http/upstreams,/http/keyvals,/stream,/stream/server_zones,/stream/upstreams,/stream/keyvals,/stream/zone_sync # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module STATUS_MODULE: discover METRICS: 1 cassandra-configuration.yml: | --- # Run auto discovery to find pods with label \"app=cassandra\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: cassandra integrations: - name: nri-cassandra env: # Use the discovered IP as the host address HOSTNAME: ${discovery.ip} PORT: 7199 USERNAME: cassandra PASSWORD: cassandra METRICS: 1/mark Copy The Kubernetes integration config is now set up to monitor these two services. Additionally, depending on your environment, there may be some additional service-specific configuration you must do. When you've completed configuration, our infrastructure agent looks for any pod with a label cassandra and runs the integration against it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.79616,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor <em>services</em> running on <em>Kubernetes</em>",
        "sections": "Monitor <em>services</em> in our <em>Kubernetes</em> <em>integration</em> installed with Helm",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> you can monitor both <em>Kubernetes</em> and the <em>services</em> running on it, such as Cassandra, Redis, MySQL, and other supported <em>services</em>. Get started Our <em>Kubernetes</em> <em>integration</em> comes bundled with some of our on-host <em>integrations</em> (like Cassandra, MySQL, and Apache"
      },
      "id": "6044e50c196a676012960f35"
    },
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.20544,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " events <em>integration</em> requires you to: Install and activate the New Relic <em>Kubernetes</em> <em>integration</em>. Configure a <em>Kubernetes</em> pod with the label <em>app.kubernetes</em>.io&#x2F;name=nri-kube-events and two containers, one used to capture events in the <em>Kubernetes</em> cluster and the other to forward the events to New Relic"
      },
      "id": "603eae45196a67b26ba83d8f"
    }
  ],
  "/docs/integrations/kubernetes-integration/link-your-applications/link-your-applications-kubernetes": [
    {
      "sections": [
        "Monitor services running on Kubernetes",
        "Get started",
        "What you need",
        "Enable monitoring of services",
        "Get the config YAML for the integration",
        "Example configuration",
        "Configuration options for each integration",
        "Monitor services in our Kubernetes integration installed with Helm",
        "Learn more",
        "Manually configure service monitoring",
        "How the service-specific YAML config works",
        "Add a service YAML to the Kubernetes integration config",
        "Add multiple services to the same config"
      ],
      "title": "Monitor services running on Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "4c67f6272bda36eda4ad7883e89697a203aa2153",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/monitor-services-running-kubernetes/",
      "published_at": "2021-07-02T13:58:48Z",
      "updated_at": "2021-05-16T04:41:15Z",
      "document_type": "page",
      "popularity": 1,
      "body": "With New Relic's Kubernetes integration you can monitor both Kubernetes and the services running on it, such as Cassandra, Redis, MySQL, and other supported services. Get started Our Kubernetes integration comes bundled with some of our on-host integrations (like Cassandra, MySQL, and Apache). This lets you get data for those supported services by adding a section to the Kubernetes integration's configuration, which lives as a ConfigMap inside a manifest. What you need Enable this feature for a service Details about how configuration works For an example of how to monitor Redis running on a Kubernetes PHP Guestbook, see this tutorial. What you need To monitor services running on Kubernetes, you only need a Kubernetes cluster running the Kubernetes integration, version 1.13.0 or higher (install | check version | update). We support the following services running on Kubernetes: Apache (does not report inventory data) Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ (does not report inventory data) Redis SNMP Enable monitoring of services To enable our Kubernetes integration to monitor one or more services: Expand this dropdown and get the YAML snippets for the service(s) you want to monitor: Get the config YAML for the integration For the services you want to monitor, follow the links to GitHub to get the YAML snippets you'll need for the next step: Apache Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ Redis SNMP Add the snippet to the Kubernetes integration's ConfigMap, after the data: section: Example configuration This example shows the YAML config for the Apache integration ( highlighted ) added to the Kubernetes integration's config. Respect the indentation levels. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: apache-config.yaml: | --- # Run auto discovery to find pods with label \"app=apache\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Use the optional arguments: # --namespaces: Comma separated namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: apache integrations: - name: nri-apache env: # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/server-status?auto METRICS: 1 Copy You can add snippets for multiple services to the same config file. See an example. Depending on your environment, you may need or want to set additional config options. Expand the dropdown below for links to configuration options. Configuration options for each integration Select a service to see available config options: Apache Cassandra Couchbase Elasticsearch HAProxy HashiCorp Consul JMX Kafka Memcached MongoDB MySQL NGINX PostgreSQL RabbitMQ Redis SNMP Verify monitoring is enabled: Go to one.newrelic.com > Infrastructure, select Third party services, and then select the service's dashboard. You should see data being reported. Additional notes about enabling services: Enabling multiple services may use more resources than what is set in the resource limits of the Kubernetes integration config file. If this becomes an issue, raise the limit in the resources section. The Kubernetes integration does not automatically update. For best results, regularly update. Monitor services in our Kubernetes integration installed with Helm If you installed our Kubernetes integration using Helm, to monitor services you need to update the existing installation with the new configuration, which contains the services to monitor: helm upgrade --reuse-values -f values.yaml [RELEASE] [CHART] Copy If you use nri-bundle charts, you need to update the children's chart values. Find some examples here. Learn more More resources for learning about configuration: Learn technical details about how configuration works. Learn how to configure monitoring of multiple services with the same config file. See a step-by-step tutorial showing how to monitor a Redis service on Kubernetes. Manually configure service monitoring The enable procedure should be all you need to get monitoring working, but if you run into problems, understanding some technical details about configuration can be helpful. This section goes into more detail about how configuration works. For each service you wish to monitor, you must add a configuration file for that integration to our Kubernetes integration's configuration. This document will cover these subjects: How the service-specific configuration YAML snippet works Adding the service-specific YAML in the Kubernetes integration's config file Adding multiple services to the Kubernetes integration's config file How the service-specific YAML config works Our Kubernetes integration's configuration follows the ConfigMap format. Using a ConfigMap allows us to decouple the configuration for the integrations from the Kubernetes image. The other benefit is that a ConfigMap can be updated automatically without reloading the running container. Because the infrastructure agent uses YAML to configure its associated integrations, ConfigMaps are a good choice for storing YAML. (For more information on config file format, see the Integration config file format.) The Kubernetes integration image comes with an auto-discovery feature that simplifies the configuration of multiple instances of services using a single configuration file. For example, if you have several NGINX instances running, creating an NGINX integration configuration file for every instance would be hard to implement and hard to update. With our auto-discovery option, you can discover and monitor all your NGINX instances with a single configuration file. Each integration has its own specific configuration YAML. Our NGINX integration default config file looks like this: nginx-config.yml: | --- discovery: command: # Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --port: Port used to connect to the kubelet. Default is 10255 # --tls: Use secure (TLS) connection # Custom Example: # exec: /var/db/newrelic-infra/nri-discovery-kubernetes --namespaces namespace1,namespace2 --port 10250 --tls # Default exec: /var/db/newrelic-infra/nri-discovery-kubernetes match: label.app: nginx integrations: - name: nri-nginx env: STATUS_URL: http://${discovery.ip}/status STATUS_MODULE: discover METRICS: 1 Copy The above config enables the following: Runs nri-discovery-kubernetes to query the data for the node we are currently on. Parses the data that comes back and looks for any Kubernetes pod that has a Kubernetes container with an app= label with value nginx. For any matches, it attempts to run the NGINX integration. The status URL is built from: The pod's IP address The status page is pulled from the label on K8s pod called status_url This automatic discovery works the same as the container auto-discovery used by the infrastructure agent. For more advanced options, see Container auto-discovery. Add a service YAML to the Kubernetes integration config It's best practice to configure enabled integrations alongside the Kubernetes integration configuration. This is easier than maintaining configuration files for every single service/integration instance. Below is an example of a Kubernetes integration's ConfigMap. The highlighted section shows where an integration configuration YAML (in this case, NGINX) is placed. For more information on discovery:, see Container auto-discovery for on-host integrations. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: nginx-config.yml: | --- # Run auto discovery to find pods with label \"app=nginx\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: nginx integrations: - name: nri-nginx env: # If you're using ngx_http_api_module be certain to use the full path up to and including the version number # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/status # Comma separated list of ngx_http_api_module, NON PARAMETERIZED, Endpoints # endpoints: /nginx,/processes,/connections,/ssl,/slabs,/http,/http/requests,/http/server_zones,/http/caches,/http/upstreams,/http/keyvals,/stream,/stream/server_zones,/stream/upstreams,/stream/keyvals,/stream/zone_sync # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module STATUS_MODULE: discover METRICS: 1 Copy This configuration map can then be referenced in the DaemonSet, the same as the one that was generated via the command line. Make sure the namespace used is the same one used by the Kubernetes integration manifest. If you haven't changed it in the downloaded manifest file, the value is default. Add multiple services to the same config You can monitor several services using the same Kubernetes integration config file. To do this, add another integration configuration YAML to the same Kubernetes integration config file. Below is the Kubernetes config created in the last section, with a new section for the Cassandra integration's config (highlighted). --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: nginx-config.yml: | --- # Run auto discovery to find pods with label \"app=nginx\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: nginx integrations: - name: nri-nginx env: # If you're using ngx_http_api_module be certain to use the full path up to and including the version number # Use the discovered IP as the host address STATUS_URL: http://${discovery.ip}/status # Comma separated list of ngx_http_api_module, NON PARAMETERIZED, Endpoints # endpoints: /nginx,/processes,/connections,/ssl,/slabs,/http,/http/requests,/http/server_zones,/http/caches,/http/upstreams,/http/keyvals,/stream,/stream/server_zones,/stream/upstreams,/stream/keyvals,/stream/zone_sync # Name of Nginx status module OHI is to query against. discover | ngx_http_stub_status_module | ngx_http_status_module | ngx_http_api_module STATUS_MODULE: discover METRICS: 1 cassandra-configuration.yml: | --- # Run auto discovery to find pods with label \"app=cassandra\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: cassandra integrations: - name: nri-cassandra env: # Use the discovered IP as the host address HOSTNAME: ${discovery.ip} PORT: 7199 USERNAME: cassandra PASSWORD: cassandra METRICS: 1/mark Copy The Kubernetes integration config is now set up to monitor these two services. Additionally, depending on your environment, there may be some additional service-specific configuration you must do. When you've completed configuration, our infrastructure agent looks for any pod with a label cassandra and runs the integration against it.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 232.79614,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Monitor <em>services</em> running on <em>Kubernetes</em>",
        "sections": "Monitor <em>services</em> in our <em>Kubernetes</em> <em>integration</em> installed with Helm",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": "With New Relic&#x27;s <em>Kubernetes</em> <em>integration</em> you can monitor both <em>Kubernetes</em> and the <em>services</em> running on it, such as Cassandra, Redis, MySQL, and other supported <em>services</em>. Get started Our <em>Kubernetes</em> <em>integration</em> comes bundled with some of our on-host <em>integrations</em> (like Cassandra, MySQL, and Apache"
      },
      "id": "6044e50c196a676012960f35"
    },
    {
      "sections": [
        "Tutorial: Monitor Redis running on Kubernetes",
        "What you need",
        "Step 1: Set up an example Redis application",
        "Step 2: Enable monitoring of Redis instances"
      ],
      "title": "Tutorial: Monitor Redis running on Kubernetes",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Link apps and services"
      ],
      "external_id": "30d0c7b52a792c21a50f98931d05a0665ff19fa1",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/link-apps-services/tutorial-monitor-redis-running-kubernetes/",
      "published_at": "2021-07-02T13:58:48Z",
      "updated_at": "2021-03-16T04:18:00Z",
      "document_type": "page",
      "popularity": 1,
      "body": "If you have a service running on Kubernetes, and it's a service we support, you can enable monitoring of that service by adding a configuration section for that integration to the Kubernetes integration's config. This tutorial shows how to enable monitoring for a Redis service running on the Kubernetes PHP Guestbook. For the general procedure, see Monitor a Kubernetes-running service. What you need See the general requirements for this feature, including supported services. The kubectl command-line tool must be configured to communicate with your cluster. If you don't have a cluster, you can create one using Minikube. Step 1: Set up an example Redis application This tutorial builds on the Kubernetes tutorial Deploying a PHP Guestbook application with Redis. Skip the Kubernetes tutorial and run the following command to set up the application needed for our tutorial: kubectl create -f https://raw.githubusercontent.com/kubernetes/examples/master/guestbook/all-in-one/guestbook-all-in-one.yaml Copy If you'd like to first complete the Kubernetes tutorial, follow their tutorial instructions but do not follow the instructions in the Cleaning up section. Step 2: Enable monitoring of Redis instances The PHP Guestbook application has three Redis instances: one master and two slave instances. Each instance is tagged with a label where app=redis. For this example, we're using our Redis monitoring integration. It can monitor both master and slave instances of Redis, so we don’t have to distinguish between them. In the Kubernetes integration's YAML config file (newrelic-infrastructure-k8s-latest.yaml), you need to update the nri-integration-cfg section. From the list of integration configs, get the Redis integration YAML and add it to the Kubernetes config. The Redis YAML is highlighted below. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-integration-cfg namespace: default data: redis-config.yml: | --- # Run auto discovery to find pods with label \"app=redis\" # https://docs.newrelic.com/docs/integrations/host-integrations/installation/container-auto-discovery discovery: command: # Run discovery for Kubernetes. Use the following optional arguments : # --namespaces: Comma separated list of namespaces to discover pods on # --tls: Use secure (TLS) connection # --port: Port used to connect to the kubelet. Default is 10255 exec: /var/db/newrelic-infra/nri-discovery-kubernetes --port PORT --tls match: label.app: redis integrations: - name: nri-redis env: # using the discovered IP as the hostname address HOSTNAME: ${discovery.ip} PORT: 6379 KEYS: '{\"0\":[\"<KEY_1>\"],\"1\":[\"<KEY_2>\"]}' REMOTE_MONITORING: true labels: env: production Copy Deploy the updated service: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy You should be able to see the following in the logs for the pod newrelic-infra: time=\"2019-12-23T17:37:07Z\" level=info msg=\"Integration health check starting\" instance=redis-metrics integration=com.newrelic.redis prefix=integration/com.newrelic.redis working-dir=/var/db/newrelic-infra/newrelic-integrations time=\"2019-12-23T17:37:07Z\" level=info msg=\"Integration health check finished with success\" instance=redis-metrics integration=com.newrelic.redis prefix=integration/com.newrelic.redis working-dir=/var/db/newrelic-infra/newrelic-integrations Copy If there are no errors, you should see Redis data in the Infrastructure UI. To find the Redis dashboards, go to one.newrelic.com > Infrastructure > Third party services, and select the Redis dashboard. For the general procedure of how to monitor services running on Kubernetes, including more detail about how configuration works, see Monitor a Kubernetes-running service.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 211.56831,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Tutorial: Monitor Redis running on <em>Kubernetes</em>",
        "sections": "Tutorial: Monitor Redis running on <em>Kubernetes</em>",
        "tags": "<em>Link</em> <em>apps</em> <em>and</em> <em>services</em>",
        "body": " is highlighted below. --- apiVersion: v1 kind: ConfigMap metadata: name: nri-<em>integration</em>-cfg namespace: default data: redis-config.yml: | --- # Run auto discovery to find pods with label &quot;<em>app</em>=redis&quot; # https:&#x2F;&#x2F;docs.newrelic.com&#x2F;docs&#x2F;<em>integrations</em>&#x2F;host-<em>integrations</em>&#x2F;installation&#x2F;container-auto-discovery discovery"
      },
      "id": "603e7e8264441f332a4e8879"
    },
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 139.20535,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " events <em>integration</em> requires you to: Install and activate the New Relic <em>Kubernetes</em> <em>integration</em>. Configure a <em>Kubernetes</em> pod with the label <em>app.kubernetes</em>.io&#x2F;name=nri-kube-events and two containers, one used to capture events in the <em>Kubernetes</em> cluster and the other to forward the events to New Relic"
      },
      "id": "603eae45196a67b26ba83d8f"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/certificate-signed-unknown-authority": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.813,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.43747,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " that the <em>integration</em> is working: wait a few minutes, then look for data in the New Relic <em>Kubernetes</em> cluster explorer. If you don&#x27;t see data, review the configuration procedures again, then follow the <em>troubleshooting</em> procedures. Important In the future, the number of labels collected on <em>Kubernetes</em> objects"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Get logs and version",
        "Get verbose logs",
        "Caution",
        "Get the infrastructure agent version",
        "Get kube-state-metrics version",
        "Get logs from pod connecting to kube-state-metrics",
        "Retrieve kube-state-metrics service configuration",
        "Get logs from pod running on a master node",
        "For more help"
      ],
      "title": "Get logs and version",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Troubleshooting"
      ],
      "external_id": "d1c70664aab784f3d4b336ada95041373edd03dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/troubleshooting/get-logs-version/",
      "published_at": "2021-07-02T13:59:52Z",
      "updated_at": "2021-03-16T06:10:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the Kubernetes integration, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you are doing a more in-depth investigation on your own or with New Relic Support, you can enable verbose mode. Caution Verbose mode significantly increases the amount of infor sent to log files. Temporarily enable this mode only for troubleshooting purposes, and reset the log level when finished. To get verbose logging details: Enable verbose logging: In the deployment file, set the value of NRIA_VERBOSE to 1. Apply the modified configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Leave on verbose mode for a few minutes, or until you feel enough activity has occurred. Disable verbose mode: Set the NRIA_VERBOSE value back to 0. Apply the restored configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Get a list of nodes in the environment: kubectl get nodes --all-namespaces Copy Get a list of infrastructure and kube-state-metrics pods: kubectl get pods --all-namespaces -o wide | egrep 'newrelic|kube-state-metrics' Copy Get logs from the pod connecting to kube-state-metrics. Retrieve kube-state-metrics service configuration. Get the infrastructure agent version For the Kubernetes integration, the infrastructure agent is distributed as a Docker image that contains the infrastructure agent and the Kubernetes integration. The Docker image is tagged with a version, and the infrastructure agent also has its own version. When the agent is successfully sending information to New Relic, you can retrieve the versions of the infrastructure agent for Kubernetes (the Docker image) you are running in your clusters by using the following Insights query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName = 'newrelic-infra' facet clusterName, containerImage Copy If the agent is not reporting any data: Get the version(s) of the New Relic integration for Kubernetes that you are running in a cluster using kubectl: kubectl get pods --all-namespaces -l name=newrelic-infra -o jsonpath=\"{.items..spec..containers..image}\" Copy Look for output similar to this: newrelic/infrastructure-k8s:1.0.0 Copy Get kube-state-metrics version To retrieve the version of kube-state-metrics running on your clusters, run the following Insights NRQL query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName LIKE '%kube-state-metrics%' facet clusterName, containerImage Copy Get logs from pod connecting to kube-state-metrics To get the logs from the pod connecting to kube-state-metrics: Get the node that kube-state-metrics is running on: kubectl get pods --all-namespaces -o wide | grep kube-state-metrics Copy Look for output similar to this: kube-system kube-state-metrics-5c6f5cb9b5-pclhh 2/2 Running 4 4d 172.17.0.3 minikube Copy Get the New Relic pod that is running on the same node as kube-state-metrics: kubectl describe node minikube | grep newrelic-infra Copy Look for output similar to this: default newrelic-infra-5wcv6 100m (5%) 0 (0%) 100Mi (5%) 100Mi (5%) Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-5wcv6 Copy Retrieve kube-state-metrics service configuration To retrieve the configuration: Run: kubectl get pods --all-namespaces | grep \"kube-state-metrics\" Copy Look for a response similar to this: kube-system kube-state-metrics-5c6f5cb9b5-5wf9m 2/2 Running 8 6d Copy Review the namespace in the first column. kubectl describe service kube-state-metrics -n <namespace> Copy Get logs from pod running on a master node To get the logs from a pod running on a master node: Get the nodes that are labelled as master: kubectl get nodes -l node-role.kubernetes.io/master=\"\" Copy Or, kubectl get nodes -l kubernetes.io/role=\"master\" Copy Look for output similar to this: NAME STATUS ROLES AGE VERSION ip-10-42-24-4.ec2.internal Ready master 42d v1.14.8 Copy Get the New Relic pod that is running on one of the nodes returned in the previous step: kubectl get pods --field-selector spec.nodeName=ip-10-42-24-4.ec2.internal -l name=newrelic-infra --all-namespaces Copy Look for output similar to this: newrelic-infra-whvzt Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-whvzt Copy For troubleshooting help, see Not seeing data or Error messages. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.15468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the <em>Kubernetes</em> <em>integration</em>, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you"
      },
      "id": "603eb9dc28ccbc174deba7a0"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/get-logs-version": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.8129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.437454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " that the <em>integration</em> is working: wait a few minutes, then look for data in the New Relic <em>Kubernetes</em> cluster explorer. If you don&#x27;t see data, review the configuration procedures again, then follow the <em>troubleshooting</em> procedures. Important In the future, the number of labels collected on <em>Kubernetes</em> objects"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Not seeing control plane data",
        "Problem",
        "Solution",
        "Check that the master nodes have the correct labels",
        "Check that the integration is running on the master nodes",
        "Check that the control plane components have the required labels",
        "Retrieve the verbose logs of one of the integrations running on a master node and check for the control plane components jobs",
        "Manually query the metrics of the components"
      ],
      "title": "Not seeing control plane data",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Troubleshooting"
      ],
      "external_id": "c555f87bec51c28b64aeb26a6a01ad932002719a",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/troubleshooting/not-seeing-control-plane-data/",
      "published_at": "2021-07-02T17:54:01Z",
      "updated_at": "2021-03-16T04:18:00Z",
      "document_type": "troubleshooting_doc",
      "popularity": 1,
      "body": "Problem You have completed the installation procedure for New Relic's Kubernetes integration, you are seeing Kubernetes data in your New Relic account but there is no data from any of the control plane components. Solution Check that the master nodes have the correct labels Execute the following commands to manually find the master nodes: kubectl get nodes -l node-role.kubernetes.io/master=\"\" Copy kubectl get nodes -l kubernetes.io/role=\"master\" Copy If the master nodes follow the labeling convention defined in the discovery of master nodes and control plane components documentation section, you should get some output like: NAME STATUS ROLES AGE VERSION ip-10-42-24-4.ec2.internal Ready master 42d v1.14.8 Copy If no nodes are found, there are two scenarios: Your master nodes don’t have the required labels that identify them as masters, in this case you need to add both labels to your master nodes. You’re in a managed cluster and your provider is handling the master nodes for you. In this case there is nothing you can do, since your provider is limiting the access to those nodes. Check that the integration is running on the master nodes Replace the placeholder in the following command with one of the node names returned in the previous step to get an integration pod running on a master node: kubectl get pods --field-selector spec.nodeName=NODE_NAME -l name=newrelic-infra --all-namespaces Copy The next command is the same, just that it selects the node for you: kubectl get pods --field-selector spec.nodeName=$(kubectl get nodes -l node-role.kubernetes.io/master=\"\" -o jsonpath=\"{.items[0].metadata.name}\") -l name=newrelic-infra --all-namespaces Copy If everything is correct you should get some output like: NAME READY STATUS RESTARTS AGE newrelic-infra-whvzt 1/1 Running 0 6d20h Copy If the integration is not running on your master nodes, check that the daemonset has all the desired instances running and ready. kubectl get daemonsets -l app=newrelic-infra --all-namespaces Copy Check that the control plane components have the required labels Refer to the discovery of master nodes and control plane components documentation section and look for the labels the integration uses to discover the components. Then run the following commands to see if there are any pods with such labels and the nodes where they are running: kubectl get pods -l k8s-app=kube-apiserver --all-namespaces Copy If there is component with the given label you should see something like: NAMESPACE NAME READY STATUS RESTARTS AGE kube-system kube-apiserver-ip-10-42-24-42.ec2.internal 1/1 Running 3 49d Copy The same should be done with the rest of the components: kubectl get pods -l k8s-app=etcd-manager-main --all-namespaces Copy kubectl get pods -l k8s-app=kube-scheduler --all-namespaces Copy kubectl get pods -l k8s-app=kube-kube-controller-manager --all-namespaces Copy Retrieve the verbose logs of one of the integrations running on a master node and check for the control plane components jobs To retrieve the logs, follow the instructions on get logs from pod running on a master node. The integration logs for every component the following message “Running job: COMPONENT_NAME”. Ex: Running job: scheduler Copy Running job: etcd Copy Running job: controller-manager Copy Running job: api-server Copy If you didn’t specify the ETCD_TLS_SECRET_NAME configuration option you’ll find the following message in the logs: Skipping job creation for component etcd: etcd requires TLS configuration, none given Copy If any error occurs while querying the metrics of any component it will be logged after the Running job message. Manually query the metrics of the components Refer to the discovery of master nodes and control plane components documentation section to get the endpoint of the control plane component you want to query. With the endpoint we can use the integration pod that’s running on the same node as the component to query. The following are examples on how to query the Kubernetes scheduler: kubectl exec -ti POD_NAME -- wget -O - localhost:10251/metrics Copy The following command does the same, but also chooses the pod for you: kubectl exec -ti $(kubectl get pods --all-namespaces --field-selector spec.nodeName=$(kubectl get nodes -l node-role.kubernetes.io/master=\"\" -o jsonpath=\"{.items[0].metadata.name}\") -l name=newrelic-infra -o jsonpath=\"{.items[0].metadata.name}\") -- wget -O - localhost:10251/metrics Copy If everything is correct you should get some metrics on the Prometheus format, something like: Connecting to localhost:10251 (127.0.0.1:10251) # HELP apiserver_audit_event_total Counter of audit events generated and sent to the audit backend. # TYPE apiserver_audit_event_total counter apiserver_audit_event_total 0 # HELP apiserver_audit_requests_rejected_total Counter of apiserver requests rejected due to an error in audit logging backend. # TYPE apiserver_audit_requests_rejected_total counter apiserver_audit_requests_rejected_total 0 # HELP apiserver_client_certificate_expiration_seconds Distribution of the remaining lifetime on the certificate used to authenticate a request. # TYPE apiserver_client_certificate_expiration_seconds histogram apiserver_client_certificate_expiration_seconds_bucket{le=\"0\"} 0 apiserver_client_certificate_expiration_seconds_bucket{le=\"1800\"} 0 apiserver_client_certificate_expiration_seconds_bucket{le=\"3600\"} 0 Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.14905,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "sections": "Retrieve the verbose logs of one of the <em>integrations</em> running on a master node and check for the control plane components jobs",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "Problem You have completed the installation procedure for New Relic&#x27;s <em>Kubernetes</em> <em>integration</em>, you are seeing <em>Kubernetes</em> data in your New Relic account but there is no data from any of the control plane components. Solution Check that the master nodes have the correct labels Execute the following"
      },
      "id": "603e800d196a678522a83d9d"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/kubernetes-integration-troubleshooting-error-messages": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.8129,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.437454,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " that the <em>integration</em> is working: wait a few minutes, then look for data in the New Relic <em>Kubernetes</em> cluster explorer. If you don&#x27;t see data, review the configuration procedures again, then follow the <em>troubleshooting</em> procedures. Important In the future, the number of labels collected on <em>Kubernetes</em> objects"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Get logs and version",
        "Get verbose logs",
        "Caution",
        "Get the infrastructure agent version",
        "Get kube-state-metrics version",
        "Get logs from pod connecting to kube-state-metrics",
        "Retrieve kube-state-metrics service configuration",
        "Get logs from pod running on a master node",
        "For more help"
      ],
      "title": "Get logs and version",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Troubleshooting"
      ],
      "external_id": "d1c70664aab784f3d4b336ada95041373edd03dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/troubleshooting/get-logs-version/",
      "published_at": "2021-07-02T13:59:52Z",
      "updated_at": "2021-03-16T06:10:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the Kubernetes integration, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you are doing a more in-depth investigation on your own or with New Relic Support, you can enable verbose mode. Caution Verbose mode significantly increases the amount of infor sent to log files. Temporarily enable this mode only for troubleshooting purposes, and reset the log level when finished. To get verbose logging details: Enable verbose logging: In the deployment file, set the value of NRIA_VERBOSE to 1. Apply the modified configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Leave on verbose mode for a few minutes, or until you feel enough activity has occurred. Disable verbose mode: Set the NRIA_VERBOSE value back to 0. Apply the restored configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Get a list of nodes in the environment: kubectl get nodes --all-namespaces Copy Get a list of infrastructure and kube-state-metrics pods: kubectl get pods --all-namespaces -o wide | egrep 'newrelic|kube-state-metrics' Copy Get logs from the pod connecting to kube-state-metrics. Retrieve kube-state-metrics service configuration. Get the infrastructure agent version For the Kubernetes integration, the infrastructure agent is distributed as a Docker image that contains the infrastructure agent and the Kubernetes integration. The Docker image is tagged with a version, and the infrastructure agent also has its own version. When the agent is successfully sending information to New Relic, you can retrieve the versions of the infrastructure agent for Kubernetes (the Docker image) you are running in your clusters by using the following Insights query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName = 'newrelic-infra' facet clusterName, containerImage Copy If the agent is not reporting any data: Get the version(s) of the New Relic integration for Kubernetes that you are running in a cluster using kubectl: kubectl get pods --all-namespaces -l name=newrelic-infra -o jsonpath=\"{.items..spec..containers..image}\" Copy Look for output similar to this: newrelic/infrastructure-k8s:1.0.0 Copy Get kube-state-metrics version To retrieve the version of kube-state-metrics running on your clusters, run the following Insights NRQL query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName LIKE '%kube-state-metrics%' facet clusterName, containerImage Copy Get logs from pod connecting to kube-state-metrics To get the logs from the pod connecting to kube-state-metrics: Get the node that kube-state-metrics is running on: kubectl get pods --all-namespaces -o wide | grep kube-state-metrics Copy Look for output similar to this: kube-system kube-state-metrics-5c6f5cb9b5-pclhh 2/2 Running 4 4d 172.17.0.3 minikube Copy Get the New Relic pod that is running on the same node as kube-state-metrics: kubectl describe node minikube | grep newrelic-infra Copy Look for output similar to this: default newrelic-infra-5wcv6 100m (5%) 0 (0%) 100Mi (5%) 100Mi (5%) Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-5wcv6 Copy Retrieve kube-state-metrics service configuration To retrieve the configuration: Run: kubectl get pods --all-namespaces | grep \"kube-state-metrics\" Copy Look for a response similar to this: kube-system kube-state-metrics-5c6f5cb9b5-5wf9m 2/2 Running 8 6d Copy Review the namespace in the first column. kubectl describe service kube-state-metrics -n <namespace> Copy Get logs from pod running on a master node To get the logs from a pod running on a master node: Get the nodes that are labelled as master: kubectl get nodes -l node-role.kubernetes.io/master=\"\" Copy Or, kubectl get nodes -l kubernetes.io/role=\"master\" Copy Look for output similar to this: NAME STATUS ROLES AGE VERSION ip-10-42-24-4.ec2.internal Ready master 42d v1.14.8 Copy Get the New Relic pod that is running on one of the nodes returned in the previous step: kubectl get pods --field-selector spec.nodeName=ip-10-42-24-4.ec2.internal -l name=newrelic-infra --all-namespaces Copy Look for output similar to this: newrelic-infra-whvzt Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-whvzt Copy For troubleshooting help, see Not seeing data or Error messages. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.15468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the <em>Kubernetes</em> <em>integration</em>, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you"
      },
      "id": "603eb9dc28ccbc174deba7a0"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/kubernetes-integration-troubleshooting-missing-nodes": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.81279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.43744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " that the <em>integration</em> is working: wait a few minutes, then look for data in the New Relic <em>Kubernetes</em> cluster explorer. If you don&#x27;t see data, review the configuration procedures again, then follow the <em>troubleshooting</em> procedures. Important In the future, the number of labels collected on <em>Kubernetes</em> objects"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Get logs and version",
        "Get verbose logs",
        "Caution",
        "Get the infrastructure agent version",
        "Get kube-state-metrics version",
        "Get logs from pod connecting to kube-state-metrics",
        "Retrieve kube-state-metrics service configuration",
        "Get logs from pod running on a master node",
        "For more help"
      ],
      "title": "Get logs and version",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Troubleshooting"
      ],
      "external_id": "d1c70664aab784f3d4b336ada95041373edd03dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/troubleshooting/get-logs-version/",
      "published_at": "2021-07-02T13:59:52Z",
      "updated_at": "2021-03-16T06:10:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the Kubernetes integration, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you are doing a more in-depth investigation on your own or with New Relic Support, you can enable verbose mode. Caution Verbose mode significantly increases the amount of infor sent to log files. Temporarily enable this mode only for troubleshooting purposes, and reset the log level when finished. To get verbose logging details: Enable verbose logging: In the deployment file, set the value of NRIA_VERBOSE to 1. Apply the modified configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Leave on verbose mode for a few minutes, or until you feel enough activity has occurred. Disable verbose mode: Set the NRIA_VERBOSE value back to 0. Apply the restored configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Get a list of nodes in the environment: kubectl get nodes --all-namespaces Copy Get a list of infrastructure and kube-state-metrics pods: kubectl get pods --all-namespaces -o wide | egrep 'newrelic|kube-state-metrics' Copy Get logs from the pod connecting to kube-state-metrics. Retrieve kube-state-metrics service configuration. Get the infrastructure agent version For the Kubernetes integration, the infrastructure agent is distributed as a Docker image that contains the infrastructure agent and the Kubernetes integration. The Docker image is tagged with a version, and the infrastructure agent also has its own version. When the agent is successfully sending information to New Relic, you can retrieve the versions of the infrastructure agent for Kubernetes (the Docker image) you are running in your clusters by using the following Insights query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName = 'newrelic-infra' facet clusterName, containerImage Copy If the agent is not reporting any data: Get the version(s) of the New Relic integration for Kubernetes that you are running in a cluster using kubectl: kubectl get pods --all-namespaces -l name=newrelic-infra -o jsonpath=\"{.items..spec..containers..image}\" Copy Look for output similar to this: newrelic/infrastructure-k8s:1.0.0 Copy Get kube-state-metrics version To retrieve the version of kube-state-metrics running on your clusters, run the following Insights NRQL query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName LIKE '%kube-state-metrics%' facet clusterName, containerImage Copy Get logs from pod connecting to kube-state-metrics To get the logs from the pod connecting to kube-state-metrics: Get the node that kube-state-metrics is running on: kubectl get pods --all-namespaces -o wide | grep kube-state-metrics Copy Look for output similar to this: kube-system kube-state-metrics-5c6f5cb9b5-pclhh 2/2 Running 4 4d 172.17.0.3 minikube Copy Get the New Relic pod that is running on the same node as kube-state-metrics: kubectl describe node minikube | grep newrelic-infra Copy Look for output similar to this: default newrelic-infra-5wcv6 100m (5%) 0 (0%) 100Mi (5%) 100Mi (5%) Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-5wcv6 Copy Retrieve kube-state-metrics service configuration To retrieve the configuration: Run: kubectl get pods --all-namespaces | grep \"kube-state-metrics\" Copy Look for a response similar to this: kube-system kube-state-metrics-5c6f5cb9b5-5wf9m 2/2 Running 8 6d Copy Review the namespace in the first column. kubectl describe service kube-state-metrics -n <namespace> Copy Get logs from pod running on a master node To get the logs from a pod running on a master node: Get the nodes that are labelled as master: kubectl get nodes -l node-role.kubernetes.io/master=\"\" Copy Or, kubectl get nodes -l kubernetes.io/role=\"master\" Copy Look for output similar to this: NAME STATUS ROLES AGE VERSION ip-10-42-24-4.ec2.internal Ready master 42d v1.14.8 Copy Get the New Relic pod that is running on one of the nodes returned in the previous step: kubectl get pods --field-selector spec.nodeName=ip-10-42-24-4.ec2.internal -l name=newrelic-infra --all-namespaces Copy Look for output similar to this: newrelic-infra-whvzt Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-whvzt Copy For troubleshooting help, see Not seeing data or Error messages. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.15468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the <em>Kubernetes</em> <em>integration</em>, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you"
      },
      "id": "603eb9dc28ccbc174deba7a0"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/kubernetes-integration-troubleshooting-not-seeing-data": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.81279,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.43744,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " that the <em>integration</em> is working: wait a few minutes, then look for data in the New Relic <em>Kubernetes</em> cluster explorer. If you don&#x27;t see data, review the configuration procedures again, then follow the <em>troubleshooting</em> procedures. Important In the future, the number of labels collected on <em>Kubernetes</em> objects"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Get logs and version",
        "Get verbose logs",
        "Caution",
        "Get the infrastructure agent version",
        "Get kube-state-metrics version",
        "Get logs from pod connecting to kube-state-metrics",
        "Retrieve kube-state-metrics service configuration",
        "Get logs from pod running on a master node",
        "For more help"
      ],
      "title": "Get logs and version",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Troubleshooting"
      ],
      "external_id": "d1c70664aab784f3d4b336ada95041373edd03dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/troubleshooting/get-logs-version/",
      "published_at": "2021-07-02T13:59:52Z",
      "updated_at": "2021-03-16T06:10:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the Kubernetes integration, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you are doing a more in-depth investigation on your own or with New Relic Support, you can enable verbose mode. Caution Verbose mode significantly increases the amount of infor sent to log files. Temporarily enable this mode only for troubleshooting purposes, and reset the log level when finished. To get verbose logging details: Enable verbose logging: In the deployment file, set the value of NRIA_VERBOSE to 1. Apply the modified configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Leave on verbose mode for a few minutes, or until you feel enough activity has occurred. Disable verbose mode: Set the NRIA_VERBOSE value back to 0. Apply the restored configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Get a list of nodes in the environment: kubectl get nodes --all-namespaces Copy Get a list of infrastructure and kube-state-metrics pods: kubectl get pods --all-namespaces -o wide | egrep 'newrelic|kube-state-metrics' Copy Get logs from the pod connecting to kube-state-metrics. Retrieve kube-state-metrics service configuration. Get the infrastructure agent version For the Kubernetes integration, the infrastructure agent is distributed as a Docker image that contains the infrastructure agent and the Kubernetes integration. The Docker image is tagged with a version, and the infrastructure agent also has its own version. When the agent is successfully sending information to New Relic, you can retrieve the versions of the infrastructure agent for Kubernetes (the Docker image) you are running in your clusters by using the following Insights query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName = 'newrelic-infra' facet clusterName, containerImage Copy If the agent is not reporting any data: Get the version(s) of the New Relic integration for Kubernetes that you are running in a cluster using kubectl: kubectl get pods --all-namespaces -l name=newrelic-infra -o jsonpath=\"{.items..spec..containers..image}\" Copy Look for output similar to this: newrelic/infrastructure-k8s:1.0.0 Copy Get kube-state-metrics version To retrieve the version of kube-state-metrics running on your clusters, run the following Insights NRQL query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName LIKE '%kube-state-metrics%' facet clusterName, containerImage Copy Get logs from pod connecting to kube-state-metrics To get the logs from the pod connecting to kube-state-metrics: Get the node that kube-state-metrics is running on: kubectl get pods --all-namespaces -o wide | grep kube-state-metrics Copy Look for output similar to this: kube-system kube-state-metrics-5c6f5cb9b5-pclhh 2/2 Running 4 4d 172.17.0.3 minikube Copy Get the New Relic pod that is running on the same node as kube-state-metrics: kubectl describe node minikube | grep newrelic-infra Copy Look for output similar to this: default newrelic-infra-5wcv6 100m (5%) 0 (0%) 100Mi (5%) 100Mi (5%) Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-5wcv6 Copy Retrieve kube-state-metrics service configuration To retrieve the configuration: Run: kubectl get pods --all-namespaces | grep \"kube-state-metrics\" Copy Look for a response similar to this: kube-system kube-state-metrics-5c6f5cb9b5-5wf9m 2/2 Running 8 6d Copy Review the namespace in the first column. kubectl describe service kube-state-metrics -n <namespace> Copy Get logs from pod running on a master node To get the logs from a pod running on a master node: Get the nodes that are labelled as master: kubectl get nodes -l node-role.kubernetes.io/master=\"\" Copy Or, kubectl get nodes -l kubernetes.io/role=\"master\" Copy Look for output similar to this: NAME STATUS ROLES AGE VERSION ip-10-42-24-4.ec2.internal Ready master 42d v1.14.8 Copy Get the New Relic pod that is running on one of the nodes returned in the previous step: kubectl get pods --field-selector spec.nodeName=ip-10-42-24-4.ec2.internal -l name=newrelic-infra --all-namespaces Copy Look for output similar to this: newrelic-infra-whvzt Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-whvzt Copy For troubleshooting help, see Not seeing data or Error messages. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.15468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the <em>Kubernetes</em> <em>integration</em>, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you"
      },
      "id": "603eb9dc28ccbc174deba7a0"
    }
  ],
  "/docs/integrations/kubernetes-integration/troubleshooting/not-seeing-control-plane-data": [
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 170.81268,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To use <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    },
    {
      "sections": [
        "Kubernetes integration: install and configure",
        "Tip",
        "Use automated installer",
        "Installs for managed services and platforms",
        "Amazon EKS",
        "Amazon EKS Fargate",
        "Google Kubernetes Engine (GKE)",
        "OpenShift container platform",
        "Azure Kubernetes Service (AKS)",
        "Pivotal Container Service (PKS / VMware Tanzu)",
        "Custom manifest",
        "Important",
        "Make sure New Relic pods can be scheduled",
        "Unprivileged installs of the Kubernetes integration",
        "Steps to complete an unprivileged install",
        "Configure the integration",
        "Select which processes should send their data to New Relic",
        "Specify the Kubernetes API host and port",
        "Kubernetes versions 1.6 to 1.7.5: Edit manifest file",
        "Use environment variables",
        "Disable kube-state-metrics parsing",
        "Caution",
        "Specify the kube-state-metrics URL",
        "Discover kube-state-metrics pods using a label",
        "Query kube-state-metrics behind RBAC",
        "kube-state-metrics timeout: Increase the client timeout",
        "Non-default namespace deployments: Edit config file",
        "Set the TTL for the Kubernetes API responses cache",
        "Specify base URLs for control plane component endpoints",
        "Configure the infrastructure agent",
        "Update to the latest version",
        "Using the automated installer",
        "Using helm",
        "Uninstall the Kubernetes integration"
      ],
      "title": "Kubernetes integration: install and configure",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Installation"
      ],
      "external_id": "ff06c8b1d8b2940d0b23034f3057377ce571e4ab",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/installation/kubernetes-integration-install-configure/",
      "published_at": "2021-07-02T13:56:49Z",
      "updated_at": "2021-06-15T13:05:55Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The easiest way to install the Kubernetes integration is to use our automated installer to generate a manifest. It bundles not just the integration DaemonSets, but also other New Relic Kubernetes configurations, like Kubernetes events, Prometheus OpenMetrics, and New Relic log monitoring. Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. Use automated installer You can use the automated installer for servers, VMs, and unprivileged environments. The installer can also help you with managed services or platforms after you review a few preliminary notes. We also have separate instructions if you need a custom manifest or prefer to do a manual unprivileged installation. Start the installer If your New Relic account is in the EU region, access the installer from one.eu.newrelic.com. Installs for managed services and platforms Before starting our automated installer, check out these notes for your managed services or platforms: Amazon EKS The Kubernetes integration monitors worker nodes. In Amazon EKS, master nodes are managed by Amazon and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration in Amazon EKS, make sure you are using the version of kubectl provided by AWS. Amazon EKS Fargate For help installing our EKS Fargate integration, see these setup options. Google Kubernetes Engine (GKE) The Kubernetes integration monitors worker nodes. In GKE, master nodes are managed by Google and abstracted from the Kubernetes platforms. Before starting our automated installer to deploy the Kubernetes integration on GKE, ensure you have sufficient permissions: Go to console.cloud.google.com/iam-admin/iam and find your username. Click edit. Ensure you have permissions to create Roles and ClusterRoles: If you are not sure, add the Kubernetes Engine Cluster Admin role. If you cannot edit your user role, ask the owner of the GCP project to give you the necessary permissions. Ensure you have a RoleBinding that grants you the same permissions to create Roles and ClusterRoles: kubectl create clusterrolebinding YOUR_USERNAME-cluster-admin-binding --clusterrole=cluster-admin --user=YOUR_GCP_EMAIL Copy Creating a RoleBinding is necessary because of a known RBAC issue in Kubernetes and Kubernetes Engine versions 1.6 or higher. For more information, see Google Cloud's documentation on defining permissions in a role. OpenShift container platform To deploy the Kubernetes integration with OpenShift: Add the <>{'<release_name>'}</>-newrelic-infrastructure service account to your privileged Security Context Constraints: oc adm policy add-scc-to-user privileged \\ system:serviceaccount:<namespace>:<release_name>-newrelic-infrastructure Copy The default <>{'<release_name>'}</> provided by the installer is nri-bundle. Complete the steps in our automated installer. If you're using signed certificates, make sure they are properly configured by using the following variables in the DaemonSet portion of your manifest to set the .pem file: - name: NRIA_CA_BUNDLE_DIR value: YOUR_CA_BUNDLE_DIR - name: NRIA_CA_BUNDLE_FILE value: YOUR_CA_BUNDLE_NAME Copy YAML key path: spec.template.spec.containers.name.env Save your changes. Azure Kubernetes Service (AKS) The Kubernetes integration monitors worker nodes. In Azure Kubernetes Service, master nodes are managed by Azure and abstracted from the Kubernetes platforms. To deploy in Azure Kubernetes Service (AKS), complete the steps in our automated installer. Pivotal Container Service (PKS / VMware Tanzu) To deploy in PKS, we recommend that you use the automated installer, or you can follow the manual instructions provided in Install the Kubernetes integration using Helm. Custom manifest If the Kubernetes automated installer doesn't provide the settings you need, you can download our manifest template and install the integration manually. To activate the Kubernetes integration, you must deploy the newrelic-infra agent onto a Kubernetes cluster as a DaemonSet: Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy In the DaemonSet portion of your manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Recommendation: Do not change the NRIA_PASSTHROUGH_ENVIRONMENT or NRIA_DISPLAY_NAME value in your manifest. YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. YAML key path: spec.template.spec.containers.name.env env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy If you need to adapt the manifest to fit your environment, review the configure section in this doc. Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration is working: wait a few minutes, then look for data in the New Relic Kubernetes cluster explorer. If you don't see data, review the configuration procedures again, then follow the troubleshooting procedures. Important In the future, the number of labels collected on Kubernetes objects will be limited per object type (containers, pods, nodes, etc.). If objects have labels above the limit, you will be able to configure important labels that should always be sent to New Relic. When the limitation is in place, this documentation will be updated. Make sure New Relic pods can be scheduled Some of the New Relic pods are set up as DaemonSet in the manifest file so that they can run on every host. These include newrelic-infrastructure and newrelic-logging. In rare circumstances, other pods may be scheduled first and starve the New Relic pods of resources. Since each of these pods have to run on a specific host, they will stay in pending status until that host has enough resources, even if there are other hosts available. This could end up occurring for long periods of time and result in reporting gaps. To prevent this scenario, you can configure the Kubernetes scheduler to give New Relic pods a higher priority. Using the default scheduler: Ensure kube-scheduler flag disablePreemption is not set to true (by default it is false). Create a PriorityClass for the New Relic DaemonSet pods: Set the appropriate priority value, which should generally be higher than your other pods. preemptionPolicy is set to PreemptLowerPriority by default. This allows New Relic pods assigned this priority class to remove lower-priority pods that are taking up resources. Edit the manifest file to add priorityClassName to any DaemonSet specs. In the example below, the highlighted line sets the priority class for newrelic-infrastructure: apiVersion: apps/v1 kind: DaemonSet metadata: namespace: default labels: app: newrelic-infrastructure chart: newrelic-infrastructure-1.0.0 release: nri-bundle mode: privileged name: nri-bundle-newrelic-infrastructure spec: priorityClassName: your-priority-class ... Copy If you have already deployed the New Relic pods, re-deploy them and confirm they have been created: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml kubectl create -f newrelic-infrastructure-k8s-latest.yaml kubectl get daemonsets Copy Unprivileged installs of the Kubernetes integration For platforms that have stringent security requirements, we provide an unprivileged version of the Kubernetes integration. Changes from the standard Kubernetes integration are: Runs the infrastructure agent and the Kubernetes integration as a standard user instead of root No access to the underlying host filesystem No access to /var/run/docker.sock Container's root filesystem mounted as read-only allowPrivilegeEscalation is set to false hostnetwork is set to false The tradeoff is that the solution will only collect metrics from Kubernetes, but it will not collect any metric from the underlying hosts directly. Kubernetes provides some data (metrics and metadata) about its nodes (hosts). Tip Optional: To collect the underlying host metrics, the non-containerized infrastructure agent can be deployed on the underlying host. The infrastructure agent already supports running as non-root. The combination of the Kubernetes integration in its unprivileged version and the agent running on the host will report all the metrics that our standard solution for monitoring Kubernetes receives. Steps to complete an unprivileged install Install kube-state-metrics and get it running on the cluster. For example: curl -L -o kube-state-metrics- 1.9.5 .zip https://github.com/kubernetes/kube-state-metrics/archive/v 1.9.5 .zip && unzip kube-state-metrics- 1.9.5 .zip && kubectl apply -f kube-state-metrics- 1.9.5 /examples/standard Copy Download the integration manifest: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy In the manifest, add your New Relic license key and a cluster name to identify your Kubernetes cluster. Both values are required. Important YOUR_CLUSTER_NAME is your cluster’s id in New Relic Explorer. It doesn’t need to match the name of the cluster running in your environment. env: - name: NRIA_LICENSE_KEY value: YOUR_LICENSE_KEY - name: CLUSTER_NAME value: YOUR_CLUSTER_NAME Copy YAML key path: spec.template.spec.containers.name.env Confirm that kube-state-metrics is installed. kubectl get pods --all-namespaces | grep kube-state-metrics Copy Create the DaemonSet: kubectl create -f newrelic-infrastructure-k8s-unprivileged-latest.yaml Copy Confirm that the DaemonSet has been created successfully by looking for newrelic-infra in the results generated by this command: kubectl get daemonsets Copy To confirm that the integration has been configured correctly, wait a few minutes, then run this NRQL query to see if data has been reported: SELECT * FROM K8sPodSample since 5 minutes ago Copy Configure the integration The Kubernetes integration comes with a default configuration that should work in most environments. To change the configuration, modify the manifest file: Select which processes should send their data to New Relic By default, data about the processes running on your pods is not sent to New Relic. You can enable it by setting enable_process_metrics to true. To choose what metric data you want to send to New Relic, configure the include_matching_metrics environment variable in your manifest. Specify the Kubernetes API host and port This is necessary when you are using SSL and not using the default FQDN. The Kubernetes API FQDN needs to match the FQDN of the SSL certificate. You do not need to specify both variables. For example, if you only specify the HOST, the default PORT will be used. - name: \"KUBERNETES_SERVICE_HOST\" value: \"KUBERNETES_API_HOST\" - name: \"KUBERNETES_SERVICE_PORT\" value: \"KUBERNETES_API_TCP_PORT\" Copy Kubernetes versions 1.6 to 1.7.5: Edit manifest file For Kubernetes versions 1.6 to 1.7.5, uncomment these two lines in the manifest file: - name: \"CADVISOR_PORT\" # Enable direct connection to cAdvisor by specifying the port. Needed for Kubernetes versions prior to 1.7.6. value: \"4194\" Copy Use environment variables Use environment variables that can be passed to the Kubernetes integration if you use a proxy to configure its URL. Disable kube-state-metrics parsing You can disable kube-state-metrics parsing for the DaemonSet by using the following configuration: - name: \"DISABLE_KUBE_STATE_METRICS\" value: \"true\" Copy Caution Disabling kube-state-metrics also disables data collection for the following: ReplicaSets DaemonSets StatefulSets Namespaces Deployments Services Endpoints Pods (that are pending) Additionally, disabling this affects the Kubernetes Cluster Explorer in the following ways: No pending pods are shown. No filters based on services. Specify the kube-state-metrics URL If several instances of kube-state-metrics are present in the cluster, uncomment and configure the following lines to specify which one to use: - name: \"KUBE_STATE_METRICS_URL\" value: \"http://KUBE_STATE_METRICS_IP_OR_FQDN:PORT\" Copy Important Even though a KUBE_STATE_METRICS_URL is defined, the KSM service should contain one of the following labels for the auto-discovery process: k8s-app=kube-state-metrics OR app=kube-state-metrics OR ​​app.kubernetes.io/name=kube-state-metrics Important This configuration option overrides KUBE_STATE_METRICS_POD_LABEL. If you have both defined, KUBE_STATE_METRICS_POD_LABEL has no effect. Discover kube-state-metrics pods using a label If several instances of kube-state-metrics are present in the cluster, another option to easily target one of these instances with the Kubernetes integration is to use label-based discovery. - name: \"KUBE_STATE_METRICS_POD_LABEL\" value: \"LABEL_NAME\" Copy Important When a KUBE_STATE_METRICS_POD_LABEL is defined, the label should have a value equal to true. For example, if the label name is my-ksm, ensure that my-ksm=true. Important This configuration option is incompatible with KUBE_STATE_METRICS_URL. If you have both defined, KUBE_STATE_METRICS_URL is used. Query kube-state-metrics behind RBAC If your instance of kube-state-metrics is behind kube-rbac-proxy, the integration can be configured in a compatible way using the combination of the label-based discovery and two other environment variables: - name: \"KUBE_STATE_METRICS_SCHEME\" value: \"https\" - name: \"KUBE_STATE_METRICS_PORT\" value: \"KSM_RBAC_PROXY_PORT\" Copy To confirm which port should be used as the value of KUBE_STATE_METRICS_PORT, we recommend running a describe command on the kube-state-metrics pod and look for the port exposed by the container named kube-rbac-proxy-main. Important These two configuration options only work when using the KUBE_STATE_METRICS_POD_LABEL configuration described above. kube-state-metrics timeout: Increase the client timeout To increase the client timeout of kube-state-metrics, add a new environment variable, TIMEOUT, to the manifest file: env: - name: TIMEOUT value: 5000 # The default client timeout when calling kube-state-metrics, in milliseconds Copy Then, add this new environment variable to the NRIA_PASSTHROUGH_ENVIRONMENT Non-default namespace deployments: Edit config file If you want to deploy in a different namespace from default, change all values of namespace in the manifest. Set the TTL for the Kubernetes API responses cache By default, the integration will cache any retrieved information from the Kubernetes API for 5 minutes. Use the API_SERVER_CACHE_TTL environment variable to set a custom cache duration for responses from the API server. Valid time unit values are: ns, us, ms, s, m, and h. To disable caching, set to 0s. env: - name: API_SERVER_CACHE_TTL value: \"1m\" Copy Specify base URLs for control plane component endpoints Use the following environment variables if any of the Kubernetes control plane components export metrics on base URLs that are different from the defaults. This is necessary for environments such as OpenShift when a control plane component metrics endpoint is using SSL or an alternate port. Values of these environment variables must be base URLs of the form [scheme]://[host]:[port]. URLs should not include a path component. For example: - name: \"SCHEDULER_ENDPOINT_URL\" value: \"https://localhost:10259\" - name: \"ETCD_ENDPOINT_URL\" value: \"https://localhost:9979\" - name: \"CONTROLLER_MANAGER_ENDPOINT_URL\" value: \"https://localhost:10257\" - name: \"API_SERVER_ENDPOINT_URL\" value: \"https://localhost:6443\" Copy The /metrics path segment is added automatically. In addition, if the https scheme is used, authentication to the control plane component pod(s) is accomplished via service accounts. Caution If a FQDN (fully qualified domain name) is used in a multi-master cluster, inconsistent results may be returned. Therefore, it is recommended to use localhost only. Important Even though a custom base URL is defined for a given control plane component, the control plane component pod(s) must contain one of the labels supported by the auto-discovery process. Important Even though a custom ETCD_ENDPOINT_URL can be defined, ETCD will always require https and mTLS authentication to be configured. Here are some additional configurations to consider: Do more configuration for control plane monitoring Link New Relic APM to the Kubernetes integration Monitor services that run on Kubernetes Configure the infrastructure agent The Kubernetes integration image comes with a default configurations for the agent that can be modified if needed. When installing with the manifest, you can modify the infrastructure agent configuration by editing the manifest and adding any needed configuration option of the agent as environment variables of the newrelic-infrastructure DaemonSet. When installing with Helm, you can specify the needed infrastructure agent configuration options in the values.yaml as shown in the example in GitHub. The config object is used to populate the configMap that is mounted automatically in the location of the infrastructure agent configuration file in the pods created by the newrelic-infrastructure DaemonSet. Update to the latest version Using the automated installer To update a Kubernetes integration installed with the automated installer, just run the installer again. It will always offer a manifest pointing to the last released version of the integration. Using helm See Install the Kubernetes integration using Helm Custom manifest If you are already running the Kubernetes integration and want to update the newrelic-infra agent to the latest agent version: Run this NRQL query to check which version you are currently running (this will return the image name by cluster): SELECT latest(containerImage) FROM K8sContainerSample WHERE containerImage LIKE '%newrelic/infrastructure%' FACET clusterName SINCE 1 day ago Copy If you've set a name other than newrelic/infrastructure for the integration's container image, the above query won't yield results: to make it work, edit the name in the query. Download the integration manifest file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/newrelic-infrastructure-k8s-latest.yaml Copy Copy the changes you made to the manifest. At a minimum, include CLUSTER_NAME and NRIA_LICENSE_KEY, and paste your changes in the manifest you downloaded. Install the latest DaemonSet with the following command (Kubernetes will automatically do a rollout upgrade for the integration's pods): kubectl apply -f newrelic-infrastructure-k8s-latest.yaml Copy Uninstall the Kubernetes integration To uninstall the Kubernetes integration: Verify that newrelic-infrastructure-k8s-latest.yaml corresponds to the filename of the manifest as you have saved it. Example: If you are using the unprivileged version of the integration, the default filename will be newrelic-infrastructure-k8s-unprivileged-latest.yaml. After you verify the filename, use the following command: kubectl delete -f newrelic-infrastructure-k8s-latest.yaml Copy You only need to execute this command once, regardless of the number of nodes in your cluster.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 106.43743,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "sections": "<em>Kubernetes</em> <em>integration</em>: install and configure",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " that the <em>integration</em> is working: wait a few minutes, then look for data in the New Relic <em>Kubernetes</em> cluster explorer. If you don&#x27;t see data, review the configuration procedures again, then follow the <em>troubleshooting</em> procedures. Important In the future, the number of labels collected on <em>Kubernetes</em> objects"
      },
      "id": "60450ae964441f0603378f15"
    },
    {
      "sections": [
        "Get logs and version",
        "Get verbose logs",
        "Caution",
        "Get the infrastructure agent version",
        "Get kube-state-metrics version",
        "Get logs from pod connecting to kube-state-metrics",
        "Retrieve kube-state-metrics service configuration",
        "Get logs from pod running on a master node",
        "For more help"
      ],
      "title": "Get logs and version",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Troubleshooting"
      ],
      "external_id": "d1c70664aab784f3d4b336ada95041373edd03dc",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/troubleshooting/get-logs-version/",
      "published_at": "2021-07-02T13:59:52Z",
      "updated_at": "2021-03-16T06:10:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the Kubernetes integration, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you are doing a more in-depth investigation on your own or with New Relic Support, you can enable verbose mode. Caution Verbose mode significantly increases the amount of infor sent to log files. Temporarily enable this mode only for troubleshooting purposes, and reset the log level when finished. To get verbose logging details: Enable verbose logging: In the deployment file, set the value of NRIA_VERBOSE to 1. Apply the modified configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Leave on verbose mode for a few minutes, or until you feel enough activity has occurred. Disable verbose mode: Set the NRIA_VERBOSE value back to 0. Apply the restored configuration by running: kubectl apply -f your_newrelic_k8s.yaml Copy Get a list of nodes in the environment: kubectl get nodes --all-namespaces Copy Get a list of infrastructure and kube-state-metrics pods: kubectl get pods --all-namespaces -o wide | egrep 'newrelic|kube-state-metrics' Copy Get logs from the pod connecting to kube-state-metrics. Retrieve kube-state-metrics service configuration. Get the infrastructure agent version For the Kubernetes integration, the infrastructure agent is distributed as a Docker image that contains the infrastructure agent and the Kubernetes integration. The Docker image is tagged with a version, and the infrastructure agent also has its own version. When the agent is successfully sending information to New Relic, you can retrieve the versions of the infrastructure agent for Kubernetes (the Docker image) you are running in your clusters by using the following Insights query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName = 'newrelic-infra' facet clusterName, containerImage Copy If the agent is not reporting any data: Get the version(s) of the New Relic integration for Kubernetes that you are running in a cluster using kubectl: kubectl get pods --all-namespaces -l name=newrelic-infra -o jsonpath=\"{.items..spec..containers..image}\" Copy Look for output similar to this: newrelic/infrastructure-k8s:1.0.0 Copy Get kube-state-metrics version To retrieve the version of kube-state-metrics running on your clusters, run the following Insights NRQL query: FROM K8sContainerSample SELECT uniqueCount(entityId) WHERE containerName LIKE '%kube-state-metrics%' facet clusterName, containerImage Copy Get logs from pod connecting to kube-state-metrics To get the logs from the pod connecting to kube-state-metrics: Get the node that kube-state-metrics is running on: kubectl get pods --all-namespaces -o wide | grep kube-state-metrics Copy Look for output similar to this: kube-system kube-state-metrics-5c6f5cb9b5-pclhh 2/2 Running 4 4d 172.17.0.3 minikube Copy Get the New Relic pod that is running on the same node as kube-state-metrics: kubectl describe node minikube | grep newrelic-infra Copy Look for output similar to this: default newrelic-infra-5wcv6 100m (5%) 0 (0%) 100Mi (5%) 100Mi (5%) Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-5wcv6 Copy Retrieve kube-state-metrics service configuration To retrieve the configuration: Run: kubectl get pods --all-namespaces | grep \"kube-state-metrics\" Copy Look for a response similar to this: kube-system kube-state-metrics-5c6f5cb9b5-5wf9m 2/2 Running 8 6d Copy Review the namespace in the first column. kubectl describe service kube-state-metrics -n <namespace> Copy Get logs from pod running on a master node To get the logs from a pod running on a master node: Get the nodes that are labelled as master: kubectl get nodes -l node-role.kubernetes.io/master=\"\" Copy Or, kubectl get nodes -l kubernetes.io/role=\"master\" Copy Look for output similar to this: NAME STATUS ROLES AGE VERSION ip-10-42-24-4.ec2.internal Ready master 42d v1.14.8 Copy Get the New Relic pod that is running on one of the nodes returned in the previous step: kubectl get pods --field-selector spec.nodeName=ip-10-42-24-4.ec2.internal -l name=newrelic-infra --all-namespaces Copy Look for output similar to this: newrelic-infra-whvzt Copy Retrieve the logs for that node by running: kubectl logs newrelic-infra-whvzt Copy For troubleshooting help, see Not seeing data or Error messages. For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 100.15468,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "To generate verbose logs and get version and configuration information, follow these procedures. Get verbose logs For the <em>Kubernetes</em> <em>integration</em>, the infrastructure agent adds a log entry only in the event of an error. Most common errors are displayed in the standard (non-verbose) logs. If you"
      },
      "id": "603eb9dc28ccbc174deba7a0"
    }
  ],
  "/docs/integrations/kubernetes-integration/understand-use-data/auto-telemetry-pixie-data-model": [
    {
      "sections": [
        "Use Auto-telemetry with Pixie to get instant Kubernetes observability",
        "Important",
        "Why it matters",
        "Install Auto-telemetry with Pixie",
        "Beta limitations",
        "Before you begin",
        "Start the guided installation",
        "Explore your cluster",
        "Tip"
      ],
      "title": "Use Auto-telemetry with Pixie to get instant Kubernetes observability",
      "type": "docs",
      "tags": [
        "Pixie Auto-telemetry",
        "Service monitoring",
        "Kubernetes",
        "eBPF"
      ],
      "external_id": "218368ab3ecf86892ec64e167e19b441f8599ad8",
      "image": "https://docs.newrelic.com/static/b141876a9307e9fc517692f06e839735/c1b63/pixie-explorer.png",
      "url": "https://docs.newrelic.com/docs/full-stack-observability/observe-everything/get-started/get-started-auto-telemetry-pixie/",
      "published_at": "2021-07-02T00:48:35Z",
      "updated_at": "2021-05-27T02:06:47Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Important Auto-telemetry with Pixie is a supported public beta. Therefore, the features and functionality are subject to change. By joining the beta for Auto-telemetry with Pixie, you agree to the terms in the New Relic Pre-Release Policy. When we say auto-telemetry, we’re not talking about cars — we’re talking about automatically collecting telemetry data for your Kubernetes clusters. With our Pixie integration, you no longer have to manually instrument your clusters or change code. With one install command, you get observability into your Kubernetes clusters and workloads. No language agents required. Pixie collects telemetry data using eBPF, a virtual machine-like construct in the Linux kernel. eBPF makes it easy to collect similar data about your clusters and workloads as with traditional New Relic language agents, but now without needing to update your code. Simply put, Auto-telemetry with Pixie offers the quickest option for getting observability into your Kubernetes services. Why it matters Our Pixie integration gives you the best of both worlds: Pixie’s fast and simple Kubernetes observability coupled with New Relic One’s incident correlation, intelligent alerting, and long-term retention. You’ll get visibility into HTTP services using golden signals, HTTP transactions, database transactions, distributed tracing, and JVM metrics. You can operate, debug, and scale your Kubernetes clusters based on the information you learn about how your clusters and services are running. Using the New Relic Explorer, you can see key metrics and events at every level, starting with the cluster, and diving down into namespaces, deployments, and pods. You can quickly spot anomalous behavior, and where it’s happening. If you need further insight, you can easily link over to Pixie's native UI for advanced debugging with PXL scripts. Install Auto-telemetry with Pixie Use our guided installation process to install Auto-telemetry with Pixie. This deploys Pixie with New Relic's Kubernetes integration on your cluster. You don't need to do any further configuration or installation to start using Pixie. If you want to install Auto-telemetry with Pixie on multiple clusters, re-run the guided install for each additional cluster. Beta limitations The following are not supported in this beta version of Auto-telemetry with Pixie: OpenShift. While our New Relic infrastructure agent supports OpenShift, Pixie does not. RBAC. New Relic RBAC controls cannot be used to gate access to Pixie. This means the following: Auto-telemetry with Pixie creates one project for all of your Kubernetes clusters users from the same email domain are automatically allowed access to the project all users have full permissions on the project Before you begin The guided install requires the following (you can get these set up before you begin, or during the install steps): a Pixie account You need a Google account to sign up for Pixie. a Pixie API key Sufficient memory: Pixie requires 2Gb of memory per node. Start the guided installation Open our New Relic One guided install. Select the account you want to use for the guided install, and click Continue. Note: if you have a single account, you won't see this option. Select Kubernetes. Type in a name for your cluster, and select the check box to Gather telemetry automatically with Pixie beta. Important Currently, Pixie performs best on clusters with up to 100 nodes (exceeding 100 nodes can lead to excessive memory usage and scripts failing to run). Friendly reminder: autoscaling can quickly drive up your node numbers. If Pixie is already running on your cluster, expand the Advanced options section and select the appropriate check box. We strongly recommend enabling Pixie auto update to maintain the latest Pixie version. Click Continue. Provide your Pixie API key. If you already have a key, simply paste it in the API key box, and click Continue. If you don't have an account and existing API key, click the link to create a Pixie account. Then, on the API key page, click New key to add a new key. In the Actions column, click the ellipsis, and then click Copy value. Switch back to the guided install UI, paste the value into the API key box, and click Continue. When you click Continue, the API key is added to your New Relic account, and a deploy key is created for Pixie. Your Pixie account information is now stored on your New Relic account; if you follow the install steps again, you won't be asked for this information. On the Choose install method page, copy the Helm command that's provided, and then run it on your command line. Helm installs a bundle containing the New Relic infrastructure agent, an integration to gather Prometheus metrics and Kubernetes events, and the Pixie integration. The deployment takes a few minutes to complete. To see the status of the install to the cluster, run kubectl get pods -n newrelic. In the New Relic install UI, click Continue to open the Listening for data page. When you get the message, See your data, click Kubernetes Cluster Explorer to see your cluster. Note that Auto-telemetry with Pixie might restart after installation. This is caused by the auto update feature. Explore your cluster In the cluster explorer, you can get a quick overview of the nodes in your cluster, including CPU, memory, and storage, as well as the status of each pod (healthy, warning, or critical). You can also find out what services are running in each container, their latency, throughput, and error rate. For more information about using the cluster explorer, see Navigate the Kubernetes cluster explorer. Tip Containers might be listed for up to four hours after they get decommissioned. You can query the Pixie data that's available in New Relic One and create dashboards for at-a-glance monitoring. Find the data model and sample queries here. In addition to analyzing the performance of your clusters in New Relic One, you might want to use Pixie's advanced debugging workflows. In Pixie's native UI, you can drill down further into header and content requests. Click Explore service in Pixie to see information about your service in the Pixie UI. Learn more about writing PXL scripts in the Pixie docs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 443.69592,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Use <em>Auto</em>-<em>telemetry</em> with <em>Pixie</em> to get instant <em>Kubernetes</em> observability",
        "sections": "Use <em>Auto</em>-<em>telemetry</em> with <em>Pixie</em> to get instant <em>Kubernetes</em> observability",
        "tags": "<em>Pixie</em> <em>Auto</em>-<em>telemetry</em>",
        "body": " agents required. <em>Pixie</em> collects <em>telemetry</em> data using <em>eBPF</em>, a virtual machine-like construct in the Linux kernel. <em>eBPF</em> makes it easy to collect similar data about your clusters and workloads as with traditional New Relic language agents, but now without needing to update your code. Simply put, <em>Auto</em>"
      },
      "id": "60ae8a7ee7b9d2390f3d9916"
    },
    {
      "image": "https://docs.newrelic.com/static/3b7d4417336ed5ef2eb3beb02d4affea/ae694/kubernetes-cluster-explorer.png",
      "url": "https://docs.newrelic.com/whats-new/2021/05/pixie-kubernetes-post-5-26/",
      "sections": [
        "Instant Kubernetes observability with Pixie",
        "Get started today"
      ],
      "published_at": "2021-07-02T11:37:44Z",
      "title": "Instant Kubernetes observability with Pixie",
      "updated_at": "2021-05-28T15:26:33Z",
      "type": "docs",
      "external_id": "f132310e72ece8cefc9e318b433c15cddfafa389",
      "document_type": "nr1_announcement",
      "popularity": 1,
      "body": "We've removed the largest barriers to Kubernetes observability: The time and expertise required to manually instrument application code, by integrating Pixie Auto-Telemetry into our Kubernetes solution. Now, you can get visibility into your Kubernetes clusters and workloads instantly without installing language agents. Pixie data helps you debug faster than ever before, giving you access to everything on-cluster without sampling, then using AI/ML models to send the most relevant subset of your data to the Telemetry Data Platform for correlation with other services, intelligent alerting, and long term storage. Pixie Auto-Telemetry uses eBPF to automatically collect metrics, events, logs, and traces for your Kubernetes clusters, applications, OS, and network layers. Start fast: No code to update, new deployments, or lengthy monitoring standardization processes. Observe everything: Analyze data on-cluster using AI/ML without sampling, storing high-value telemetry data for alerting, correlation, and long term storage. Debug faster with Pixie’s developer-focused workflows, providing code-level insights. Get started today In New Relic One, choose Add more data. Choose Guided install or EU Guided install. Choose Kubernetes, and then follow the on-screen prompts.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 275.24695,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Instant <em>Kubernetes</em> observability with <em>Pixie</em>",
        "sections": "Instant <em>Kubernetes</em> observability with <em>Pixie</em>",
        "body": ", and long term storage. <em>Pixie</em> <em>Auto</em>-<em>Telemetry</em> uses <em>eBPF</em> to automatically collect metrics, events, logs, and traces for your <em>Kubernetes</em> clusters, applications, OS, and network layers. Start fast: No code to update, new deployments, or lengthy <em>monitoring</em> standardization processes. Observe everything: Analyze"
      },
      "id": "60aeed8a28ccbc146b77a392"
    },
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 98.86752,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> <em>events</em> integration",
        "sections": "Install <em>Kubernetes</em> <em>events</em> integration",
        "tags": "<em>Kubernetes</em> <em>events</em>",
        "body": ". Install the <em>Kubernetes</em> events integration Tip To use <em>Kubernetes</em> integrations and infrastructure <em>monitoring</em>, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    }
  ],
  "/docs/integrations/kubernetes-integration/understand-use-data/find-use-your-kubernetes-data": [
    {
      "sections": [
        "Navigate the Kubernetes cluster explorer",
        "Meet the cluster explorer",
        "Cluster dashboard",
        "Cluster explorer node table",
        "Search and filter your cluster data",
        "Browse your Kubernetes events"
      ],
      "title": "Navigate the Kubernetes cluster explorer",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Understand and use data"
      ],
      "external_id": "a3ef4aa459ed4503201c686000dff3a75331c2f7",
      "image": "https://docs.newrelic.com/static/34f90215b59ab8d7b4ec986bbb110805/9b7bd/nr1-cluster-explorer-node-tooltip.png",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/understand-use-data/kubernetes-cluster-explorer/",
      "published_at": "2021-07-02T14:59:57Z",
      "updated_at": "2021-03-16T06:10:24Z",
      "document_type": "page",
      "popularity": 1,
      "body": "New Relic's Kubernetes cluster explorer uses the data collected by the Kubernetes integration to show the status of your cluster, from the control plane to nodes and pods. You can find out about the health of each entity, explore logs, and see how your apps are performing. With the Events integration, everything that happens in your cluster becomes visible, and logs brought in using the logs plugin are also available. Meet the cluster explorer The cluster explorer represents your most relevant cluster data on a chart with the shape of a ship's wheel — which is also Kubernetes' logo. Outer ring: Contains up to 24 nodes of your cluster, the most relevant based on the amount of alerts. Hover over each node to check resource consumption and the percentage of allocable pods used. Inner rings: Contain the pods ( ) of each node. Pods with active alerts are shown in the third innermost ring, and pods that are pending or unable to run are in the center. Hover the mouse over each node or pod to get a quick overview of its resource usage. You can click each node and pod to view its resource usage over time or to get more information about its health and active alerts. Colors are based on predefined alert conditions: Yellow pods have active warning alerts, while red pods have active critical alerts. one.newrelic.com > Kubernetes cluster explorer: Click any pod to get more information about its status and health, and to dig deeper into application data and traces, logs, and events. Click a node to see the following data: Pod statistics CPU, memory, and storage consumption against allocatable amounts Amount of pods used by the node against the allocatable amount of pods For each pod, depending on the integrations and features you've enabled, you can see: Pod status and metadata, including namespace and deployment Container status and statistics Active alerts (both warning and critical) Kubernetes events that happened in that pod APM data and traces (if you've linked your APM data) A link to the pods' and containers' logs, collected using the Kubernetes plugin for New Relic Logs Cluster and control plane statistics are always visible on the left side. Cluster dashboard The cluster dashboard can be accessed at any time from the cluster explorer by clicking Kubernetes dashboard. It provides a curated dashboard experience for your Kubernetes cluster. one.newrelic.com > Kubernetes cluster explorer > Kubernetes dashboard: The Kubernetes dashboard can be accessed from the Kubernetes cluster explorer. It shows useful Kubernetes metric data. Cluster explorer node table Below the cluster explorer is the node table, which shows all the nodes of the cluster, namespace, or deployment. Like all other usage indicators, the table shows consumption against allocatable resources. Search and filter your cluster data The main way to modify the data view in the cluster explorer is by using the top bar to search for specific attributes or values. All the attributes and values collected by the Kubernetes integration can be combined to narrow down the cluster view. one.newrelic.com > Kubernetes cluster explorer: All your Kubernetes cluster's attributes and data points can be used to filter the cluster explorer view. You can also change the time frame using the time picker in the upper right corner. The Auto-refresh box turns the cluster explorer into a real-time dashboard that refreshes every 60 seconds. one.newrelic.com > Kubernetes cluster explorer: The time picker lets you select several predefined time spans. To reload the data every minute, check the auto-refresh box. Browse your Kubernetes events If you’ve enabled the Kubernetes events integration, you can click the Events tab to browse everything that happened in your cluster, from warnings to normal events. To set it up, select the Kubernetes events box in step 3 of our install wizard, or follow the instructions. one.newrelic.com > Kubernetes cluster explorer > Events: Browse and filter all your Kubernetes events, and dig into logs and infrastructure data.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 198.40852,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Navigate the <em>Kubernetes</em> cluster explorer",
        "sections": "Navigate the <em>Kubernetes</em> cluster explorer",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": "New Relic&#x27;s <em>Kubernetes</em> cluster explorer uses the <em>data</em> collected by the <em>Kubernetes</em> <em>integration</em> to show the status of your cluster, from the control plane to nodes and pods. You can find out about the health of each entity, explore logs, and see how your apps are performing. With the Events"
      },
      "id": "603eb9a364441f82484e8879"
    },
    {
      "sections": [
        "On-host integration data collection and reporting",
        "Data collection and reporting process",
        "File structure and specifications"
      ],
      "title": "On-host integration data collection and reporting",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "Understand and use data"
      ],
      "external_id": "76942c8b7c37f1eaf368770c80177e3a43d8ca4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/understand-use-data/host-integration-data-collection-reporting/",
      "published_at": "2021-07-02T17:52:26Z",
      "updated_at": "2021-03-16T06:04:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how New Relic on-host integrations collect and report data to New Relic. Data collection and reporting process This is how an infrastructure on-host integration sends data to New Relic: On startup, the infrastructure agent scans the directory that contains the integration's definition files. The infrastructure agent registers every integration executable defined in the definition file. The agent scans a dedicated directory for integration configuration files. If those config files specify integrations that have been registered with the infrastructure agent, the agent sets up and schedules the integrations. At the scheduled interval (the default is 15 seconds), the agent harvests the data from the integration and prepares it for transmission. Every 60 seconds, it sends that data to New Relic, along with any other infrastructure data. After a successful collection pass, the integration executable exits. File structure and specifications Understanding the file structure of New Relic on-host integrations can help you customize your integration, understand and use your data, and troubleshoot problems. On-host integrations adhere to a set of open source specifications, allowing anyone to build their own infrastructure on-host integration. For an explanation of these file specifications, see File specs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.68047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integration</em> <em>data</em> collection <em>and</em> reporting",
        "sections": "On-host <em>integration</em> <em>data</em> collection <em>and</em> reporting",
        "tags": "<em>Understand</em> <em>and</em> <em>use</em> <em>data</em>",
        "body": ", the <em>integration</em> executable exits. File structure and specifications Understanding the file structure of New Relic on-host <em>integrations</em> can help you customize your <em>integration</em>, <em>understand</em> and <em>use</em> your <em>data</em>, and troubleshoot problems. On-host <em>integrations</em> adhere to a set of open source specifications, allowing anyone to build their own infrastructure on-host <em>integration</em>. For an explanation of these file specifications, see File specs."
      },
      "id": "603e8553196a67ca20a83dd5"
    },
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.58171,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To <em>use</em> <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of <em>data</em> for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    }
  ],
  "/docs/integrations/kubernetes-integration/understand-use-data/kubernetes-cluster-explorer": [
    {
      "sections": [
        "Find and use your Kubernetes data",
        "Query Kubernetes data",
        "Event types",
        "Manage alerts",
        "Create an alert condition",
        "Use the predefined alert types and thresholds",
        "Select alert notifications",
        "Pod alert notification example",
        "Container resource notification example",
        "Create alert conditions using NRQL",
        "Kubernetes attributes and metrics",
        "Node data",
        "Namespace data",
        "Deployment data",
        "ReplicaSet data",
        "DaemonSet data",
        "StatefulSet data",
        "Pod data",
        "Cluster data",
        "Container data",
        "Volume data",
        "API server data",
        "Controller manager data",
        "Scheduler data",
        "ETCD data",
        "Endpoint data",
        "Service data",
        "Horizontal Pod Autoscaler data",
        "Kubernetes metadata in APM-monitored applications",
        "For more help"
      ],
      "title": "Find and use your Kubernetes data",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Understand and use data"
      ],
      "external_id": "d36002ee54b0e3573ec4efef9f9c5ee940f49f96",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/understand-use-data/find-use-your-kubernetes-data/",
      "published_at": "2021-07-02T14:59:57Z",
      "updated_at": "2021-04-12T16:05:48Z",
      "document_type": "page",
      "popularity": 1,
      "body": "You can build your own charts and query all your Kubernetes integration data using the query builder and the NerdGraph API. Our integration collects Kubernetes data by instrumenting the container orchestration layer. For a simpler and more visual experience, use the cluster explorer. one.newrelic.com > Dashboards: Using the query builder you can query your Kubernetes data and create clear visualizations. Query Kubernetes data The simplest way to query your Kubernetes data is using the query builder, which accepts NRQL queries in its advanced mode. Alternatively, you can use the NerdGraph API to retrieve Kubernetes data. Event types Kubernetes data is attached to the following event types: Event name Type of Kubernetes data Available since K8sNodeSample Node data v1.0.0 K8sNamespaceSample Namespace data v1.0.0 K8sDeploymentSample Deployment data v1.0.0 K8sReplicasetSample ReplicaSet data v1.0.0 K8sDaemonsetSample DaemonSet data v1.13.0 K8sStatefulsetSample StatefulSet data v1.13.0 K8sPodSample Pod data v1.0.0 K8sClusterSample Cluster data v1.0.0 K8sContainerSample Container data v1.0.0 K8sVolumeSample Volume data v1.0.0 K8sApiServerSample API server data v1.11.0 K8sControllerManagerSample Controller manager data v1.11.0 K8sSchedulerSample Scheduler data v1.11.0 K8sEtcdSample ETCD data v1.11.0 K8sEndpointSample Endpoint data v1.13.0 K8sServiceSample Service data v1.13.0 K8sHpaSample Horizontal Pod Autoscaler data v2.3.0 Manage alerts You can be notified about alert violations for your Kubernetes data: Create an alert condition To create an alert condition for the Kubernetes integration: Go to one.newrelic.com > Infrastructure > Settings > Alerts > Kubernetes, then select Create alert condition. To filter the alert to Kubernetes entities that only have the chosen attributes, select Filter. Select the threshold settings. For more on the Trigger an alert when... options, see Alert types. Select an existing alert policy, or create a new one. Select Create. When an alert condition's threshold is triggered, New Relic sends a notification to the policy's notification channels. Use the predefined alert types and thresholds The Kubernetes integration comes with its own alert policy and alert conditions. To see what the predefined alert conditions are, see Kubernetes integration: Predefined alert policy. In addition, you can create an alert condition for any metric collected by any New Relic integration you use, including the Kubernetes integration: Select the alert type Integrations. From the Select a data source dropdown, select a Kubernetes (K8s) data source. Select alert notifications When an alert condition's threshold is triggered, New Relic sends a message to the notification channel(s) chosen in the alert policy. Depending on the type of notification, you may have the following options: View the incident. Acknowledge the incident. Go to a chart of the incident data by selecting the identifier name. The entity identifier that triggered the alert appears near the top of the notification message. The format of the identifier depends on the alert type: Available pods are less than desired pods alerts: K8s:CLUSTER_NAME:PARENT_NAMESPACE:replicaset:REPLICASET_NAME Copy CPU or memory usage alerts: K8s:CLUSTER_NAME:PARENT_NAMESPACE:POD_NAME:container:CONTAINER_NAME Copy Here are some examples. Pod alert notification example For Available pods are less than desired pods alerts, the ID of the ReplicaSet triggering the issue might look like this: k8s:beam-production:default:replicaset:nginx-deployment-1623441481 Copy This identifier contains the following information: Cluster name: beam-production Parent namespace: default ReplicaSet name: nginx-deployment-1623441481 Container resource notification example For container CPU or memory usage alerts, the entity might look like this: k8s:beam-production:kube-system:kube-state-metrics-797bb87c75-zncwn:container:kube-state-metrics Copy This identifier contains the following information: Cluster name: beam-production Parent namespace: kube-system Pod namespace: kube-state-metrics-797bb87c75-zncwn Container name: kube-state-metrics Create alert conditions using NRQL Follow standard procedures to create alert conditions for NRQL queries. Kubernetes attributes and metrics The Kubernetes integration collects the following metrics and other attributes. Node data Query the K8sNodeSample event for node data: Node attribute Description allocatableCpuCores Node allocatable CPU cores allocatableMemoryBytes Node allocatable memory bytes allocatablePods Node allocatable pods allocatableEphemeralStorageBytes Node allocatable ephemeral-storage bytes capacityCpuCores Node CPU capacity capacityMemoryBytes Node memory capacity (in bytes) capacityPods Pod capacity of the node capacityEphemeralStorageBytes Node ephemeral-storage capacity clusterName Name that you assigned to the cluster when you installed the Kubernetes integration cpuUsedCoreMilliseconds Node CPU usage measured in core milliseconds cpuUsedCores Node CPU usage measured in cores cpuRequestedCores Total amount of CPU cores requested allocatableCpuCoresUtilization Percentage of CPU cores actually used with respect to the CPU cores allocatable fsAvailableBytes Bytes available in the node filesystem fsCapacityBytes Total capacity of the node filesystem in bytes fsInodes Total number of inodes in the node filesystem fsInodesFree Free inodes in the node filesystem fsInodesUsed Used inodes in the node filesystem fsUsedBytes Used bytes in the node filesystem fsCapacityUtilization Percentage of used bytes in the node filesystem with respect to the capacity memoryAvailableBytes Bytes of memory available in the node memoryMajorPageFaultsPerSecond Number of major page faults per second in the node memoryPageFaults Number of page faults in the node memoryRssBytes Bytes of rss memory memoryUsedBytes Bytes of memory used memoryWorkingSetBytes Bytes of memory in the working set memoryRequestedBytes Total amount of requested memory allocatableMemoryUtilization Percentage of bytes of memory in the working set with respect to the node allocatable memory net.errorCountPerSecond Number of errors per second while receiving/transmitting over the network nodeName Host name that the pod is running on runtimeAvailableBytes Bytes available to the container runtime filesystem runtimeCapacityBytes Total capacity assigned to the container runtime filesystem in bytes runtimeInodes Total number of inodes in the container runtime filesystem runtimeInodesFree Free inodes in the container runtime filesystem runtimeInodesUsed Used inodes in the container runtime filesystem runtimeUsedBytes Used bytes in the container runtime filesystem label.LABEL_NAME Labels associated with your node, so you can filter and query for specific nodes Namespace data Query the K8sNamespaceSample event for namespace data: Namespace attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of the namespace when it was created namespace Name of the namespace to be used as an identifier label.LABEL_NAME Labels associated with your namespace, so you can filter and query for specific namespaces status Current status of the namespace. The value can be Active or Terminated Deployment data Query the K8sDeploymentSample event for deployment data: Deployment attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the deployment was created deploymentName Name of the deployment to be used as an identifier namespace Name of the namespace that the deployment belongs to label.LABEL_NAME Labels associated with your deployment, so you can filter and query for specific deployments podsAvailable Number of replicas that are currently available podsDesired Number of replicas that you defined in the deployment podsTotal Total number of replicas that are currently running podsUnavailable Number of replicas that are currently unavailable podsUpdated Number of replicas that have been updated to achieve the desired state of the deployment podsMissing Total number of replicas that are missing (number of desired replicas, podsDesired, minus the total number of replicas, podsTotal) ReplicaSet data Query the K8sReplicasetSample event for ReplicaSet data: Replica attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the ReplicaSet was created deploymentName Name of the deployment to be used as an identifier namespace Name of the namespace that the ReplicaSet belongs to observedGeneration Integer representing generation observed by the ReplicaSet podsDesired Number of replicas that you defined in the deployment podsFullyLabeled Number of pods that have labels that match the ReplicaSet pod template labels podsReady Number of replicas that are ready for this ReplicaSet podsTotal Total number of replicas that are currently running podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) replicasetName Name of the ReplicaSet to be used as an identifier DaemonSet data Query the K8sDaemonsetSample event for DaemonSet data: DaemonSet attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the DaemonSet was created namespaceName Name of the namespace that the DaemonSet belongs to label.LABEL_NAME Labels associated with your DaemonSet, so you can filter and query for specific DaemonSet daemonsetName Name associated with the DaemonSet podsDesired The number of nodes that should be running the daemon pod podsScheduled The number of nodes running at least one daemon pod and are supposed to podsAvailable The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available podsReady The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready podsUnavailable The number of nodes that should be running the daemon pod and have none of the daemon pod running and available podsMisscheduled The number of nodes running a daemon pod but are not supposed to podsUpdatedScheduled The total number of nodes that are running updated daemon pod podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) metadataGeneration Sequence number representing a specific generation of the desired state StatefulSet data Query the K8sStatefulsetSample event for StatefulSet data: StatefulSet attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the StatefulSet was created namespaceName Name of the namespace that the StatefulSet belongs to label.LABEL_NAME Labels associated with your StatefulSet, so you can filter and query for specific StatefulSet statefulsetName Name associated with the StatefulSet podsDesired Number of desired pods for a StatefulSet podsReady The number of ready replicas per StatefulSet podsCurrent The number of current replicas per StatefulSet podsTotal The number of replicas per StatefulSet podsUpdated The number of updated replicas per StatefulSet podsMissing Total number of replicas that are currently missing (number of desired replicas, podsDesired, minus the number of ready replicas, podsReady) observedGeneration The generation observed by the StatefulSet controller metadataGeneration Sequence number representing a specific generation of the desired state for the StatefulSet currentRevision Indicates the version of the StatefulSet used to generate pods in the sequence. Value range: between 0 and podsCurrent updateRevision Indicates the version of the StatefulSet used to generate pods in the sequence. Value range: between podsDesired-podsUpdated and podsDesired Pod data Query the K8sPodSample event for pod data: Pod attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the pod was created in epoch seconds createdBy Name of the Kubernetes object that created the pod. For example, newrelic-infra createdKind Kind of Kubernetes object that created the pod. For example, DaemonSet. deploymentName Name of the deployment to be used as an identifier isReady Boolean representing whether or not the pod is ready to serve requests isScheduled Boolean representing whether or not the pod has been scheduled to run on a node label.LABEL_NAME Labels associated with your pod, so you can filter and query for specific pods message Details related to the last pod status change namespace Name of the namespace that the pod belongs to net.errorCountPerSecond Number of errors per second while receiving/transmitting over the network net.errorsPerSecond Number of errors per second net.rxBytesPerSecond Number of bytes per second received over the network net.txBytesPerSecond Number of bytes per second transmitted over the network nodeIP Host IP address that the pod is running on nodeName Host name that the pod is running on podName Name of the pod to be used as an identifier reason Reason why the pod is in the current status startTime Timestamp of when the pod started running in epoch seconds status Current status of the pod. Value can be Pending, Running, Succeeded, Failed, Unknown Cluster data Query the K8sClusterSample event to see cluster data: Cluster attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration clusterK8sVersion Kubernetes version that the cluster is running Container data Query the K8sContainerSample event for container data: Container attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration containerID Unique ID associated with the container. If you are running Docker, this is the Docker container id containerImage Name of the image that the container is running containerImageID Unique ID associated with the image that the container is running containerName Name associated with the container cpuLimitCores Integer representing limit CPU cores defined for the container in the pod specification cpuRequestedCores Requested CPU cores defined for the container in the pod specification cpuUsedCores CPU cores actually used by the container cpuCoresUtilization Percentage of CPU cores actually used by the container with respect to the CPU limit specified. This percentage is based on this calculation: (cpuUsedCores / cpuLimitCores) * 100 requestedCpuCoresUtilization Percentage of CPU cores actually used by the container with respect to the CPU request specified deploymentName Name of the deployment to be used as an identifier isReady Boolean. Whether or not the container's readiness check succeeded label.LABEL_NAME Labels associated with your container, so you can filter and query for specific containers memoryLimitBytes Integer representing limit bytes of memory defined for the container in the pod specification memoryRequestedBytes Integer. Requested bytes of memory defined for the container in the pod specification memoryUsedBytes Integer. Bytes of memory actually used by the container memoryUtilization Percentage of memory actually used by the container with respect to the memory limit specified requestedMemoryUtilization Percentage of memory actually used by the container with respect to the memory request specified memoryWorkingSetBytes Integer. Bytes of memory in the working set memoryWorkingSetUtilization Percentage of working set memory actually used by the container with respect to the memory limit specified requestedMemoryWorkingSetUtilization Percentage of working set memory actually used by the container with respect to the memory request specified namespace Name of the namespace that the container belongs to nodeIP Host IP address the container is running on nodeName Host name that the container is running on podName Name of the pod that the container is in, to be used as an identifier reason Provides a reason why the container is in the current status restartCount Number of times the container has been restarted status Current status of the container. Value can be Running, Terminated, or Unknown containerCpuCfsPeriodsDelta Delta change of elapsed enforcement period intervals containerCpuCfsThrottledPeriodsDelta Delta change of throttled period intervals containerCpuCfsThrottledSecondsDelta Delta change of duration the container has been throttled, in seconds containerCpuCfsPeriodsTotal Total number of elapsed enforcement period intervals containerCpuCfsThrottledPeriodsTotal Total number of throttled period intervals containerCpuCfsThrottledSecondsTotal Total time duration the container has been throttled, in seconds containerMemoryMappedFileBytes Total size of memory mapped files used by this container, in bytes Volume data Query the K8sVolumeSample event for volume data: Volume attribute Description volumeName Name that you assigned to the volume at creation clusterName Cluster where the volume is configured namespace Namespace where the volume is configured podName The pod that the volume is attached to. The Kubernetes monitoring integration lists Volumes that are attached to a pod persistent If this is a persistent volume, this value is set to true pvcNamespace Namespace where the Persistent Volume Claim is configured pvcName Name that you assigned to the Persistent Volume Claim at creation fsCapacityBytes Capacity of the volume, in bytes fsUsedBytes Usage of the volume, in bytes fsAvailableBytes Capacity available of the volume, in bytes fsUsedPercent Usage of the volume in percentage fsInodes Total inodes of the volume fsInodesUsed inodes used in the volume fsInodesFree inodes available in the volume Volume data is available for volume plugins that implement the MetricsProvider interface: AWSElasticBlockStore AzureDisk AzureFile Cinder Flexvolume Flocker GCEPersistentDisk GlusterFS iSCSI StorageOS VsphereVolume API server data Query the K8sApiServerSample event in New Relic Insights to see API Server data. For more information, see Configure control plane monitoring: API server attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent, in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist apiserverRequestDelta_verb_VERB_code_CODE Difference of the number of apiserver requests, broken out for each verb and HTTP response code apiserverRequestRate_verb_VERB_code_CODE Rate of apiserver requests, broken out for each verb and HTTP response code restClientRequestsDelta_code_CODE_method_METHOD Difference of the number of HTTP requests, partitioned by method and code restClientRequestsRate_code_CODE_method_METHOD Rate of the number of HTTP requests, partitioned by method and code etcdObjectCounts_resource_RESOURCE-KIND Number of stored objects at the time of last check, split by kind Controller manager data Query the K8sControllerManagerSample event in New Relic Insights to see Controller manager data. For more information, see Configure control plane monitoring: Controller manager attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist workqueueAddsDelta_name_WORK-QUEUE-NAME Difference of the total number of adds handled by workqueue workqueueDepth_name_WORK-QUEUE-NAME Current depth of workqueue workqueueRetriesDelta_name_WORK-QUEUE-NAME Difference of the total number of retries handled by workqueue leaderElectionMasterStatus Gauge of if the reporting system is master of the relevant lease, 0 indicates backup, 1 indicates master Scheduler data Query the K8sSchedulerSample event in New Relic Insights to see Scheduler data. For more information, see Configure control plane monitoring: Scheduler attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist leaderElectionMasterStatus Gauge of if the reporting system is master of the relevant lease, 0 indicates backup, 1 indicates master httpRequestDurationMicroseconds_handler_HANDLER_quantile_QUANTILE The HTTP request latencies in microseconds, per quantile httpRequestDurationMicroseconds_handler_HANDLER_sum The sum of the HTTP request latencies, in microseconds httpRequestDurationMicroseconds_handler_HANDLER_count The number of observed HTTP requests events restClientRequestsDelta_code_CODE_host_HOST_method_METHOD Difference of the number of HTTP requests, partitioned by status code, method, and host restClientRequestsRate_code_CODE_host_HOST_method_METHOD Rate of the number of HTTP requests, partitioned by status code, method, and host schedulerScheduleAttemptsDelta_result_RESULT Difference of the number of attempts to schedule pods, by the result. unschedulable means a pod could not be scheduled, while error means an internal scheduler problem schedulerScheduleAttemptsRate_result_RESULT Rate of the number of attempts to schedule pods, by the result. unschedulable means a pod could not be scheduled, while error means an internal scheduler problem schedulerSchedulingDurationSeconds_operation_OPERATION_quantile_QUANTILE Scheduling latency in seconds split by sub-parts of the scheduling operation schedulerSchedulingDurationSeconds_operation_OPERATION_sum The sum of scheduling latency in seconds split by sub-parts of the scheduling operation schedulerSchedulingDurationSeconds_operation_OPERATION_count The number of observed events of schedulings split by sub-parts of the scheduling operation. schedulerPreemptionAttemptsDelta Difference of the total preemption attempts in the cluster till now schedulerPodPreemptionVictims Number of selected preemption victims ETCD data Query the K8sEtcdSample event in New Relic Insights to see ETCD data. For more information, see Configure control plane monitoring: ETCD attribute Description processResidentMemoryBytes Resident memory size, in bytes processCpuSecondsDelta Difference of the user and system CPU time spent in seconds goThreads Number of OS threads created goGoroutines Number of goroutines that currently exist etcdServerHasLeader Whether or not a leader exists. 1 is existence, 0 is not etcdServerLeaderChangesSeenDelta Difference of the number of leader changes seen etcdMvccDbTotalSizeInBytes Total size of the underlying database physically allocated, in bytes etcdServerProposalsCommittedDelta Difference of the total number of consensus proposals committed etcdServerProposalsCommittedRate Rate of the total number of consensus proposals committed etcdServerProposalsAppliedDelta Difference of the total number of consensus proposals applied etcdServerProposalsAppliedRate Rate of the total number of consensus proposals applied etcdServerProposalsPending The current number of pending proposals to commit etcdServerProposalsFailedDelta Difference of the total number of failed proposals seen etcdServerProposalsFailedRate Rate of the total number of failed proposals seen processOpenFds Number of open file descriptors processMaxFds Maximum number of open file descriptors processFdsUtilization Percentage open file descriptors with respect to the maximum number that can be opened etcdNetworkClientGrpcReceivedBytesRate Rate of the total number of bytes received from gRPC clients etcdNetworkClientGrpcSentBytesRate Rate of the total number of bytes sent to gRPC clients Endpoint data Query the K8sEndpointSample event in New Relic Insights for endpoint data: Endpoint attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the endpoint was created namespaceName Name of the namespace that the endpoint belongs to endpointName Name associated with the endpoint label.LABEL_NAME Labels associated with your endpoint, so you can filter and query for specific endpoints addressAvailable Number of addresses available in endpoint addressNotReady Number of addresses not ready in endpoint Service data Query the K8sServiceSample event in New Relic Insights for service data: Service attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration createdAt Timestamp of when the service was created namespaceName Name of the namespace that the service belongs to label.LABEL_NAME Labels associated with your service, so you can filter and query for specific service serviceName Name associated with the service loadBalancerIP The IP of the external load balancer, if Spectype is LoadBalancer. externalName The external name value, if Spectype is ExternalName clusterIP The internal cluster IP, if Spectype is ClusterIP specType Type of the service selector.LABEL_NAME The label selector that this service targets Horizontal Pod Autoscaler data Query the K8sHpaSample event in New Relic Insights for Horizontal Pod Autoscaler data: HPA attribute Description clusterName Name that you assigned to the cluster when you installed the Kubernetes integration label.LABEL_NAME Labels associated with your HPA, so you can filter and query for specific autoscaler currentReplicas Current number of replicas of pods managed by this autoscaler desiredReplicas Desired number of replicas of pods managed by this autoscaler minReplicas Lower limit for the number of pods that can be set by the autoscaler, 1 by default maxReplicas Upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than minReplicas targetMetric The metric specifications used by this autoscaler when calculating the desired replica count isAble Boolean representing whether or not the autoscaler is able to fetch and update scales, as well as whether or not any backoff-related conditions would prevent scaling isActive Boolean representing whether or not the autoscaler is enabled (if it's able to calculate the desired scales) isLimited Boolean representing whether or not the autoscaler is capped, either up or down, by the maximum or minimum replicas configured labels Number of Kubernetes labels converted to Prometheus labels metadataGeneration The generation observed by the HorizontalPodAutoscaler controller Kubernetes metadata in APM-monitored applications By linking your applications with Kubernetes, the following attributes are added to application trace and distributed trace: nodeName containerName podName clusterName deploymentName namespaceName For more help",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 203.51619,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Find <em>and</em> <em>use</em> your <em>Kubernetes</em> <em>data</em>",
        "sections": "Find <em>and</em> <em>use</em> your <em>Kubernetes</em> <em>data</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": " collected by any New Relic <em>integration</em> you <em>use</em>, including the <em>Kubernetes</em> <em>integration</em>: Select the alert type <em>Integrations</em>. From the Select a <em>data</em> source dropdown, select a <em>Kubernetes</em> (K8s) <em>data</em> source. Select alert notifications When an alert condition&#x27;s threshold is triggered, New Relic sends a message"
      },
      "id": "603eb9a4196a678bfca83dbb"
    },
    {
      "sections": [
        "On-host integration data collection and reporting",
        "Data collection and reporting process",
        "File structure and specifications"
      ],
      "title": "On-host integration data collection and reporting",
      "type": "docs",
      "tags": [
        "Integrations",
        "On-host integrations",
        "Understand and use data"
      ],
      "external_id": "76942c8b7c37f1eaf368770c80177e3a43d8ca4c",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/host-integrations/understand-use-data/host-integration-data-collection-reporting/",
      "published_at": "2021-07-02T17:52:26Z",
      "updated_at": "2021-03-16T06:04:22Z",
      "document_type": "page",
      "popularity": 1,
      "body": "Read on to learn how New Relic on-host integrations collect and report data to New Relic. Data collection and reporting process This is how an infrastructure on-host integration sends data to New Relic: On startup, the infrastructure agent scans the directory that contains the integration's definition files. The infrastructure agent registers every integration executable defined in the definition file. The agent scans a dedicated directory for integration configuration files. If those config files specify integrations that have been registered with the infrastructure agent, the agent sets up and schedules the integrations. At the scheduled interval (the default is 15 seconds), the agent harvests the data from the integration and prepares it for transmission. Every 60 seconds, it sends that data to New Relic, along with any other infrastructure data. After a successful collection pass, the integration executable exits. File structure and specifications Understanding the file structure of New Relic on-host integrations can help you customize your integration, understand and use your data, and troubleshoot problems. On-host integrations adhere to a set of open source specifications, allowing anyone to build their own infrastructure on-host integration. For an explanation of these file specifications, see File specs.",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 142.68047,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "On-host <em>integration</em> <em>data</em> collection <em>and</em> reporting",
        "sections": "On-host <em>integration</em> <em>data</em> collection <em>and</em> reporting",
        "tags": "<em>Understand</em> <em>and</em> <em>use</em> <em>data</em>",
        "body": ", the <em>integration</em> executable exits. File structure and specifications Understanding the file structure of New Relic on-host <em>integrations</em> can help you customize your <em>integration</em>, <em>understand</em> and <em>use</em> your <em>data</em>, and troubleshoot problems. On-host <em>integrations</em> adhere to a set of open source specifications, allowing anyone to build their own infrastructure on-host <em>integration</em>. For an explanation of these file specifications, see File specs."
      },
      "id": "603e8553196a67ca20a83dd5"
    },
    {
      "sections": [
        "Install Kubernetes events integration",
        "Requirements",
        "Install the Kubernetes events integration",
        "Tip",
        "View your Kubernetes events",
        "Query events",
        "Get attributes names",
        "See event details",
        "Search events in New Relic",
        "View events in the Kubernetes cluster explorer",
        "Optional: Collect metrics of the event collector",
        "Optional: Define custom attributes",
        "Troubleshooting",
        "Get logs on event collection",
        "Get logs on sending events"
      ],
      "title": "Install Kubernetes events integration",
      "type": "docs",
      "tags": [
        "Integrations",
        "Kubernetes integration",
        "Kubernetes events"
      ],
      "external_id": "a19259cc9ac093cc7acf401c1201e48d5daa9682",
      "image": "",
      "url": "https://docs.newrelic.com/docs/integrations/kubernetes-integration/kubernetes-events/install-kubernetes-events-integration/",
      "published_at": "2021-07-02T13:57:49Z",
      "updated_at": "2021-07-02T13:57:49Z",
      "document_type": "page",
      "popularity": 1,
      "body": "The New Relic Kubernetes events integration watches for events happening in your Kubernetes clusters and sends those events to New Relic. To visualize your event data, use the Kubernetes cluster explorer in New Relic One platform, or use the infrastructure events UI. Requirements The Kubernetes events integration requires you to: Install and activate the New Relic Kubernetes integration. Configure a Kubernetes pod with the label app.kubernetes.io/name=nri-kube-events and two containers, one used to capture events in the Kubernetes cluster and the other to forward the events to New Relic. Install the Kubernetes events integration Tip To use Kubernetes integrations and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of data for free each month. Forever. To install the New Relic Kubernetes events integration in a Kubernetes environment: Download the integration manifest YAML file: curl -O https://download.newrelic.com/infrastructure_agent/integrations/kubernetes/nri-kube-events-latest.yaml Copy Edit the nri-kube-events-latest.yaml manifest file, adding both a cluster name, to identify your Kubernetes cluster (required), and your New Relic license key (required). clusterName: \"YOUR_CLUSTER_NAME\" [...] - name: \"NRIA_LICENSE_KEY\" value: \"YOUR_LICENSE_KEY\" Copy Deploy the integration in your Kubernetes cluster: kubectl apply -f nri-kube-events-latest.yaml Copy To confirm that the integration has been configured correctly, wait a few minutes, then go to one.newrelic.com > Query builder, and run the following NRQL query to see if data has been reported: FROM InfrastructureEvent SELECT count(*) WHERE clusterName = 'YOUR_CLUSTER_NAME' since 1 hour ago Copy View your Kubernetes events Once you have successfully installed the Kubernetes event integration, you can view and query your events in New Relic. To add events to your New Relic One dashboard: Add a chart to a new or existing dashboard or create a chart using the New Relic query builder. When creating or updating your chart, select the chart type table and use the following event query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind,event.involvedObject.name,event.reason,event.message WHERE clusterName = 'YOUR_CLUSTER_NAME' limit 100 Copy Query events Here are a few examples to query your data: Get attributes names To see all the attributes names, use the following query: FROM InfrastructureEvent SELECT keyset() WHERE category = 'kubernetes' Copy See event details To see details about the latest events in a cluster, use the following query, replacing YOUR_CLUSTER_NAME with the name of your cluster: FROM InfrastructureEvent SELECT event.involvedObject.kind, event.involvedObject.name, event.type, event.message, event.reason WHERE category = 'kubernetes' AND clusterName='YOUR_CLUSTER_NAME'​ Copy The events collected by New Relic will have the exact same attributes as given by Kubernetes. For a reference of these attributes, see the Kubernetes event v1 core documentation. Search events in New Relic To search events in the New Relic Infrastructure UI: Navigate to the Infrastructure event page: Go to one.newrelic.com > Infrastructure > Events. In Category, select kubernetes. Use the Search events field to look for specific events. To focus on a specific set of events, select or change the filter set. View events in the Kubernetes cluster explorer To view events in the Kubernetes cluster explorer, use either of these methods: In New Relic One: Go to one.newrelic.com > Kubernetes cluster explorer. Then, to view the pod details: In the Kubernetes cluster explorer, select a pod. Select Show pod events. Optional: Collect metrics of the event collector To collect metric data for the event collector itself, install the New Relic Prometheus OpenMetrics integration. To get started: Install the New Relic Prometheus OpenMetrics integration. Label the deployment of your Kubernetes events integration with your configured scrape label (default is prometheus.io/scrape=true). Optional: Define custom attributes To add custom attributes to the events sent by the integration these need to be specified as environment variables following the nomenclature NRI_KUBE_EVENTS_attributeKey=attributeValue. These environment variables should be defined as part of the spec for the kube-events container. For example, to add the attribute environment with value staging to all the events, add the following to your manifest: env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Be sure to specify the environment in the spec for the kube-events container, making your manifest look something like this: ... kind: Deployment ... spec: ... template: ... spec: containers: - name: kube-events ... env: - name: NRI_KUBE_EVENTS_environment value: dev Copy Troubleshooting Here are some troubleshooting tips when using the Kubernetes events integration. Get logs on event collection To check the logs of our event collector: kubectl logs deploy/nr-kube-events kube-events Copy To add more details, enable verbose mode by adding verbose: \"true\" in the config section of you configuration file, either before or after the clusterName. Get logs on sending events To check the logs of the agent responsible for sending the events to New Relic: kubectl logs deploy/nr-kube-events infra-agent Copy",
      "info": "",
      "_index": "520d1d5d14cc8a32e600034b",
      "_type": "520d1d5d14cc8a32e600034c",
      "_score": 137.58163,
      "_version": null,
      "_explanation": null,
      "sort": null,
      "highlight": {
        "title": "Install <em>Kubernetes</em> events <em>integration</em>",
        "sections": "Install <em>Kubernetes</em> events <em>integration</em>",
        "tags": "<em>Kubernetes</em> <em>integration</em>",
        "body": ". Install the <em>Kubernetes</em> events <em>integration</em> Tip To <em>use</em> <em>Kubernetes</em> <em>integrations</em> and infrastructure monitoring, as well as the rest of our observability platform, join the New Relic family! Sign up to create your free account in only a few seconds. Then ingest up to 100GB of <em>data</em> for free each month"
      },
      "id": "603eae45196a67b26ba83d8f"
    }
  ]
}